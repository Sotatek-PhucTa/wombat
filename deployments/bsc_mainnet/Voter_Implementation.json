{
  "address": "0x4e811C2Cf56F63f1762bcB70110FA6FB83dCa968",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votePartition",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionPartition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UpdateVote",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGauge",
          "name": "_gaugeManager",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IBribe",
          "name": "_bribe",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAllocation",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseIndex",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bribeFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_lpTokens",
          "type": "address[]"
        }
      ],
      "name": "claimBribes",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "bribeRewards",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergencyTokenWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWomWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstEpochStartTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextEpochStartTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getUserVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "infos",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "supplyBaseIndex",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "supplyVoteIndex",
          "type": "uint104"
        },
        {
          "internalType": "uint40",
          "name": "nextEpochStartTime",
          "type": "uint40"
        },
        {
          "internalType": "uint128",
          "name": "claimable",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "whitelist",
          "type": "bool"
        },
        {
          "internalType": "contract IGauge",
          "name": "gaugeManager",
          "type": "address"
        },
        {
          "internalType": "contract IBribe",
          "name": "bribe",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_wom",
          "type": "address"
        },
        {
          "internalType": "contract IVe",
          "name": "_veWom",
          "type": "address"
        },
        {
          "internalType": "uint88",
          "name": "_womPerSec",
          "type": "uint88"
        },
        {
          "internalType": "uint40",
          "name": "_startTimestamp",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_firstEpochStartTime",
          "type": "uint40"
        },
        {
          "internalType": "uint16",
          "name": "_baseAllocation",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpTokenLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "pauseVoteEmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_lpTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingBribes",
      "outputs": [
        {
          "internalType": "contract IERC20[][]",
          "name": "bribeTokenAddresses",
          "type": "address[][]"
        },
        {
          "internalType": "string[][]",
          "name": "bribeTokenSymbols",
          "type": "string[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "bribeRewards",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "pendingWom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resumeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "resumeVoteEmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_allocPoint",
          "type": "uint128"
        }
      ],
      "name": "setAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_baseAllocation",
          "type": "uint16"
        }
      ],
      "name": "setBaseAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IBribe",
          "name": "_bribe",
          "type": "address"
        }
      ],
      "name": "setBribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bribeFactory",
          "type": "address"
        }
      ],
      "name": "setBribeFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IGauge",
          "name": "_gaugeManager",
          "type": "address"
        }
      ],
      "name": "setGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint88",
          "name": "_womPerSec",
          "type": "uint88"
        }
      ],
      "name": "setWomPerSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veWom",
      "outputs": [
        {
          "internalType": "contract IVe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_lpVote",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "bribeRewards",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteIndex",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "voteWeight",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wom",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "womPerSec",
      "outputs": [
        {
          "internalType": "uint88",
          "name": "",
          "type": "uint88"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x268c75239dc399931ab182d9ae3a4121e924008ab7e9b3a64f241904c4f913b9",
  "receipt": {
    "to": null,
    "from": "0xcB3Bb767104e0b3235520fafB182e005D7efD045",
    "contractAddress": "0x4e811C2Cf56F63f1762bcB70110FA6FB83dCa968",
    "transactionIndex": 0,
    "gasUsed": "2745559",
    "logsBloom": "0x
    "blockHash": "0x164e0a55d65ce76f0777155a4f83637fbd257731844c153bd409c12d83d44ac5",
    "transactionHash": "0x268c75239dc399931ab182d9ae3a4121e924008ab7e9b3a64f241904c4f913b9",
    "logs": [],
    "blockNumber": 31558686,
    "cumulativeGasUsed": "2745559",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "363cecd2023599fe1fb7650111e28756",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votePartition\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateVote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"_gaugeManager\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IBribe\",\"name\":\"_bribe\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAllocation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseIndex\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"}],\"name\":\"claimBribes\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"bribeRewards\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWomWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstEpochStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEpochStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getUserVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"supplyBaseIndex\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"supplyVoteIndex\",\"type\":\"uint104\"},{\"internalType\":\"uint40\",\"name\":\"nextEpochStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"claimable\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"},{\"internalType\":\"contract IGauge\",\"name\":\"gaugeManager\",\"type\":\"address\"},{\"internalType\":\"contract IBribe\",\"name\":\"bribe\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wom\",\"type\":\"address\"},{\"internalType\":\"contract IVe\",\"name\":\"_veWom\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"_womPerSec\",\"type\":\"uint88\"},{\"internalType\":\"uint40\",\"name\":\"_startTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_firstEpochStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"_baseAllocation\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"pauseVoteEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBribes\",\"outputs\":[{\"internalType\":\"contract IERC20[][]\",\"name\":\"bribeTokenAddresses\",\"type\":\"address[][]\"},{\"internalType\":\"string[][]\",\"name\":\"bribeTokenSymbols\",\"type\":\"string[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"bribeRewards\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"pendingWom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"resumeVoteEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"}],\"name\":\"setAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_baseAllocation\",\"type\":\"uint16\"}],\"name\":\"setBaseAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IBribe\",\"name\":\"_bribe\",\"type\":\"address\"}],\"name\":\"setBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bribeFactory\",\"type\":\"address\"}],\"name\":\"setBribeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IGauge\",\"name\":\"_gaugeManager\",\"type\":\"address\"}],\"name\":\"setGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"_womPerSec\",\"type\":\"uint88\"}],\"name\":\"setWomPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veWom\",\"outputs\":[{\"internalType\":\"contract IVe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_lpVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"bribeRewards\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteIndex\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"voteWeight\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wom\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"womPerSec\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"claimBribes(address[])\":{\"details\":\"This function looks safe from re-entrancy attack\"},\"distribute(address)\":{\"details\":\"This function looks safe from re-entrancy attack\"},\"emergencyTokenWithdraw(address)\":{\"details\":\"only to be called by owner\"},\"initialize(address,address,uint88,uint40,uint40,uint16)\":{\"details\":\"Note: set bribe factory after initialization\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBribeFactory(address)\":{\"details\":\"to revoke bribe factory, set its address to 0\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(address[],int256[])\":{\"params\":{\"_deltas\":\"change of vote for each LP tokens\",\"_lpVote\":\"address to LP tokens to vote\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(address,address,address)\":{\"notice\":\"Add LP token into the Voter\"},\"claimBribes(address[])\":{\"notice\":\"Claim bribes for LP tokens\"},\"emergencyTokenWithdraw(address)\":{\"notice\":\"avoids loosing funds in case there is any tokens sent to this contract\"},\"emergencyWomWithdraw()\":{\"notice\":\"In case we need to manually migrate WOM funds from Voter Sends all remaining wom from the contract to the owner\"},\"getNextEpochStartTime()\":{\"notice\":\"Get the start timestamp of the next epoch\"},\"getUserVotes(address,address)\":{\"notice\":\"getter function to return vote of a LP token for a user\"},\"lpTokenLength()\":{\"notice\":\"returns LP tokens length\"},\"pauseAll()\":{\"notice\":\"Pause vote accumulation of WOM tokens for all assets Users can still vote/unvote and receive bribes.\"},\"pauseVoteEmission(address)\":{\"notice\":\"Pause vote emission of WOM tokens for the gauge. Users can still vote/unvote and receive bribes.\"},\"pendingBribes(address[],address)\":{\"notice\":\"Get pending bribes for LP tokens\"},\"pendingWom(address)\":{\"notice\":\"Amount of pending WOM for the LP token\"},\"resumeAll()\":{\"notice\":\"Resume vote accumulation of WOM tokens for all assets\"},\"resumeVoteEmission(address)\":{\"notice\":\"Resume vote accumulation of WOM tokens for the gauge.\"},\"setBaseAllocation(uint16)\":{\"notice\":\"update the base and vote partition\"},\"setBribe(address,address)\":{\"notice\":\"get bribe address for LP token\"},\"setGauge(address,address)\":{\"notice\":\"get gaugeManager address for LP token\"},\"vote(address[],int256[])\":{\"notice\":\"Vote and unvote WOM emission for LP tokens. User can vote/unvote a un-whitelisted pool. But no WOM will be emitted. Bribes are also distributed by the Bribe contract. Amount of vote should be checked by veWom.vote(). This can also used to distribute bribes when _deltas are set to 0\"},\"voteAllocation()\":{\"notice\":\"Read-only functions\"}},\"notice\":\"Voter can handle gauge voting. WOM rewards are distributed to different gauges (MasterWombat->LpToken pair) according to the base allocation & voting weights. veWOM holders can participate in gauge voting to determine `voteAllocation()` of the WOM emission. They can  allocate their vote (1 veWOM = 1 vote) to one or more gauges. WOM accumulation to a gauge is proportional to the amount of vote it receives. Real-time WOM accumulation and epoch-based WOM distribution: Voting gauges accumulates WOM seconds by seconds according to the voting weight. When a user applies new allocation for their votes, accumulation rate of WOM of the gauge updates immediately. Note that only whitelisted gauges are able to accumulate WOM from users' votes. Accumulated WOM is distributed to LP in the next epoch at an even rate. 1 epoch last for 7 days. Base Allocation: `baseAllocation` of WOM emissions is distributed to gauges according to the allocation by `owner`. Other WOM emissions are deteremined by `votes` of veWOM holders. Flow to distribute reward: 1. `Voter.distribute(lpToken)` is called 2. WOM index (`baseIndex` and `voteIndex`) is updated and corresponding WOM accumulated over this period (`GaugeInfo.claimable`)    is updated. 3. At the beginning of each epoch, `GaugeInfo.claimable` amount of WOM is sent to the respective gauge    via `MasterWombat.notifyRewardAmount(IERC20 _lpToken, uint256 _amount)` 4. MasterWombat will update the corresponding `pool.rewardRate` and `pool.periodFinish` Bribe Bribe is natively supported by `Voter`. Third Party protocols can bribe to attract more votes from veWOM holders to increase WOM emissions to their tokens. Flow of bribe: 1. When users vote/unvote, `bribe.onVote` is called. The bribe contract works similar to `MultiRewarderPerSec`. Note: This should also works with boosted pool. But it doesn't work with interest rate model Note 2: Please refer to the comment of MasterWombatV3.notifyRewardAmount for front-running risk\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/gauge/Voter.sol\":\"Voter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/wombat-governance/gauge/Voter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\nimport '../interfaces/IBribe.sol';\\nimport '../interfaces/IVoter.sol';\\n\\ninterface IVe {\\n    function vote(address user, int256 voteDelta) external;\\n}\\n\\n/// Voter can handle gauge voting. WOM rewards are distributed to different gauges (MasterWombat->LpToken pair)\\n/// according to the base allocation & voting weights.\\n///\\n/// veWOM holders can participate in gauge voting to determine `voteAllocation()` of the WOM emission. They can\\n///  allocate their vote (1 veWOM = 1 vote) to one or more gauges. WOM accumulation to a gauge is proportional\\n/// to the amount of vote it receives.\\n///\\n/// Real-time WOM accumulation and epoch-based WOM distribution:\\n/// Voting gauges accumulates WOM seconds by seconds according to the voting weight. When a user applies new\\n/// allocation for their votes, accumulation rate of WOM of the gauge updates immediately. Note that only whitelisted\\n/// gauges are able to accumulate WOM from users' votes.\\n/// Accumulated WOM is distributed to LP in the next epoch at an even rate. 1 epoch last for 7 days.\\n///\\n/// Base Allocation:\\n/// `baseAllocation` of WOM emissions is distributed to gauges according to the allocation by `owner`.\\n/// Other WOM emissions are deteremined by `votes` of veWOM holders.\\n///\\n/// Flow to distribute reward:\\n/// 1. `Voter.distribute(lpToken)` is called\\n/// 2. WOM index (`baseIndex` and `voteIndex`) is updated and corresponding WOM accumulated over this period (`GaugeInfo.claimable`)\\n///    is updated.\\n/// 3. At the beginning of each epoch, `GaugeInfo.claimable` amount of WOM is sent to the respective gauge\\n///    via `MasterWombat.notifyRewardAmount(IERC20 _lpToken, uint256 _amount)`\\n/// 4. MasterWombat will update the corresponding `pool.rewardRate` and `pool.periodFinish`\\n///\\n/// Bribe\\n/// Bribe is natively supported by `Voter`. Third Party protocols can bribe to attract more votes from veWOM holders\\n/// to increase WOM emissions to their tokens.\\n///\\n/// Flow of bribe:\\n/// 1. When users vote/unvote, `bribe.onVote` is called. The bribe contract works similar to `MultiRewarderPerSec`.\\n///\\n/// Note: This should also works with boosted pool. But it doesn't work with interest rate model\\n/// Note 2: Please refer to the comment of MasterWombatV3.notifyRewardAmount for front-running risk\\ncontract Voter is IVoter, Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    struct GaugeInfo {\\n        uint104 supplyBaseIndex; // 19.12 fixed point. distributed reward per alloc point\\n        uint104 supplyVoteIndex; // 19.12 fixed point. distributed reward per vote weight\\n        uint40 nextEpochStartTime;\\n        uint128 claimable; // 20.18 fixed point. Rewards pending distribution in the next epoch\\n        bool whitelist;\\n        IGauge gaugeManager;\\n        IBribe bribe; // address of bribe\\n    }\\n\\n    uint256 internal constant ACC_TOKEN_PRECISION = 1e12;\\n    uint256 internal constant EPOCH_DURATION = 7 days;\\n\\n    IERC20 public wom;\\n    IVe public veWom;\\n    IERC20[] public lpTokens; // all LP tokens\\n\\n    // emission related storage\\n    uint40 public lastRewardTimestamp; // last timestamp to count\\n    uint104 public baseIndex; // 19.12 fixed point. Accumulated reward per alloc point\\n    uint104 public voteIndex; // 19.12 fixed point. Accumulated reward per vote weight\\n\\n    uint128 public totalWeight;\\n    uint128 public totalAllocPoint;\\n\\n    uint40 public firstEpochStartTime;\\n    uint88 public womPerSec; // 8.18 fixed point\\n    uint16 public baseAllocation; // (e.g. 300 for 30%)\\n\\n    mapping(IERC20 => GaugeWeight) public override weights; // lpToken => gauge weight\\n    mapping(address => mapping(IERC20 => uint256)) public override votes; // user address => lpToken => votes\\n    mapping(IERC20 => GaugeInfo) public override infos; // lpToken => GaugeInfo\\n\\n    address public bribeFactory;\\n\\n    event UpdateEmissionPartition(uint256 baseAllocation, uint256 votePartition);\\n    event UpdateVote(address user, IERC20 lpToken, uint256 amount);\\n    event DistributeReward(IERC20 lpToken, uint256 amount);\\n\\n    /// @dev Note: set bribe factory after initialization\\n    function initialize(\\n        IERC20 _wom,\\n        IVe _veWom,\\n        uint88 _womPerSec,\\n        uint40 _startTimestamp,\\n        uint40 _firstEpochStartTime,\\n        uint16 _baseAllocation\\n    ) external initializer {\\n        require(_firstEpochStartTime >= block.timestamp, 'invalid _firstEpochStartTime');\\n        require(address(_wom) != address(0), 'wom address cannot be zero');\\n        require(address(_veWom) != address(0), 'veWom address cannot be zero');\\n        require(_baseAllocation <= 1000);\\n        require(_womPerSec <= 10000e18);\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        wom = _wom;\\n        veWom = _veWom;\\n        womPerSec = _womPerSec;\\n        lastRewardTimestamp = _startTimestamp;\\n        firstEpochStartTime = _firstEpochStartTime;\\n        baseAllocation = _baseAllocation;\\n    }\\n\\n    /// @dev this check save more gas than a modifier\\n    function _checkGaugeExist(IERC20 _lpToken) internal view {\\n        require(address(infos[_lpToken].gaugeManager) != address(0), 'Voter: gaugeManager not exist');\\n    }\\n\\n    /// @notice returns LP tokens length\\n    function lpTokenLength() external view returns (uint256) {\\n        return lpTokens.length;\\n    }\\n\\n    /// @notice getter function to return vote of a LP token for a user\\n    function getUserVotes(address _user, IERC20 _lpToken) external view returns (uint256) {\\n        return votes[_user][_lpToken];\\n    }\\n\\n    /// @notice Vote and unvote WOM emission for LP tokens.\\n    /// User can vote/unvote a un-whitelisted pool. But no WOM will be emitted.\\n    /// Bribes are also distributed by the Bribe contract.\\n    /// Amount of vote should be checked by veWom.vote().\\n    /// This can also used to distribute bribes when _deltas are set to 0\\n    /// @param _lpVote address to LP tokens to vote\\n    /// @param _deltas change of vote for each LP tokens\\n    function vote(\\n        IERC20[] calldata _lpVote,\\n        int256[] calldata _deltas\\n    ) external nonReentrant returns (uint256[][] memory bribeRewards) {\\n        // 1. call _updateFor() to update WOM emission\\n        // 2. update related lpToken weight and total lpToken weight\\n        // 3. update used voting power and ensure there's enough voting power\\n        // 4. call IBribe.onVote() to update bribes\\n        require(_lpVote.length == _deltas.length, 'voter: array length not equal');\\n\\n        // update voteIndex\\n        _distributeWom();\\n\\n        uint256 voteCnt = _lpVote.length;\\n        int256 voteDelta;\\n\\n        bribeRewards = new uint256[][](voteCnt);\\n\\n        for (uint256 i; i < voteCnt; ++i) {\\n            IERC20 lpToken = _lpVote[i];\\n            _checkGaugeExist(lpToken);\\n\\n            int256 delta = _deltas[i];\\n            uint256 originalWeight = weights[lpToken].voteWeight;\\n            if (delta != 0) {\\n                _updateFor(lpToken);\\n\\n                // update vote and weight\\n                if (delta > 0) {\\n                    // vote\\n                    votes[msg.sender][lpToken] += uint256(delta);\\n                    weights[lpToken].voteWeight = to128(originalWeight + uint256(delta));\\n                    totalWeight += to128(uint256(delta));\\n                } else {\\n                    // unvote\\n                    require(votes[msg.sender][lpToken] >= uint256(-delta), 'voter: vote underflow');\\n                    votes[msg.sender][lpToken] -= uint256(-delta);\\n                    weights[lpToken].voteWeight = to128(originalWeight - uint256(-delta));\\n                    totalWeight -= to128(uint256(-delta));\\n                }\\n\\n                voteDelta += delta;\\n                emit UpdateVote(msg.sender, lpToken, votes[msg.sender][lpToken]);\\n            }\\n\\n            // update bribe\\n            if (address(infos[lpToken].bribe) != address(0)) {\\n                bribeRewards[i] = infos[lpToken].bribe.onVote(msg.sender, votes[msg.sender][lpToken], originalWeight);\\n            }\\n        }\\n\\n        // notice veWom for the new vote, it reverts if vote is invalid\\n        veWom.vote(msg.sender, voteDelta);\\n    }\\n\\n    /// @notice Claim bribes for LP tokens\\n    /// @dev This function looks safe from re-entrancy attack\\n    function claimBribes(IERC20[] calldata _lpTokens) external returns (uint256[][] memory bribeRewards) {\\n        bribeRewards = new uint256[][](_lpTokens.length);\\n        for (uint256 i; i < _lpTokens.length; ++i) {\\n            IERC20 lpToken = _lpTokens[i];\\n            _checkGaugeExist(lpToken);\\n            if (address(infos[lpToken].bribe) != address(0)) {\\n                bribeRewards[i] = infos[lpToken].bribe.onVote(\\n                    msg.sender,\\n                    votes[msg.sender][lpToken],\\n                    weights[lpToken].voteWeight\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev This function looks safe from re-entrancy attack\\n    function distribute(IERC20 _lpToken) external override {\\n        require(msg.sender == address(infos[_lpToken].gaugeManager), 'Caller is not gauge manager');\\n        _checkGaugeExist(_lpToken);\\n        _distributeWom();\\n        _updateFor(_lpToken);\\n\\n        uint256 _claimable = infos[_lpToken].claimable;\\n        // 1. distribute WOM once in each epoch\\n        // 2. In case WOM is not fueled, it should not create DoS\\n        if (\\n            _claimable > 0 &&\\n            block.timestamp >= infos[_lpToken].nextEpochStartTime &&\\n            wom.balanceOf(address(this)) > _claimable\\n        ) {\\n            infos[_lpToken].claimable = 0;\\n            infos[_lpToken].nextEpochStartTime = getNextEpochStartTime();\\n            emit DistributeReward(_lpToken, _claimable);\\n\\n            wom.transfer(address(infos[_lpToken].gaugeManager), _claimable);\\n            infos[_lpToken].gaugeManager.notifyRewardAmount(_lpToken, _claimable);\\n        }\\n    }\\n\\n    /// @notice Update index for accrued WOM\\n    function _distributeWom() internal {\\n        if (block.timestamp <= lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        baseIndex = to104(_getBaseIndex());\\n        voteIndex = to104(_getVoteIndex());\\n        lastRewardTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /// @notice Update `supplyBaseIndex` and `supplyVoteIndex` for the gauge\\n    /// @dev Assumption: gaugeManager exists and is not paused, the caller should verify it\\n    /// @param _lpToken address of the LP token\\n    function _updateFor(IERC20 _lpToken) internal {\\n        // calculate claimable amount before update supplyVoteIndex\\n        infos[_lpToken].claimable = to128(_getClaimable(_lpToken, baseIndex, voteIndex));\\n        infos[_lpToken].supplyBaseIndex = baseIndex;\\n        infos[_lpToken].supplyVoteIndex = voteIndex;\\n    }\\n\\n    /**\\n     * Permisioneed functions\\n     */\\n\\n    /// @notice update the base and vote partition\\n    function setBaseAllocation(uint16 _baseAllocation) external onlyOwner {\\n        require(_baseAllocation <= 1000);\\n        _distributeWom();\\n\\n        emit UpdateEmissionPartition(_baseAllocation, 1000 - _baseAllocation);\\n        baseAllocation = _baseAllocation;\\n    }\\n\\n    function setAllocPoint(IERC20 _lpToken, uint128 _allocPoint) external onlyOwner {\\n        _distributeWom();\\n        _updateFor(_lpToken);\\n        totalAllocPoint = totalAllocPoint - weights[_lpToken].allocPoint + _allocPoint;\\n        weights[_lpToken].allocPoint = _allocPoint;\\n    }\\n\\n    /// @notice Add LP token into the Voter\\n    function add(IGauge _gaugeManager, IERC20 _lpToken, IBribe _bribe) external onlyOwner {\\n        require(infos[_lpToken].whitelist == false, 'voter: already added');\\n        require(address(_gaugeManager) != address(0));\\n        require(address(_lpToken) != address(0));\\n        require(address(infos[_lpToken].gaugeManager) == address(0), 'Voter: gaugeManager is already exist');\\n\\n        infos[_lpToken].whitelist = true;\\n        infos[_lpToken].gaugeManager = _gaugeManager;\\n        infos[_lpToken].bribe = _bribe; // 0 address is allowed\\n        infos[_lpToken].nextEpochStartTime = getNextEpochStartTime();\\n        lpTokens.push(_lpToken);\\n    }\\n\\n    function setWomPerSec(uint88 _womPerSec) external onlyOwner {\\n        require(_womPerSec <= 10000e18, 'reward rate too high'); // in case `voteIndex` overflow\\n        _distributeWom();\\n        womPerSec = _womPerSec;\\n    }\\n\\n    /// @dev to revoke bribe factory, set its address to 0\\n    function setBribeFactory(address _bribeFactory) external onlyOwner {\\n        bribeFactory = _bribeFactory;\\n    }\\n\\n    /// @notice Pause vote emission of WOM tokens for the gauge.\\n    /// Users can still vote/unvote and receive bribes.\\n    function pauseVoteEmission(IERC20 _lpToken) external onlyOwner {\\n        require(infos[_lpToken].whitelist, 'voter: not whitelisted');\\n        _checkGaugeExist(_lpToken);\\n\\n        _distributeWom();\\n        _updateFor(_lpToken);\\n\\n        infos[_lpToken].whitelist = false;\\n    }\\n\\n    /// @notice Resume vote accumulation of WOM tokens for the gauge.\\n    function resumeVoteEmission(IERC20 _lpToken) external onlyOwner {\\n        require(infos[_lpToken].whitelist == false, 'voter: not paused');\\n        _checkGaugeExist(_lpToken);\\n\\n        // catch up supplyVoteIndex\\n        _distributeWom();\\n        _updateFor(_lpToken);\\n\\n        infos[_lpToken].whitelist = true;\\n    }\\n\\n    /// @notice Pause vote accumulation of WOM tokens for all assets\\n    /// Users can still vote/unvote and receive bribes.\\n    function pauseAll() external onlyOwner {\\n        _distributeWom();\\n        uint256 len = lpTokens.length;\\n        for (uint256 i; i < len; i++) {\\n            _updateFor(lpTokens[i]);\\n        }\\n\\n        _pause();\\n    }\\n\\n    /// @notice Resume vote accumulation of WOM tokens for all assets\\n    function resumeAll() external onlyOwner {\\n        _distributeWom();\\n        uint256 len = lpTokens.length;\\n        for (uint256 i; i < len; i++) {\\n            _updateFor(lpTokens[i]);\\n        }\\n\\n        _unpause();\\n    }\\n\\n    /// @notice get gaugeManager address for LP token\\n    function setGauge(IERC20 _lpToken, IGauge _gaugeManager) external onlyOwner {\\n        require(address(_gaugeManager) != address(0));\\n        _checkGaugeExist(_lpToken);\\n\\n        infos[_lpToken].gaugeManager = _gaugeManager;\\n    }\\n\\n    /// @notice get bribe address for LP token\\n    function setBribe(IERC20 _lpToken, IBribe _bribe) external override {\\n        require(\\n            bribeFactory == msg.sender || owner() == msg.sender,\\n            'Voter: caller is not the owner nor the bribe factory'\\n        );\\n        _checkGaugeExist(_lpToken);\\n\\n        infos[_lpToken].bribe = _bribe; // 0 address is allowed\\n    }\\n\\n    /// @notice In case we need to manually migrate WOM funds from Voter\\n    /// Sends all remaining wom from the contract to the owner\\n    function emergencyWomWithdraw() external onlyOwner {\\n        // SafeERC20 is not needed as WOM will revert if transfer fails\\n        wom.transfer(address(msg.sender), wom.balanceOf(address(this)));\\n    }\\n\\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\\n    /// @dev only to be called by owner\\n    function emergencyTokenWithdraw(address token) public onlyOwner {\\n        // send that balance back to owner\\n        if (token == address(0)) {\\n            // is native token\\n            (bool success, ) = msg.sender.call{value: address(this).balance}('');\\n            require(success, 'Transfer failed');\\n        } else {\\n            IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * Read-only functions\\n     */\\n\\n    function voteAllocation() external view returns (uint256) {\\n        return 1000 - baseAllocation;\\n    }\\n\\n    /// @notice Get pending bribes for LP tokens\\n    function pendingBribes(\\n        IERC20[] calldata _lpTokens,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            IERC20[][] memory bribeTokenAddresses,\\n            string[][] memory bribeTokenSymbols,\\n            uint256[][] memory bribeRewards\\n        )\\n    {\\n        bribeTokenAddresses = new IERC20[][](_lpTokens.length);\\n        bribeTokenSymbols = new string[][](_lpTokens.length);\\n        bribeRewards = new uint256[][](_lpTokens.length);\\n        for (uint256 i; i < _lpTokens.length; ++i) {\\n            IERC20 lpToken = _lpTokens[i];\\n            if (address(infos[lpToken].bribe) != address(0)) {\\n                bribeRewards[i] = infos[lpToken].bribe.pendingTokens(_user);\\n                bribeTokenAddresses[i] = infos[lpToken].bribe.rewardTokens();\\n\\n                uint256 len = bribeTokenAddresses[i].length;\\n                bribeTokenSymbols[i] = new string[](len);\\n\\n                for (uint256 j; j < len; ++j) {\\n                    if (address(bribeTokenAddresses[i][j]) == address(0)) {\\n                        bribeTokenSymbols[i][j] = 'BNB';\\n                    } else {\\n                        bribeTokenSymbols[i][j] = IERC20Metadata(address(bribeTokenAddresses[i][j])).symbol();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Amount of pending WOM for the LP token\\n    function pendingWom(IERC20 _lpToken) external view returns (uint256) {\\n        return _getClaimable(_lpToken, _getBaseIndex(), _getVoteIndex());\\n    }\\n\\n    /// @notice Get the start timestamp of the next epoch\\n    function getNextEpochStartTime() public view returns (uint40) {\\n        if (block.timestamp < firstEpochStartTime) {\\n            return firstEpochStartTime;\\n        }\\n\\n        uint256 epochCount = (block.timestamp - firstEpochStartTime) / EPOCH_DURATION;\\n        return uint40(firstEpochStartTime + (epochCount + 1) * EPOCH_DURATION);\\n    }\\n\\n    function _getBaseIndex() internal view returns (uint256) {\\n        if (block.timestamp <= lastRewardTimestamp || totalAllocPoint == 0 || paused()) {\\n            return baseIndex;\\n        }\\n\\n        uint256 secondsElapsed = block.timestamp - lastRewardTimestamp;\\n        // use `max(totalAllocPoint, 1e18)` in case the value overflows uint104\\n        return\\n            baseIndex +\\n            (secondsElapsed * womPerSec * baseAllocation * ACC_TOKEN_PRECISION) /\\n            max(totalAllocPoint, 1e18) /\\n            1000;\\n    }\\n\\n    /// @notice Calculate the latest value of `voteIndex`\\n    function _getVoteIndex() internal view returns (uint256) {\\n        if (block.timestamp <= lastRewardTimestamp || totalWeight == 0 || paused()) {\\n            return voteIndex;\\n        }\\n\\n        uint256 secondsElapsed = block.timestamp - lastRewardTimestamp;\\n        // use `max(totalWeight, 1e18)` in case the value overflows uint104\\n        return\\n            voteIndex +\\n            (secondsElapsed * womPerSec * (1000 - baseAllocation) * ACC_TOKEN_PRECISION) /\\n            max(totalWeight, 1e18) /\\n            1000;\\n    }\\n\\n    /// @notice Calculate the latest amount of `claimable` for a gauge\\n    function _getClaimable(IERC20 _lpToken, uint256 _baseIndex, uint256 _voteIndex) internal view returns (uint256) {\\n        uint256 baseIndexDelta = _baseIndex - infos[_lpToken].supplyBaseIndex;\\n        uint256 _baseShare = (weights[_lpToken].allocPoint * baseIndexDelta) / ACC_TOKEN_PRECISION;\\n\\n        if (!infos[_lpToken].whitelist) {\\n            return infos[_lpToken].claimable + _baseShare;\\n        }\\n\\n        uint256 voteIndexDelta = _voteIndex - infos[_lpToken].supplyVoteIndex;\\n        uint256 _voteShare = (weights[_lpToken].voteWeight * voteIndexDelta) / ACC_TOKEN_PRECISION;\\n\\n        return infos[_lpToken].claimable + _baseShare + _voteShare;\\n    }\\n\\n    function to128(uint256 val) internal pure returns (uint128) {\\n        require(val <= type(uint128).max, 'uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    function to104(uint256 val) internal pure returns (uint104) {\\n        if (val > type(uint104).max) revert('uint104 overflow');\\n        return uint104(val);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x9f21172e06584d94e12a0f6ff66f68f253aa307cb3967810153792d20854539a\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4e608dfd8e58a597cee1864154092b199ceb623aad70eb62887275d124b1e6f\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './IBribe.sol';\\n\\ninterface IGauge {\\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IVoter {\\n    struct GaugeWeight {\\n        uint128 allocPoint;\\n        uint128 voteWeight; // total amount of votes for an LP-token\\n    }\\n\\n    function infos(\\n        IERC20 _lpToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint104 supplyBaseIndex,\\n            uint104 supplyVoteIndex,\\n            uint40 nextEpochStartTime,\\n            uint128 claimable,\\n            bool whitelist,\\n            IGauge gaugeManager,\\n            IBribe bribe\\n        );\\n\\n    // lpToken => weight, equals to sum of votes for a LP token\\n    function weights(IERC20 _lpToken) external view returns (uint128 allocPoint, uint128 voteWeight);\\n\\n    // user address => lpToken => votes\\n    function votes(address _user, IERC20 _lpToken) external view returns (uint256);\\n\\n    function setBribe(IERC20 _lpToken, IBribe _bribe) external;\\n\\n    function distribute(IERC20 _lpToken) external;\\n}\\n\",\"keccak256\":\"0x7a5e4cd7b77da9d8882bb0b1676db2b1ccce674f2a69df950ca866621cebe9be\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576130cc908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c806308a931dd1461254c57806311ced5591461252257806317caf6f1146125015780631bb5e2dc146124be578063237e6d6414612457578063240f97741461231157806325b3ec64146122d45780632efce57b14611db75780633e582ae614611d9057806347c3577214611d455780634895ed2114611d165780635844398a14611cec578063595c6a6714611c1a5780635c975abb14611bf7578063622f83c914611b4357806363453ae11461184f578063715018a6146117f35780637c2e51ce1461149e5780638a81372f146114705780638da5cb5b1461144957806394966ad81461138257806396c82e571461135b578063a693686f14611150578063a7cac84614611107578063a9b5aa7e146110c8578063ad56882714610f60578063af3d104f14610e7f578063b6da5b2014610d9b578063b9ee8f6614610d76578063c23ead3214610d58578063c4bfce1814610d33578063c519375414610c71578063c5a6222e14610c4a578063c6ddb64214610bae578063c7733f7714610b84578063cad1b90614610b34578063eab4b0361461049e578063eb4a78e014610477578063f13e55071461037d578063f2fde38b146102d6578063f6e6c5af146102125763f8077fae146101eb57600080fd5b3461020f578060031936011261020f57602064ffffffffff60cc5416604051908152f35b80fd5b503461020f57602036600319011261020f5760043561ffff808216908183036102d15761023d612777565b6103e882116102cd577f9f8465a6a057e31abb34517007c2dfa96e65b800c2f0840da63459f3269b743c91604091610273612afc565b61027c85612c85565b8351928352166020820152a17fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff71ffff0000000000000000000000000000000060ce549260801b1691161760ce5580f35b8380fd5b600080fd5b503461020f57602036600319011261020f576102f061266b565b6102f8612777565b6001600160a01b0381161561031357610310906127cf565b80f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461020f578060031936011261020f57610396612777565b6001600160a01b0360c95416816040516370a0823160e01b81523060048201526020928382602481845afa80156104375784928491610442575b5060405163a9059cbb60e01b8152336004820152602481019190915292839190829081604481015b03925af180156104375761040a578280f35b8161042992903d10610430575b610421818361289c565b810190612ae4565b5038808280f35b503d610417565b6040513d85823e3d90fd5b9350509082813d8311610470575b61045a818361289c565b810103126102d1579051839183916103f86103d0565b503d610450565b503461020f578060031936011261020f5760206001600160a01b0360d25416604051908152f35b503461020f57604036600319011261020f5760043567ffffffffffffffff8111610b30576104d0903690600401612697565b6104db929192612681565b926104e5826128be565b906104f3604051928361289c565b82825261050f601f19610505856128be565b01602084016128d6565b610518836128be565b94610526604051968761289c565b838652610542601f19610538866128be565b01602088016128d6565b61054b846128f3565b93855b8181106106c35750505050604051926060840191606085528051809352608085016005936020608082871b89010193019184905b82821061065e57505050508481036020860152855191828252602082019060208085871b85010198019481935b8585106105ce5788806105ca8c8b83820360408501526126c8565b0390f35b90919293949598601f198282030185528951908151808252602082019060208082881b850101940192875b82811061061c5750505050506020806001929b01950195019395949291906105af565b909192939460208080600193601f19878203018952895161064881518092818552858086019101612754565b601f01601f1916010197019501939291016105f9565b90919293607f969596198982030182528451906020808351928381520192019088905b8082106106a257505050602080600192960192019201909291959495610582565b9091926020806001926001600160a01b038751168152019401920190610681565b6001600160a01b036106e16106dc8385889b999b61294f565b61295f565b1680865260d1602052856001600160a01b0360036040832001541680610716575b50505061070e9061292a565b95939561054e565b90602491604051928380927fc031a66f0000000000000000000000000000000000000000000000000000000082526001600160a01b038a1660048301525afa908115610b25578791610b03575b5061076e8389612a68565b526107798288612a68565b50855260d16020526004856001600160a01b03600360408320015416604051928380927fc2b18aa00000000000000000000000000000000000000000000000000000000082525afa908115610af8578691610a34575b506107da8289612a68565b526107e58188612a68565b506107f08188612a68565b51516107fb816128be565b610808604051918261289c565b818152610824601f1961081a846128be565b01602083016128d6565b61082e838b612a68565b52610839828a612a68565b50855b81811061084a578690610702565b80878a856001600160a01b0361086a856108648486612a68565b51612a68565b51166109085791505061087e91508b612a68565b51906040519182604081011067ffffffffffffffff6040850111176108f257816108e7918460406108ed9601604052600381527f424e42000000000000000000000000000000000000000000000000000000000060208201526108e18383612a68565b52612a68565b5061292a565b61083c565b634e487b7160e01b600052604160045260246000fd5b600493610864610920926001600160a01b0394612a68565b5116604051928380927f95d89b410000000000000000000000000000000000000000000000000000000082525afa908115610a29578b85918a9361097f575b509280926109736108e7936108ed96612a68565b51906108e18383612a68565b925050503d908189823e610993828261289c565b6020818381010312610a255780519067ffffffffffffffff8211610a2157828101601f838301011215610a215781810151916109ce83612c99565b936109dc604051958661289c565b8385528201602084838501010111610a1d57610973878f9295610a116108e79689989660206108ed9b98818601920101612754565b9550935050909361095f565b8a80fd5b8980fd5b8880fd5b6040513d8a823e3d90fd5b90503d8087833e610a45818361289c565b6020828281010312610af45781519067ffffffffffffffff8211610af057808301601f838501011215610af0578183015190610a80826128be565b93610a8e604051958661289c565b8285526020850191810160208460051b868401010111610a2157602084820101915b60208460051b86840101018310610acc575050505050386107cf565b82516001600160a01b0381168103610aec57815260209283019201610ab0565b8b80fd5b8780fd5b8680fd5b6040513d88823e3d90fd5b610b1f91503d8089833e610b17818361289c565b8101906129ee565b38610763565b6040513d89823e3d90fd5b5080fd5b503461020f57604036600319011261020f57610b4e61266b565b6040610b58612681565b926001600160a01b03809316815260d06020522091166000526020526020604060002054604051908152f35b503461020f578060031936011261020f576020610b9f612ce8565b64ffffffffff60405191168152f35b503461020f57602036600319011261020f5760e09060406001600160a01b039182610bd761266b565b16815260d1602052209081549160ff600182015492600381600285015416930154169264ffffffffff604051956001600160681b0380821688528160681c16602088015260d01c1660408601526001600160801b038116606086015260801c161515608084015260a083015260c0820152f35b503461020f578060031936011261020f5760206001600160a01b0360c95416604051908152f35b503461020f57602036600319011261020f57610c8b61266b565b610c93612777565b6001600160a01b0381169081835260d160205260ff600160408520015460801c1615610cef5780610cc6610cd392612a7c565b610cce612afc565b612bbf565b815260d16020526001604082200160ff60801b19815416905580f35b606460405162461bcd60e51b815260206004820152601660248201527f766f7465723a206e6f742077686974656c6973746564000000000000000000006044820152fd5b503461020f578060031936011261020f57602061ffff60ce5460801c16604051908152f35b503461020f578060031936011261020f57602060cb54604051908152f35b503461020f578060031936011261020f57602064ffffffffff60ce5416604051908152f35b503461020f57604036600319011261020f57610db561266b565b610dbd612681565b906001600160a01b03908160d2541633148015610e72575b15610e085780610de58392612a7c565b16835260d16020526003604084200191166001600160a01b031982541617905580f35b608460405162461bcd60e51b815260206004820152603460248201527f566f7465723a2063616c6c6572206973206e6f7420746865206f776e6572206e60448201527f6f722074686520627269626520666163746f72790000000000000000000000006064820152fd5b5033826033541614610dd5565b503461020f578060031936011261020f57610e98612777565b610ea0612afc565b60cb54815b818110610f31578260975460ff811615610eed5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b80610f566001600160a01b03610f49610f5b9461261e565b90549060031b1c16612bbf565b61292a565b610ea5565b503461020f57602080600319360112610b3057816001600160a01b03610f8461266b565b610f8c612777565b1680611013575080808047335af13d1561100e573d610faa81612c99565b90610fb8604051928361289c565b815283833d92013e5b15610fca575080f35b6064906040519062461bcd60e51b82526004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b610fc1565b604051906370a0823160e01b82523060048301528382602481845afa80156104375784928491611093575b5060405163a9059cbb60e01b8152336004820152602481019190915292839190829081604481015b03925af180156104375761107957505080f35b8161108f92903d1061043057610421818361289c565b5080f35b9350509082813d83116110c1575b6110ab818361289c565b810103126102d15790518391839161106661103e565b503d6110a1565b503461020f57602036600319011261020f576001600160a01b036110ea61266b565b6110f2612777565b166001600160a01b031960d254161760d25580f35b503461020f57602036600319011261020f57604080916001600160a01b0361112d61266b565b16815260cf60205220548151906001600160801b038116825260801c6020820152f35b503461020f57606036600319011261020f5761116a61266b565b611172612681565b90604435906001600160a01b03928383168093036102d1578390611194612777565b169182855260209160d1835260ff600160408820015460801c166113175784169081156113135783156113135783865260d18352846002604088200154166112aa579061125d929184875260d183526003604088206001810170010000000000000000000000000000000060ff60801b19825416179055600281016001600160a01b03199485825416179055019182541617905560d1611232612ce8565b9184875252604085209064ffffffffff60d01b1964ffffffffff60d01b83549260d01b169116179055565b60cb546801000000000000000081101561129657806001611281920160cb5561261e565b909283549160031b92831b921b191617905580f35b602484634e487b7160e01b81526041600452fd5b6084836040519062461bcd60e51b825260048201526024808201527f566f7465723a2067617567654d616e6167657220697320616c7265616479206560448201527f78697374000000000000000000000000000000000000000000000000000000006064820152fd5b8580fd5b6064836040519062461bcd60e51b82526004820152601460248201527f766f7465723a20616c72656164792061646465640000000000000000000000006044820152fd5b503461020f578060031936011261020f5760206001600160801b0360cd5416604051908152f35b503461020f57602036600319011261020f5761139c61266b565b6113a4612777565b6001600160a01b0381169081835260d160205260ff600160408520015460801c166114055780610cc66113d692612a7c565b815260d16020526001604082200170010000000000000000000000000000000060ff60801b1982541617905580f35b606460405162461bcd60e51b815260206004820152601160248201527f766f7465723a206e6f74207061757365640000000000000000000000000000006044820152fd5b503461020f578060031936011261020f5760206001600160a01b0360335416604051908152f35b503461020f578060031936011261020f5760206affffffffffffffffffffff60ce5460281c16604051908152f35b503461020f5760c036600319011261020f576114b861266b565b602435906001600160a01b03918281168091036102cd57604435906affffffffffffffffffffff82168083036102d1576064359064ffffffffff928383168093036102d1576084359384168094036102d15760a4359161ffff8316908184036102d15789549860ff8a60081c16159889809a6117e6575b80156117cf575b156117655760ff19808c166001178d559a8a611754575b5042881061171057169182156116cc578315611688576103e810610a215769021e19e0c9bab240000010610a25577fffffffffffffffffffffffffffff000000000000000000000000000000000000926fffffffffffffffffffffff00000000009271ffff00000000000000000000000000000000926115dc60ff8d5460081c166115d781612817565b612817565b6115e5336127cf565b8b549a61160560ff8d60081c166115fb81612817565b6001606555612817565b609754166097556001600160a01b0319908160c954161760c95560ca54161760ca5560ce549464ffffffffff1960cc54161760cc5560801b169460281b16911617171760ce55611653575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b606460405162461bcd60e51b815260206004820152601c60248201527f7665576f6d20616464726573732063616e6e6f74206265207a65726f000000006044820152fd5b606460405162461bcd60e51b815260206004820152601a60248201527f776f6d20616464726573732063616e6e6f74206265207a65726f0000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964205f666972737445706f6368537461727454696d65000000006044820152fd5b61ffff1916610101178c553861154d565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156115365750600160ff8c1614611536565b50600160ff8c161061152f565b503461020f578060031936011261020f5761180c612777565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461020f576020908160031936011261020f5761186b61266b565b6001600160a01b038082169081845260d1808652816002604087200154163303611aff57849561189c859695612a7c565b6118a4612afc565b6118ad86612bbf565b83855281815260408520936001600160801b03600186015416948515159081611ae9575b5080611a80575b6118e0578580f35b808652828252600160408720016fffffffffffffffffffffffffffffffff19815416905561193b61190f612ce8565b828852848452604088209064ffffffffff60d01b1964ffffffffff60d01b83549260d01b169116179055565b604080516001600160a01b0389168152602081018790527fe8b160e373db99a103e0a2abfa029b9c3fc8b328984a1ead8a65ae68ae646db79190a16119c382868660c95416848a5286835287600260408c200154168a60405180968195829463a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b03925af18015610b2557611a63575b50855252600260408420015416803b15611a5f576040517fb66503cf0000000000000000000000000000000000000000000000000000000081526001600160a01b0394909416600485015260248401919091528290604490829084905af18015611a5457611a45575b8181808080808580f35b611a4e90612888565b38611a3b565b6040513d84823e3d90fd5b8280fd5b611a7990833d851161043057610421818361289c565b50386119d2565b506024828560c95416604051928380926370a0823160e01b82523060048301525afa8015610b255786918891611ab8575b50116118d8565b809250848092503d8311611ae2575b611ad1818361289c565b81010312610af45785905138611ab1565b503d611ac7565b64ffffffffff91505460d01c16421015386118d1565b6064866040519062461bcd60e51b82526004820152601b60248201527f43616c6c6572206973206e6f74206761756765206d616e6167657200000000006044820152fd5b503461020f57604036600319011261020f57611b5d61266b565b6001600160801b039060243582811691828203611bf357611bd493611b80612777565b611b88612afc565b611b9182612bbf565b6001600160a01b0360cd5492169283875260cf6020526fffffffffffffffffffffffffffffffff19958691611bcf8460408b2054168660801c6129ad565b6129d3565b60801b1691161760cd55835260cf602052604083209182541617905580f35b8480fd5b503461020f578060031936011261020f57602060ff609754166040519015158152f35b503461020f578060031936011261020f57611c33612777565b611c3b612afc565b60cb54815b818110611ccf578260975460ff8116611c8b5760019060ff1916176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b80610f566001600160a01b03610f49611ce79461261e565b611c40565b503461020f578060031936011261020f5760206001600160681b0360cc5460901c16604051908152f35b503461020f578060031936011261020f57602061ffff611d3c8160ce5460801c16612c85565b16604051908152f35b503461020f57604036600319011261020f576040602091611d6461266b565b611d6c612681565b6001600160a01b03918216835260d085528383209116825283522054604051908152f35b503461020f578060031936011261020f5760206001600160a01b0360ca5416604051908152f35b503461020f57604036600319011261020f5767ffffffffffffffff600435818111611a5f57611dea903690600401612697565b916024359081116102cd57611e03903690600401612697565b909160026065541461229057600260655581840361224c57918492611e26612afc565b8391611e31866128f3565b9385965b808810611ec857868681876001600160a01b0360ca5416803b15611a5f576044839260405194859384927fb0dfaa7a00000000000000000000000000000000000000000000000000000000845233600485015260248401525af18015610437576105ca9350611eb9575b5060016065556040519182916020835260208301906126c8565b611ec290612888565b82611e9f565b611ed66106dc89838761294f565b611edf81612a7c565b611eea89848661294f565b35986001600160a01b038216895260cf602052604089205460801c8a611fe3575b899a50988098996001600160a01b038416825260d16020526001600160a01b036003604084200154169384611f52575b505050611f48915061292a565b9750959495611e35565b33835260d06020526001600160a01b036040842091168352602052606460408320548360405196879485936332ecd52560e11b8552336004860152602485015260448401525af18015610a2957611f48928991611fc9575b50611fb5828b612a68565b52611fc0818a612a68565b50878b80611f3b565b611fdd91503d808b833e610b17818361289c565b8b611faa565b96611fed83612bbf565b898b131561214a57338a5260d060205260408a206001600160a01b0384168b5260205260408a2061201f8c82546129c6565b90556120746120366120318d8b6129c6565b612fe6565b6001600160a01b0385168c5260cf60205260408c20906001600160801b036fffffffffffffffffffffffffffffffff1983549260801b169116179055565b61207d8b612fe6565b60cd906fffffffffffffffffffffffffffffffff198254916120a96001600160801b03918285166129d3565b1691161790555b898b82019b8c1291129080158216911516176121365788809a9998999733825260d0602052604082206001600160a01b03851683526020527f92aede651123b9757b46a79e4d37916de5f58649f7ef39380b0ad5d7273565f360606040842054604051903382526001600160a01b03881660208301526040820152a19050989798611f0b565b602489634e487b7160e01b81526011600452fd5b338a5260d060205260408a206001600160a01b0384168b5260205260408a20546121738c612973565b11612208576121c56120366120316121bf8e8e6121b8604061219484612973565b9233815260d06020528181206001600160a01b038d168252602052209182546129a0565b9055612973565b8b6129a0565b6121d16120318c612973565b60cd906fffffffffffffffffffffffffffffffff198254916121fd6001600160801b03918285166129ad565b1691161790556120b0565b606460405162461bcd60e51b815260206004820152601560248201527f766f7465723a20766f746520756e646572666c6f7700000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601d60248201527f766f7465723a206172726179206c656e677468206e6f7420657175616c0000006044820152fd5b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b503461020f57602036600319011261020f5760206123096122f361266b565b6122fb612d37565b612303612e1b565b91612f0b565b604051908152f35b503461020f57602080600319360112610b305760043567ffffffffffffffff8111611a5f57612344903690600401612697565b929061234f846128f3565b93825b81811061236c57604051858152806105ca818801896126c8565b61237a6106dc82848661294f565b61238381612a7c565b6001600160a01b038091169081865260d1875260036040872001541690816123b6575b50506123b19061292a565b612352565b33865260d0875260408620908652865284604081205460cf88526064604083205460801c918360405195869485936332ecd52560e11b8552336004860152602485015260448401525af190811561244c57906123b192918691612432575b5061241f8289612a68565b5261242a8188612a68565b5090386123a6565b61244691503d8088833e610b17818361289c565b38612414565b6040513d87823e3d90fd5b503461020f57604036600319011261020f5761247161266b565b612479612681565b612481612777565b6001600160a01b038091169182156102cd5761249c81612a7c565b16825260d160205260026040832001906001600160a01b031982541617905580f35b503461020f57602036600319011261020f576004359060cb5482101561020f5760206001600160a01b036124f18461261e565b9190546040519260031b1c168152f35b503461020f578060031936011261020f57602060cd5460801c604051908152f35b503461020f578060031936011261020f5760206001600160681b0360cc5460281c16604051908152f35b503461020f57602036600319011261020f576004356affffffffffffffffffffff8116808203611a5f5769021e19e0c9bab24000009061258a612777565b116125da57612597612afc565b7fffffffffffffffffffffffffffffffff0000000000000000000000ffffffffff6fffffffffffffffffffffff000000000060ce549260281b1691161760ce5580f35b606460405162461bcd60e51b815260206004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b60cb548110156126555760cb6000527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b634e487b7160e01b600052603260045260246000fd5b600435906001600160a01b03821682036102d157565b602435906001600160a01b03821682036102d157565b9181601f840112156102d15782359167ffffffffffffffff83116102d1576020808501948460051b0101116102d157565b908082519081815260208091019281808460051b830101950193600080925b8584106126f8575050505050505090565b9091929380959697601f1983820301855288519082808351928381520192019085905b80821061273b5750505090806001929901940194019295949391906126e7565b919380600192948651815201940192018893929161271b565b60005b8381106127675750506000910152565b8181015183820152602001612757565b6001600160a01b0360335416330361278b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b1561281e57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b67ffffffffffffffff81116108f257604052565b90601f8019910116810190811067ffffffffffffffff8211176108f257604052565b67ffffffffffffffff81116108f25760051b60200190565b60005b8281106128e557505050565b6060828201526020016128d9565b90612928612900836128be565b61290d604051918261289c565b83815260208194612920601f19916128be565b0191016128d6565b565b60001981146129395760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156126555760051b0190565b356001600160a01b03811681036102d15790565b7f800000000000000000000000000000000000000000000000000000000000000081146129395760000390565b9190820391821161293957565b6001600160801b03918216908216039190821161293957565b9190820180921161293957565b9190916001600160801b038080941691160191821161293957565b60209081818403126102d15780519067ffffffffffffffff82116102d157019180601f840112156102d1578251612a24816128be565b93612a32604051958661289c565b818552838086019260051b8201019283116102d1578301905b828210612a59575050505090565b81518152908301908301612a4b565b80518210156126555760209160051b010190565b6001600160a01b0380911660005260d16020526002604060002001541615612aa057565b606460405162461bcd60e51b815260206004820152601d60248201527f566f7465723a2067617567654d616e61676572206e6f742065786973740000006044820152fd5b908160209103126102d1575180151581036102d15790565b60cc5464ffffffffff808216421115612bbb5771ffffffffffffffffffffffffff0000000000612b32612b2d612d37565b61303e565b60281b16807fffffffffffffffffffffffffffff00000000000000000000000000ffffffffff84161760cc557fff000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffff000000000000000000000000000000000000612baa612b2d612e1b565b60901b16924216931617171760cc55565b5050565b60cc546001600160a01b03612beb6120316001600160681b039384808260901c169160281c1686612f0b565b921660005260d16020526040600020916001600160801b036001840191166fffffffffffffffffffffffffffffffff1982541617905560cc5460281c16815490806001600160681b031983161783557fffffffffffff000000000000000000000000000000000000000000000000000079ffffffffffffffffffffffffff0000000000000000000000000060cc5460281c16921617179055565b9061ffff8092166103e80391821161293957565b67ffffffffffffffff81116108f257601f01601f191660200190565b8115612cbf570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561293957565b64ffffffffff8060ce5416804210612d325762093a8080612d0983426129a0565b04600181018091116129395781810291818304149015171561293957612d2e916129c6565b1690565b905090565b60cc5464ffffffffff8116804211801590612e0e575b8015612e02575b612df257612d65612d9191426129a0565b61ffff612d8660ce54926affffffffffffffffffffff8460281c1690612cd5565b9160801c1690612cd5565b9064e8d4a5100091828102928184041490151715612939576001600160681b036103e8612ddc612de79460cd5460801c670de0b6b3a764000080821015600014612dea575090612cb5565b049160281c166129c6565b90565b905090612cb5565b5060281c6001600160681b031690565b5060ff60975416612d54565b5060cd5460801c15612d4d565b60cc5464ffffffffff8116804211801590612ef8575b8015612eec575b612edc57612e49612e8091426129a0565b612e6760ce54916affffffffffffffffffffff8360281c1690612cd5565b90612e7961ffff809260801c16612c85565b1690612cd5565b9064e8d4a5100091828102928184041490151715612939576001600160681b036103e8612ed1612de7946001600160801b0360cd5416670de0b6b3a764000080821015600014612dea575090612cb5565b049160901c166129c6565b5060901c6001600160681b031690565b5060ff60975416612e38565b506001600160801b0360cd541615612e31565b6001600160a01b03169160009183835260209260d184526001600160681b0393612f3d604093868585205416906129a0565b9386835260cf825264e8d4a510009081612f646001600160801b0397888888205416612cd5565b049688855260d184526001868620015460ff8160801c1615612fd4575060019389989693612fc1612fae889560d195612de79e612fcf9d9b528686528888205460681c16906129a0565b8b865260cf84528686205460801c612cd5565b0498835252200154166129c6565b6129c6565b95505050505050612de79350166129c6565b6001600160801b0390818111612ffa571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b6001600160681b0390818111613052571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313034206f766572666c6f77000000000000000000000000000000006044820152fdfea26469706673582212200d3ca253c538bb708f69552db6e1cf70e922d53bf4433c234b41bcd95e7d85e264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c806308a931dd1461254c57806311ced5591461252257806317caf6f1146125015780631bb5e2dc146124be578063237e6d6414612457578063240f97741461231157806325b3ec64146122d45780632efce57b14611db75780633e582ae614611d9057806347c3577214611d455780634895ed2114611d165780635844398a14611cec578063595c6a6714611c1a5780635c975abb14611bf7578063622f83c914611b4357806363453ae11461184f578063715018a6146117f35780637c2e51ce1461149e5780638a81372f146114705780638da5cb5b1461144957806394966ad81461138257806396c82e571461135b578063a693686f14611150578063a7cac84614611107578063a9b5aa7e146110c8578063ad56882714610f60578063af3d104f14610e7f578063b6da5b2014610d9b578063b9ee8f6614610d76578063c23ead3214610d58578063c4bfce1814610d33578063c519375414610c71578063c5a6222e14610c4a578063c6ddb64214610bae578063c7733f7714610b84578063cad1b90614610b34578063eab4b0361461049e578063eb4a78e014610477578063f13e55071461037d578063f2fde38b146102d6578063f6e6c5af146102125763f8077fae146101eb57600080fd5b3461020f578060031936011261020f57602064ffffffffff60cc5416604051908152f35b80fd5b503461020f57602036600319011261020f5760043561ffff808216908183036102d15761023d612777565b6103e882116102cd577f9f8465a6a057e31abb34517007c2dfa96e65b800c2f0840da63459f3269b743c91604091610273612afc565b61027c85612c85565b8351928352166020820152a17fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff71ffff0000000000000000000000000000000060ce549260801b1691161760ce5580f35b8380fd5b600080fd5b503461020f57602036600319011261020f576102f061266b565b6102f8612777565b6001600160a01b0381161561031357610310906127cf565b80f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461020f578060031936011261020f57610396612777565b6001600160a01b0360c95416816040516370a0823160e01b81523060048201526020928382602481845afa80156104375784928491610442575b5060405163a9059cbb60e01b8152336004820152602481019190915292839190829081604481015b03925af180156104375761040a578280f35b8161042992903d10610430575b610421818361289c565b810190612ae4565b5038808280f35b503d610417565b6040513d85823e3d90fd5b9350509082813d8311610470575b61045a818361289c565b810103126102d1579051839183916103f86103d0565b503d610450565b503461020f578060031936011261020f5760206001600160a01b0360d25416604051908152f35b503461020f57604036600319011261020f5760043567ffffffffffffffff8111610b30576104d0903690600401612697565b6104db929192612681565b926104e5826128be565b906104f3604051928361289c565b82825261050f601f19610505856128be565b01602084016128d6565b610518836128be565b94610526604051968761289c565b838652610542601f19610538866128be565b01602088016128d6565b61054b846128f3565b93855b8181106106c35750505050604051926060840191606085528051809352608085016005936020608082871b89010193019184905b82821061065e57505050508481036020860152855191828252602082019060208085871b85010198019481935b8585106105ce5788806105ca8c8b83820360408501526126c8565b0390f35b90919293949598601f198282030185528951908151808252602082019060208082881b850101940192875b82811061061c5750505050506020806001929b01950195019395949291906105af565b909192939460208080600193601f19878203018952895161064881518092818552858086019101612754565b601f01601f1916010197019501939291016105f9565b90919293607f969596198982030182528451906020808351928381520192019088905b8082106106a257505050602080600192960192019201909291959495610582565b9091926020806001926001600160a01b038751168152019401920190610681565b6001600160a01b036106e16106dc8385889b999b61294f565b61295f565b1680865260d1602052856001600160a01b0360036040832001541680610716575b50505061070e9061292a565b95939561054e565b90602491604051928380927fc031a66f0000000000000000000000000000000000000000000000000000000082526001600160a01b038a1660048301525afa908115610b25578791610b03575b5061076e8389612a68565b526107798288612a68565b50855260d16020526004856001600160a01b03600360408320015416604051928380927fc2b18aa00000000000000000000000000000000000000000000000000000000082525afa908115610af8578691610a34575b506107da8289612a68565b526107e58188612a68565b506107f08188612a68565b51516107fb816128be565b610808604051918261289c565b818152610824601f1961081a846128be565b01602083016128d6565b61082e838b612a68565b52610839828a612a68565b50855b81811061084a578690610702565b80878a856001600160a01b0361086a856108648486612a68565b51612a68565b51166109085791505061087e91508b612a68565b51906040519182604081011067ffffffffffffffff6040850111176108f257816108e7918460406108ed9601604052600381527f424e42000000000000000000000000000000000000000000000000000000000060208201526108e18383612a68565b52612a68565b5061292a565b61083c565b634e487b7160e01b600052604160045260246000fd5b600493610864610920926001600160a01b0394612a68565b5116604051928380927f95d89b410000000000000000000000000000000000000000000000000000000082525afa908115610a29578b85918a9361097f575b509280926109736108e7936108ed96612a68565b51906108e18383612a68565b925050503d908189823e610993828261289c565b6020818381010312610a255780519067ffffffffffffffff8211610a2157828101601f838301011215610a215781810151916109ce83612c99565b936109dc604051958661289c565b8385528201602084838501010111610a1d57610973878f9295610a116108e79689989660206108ed9b98818601920101612754565b9550935050909361095f565b8a80fd5b8980fd5b8880fd5b6040513d8a823e3d90fd5b90503d8087833e610a45818361289c565b6020828281010312610af45781519067ffffffffffffffff8211610af057808301601f838501011215610af0578183015190610a80826128be565b93610a8e604051958661289c565b8285526020850191810160208460051b868401010111610a2157602084820101915b60208460051b86840101018310610acc575050505050386107cf565b82516001600160a01b0381168103610aec57815260209283019201610ab0565b8b80fd5b8780fd5b8680fd5b6040513d88823e3d90fd5b610b1f91503d8089833e610b17818361289c565b8101906129ee565b38610763565b6040513d89823e3d90fd5b5080fd5b503461020f57604036600319011261020f57610b4e61266b565b6040610b58612681565b926001600160a01b03809316815260d06020522091166000526020526020604060002054604051908152f35b503461020f578060031936011261020f576020610b9f612ce8565b64ffffffffff60405191168152f35b503461020f57602036600319011261020f5760e09060406001600160a01b039182610bd761266b565b16815260d1602052209081549160ff600182015492600381600285015416930154169264ffffffffff604051956001600160681b0380821688528160681c16602088015260d01c1660408601526001600160801b038116606086015260801c161515608084015260a083015260c0820152f35b503461020f578060031936011261020f5760206001600160a01b0360c95416604051908152f35b503461020f57602036600319011261020f57610c8b61266b565b610c93612777565b6001600160a01b0381169081835260d160205260ff600160408520015460801c1615610cef5780610cc6610cd392612a7c565b610cce612afc565b612bbf565b815260d16020526001604082200160ff60801b19815416905580f35b606460405162461bcd60e51b815260206004820152601660248201527f766f7465723a206e6f742077686974656c6973746564000000000000000000006044820152fd5b503461020f578060031936011261020f57602061ffff60ce5460801c16604051908152f35b503461020f578060031936011261020f57602060cb54604051908152f35b503461020f578060031936011261020f57602064ffffffffff60ce5416604051908152f35b503461020f57604036600319011261020f57610db561266b565b610dbd612681565b906001600160a01b03908160d2541633148015610e72575b15610e085780610de58392612a7c565b16835260d16020526003604084200191166001600160a01b031982541617905580f35b608460405162461bcd60e51b815260206004820152603460248201527f566f7465723a2063616c6c6572206973206e6f7420746865206f776e6572206e60448201527f6f722074686520627269626520666163746f72790000000000000000000000006064820152fd5b5033826033541614610dd5565b503461020f578060031936011261020f57610e98612777565b610ea0612afc565b60cb54815b818110610f31578260975460ff811615610eed5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b80610f566001600160a01b03610f49610f5b9461261e565b90549060031b1c16612bbf565b61292a565b610ea5565b503461020f57602080600319360112610b3057816001600160a01b03610f8461266b565b610f8c612777565b1680611013575080808047335af13d1561100e573d610faa81612c99565b90610fb8604051928361289c565b815283833d92013e5b15610fca575080f35b6064906040519062461bcd60e51b82526004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b610fc1565b604051906370a0823160e01b82523060048301528382602481845afa80156104375784928491611093575b5060405163a9059cbb60e01b8152336004820152602481019190915292839190829081604481015b03925af180156104375761107957505080f35b8161108f92903d1061043057610421818361289c565b5080f35b9350509082813d83116110c1575b6110ab818361289c565b810103126102d15790518391839161106661103e565b503d6110a1565b503461020f57602036600319011261020f576001600160a01b036110ea61266b565b6110f2612777565b166001600160a01b031960d254161760d25580f35b503461020f57602036600319011261020f57604080916001600160a01b0361112d61266b565b16815260cf60205220548151906001600160801b038116825260801c6020820152f35b503461020f57606036600319011261020f5761116a61266b565b611172612681565b90604435906001600160a01b03928383168093036102d1578390611194612777565b169182855260209160d1835260ff600160408820015460801c166113175784169081156113135783156113135783865260d18352846002604088200154166112aa579061125d929184875260d183526003604088206001810170010000000000000000000000000000000060ff60801b19825416179055600281016001600160a01b03199485825416179055019182541617905560d1611232612ce8565b9184875252604085209064ffffffffff60d01b1964ffffffffff60d01b83549260d01b169116179055565b60cb546801000000000000000081101561129657806001611281920160cb5561261e565b909283549160031b92831b921b191617905580f35b602484634e487b7160e01b81526041600452fd5b6084836040519062461bcd60e51b825260048201526024808201527f566f7465723a2067617567654d616e6167657220697320616c7265616479206560448201527f78697374000000000000000000000000000000000000000000000000000000006064820152fd5b8580fd5b6064836040519062461bcd60e51b82526004820152601460248201527f766f7465723a20616c72656164792061646465640000000000000000000000006044820152fd5b503461020f578060031936011261020f5760206001600160801b0360cd5416604051908152f35b503461020f57602036600319011261020f5761139c61266b565b6113a4612777565b6001600160a01b0381169081835260d160205260ff600160408520015460801c166114055780610cc66113d692612a7c565b815260d16020526001604082200170010000000000000000000000000000000060ff60801b1982541617905580f35b606460405162461bcd60e51b815260206004820152601160248201527f766f7465723a206e6f74207061757365640000000000000000000000000000006044820152fd5b503461020f578060031936011261020f5760206001600160a01b0360335416604051908152f35b503461020f578060031936011261020f5760206affffffffffffffffffffff60ce5460281c16604051908152f35b503461020f5760c036600319011261020f576114b861266b565b602435906001600160a01b03918281168091036102cd57604435906affffffffffffffffffffff82168083036102d1576064359064ffffffffff928383168093036102d1576084359384168094036102d15760a4359161ffff8316908184036102d15789549860ff8a60081c16159889809a6117e6575b80156117cf575b156117655760ff19808c166001178d559a8a611754575b5042881061171057169182156116cc578315611688576103e810610a215769021e19e0c9bab240000010610a25577fffffffffffffffffffffffffffff000000000000000000000000000000000000926fffffffffffffffffffffff00000000009271ffff00000000000000000000000000000000926115dc60ff8d5460081c166115d781612817565b612817565b6115e5336127cf565b8b549a61160560ff8d60081c166115fb81612817565b6001606555612817565b609754166097556001600160a01b0319908160c954161760c95560ca54161760ca5560ce549464ffffffffff1960cc54161760cc5560801b169460281b16911617171760ce55611653575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b606460405162461bcd60e51b815260206004820152601c60248201527f7665576f6d20616464726573732063616e6e6f74206265207a65726f000000006044820152fd5b606460405162461bcd60e51b815260206004820152601a60248201527f776f6d20616464726573732063616e6e6f74206265207a65726f0000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601c60248201527f696e76616c6964205f666972737445706f6368537461727454696d65000000006044820152fd5b61ffff1916610101178c553861154d565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156115365750600160ff8c1614611536565b50600160ff8c161061152f565b503461020f578060031936011261020f5761180c612777565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461020f576020908160031936011261020f5761186b61266b565b6001600160a01b038082169081845260d1808652816002604087200154163303611aff57849561189c859695612a7c565b6118a4612afc565b6118ad86612bbf565b83855281815260408520936001600160801b03600186015416948515159081611ae9575b5080611a80575b6118e0578580f35b808652828252600160408720016fffffffffffffffffffffffffffffffff19815416905561193b61190f612ce8565b828852848452604088209064ffffffffff60d01b1964ffffffffff60d01b83549260d01b169116179055565b604080516001600160a01b0389168152602081018790527fe8b160e373db99a103e0a2abfa029b9c3fc8b328984a1ead8a65ae68ae646db79190a16119c382868660c95416848a5286835287600260408c200154168a60405180968195829463a9059cbb60e01b845260048401602090939291936001600160a01b0360408201951681520152565b03925af18015610b2557611a63575b50855252600260408420015416803b15611a5f576040517fb66503cf0000000000000000000000000000000000000000000000000000000081526001600160a01b0394909416600485015260248401919091528290604490829084905af18015611a5457611a45575b8181808080808580f35b611a4e90612888565b38611a3b565b6040513d84823e3d90fd5b8280fd5b611a7990833d851161043057610421818361289c565b50386119d2565b506024828560c95416604051928380926370a0823160e01b82523060048301525afa8015610b255786918891611ab8575b50116118d8565b809250848092503d8311611ae2575b611ad1818361289c565b81010312610af45785905138611ab1565b503d611ac7565b64ffffffffff91505460d01c16421015386118d1565b6064866040519062461bcd60e51b82526004820152601b60248201527f43616c6c6572206973206e6f74206761756765206d616e6167657200000000006044820152fd5b503461020f57604036600319011261020f57611b5d61266b565b6001600160801b039060243582811691828203611bf357611bd493611b80612777565b611b88612afc565b611b9182612bbf565b6001600160a01b0360cd5492169283875260cf6020526fffffffffffffffffffffffffffffffff19958691611bcf8460408b2054168660801c6129ad565b6129d3565b60801b1691161760cd55835260cf602052604083209182541617905580f35b8480fd5b503461020f578060031936011261020f57602060ff609754166040519015158152f35b503461020f578060031936011261020f57611c33612777565b611c3b612afc565b60cb54815b818110611ccf578260975460ff8116611c8b5760019060ff1916176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b80610f566001600160a01b03610f49611ce79461261e565b611c40565b503461020f578060031936011261020f5760206001600160681b0360cc5460901c16604051908152f35b503461020f578060031936011261020f57602061ffff611d3c8160ce5460801c16612c85565b16604051908152f35b503461020f57604036600319011261020f576040602091611d6461266b565b611d6c612681565b6001600160a01b03918216835260d085528383209116825283522054604051908152f35b503461020f578060031936011261020f5760206001600160a01b0360ca5416604051908152f35b503461020f57604036600319011261020f5767ffffffffffffffff600435818111611a5f57611dea903690600401612697565b916024359081116102cd57611e03903690600401612697565b909160026065541461229057600260655581840361224c57918492611e26612afc565b8391611e31866128f3565b9385965b808810611ec857868681876001600160a01b0360ca5416803b15611a5f576044839260405194859384927fb0dfaa7a00000000000000000000000000000000000000000000000000000000845233600485015260248401525af18015610437576105ca9350611eb9575b5060016065556040519182916020835260208301906126c8565b611ec290612888565b82611e9f565b611ed66106dc89838761294f565b611edf81612a7c565b611eea89848661294f565b35986001600160a01b038216895260cf602052604089205460801c8a611fe3575b899a50988098996001600160a01b038416825260d16020526001600160a01b036003604084200154169384611f52575b505050611f48915061292a565b9750959495611e35565b33835260d06020526001600160a01b036040842091168352602052606460408320548360405196879485936332ecd52560e11b8552336004860152602485015260448401525af18015610a2957611f48928991611fc9575b50611fb5828b612a68565b52611fc0818a612a68565b50878b80611f3b565b611fdd91503d808b833e610b17818361289c565b8b611faa565b96611fed83612bbf565b898b131561214a57338a5260d060205260408a206001600160a01b0384168b5260205260408a2061201f8c82546129c6565b90556120746120366120318d8b6129c6565b612fe6565b6001600160a01b0385168c5260cf60205260408c20906001600160801b036fffffffffffffffffffffffffffffffff1983549260801b169116179055565b61207d8b612fe6565b60cd906fffffffffffffffffffffffffffffffff198254916120a96001600160801b03918285166129d3565b1691161790555b898b82019b8c1291129080158216911516176121365788809a9998999733825260d0602052604082206001600160a01b03851683526020527f92aede651123b9757b46a79e4d37916de5f58649f7ef39380b0ad5d7273565f360606040842054604051903382526001600160a01b03881660208301526040820152a19050989798611f0b565b602489634e487b7160e01b81526011600452fd5b338a5260d060205260408a206001600160a01b0384168b5260205260408a20546121738c612973565b11612208576121c56120366120316121bf8e8e6121b8604061219484612973565b9233815260d06020528181206001600160a01b038d168252602052209182546129a0565b9055612973565b8b6129a0565b6121d16120318c612973565b60cd906fffffffffffffffffffffffffffffffff198254916121fd6001600160801b03918285166129ad565b1691161790556120b0565b606460405162461bcd60e51b815260206004820152601560248201527f766f7465723a20766f746520756e646572666c6f7700000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601d60248201527f766f7465723a206172726179206c656e677468206e6f7420657175616c0000006044820152fd5b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b503461020f57602036600319011261020f5760206123096122f361266b565b6122fb612d37565b612303612e1b565b91612f0b565b604051908152f35b503461020f57602080600319360112610b305760043567ffffffffffffffff8111611a5f57612344903690600401612697565b929061234f846128f3565b93825b81811061236c57604051858152806105ca818801896126c8565b61237a6106dc82848661294f565b61238381612a7c565b6001600160a01b038091169081865260d1875260036040872001541690816123b6575b50506123b19061292a565b612352565b33865260d0875260408620908652865284604081205460cf88526064604083205460801c918360405195869485936332ecd52560e11b8552336004860152602485015260448401525af190811561244c57906123b192918691612432575b5061241f8289612a68565b5261242a8188612a68565b5090386123a6565b61244691503d8088833e610b17818361289c565b38612414565b6040513d87823e3d90fd5b503461020f57604036600319011261020f5761247161266b565b612479612681565b612481612777565b6001600160a01b038091169182156102cd5761249c81612a7c565b16825260d160205260026040832001906001600160a01b031982541617905580f35b503461020f57602036600319011261020f576004359060cb5482101561020f5760206001600160a01b036124f18461261e565b9190546040519260031b1c168152f35b503461020f578060031936011261020f57602060cd5460801c604051908152f35b503461020f578060031936011261020f5760206001600160681b0360cc5460281c16604051908152f35b503461020f57602036600319011261020f576004356affffffffffffffffffffff8116808203611a5f5769021e19e0c9bab24000009061258a612777565b116125da57612597612afc565b7fffffffffffffffffffffffffffffffff0000000000000000000000ffffffffff6fffffffffffffffffffffff000000000060ce549260281b1691161760ce5580f35b606460405162461bcd60e51b815260206004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b60cb548110156126555760cb6000527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b634e487b7160e01b600052603260045260246000fd5b600435906001600160a01b03821682036102d157565b602435906001600160a01b03821682036102d157565b9181601f840112156102d15782359167ffffffffffffffff83116102d1576020808501948460051b0101116102d157565b908082519081815260208091019281808460051b830101950193600080925b8584106126f8575050505050505090565b9091929380959697601f1983820301855288519082808351928381520192019085905b80821061273b5750505090806001929901940194019295949391906126e7565b919380600192948651815201940192018893929161271b565b60005b8381106127675750506000910152565b8181015183820152602001612757565b6001600160a01b0360335416330361278b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b1561281e57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b67ffffffffffffffff81116108f257604052565b90601f8019910116810190811067ffffffffffffffff8211176108f257604052565b67ffffffffffffffff81116108f25760051b60200190565b60005b8281106128e557505050565b6060828201526020016128d9565b90612928612900836128be565b61290d604051918261289c565b83815260208194612920601f19916128be565b0191016128d6565b565b60001981146129395760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156126555760051b0190565b356001600160a01b03811681036102d15790565b7f800000000000000000000000000000000000000000000000000000000000000081146129395760000390565b9190820391821161293957565b6001600160801b03918216908216039190821161293957565b9190820180921161293957565b9190916001600160801b038080941691160191821161293957565b60209081818403126102d15780519067ffffffffffffffff82116102d157019180601f840112156102d1578251612a24816128be565b93612a32604051958661289c565b818552838086019260051b8201019283116102d1578301905b828210612a59575050505090565b81518152908301908301612a4b565b80518210156126555760209160051b010190565b6001600160a01b0380911660005260d16020526002604060002001541615612aa057565b606460405162461bcd60e51b815260206004820152601d60248201527f566f7465723a2067617567654d616e61676572206e6f742065786973740000006044820152fd5b908160209103126102d1575180151581036102d15790565b60cc5464ffffffffff808216421115612bbb5771ffffffffffffffffffffffffff0000000000612b32612b2d612d37565b61303e565b60281b16807fffffffffffffffffffffffffffff00000000000000000000000000ffffffffff84161760cc557fff000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffff000000000000000000000000000000000000612baa612b2d612e1b565b60901b16924216931617171760cc55565b5050565b60cc546001600160a01b03612beb6120316001600160681b039384808260901c169160281c1686612f0b565b921660005260d16020526040600020916001600160801b036001840191166fffffffffffffffffffffffffffffffff1982541617905560cc5460281c16815490806001600160681b031983161783557fffffffffffff000000000000000000000000000000000000000000000000000079ffffffffffffffffffffffffff0000000000000000000000000060cc5460281c16921617179055565b9061ffff8092166103e80391821161293957565b67ffffffffffffffff81116108f257601f01601f191660200190565b8115612cbf570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561293957565b64ffffffffff8060ce5416804210612d325762093a8080612d0983426129a0565b04600181018091116129395781810291818304149015171561293957612d2e916129c6565b1690565b905090565b60cc5464ffffffffff8116804211801590612e0e575b8015612e02575b612df257612d65612d9191426129a0565b61ffff612d8660ce54926affffffffffffffffffffff8460281c1690612cd5565b9160801c1690612cd5565b9064e8d4a5100091828102928184041490151715612939576001600160681b036103e8612ddc612de79460cd5460801c670de0b6b3a764000080821015600014612dea575090612cb5565b049160281c166129c6565b90565b905090612cb5565b5060281c6001600160681b031690565b5060ff60975416612d54565b5060cd5460801c15612d4d565b60cc5464ffffffffff8116804211801590612ef8575b8015612eec575b612edc57612e49612e8091426129a0565b612e6760ce54916affffffffffffffffffffff8360281c1690612cd5565b90612e7961ffff809260801c16612c85565b1690612cd5565b9064e8d4a5100091828102928184041490151715612939576001600160681b036103e8612ed1612de7946001600160801b0360cd5416670de0b6b3a764000080821015600014612dea575090612cb5565b049160901c166129c6565b5060901c6001600160681b031690565b5060ff60975416612e38565b506001600160801b0360cd541615612e31565b6001600160a01b03169160009183835260209260d184526001600160681b0393612f3d604093868585205416906129a0565b9386835260cf825264e8d4a510009081612f646001600160801b0397888888205416612cd5565b049688855260d184526001868620015460ff8160801c1615612fd4575060019389989693612fc1612fae889560d195612de79e612fcf9d9b528686528888205460681c16906129a0565b8b865260cf84528686205460801c612cd5565b0498835252200154166129c6565b6129c6565b95505050505050612de79350166129c6565b6001600160801b0390818111612ffa571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b6001600160681b0390818111613052571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313034206f766572666c6f77000000000000000000000000000000006044820152fdfea26469706673582212200d3ca253c538bb708f69552db6e1cf70e922d53bf4433c234b41bcd95e7d85e264736f6c63430008120033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "claimBribes(address[])": {
        "details": "This function looks safe from re-entrancy attack"
      },
      "distribute(address)": {
        "details": "This function looks safe from re-entrancy attack"
      },
      "emergencyTokenWithdraw(address)": {
        "details": "only to be called by owner"
      },
      "initialize(address,address,uint88,uint40,uint40,uint16)": {
        "details": "Note: set bribe factory after initialization"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBribeFactory(address)": {
        "details": "to revoke bribe factory, set its address to 0"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vote(address[],int256[])": {
        "params": {
          "_deltas": "change of vote for each LP tokens",
          "_lpVote": "address to LP tokens to vote"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(address,address,address)": {
        "notice": "Add LP token into the Voter"
      },
      "claimBribes(address[])": {
        "notice": "Claim bribes for LP tokens"
      },
      "emergencyTokenWithdraw(address)": {
        "notice": "avoids loosing funds in case there is any tokens sent to this contract"
      },
      "emergencyWomWithdraw()": {
        "notice": "In case we need to manually migrate WOM funds from Voter Sends all remaining wom from the contract to the owner"
      },
      "getNextEpochStartTime()": {
        "notice": "Get the start timestamp of the next epoch"
      },
      "getUserVotes(address,address)": {
        "notice": "getter function to return vote of a LP token for a user"
      },
      "lpTokenLength()": {
        "notice": "returns LP tokens length"
      },
      "pauseAll()": {
        "notice": "Pause vote accumulation of WOM tokens for all assets Users can still vote/unvote and receive bribes."
      },
      "pauseVoteEmission(address)": {
        "notice": "Pause vote emission of WOM tokens for the gauge. Users can still vote/unvote and receive bribes."
      },
      "pendingBribes(address[],address)": {
        "notice": "Get pending bribes for LP tokens"
      },
      "pendingWom(address)": {
        "notice": "Amount of pending WOM for the LP token"
      },
      "resumeAll()": {
        "notice": "Resume vote accumulation of WOM tokens for all assets"
      },
      "resumeVoteEmission(address)": {
        "notice": "Resume vote accumulation of WOM tokens for the gauge."
      },
      "setBaseAllocation(uint16)": {
        "notice": "update the base and vote partition"
      },
      "setBribe(address,address)": {
        "notice": "get bribe address for LP token"
      },
      "setGauge(address,address)": {
        "notice": "get gaugeManager address for LP token"
      },
      "vote(address[],int256[])": {
        "notice": "Vote and unvote WOM emission for LP tokens. User can vote/unvote a un-whitelisted pool. But no WOM will be emitted. Bribes are also distributed by the Bribe contract. Amount of vote should be checked by veWom.vote(). This can also used to distribute bribes when _deltas are set to 0"
      },
      "voteAllocation()": {
        "notice": "Read-only functions"
      }
    },
    "notice": "Voter can handle gauge voting. WOM rewards are distributed to different gauges (MasterWombat->LpToken pair) according to the base allocation & voting weights. veWOM holders can participate in gauge voting to determine `voteAllocation()` of the WOM emission. They can  allocate their vote (1 veWOM = 1 vote) to one or more gauges. WOM accumulation to a gauge is proportional to the amount of vote it receives. Real-time WOM accumulation and epoch-based WOM distribution: Voting gauges accumulates WOM seconds by seconds according to the voting weight. When a user applies new allocation for their votes, accumulation rate of WOM of the gauge updates immediately. Note that only whitelisted gauges are able to accumulate WOM from users' votes. Accumulated WOM is distributed to LP in the next epoch at an even rate. 1 epoch last for 7 days. Base Allocation: `baseAllocation` of WOM emissions is distributed to gauges according to the allocation by `owner`. Other WOM emissions are deteremined by `votes` of veWOM holders. Flow to distribute reward: 1. `Voter.distribute(lpToken)` is called 2. WOM index (`baseIndex` and `voteIndex`) is updated and corresponding WOM accumulated over this period (`GaugeInfo.claimable`)    is updated. 3. At the beginning of each epoch, `GaugeInfo.claimable` amount of WOM is sent to the respective gauge    via `MasterWombat.notifyRewardAmount(IERC20 _lpToken, uint256 _amount)` 4. MasterWombat will update the corresponding `pool.rewardRate` and `pool.periodFinish` Bribe Bribe is natively supported by `Voter`. Third Party protocols can bribe to attract more votes from veWOM holders to increase WOM emissions to their tokens. Flow of bribe: 1. When users vote/unvote, `bribe.onVote` is called. The bribe contract works similar to `MultiRewarderPerSec`. Note: This should also works with boosted pool. But it doesn't work with interest rate model Note 2: Please refer to the comment of MasterWombatV3.notifyRewardAmount for front-running risk",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 763,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 766,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1507,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 635,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 755,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1066,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1135,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 946,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 1051,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 42869,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "wom",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20)6805"
      },
      {
        "astId": 42872,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "veWom",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IVe)42832"
      },
      {
        "astId": 42876,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "lpTokens",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_contract(IERC20)6805)dyn_storage"
      },
      {
        "astId": 42878,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "204",
        "type": "t_uint40"
      },
      {
        "astId": 42880,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "baseIndex",
        "offset": 5,
        "slot": "204",
        "type": "t_uint104"
      },
      {
        "astId": 42882,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "voteIndex",
        "offset": 18,
        "slot": "204",
        "type": "t_uint104"
      },
      {
        "astId": 42884,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "totalWeight",
        "offset": 0,
        "slot": "205",
        "type": "t_uint128"
      },
      {
        "astId": 42886,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "totalAllocPoint",
        "offset": 16,
        "slot": "205",
        "type": "t_uint128"
      },
      {
        "astId": 42888,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "firstEpochStartTime",
        "offset": 0,
        "slot": "206",
        "type": "t_uint40"
      },
      {
        "astId": 42890,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "womPerSec",
        "offset": 5,
        "slot": "206",
        "type": "t_uint88"
      },
      {
        "astId": 42892,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "baseAllocation",
        "offset": 16,
        "slot": "206",
        "type": "t_uint16"
      },
      {
        "astId": 42899,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "weights",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_contract(IERC20)6805,t_struct(GaugeWeight)45280_storage)"
      },
      {
        "astId": 42907,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "votes",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)6805,t_uint256))"
      },
      {
        "astId": 42914,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "infos",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_contract(IERC20)6805,t_struct(GaugeInfo)42860_storage)"
      },
      {
        "astId": 42916,
        "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
        "label": "bribeFactory",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)6805)dyn_storage": {
        "base": "t_contract(IERC20)6805",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBribe)44719": {
        "encoding": "inplace",
        "label": "contract IBribe",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)6805": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGauge)45275": {
        "encoding": "inplace",
        "label": "contract IGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IVe)42832": {
        "encoding": "inplace",
        "label": "contract IVe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)6805,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)6805,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)6805,t_struct(GaugeInfo)42860_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6805",
        "label": "mapping(contract IERC20 => struct Voter.GaugeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GaugeInfo)42860_storage"
      },
      "t_mapping(t_contract(IERC20)6805,t_struct(GaugeWeight)45280_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6805",
        "label": "mapping(contract IERC20 => struct IVoter.GaugeWeight)",
        "numberOfBytes": "32",
        "value": "t_struct(GaugeWeight)45280_storage"
      },
      "t_mapping(t_contract(IERC20)6805,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6805",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(GaugeInfo)42860_storage": {
        "encoding": "inplace",
        "label": "struct Voter.GaugeInfo",
        "members": [
          {
            "astId": 42845,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "supplyBaseIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 42847,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "supplyVoteIndex",
            "offset": 13,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 42849,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "nextEpochStartTime",
            "offset": 26,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 42851,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "claimable",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 42853,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "whitelist",
            "offset": 16,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 42856,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "gaugeManager",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IGauge)45275"
          },
          {
            "astId": 42859,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "bribe",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IBribe)44719"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(GaugeWeight)45280_storage": {
        "encoding": "inplace",
        "label": "struct IVoter.GaugeWeight",
        "members": [
          {
            "astId": 45277,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "allocPoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 45279,
            "contract": "contracts/wombat-governance/gauge/Voter.sol:Voter",
            "label": "voteWeight",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      }
    }
  }
}