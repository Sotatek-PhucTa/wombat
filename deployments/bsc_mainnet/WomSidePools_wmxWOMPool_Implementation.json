{
  "address": "0x6ADB50FD76f3041AE8b40A80e8C8b94B67A7EBF5",
  "abi": [
    {
      "inputs": [],
      "name": "CORE_UNDERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_AMOUNT_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_COV_RATIO_LIMIT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_DIRECT_REVERSE_QUOTE_NOT_SUPPORTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_SAME_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetAmpFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpDividendRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retentionRatio",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetHaircutRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetMasterWombat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetMintFeeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferTipBucket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnpausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addressOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ampFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantInUint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDividendRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "pauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "toAmount",
          "type": "int256"
        }
      ],
      "name": "quoteAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAmpFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "startCovRatio_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "endCovRatio_",
          "type": "uint128"
        }
      ],
      "name": "setCovRatioFeeParam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev_",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpDividendRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterWombat_",
          "type": "address"
        }
      ],
      "name": "setMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFeeThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setMintFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tipBucketBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferTipBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unpauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcddb8e999febf17521b9da67bfc265e34e3453d692005489b96939c83de7fe55",
  "receipt": {
    "to": null,
    "from": "0x8c6644415b3F3CD7FC0A453c5bE3d3306Fe0b2F9",
    "contractAddress": "0x6ADB50FD76f3041AE8b40A80e8C8b94B67A7EBF5",
    "transactionIndex": 2,
    "gasUsed": "5231452",
    "logsBloom": "0x
    "blockHash": "0x1c88dbda3a06ee0c82b8370d8e9d8d2acaa98bfd297e1f71f228e4f1ebc476d6",
    "transactionHash": "0xcddb8e999febf17521b9da67bfc265e34e3453d692005489b96939c83de7fe55",
    "logs": [],
    "blockNumber": 22476384,
    "cumulativeGasUsed": "5288531",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4f653bf95237391f7627989167db6d6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CORE_UNDERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_AMOUNT_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_COV_RATIO_LIMIT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_DIRECT_REVERSE_QUOTE_NOT_SUPPORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_SAME_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetAmpFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpDividendRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retentionRatio\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHaircutRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMasterWombat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMintFeeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferTipBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addressOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantInUint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"toAmount\",\"type\":\"int256\"}],\"name\":\"quoteAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"}],\"name\":\"setAmpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"startCovRatio_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endCovRatio_\",\"type\":\"uint128\"}],\"name\":\"setCovRatioFeeParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterWombat_\",\"type\":\"address\"}],\"name\":\"setMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeThreshold_\",\"type\":\"uint256\"}],\"name\":\"setMintFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tipBucketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTipBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unpauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"addressOfAsset(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"details\":\"Asset needs to be created and added to pool before any operation. This function assumes tax free token.\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"exchangeRate(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"xr\":\"The exchange rate of LP token\"}},\"mintFee(address)\":{\"params\":{\"token\":\"The address of the token to collect fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"pauseAsset(address)\":{\"details\":\"pause asset, restricting deposit and swap operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quoteAmountIn(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromToken\":\"The initial ERC20 token\",\"toAmount\":\"The given output amount\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"amountIn\":\"The input amount required\",\"haircut\":\"The haircut that would be applied\"}},\"quotePotentialDeposit(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"amount\":\"The amount to deposit\",\"token\":\"The token to deposit by user\"},\"returns\":{\"liquidity\":\"The potential liquidity user would receive\",\"reward\":\"reward\"}},\"quotePotentialSwap(address,address,int256)\":{\"details\":\"In reverse quote, the haircut is in the `fromAsset`\",\"params\":{\"fromAmount\":\"The given input amount\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"fee\":\"The fee that would be applied\"}},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"details\":\"take into account high cov ratio fee\"},\"removeAsset(address)\":{\"details\":\"Can only be called by owner\",\"params\":{\"token\":\"The address of token to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAmpFactor(uint256)\":{\"params\":{\"ampFactor_\":\"new pool's amplification factor\"}},\"setDev(address)\":{\"params\":{\"dev_\":\"new contract dev address\"}},\"setFeeTo(address)\":{\"params\":{\"feeTo_\":\"new fee beneficiary\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"details\":\"This function assumes tax free token.\",\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"unpauseAsset(address)\":{\"details\":\"unpause asset, enabling deposit and swap operations\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity to be withdrawn (in fromToken decimal)\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"toAmount\":\"The total amount withdrawn\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"AssetRemoved(address,address)\":{\"notice\":\"An event thats emitted when asset is removed from Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"addressOfAsset(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"ampFactor()\":{\"notice\":\"Amplification factor\"},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"dev()\":{\"notice\":\"Dev address\"},\"exchangeRate(address)\":{\"notice\":\"Returns the exchange rate of the LP token\"},\"getTokens()\":{\"notice\":\"Return list of tokens in the pool\"},\"haircutRate()\":{\"notice\":\"Haircut rate\"},\"initialize(uint256,uint256)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpDividendRatio()\":{\"notice\":\"LP dividend ratio : the ratio of haircut that should distribute to LP\"},\"mintFee(address)\":{\"notice\":\"Send fee collected to the fee beneficiary\"},\"mintFeeThreshold()\":{\"notice\":\"The threshold to mint fee (unit: WAD)\"},\"quoteAmountIn(address,address,int256)\":{\"notice\":\"Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)\"},\"quotePotentialDeposit(address,uint256)\":{\"notice\":\"Quotes potential deposit from pool\"},\"quotePotentialSwap(address,address,int256)\":{\"notice\":\"Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage).\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"removeAsset(address)\":{\"notice\":\"Removes asset from asset struct\"},\"retentionRatio()\":{\"notice\":\"Retention ratio: the ratio of haircut that should stay in the pool\"},\"setAmpFactor(uint256)\":{\"notice\":\"Changes the pools amplification factor. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setFeeTo(address)\":{\"notice\":\"Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setMintFeeThreshold(uint256)\":{\"notice\":\"Set min fee to mint\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Enables withdrawing liquidity from an asset using LP from a different asset\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/HighCovRatioFeePool.sol\":\"HighCovRatioFeePool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc4fad3a1df63344db686f3764208f5e62592346ec3bc5a7fcb161f9d1b1e59b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf2611a58f79def15405a1144303fbdcdbac177d3a2b291baec538fc4d04a5c09\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x204e0fb5201de1f4fced816e1044f3379efb229caf46d855a7927fbf823bcd89\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10**(18 - d);\\n        } else if (d > 18) {\\n            return (x / (10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * 10**(d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xf1ea82815cfaf6646386567a515dbe20763438ce18ccc2e7d165242d75646503\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10**18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10**(18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10**(d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x779eb90c3ebaa99535702d097e2108e09116a242a8ad00b7bdf86411386e13d4\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV2\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n */\\ncontract CoreV2 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n    int256 internal constant WAD_I = 10**18;\\n    uint256 internal constant WAD = 10**18;\\n\\n    error CORE_UNDERFLOW();\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function _swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) internal pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        if (Dy < 0) {\\n            quote = uint256(-Dy);\\n        } else {\\n            quote = uint256(Dy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(\\n        int256 Lx,\\n        int256 rx,\\n        int256 Ly,\\n        int256 ry,\\n        int256 A\\n    ) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(\\n        int256 Lx,\\n        int256 Ly,\\n        int256 rx_,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256) {\\n        return Lx.wmul(rx_ - A.wdiv(rx_)).wdiv(Ly) - D.wdiv(Ly);\\n    }\\n\\n    /**\\n     * @return v positive value indicates a reward and negative value indicates a fee\\n     */\\n    function depositRewardImpl(\\n        int256 D,\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 v) {\\n        if (L_i == 0) {\\n            // early return in case of div of 0\\n            return 0;\\n        }\\n        if (delta_i + SL == 0) {\\n            return L_i - A_i;\\n        }\\n\\n        int256 r_i_ = _targetedCovRatio(SL, delta_i, A_i, L_i, D, A);\\n        v = A_i + delta_i - (L_i + delta_i).wmul(r_i_);\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = _equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _equilCovRatio(\\n        int256 D,\\n        int256 SL,\\n        int256 A\\n    ) internal pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    function _newEquilCovRatio(\\n        int256 er,\\n        int256 SL,\\n        int256 delta_i\\n    ) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(\\n        int256 er_,\\n        int256 A,\\n        int256 SL,\\n        int256 delta_i\\n    ) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice TODO (if any) from Yellow Paper (Haircut).\\n     * @dev Applies haircut rate to amount\\n     * @param amount The amount that will receive the discount\\n     * @param rate The rate to be applied\\n     * @return The result of operation.\\n     */\\n    function _haircut(uint256 amount, uint256 rate) internal pure returns (uint256) {\\n        return amount.wmul(rate);\\n    }\\n}\\n\",\"keccak256\":\"0xc5d08951cf3c33d7e7604db9bc43ae488e0bbacd85e8be1bb253b185bddcf662\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/HighCovRatioFeePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport './Pool.sol';\\n\\ncontract HighCovRatioFeePool is Pool {\\n    using DSMath for uint256;\\n\\n    uint128 startCovRatio; // 1.5\\n    uint128 endCovRatio; // 1.8\\n\\n    error WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n    error WOMBAT_DIRECT_REVERSE_QUOTE_NOT_SUPPORTED();\\n\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public override {\\n        super.initialize(ampFactor_, haircutRate_);\\n        startCovRatio = 15e17;\\n        endCovRatio = 18e17;\\n    }\\n\\n    function setCovRatioFeeParam(uint128 startCovRatio_, uint128 endCovRatio_) external onlyOwner {\\n        if (startCovRatio_ < 1e18 || startCovRatio_ > endCovRatio_) revert WOMBAT_INVALID_VALUE();\\n\\n        startCovRatio = startCovRatio_;\\n        endCovRatio = endCovRatio_;\\n    }\\n\\n    /**\\n     * @notice Calculate the high cov ratio fee of the from-asset in a swap.\\n     * @dev When cov ratio is in the range [startCovRatio, endCovRatio], the marginal cov ratio is\\n     * (r - startCovRatio) / (endCovRatio - startCovRatio). Here we approximate the high cov ratio cut\\n     * by calculating the \\\"average\\\" fee.\\n     * Note: `finalCovRatio` should be greater than `initCovRatio`\\n     */\\n    function _highCovRatioFee(uint256 initCovRatio, uint256 finalCovRatio) internal view returns (uint256 fee) {\\n        if (finalCovRatio > endCovRatio) {\\n            // invalid swap\\n            revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n        } else if (finalCovRatio <= startCovRatio) {\\n            return 0;\\n        }\\n\\n        // 1. Calculate the area of fee(r) = (r - startCovRatio) / (endCovRatio - startCovRatio)\\n        // when r increase from initCovRatio to finalCovRatio\\n        // 2. Then multiply it by (endCovRatio - startCovRatio) / (finalCovRatio - initCovRatio)\\n        // to get the average fee over the range\\n        uint256 a = initCovRatio <= startCovRatio ? 0 : (initCovRatio - startCovRatio) * (initCovRatio - startCovRatio);\\n        uint256 b = (finalCovRatio - startCovRatio) * (finalCovRatio - startCovRatio);\\n\\n        fee = ((b - a) / (finalCovRatio - initCovRatio) / 2).wdiv(endCovRatio - startCovRatio);\\n    }\\n\\n    /**\\n     * @dev Exact output swap should only used as off-chain view function as it is a gas monster\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view override returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = super._quoteFrom(fromAsset, toAsset, fromAmount);\\n\\n        if (fromAmount >= 0) {\\n            // normal quote\\n            uint256 fromAssetCash = fromAsset.cash();\\n            uint256 fromAssetLiability = fromAsset.liability();\\n            uint256 finalFromAssetCovRatio = (fromAssetCash + uint256(fromAmount)).wdiv(fromAssetLiability);\\n\\n            if (finalFromAssetCovRatio > startCovRatio) {\\n                // charge high cov ratio fee\\n                uint256 highCovRatioFee = _highCovRatioFee(\\n                    fromAssetCash.wdiv(fromAssetLiability),\\n                    finalFromAssetCovRatio\\n                ).wmul(actualToAmount);\\n\\n                actualToAmount -= highCovRatioFee;\\n                haircut += highCovRatioFee;\\n            }\\n        } else {\\n            // reverse quote\\n            uint256 toAssetCash = toAsset.cash();\\n            uint256 toAssetLiability = toAsset.liability();\\n            uint256 finalToAssetCovRatio = (toAssetCash + uint256(actualToAmount)).wdiv(toAssetLiability);\\n            if (finalToAssetCovRatio <= startCovRatio) {\\n                // happy path: no high cov ratio fee is charged\\n                return (actualToAmount, haircut);\\n            } else if (toAssetCash.wdiv(toAssetLiability) >= endCovRatio) {\\n                // the to-asset exceeds it's cov ratio limit, further swap to increase cov ratio is impossible\\n                revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n            }\\n\\n            // reverse quote: cov ratio of the to-asset exceed endCovRatio. direct reverse quote is not supported\\n            // we binary search for a upper bound\\n            actualToAmount = _findUpperBound(toAsset, fromAsset, uint256(-fromAmount));\\n            (, haircut) = _quoteFrom(toAsset, fromAsset, int256(actualToAmount));\\n        }\\n    }\\n\\n    /**\\n     * @notice Binary search to find the upper bound of `fromAmount` required to swap `fromAsset` to `toAmount` of `toAsset`\\n     * @dev This function should only used as off-chain view function as it is a gas monster\\n     */\\n    function _findUpperBound(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 toAmount\\n    ) internal view returns (uint256 upperBound) {\\n        uint8 decimals = fromAsset.underlyingTokenDecimals();\\n        uint256 toWadFactor = DSMath.toWad(1, decimals);\\n        // the search value uses the same number of digits as the token\\n        uint256 high = ((fromAsset.liability() * uint256(endCovRatio)) / WAD - fromAsset.cash()).fromWad(decimals);\\n        uint256 low = 1;\\n\\n        // verify `high` is a valid upper bound\\n        uint256 quote;\\n        (quote, ) = _quoteFrom(fromAsset, toAsset, int256(high * toWadFactor));\\n        if (quote < toAmount) revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n        // Note: we might limit the maximum number of rounds if the request is always rejected by the RPC server\\n        while (low < high) {\\n            uint256 mid = (low + high) / 2;\\n            (quote, ) = _quoteFrom(fromAsset, toAsset, int256(mid * toWadFactor));\\n            if (quote >= toAmount) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high * toWadFactor;\\n    }\\n\\n    /**\\n     * @dev take into account high cov ratio fee\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view override returns (uint256 amount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        (amount, withdrewAmount) = _quotePotentialWithdrawFromOtherAsset(fromToken, toToken, liquidity);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        uint256 fromAssetCash = fromAsset.cash() - withdrewAmount;\\n        uint256 fromAssetLiability = fromAsset.liability() - liquidity;\\n        uint256 finalFromAssetCovRatio = (fromAssetCash + uint256(withdrewAmount)).wdiv(fromAssetLiability);\\n\\n        if (finalFromAssetCovRatio > startCovRatio) {\\n            uint256 highCovRatioFee = _highCovRatioFee(fromAssetCash.wdiv(fromAssetLiability), finalFromAssetCovRatio)\\n                .wmul(amount);\\n\\n            amount -= highCovRatioFee;\\n        }\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        amount = amount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n}\\n\",\"keccak256\":\"0x252397eafa39e106327f0d35477917501ea81cb1ec67034d49e3a6dbf405fa37\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PausableAssets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\n/**\\n * @title PausableAssets\\n * @notice Handles assets pause and unpause of Wombat protocol.\\n * @dev Allows pausing and unpausing of deposit and swap operations\\n */\\ncontract PausableAssets {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event PausedAsset(address asset, address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event UnpausedAsset(address asset, address account);\\n\\n    mapping(address => bool) private _pausedAssets;\\n\\n    error WOMBAT_ASSET_ALREADY_PAUSED();\\n    error WOMBAT_ASSET_NOT_PAUSED();\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function requireAssetNotPaused(address asset) internal view {\\n        if (_pausedAssets[asset]) revert WOMBAT_ASSET_ALREADY_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function requireAssetPaused(address asset) internal view {\\n        if (!_pausedAssets[asset]) revert WOMBAT_ASSET_NOT_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Triggers paused state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function _pauseAsset(address asset) internal {\\n        requireAssetNotPaused(asset);\\n        _pausedAssets[asset] = true;\\n        emit PausedAsset(asset, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function _unpauseAsset(address asset) internal {\\n        requireAssetPaused(asset);\\n        _pausedAssets[asset] = false;\\n        emit UnpausedAsset(asset, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe12faf6a6814fa9734798b98dc025a0e2b17c2a16a0de3d4e6a0a733ccbcd7a6\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './CoreV2.sol';\\nimport '../interfaces/IAsset.sol';\\nimport './PausableAssets.sol';\\nimport '../../wombat-governance/interfaces/IMasterWombat.sol';\\nimport '../interfaces/IPool.sol';\\n\\n/**\\n * @title Pool\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n * Note: All variables are 18 decimals, except from that of underlying tokens\\n */\\ncontract Pool is\\n    Initializable,\\n    IPool,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PausableAssets,\\n    CoreV2\\n{\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    /// @notice Asset Map struct holds assets\\n    struct AssetMap {\\n        address[] keys;\\n        mapping(address => IAsset) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    /* Storage */\\n\\n    /// @notice Amplification factor\\n    uint256 public ampFactor;\\n\\n    /// @notice Haircut rate\\n    uint256 public haircutRate;\\n\\n    /// @notice Retention ratio: the ratio of haircut that should stay in the pool\\n    uint256 public retentionRatio;\\n\\n    /// @notice LP dividend ratio : the ratio of haircut that should distribute to LP\\n    uint256 public lpDividendRatio;\\n\\n    /// @notice The threshold to mint fee (unit: WAD)\\n    uint256 public mintFeeThreshold;\\n\\n    /// @notice Dev address\\n    address public dev;\\n\\n    address public feeTo;\\n\\n    address public masterWombat;\\n\\n    /// @notice Dividend collected by each asset (unit: WAD)\\n    mapping(IAsset => uint256) internal _feeCollected;\\n\\n    /// @notice A record of assets inside Pool\\n    AssetMap internal _assets;\\n\\n    /* Events */\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when asset is removed from Pool\\n    event AssetRemoved(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    event SetDev(address addr);\\n    event SetMasterWombat(address addr);\\n    event SetFeeTo(address addr);\\n\\n    event SetMintFeeThreshold(uint256 value);\\n    event SetFee(uint256 lpDividendRatio, uint256 retentionRatio);\\n    event SetAmpFactor(uint256 value);\\n    event SetHaircutRate(uint256 value);\\n\\n    event FillPool(address token, uint256 amount);\\n    event TransferTipBucket(address token, uint256 amount, address to);\\n\\n    /* Errors */\\n\\n    error WOMBAT_FORBIDDEN();\\n    error WOMBAT_EXPIRED();\\n\\n    error WOMBAT_ASSET_NOT_EXISTS();\\n    error WOMBAT_ASSET_ALREADY_EXIST();\\n\\n    error WOMBAT_ZERO_ADDRESS();\\n    error WOMBAT_ZERO_AMOUNT();\\n    error WOMBAT_ZERO_LIQUIDITY();\\n    error WOMBAT_INVALID_VALUE();\\n    error WOMBAT_SAME_ADDRESS();\\n    error WOMBAT_AMOUNT_TOO_LOW();\\n    error WOMBAT_CASH_NOT_ENOUGH();\\n\\n    /* Pesudo modifiers to safe gas */\\n\\n    function _checkLiquidity(uint256 liquidity) internal pure {\\n        if (liquidity == 0) revert WOMBAT_ZERO_LIQUIDITY();\\n    }\\n\\n    function _checkAddress(address to) internal pure {\\n        if (to == address(0)) revert WOMBAT_ZERO_ADDRESS();\\n    }\\n\\n    function _checkSameAddress(address from, address to) internal pure {\\n        if (from == to) revert WOMBAT_SAME_ADDRESS();\\n    }\\n\\n    function _checkAmount(uint256 minAmt, uint256 amt) internal pure {\\n        if (minAmt > amt) revert WOMBAT_AMOUNT_TOO_LOW();\\n    }\\n\\n    function _ensure(uint256 deadline) internal view {\\n        if (deadline < block.timestamp) revert WOMBAT_EXPIRED();\\n    }\\n\\n    function _onlyDev() internal view {\\n        if (dev != msg.sender) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /* Construtor and setters */\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public virtual initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        ampFactor = ampFactor_;\\n        haircutRate = haircutRate_;\\n\\n        lpDividendRatio = WAD;\\n\\n        dev = msg.sender;\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external nonReentrant {\\n        _onlyDev();\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external nonReentrant {\\n        _onlyDev();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev pause asset, restricting deposit and swap operations\\n     */\\n    function pauseAsset(address token) external nonReentrant {\\n        _onlyDev();\\n        _pauseAsset(token);\\n    }\\n\\n    /**\\n     * @dev unpause asset, enabling deposit and swap operations\\n     */\\n    function unpauseAsset(address token) external nonReentrant {\\n        _onlyDev();\\n        _unpauseAsset(token);\\n    }\\n\\n    // Setters //\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev_ new contract dev address\\n     */\\n    function setDev(address dev_) external onlyOwner {\\n        _checkAddress(dev_);\\n        dev = dev_;\\n        emit SetDev(dev_);\\n    }\\n\\n    function setMasterWombat(address masterWombat_) external onlyOwner {\\n        _checkAddress(masterWombat_);\\n        masterWombat = masterWombat_;\\n        emit SetMasterWombat(masterWombat_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools amplification factor. Can only be set by the contract owner.\\n     * @param ampFactor_ new pool's amplification factor\\n     */\\n    function setAmpFactor(uint256 ampFactor_) external onlyOwner {\\n        if (ampFactor_ > WAD) revert WOMBAT_INVALID_VALUE(); // ampFactor_ should not be set bigger than 1\\n        ampFactor = ampFactor_;\\n        emit SetAmpFactor(ampFactor_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        if (haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE(); // haircutRate_ should not be set bigger than 1\\n        haircutRate = haircutRate_;\\n        emit SetHaircutRate(haircutRate_);\\n    }\\n\\n    function setFee(uint256 lpDividendRatio_, uint256 retentionRatio_) external onlyOwner {\\n        if (retentionRatio_ + lpDividendRatio_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        mintAllFee();\\n        retentionRatio = retentionRatio_;\\n        lpDividendRatio = lpDividendRatio_;\\n        emit SetFee(lpDividendRatio_, retentionRatio_);\\n    }\\n\\n    /**\\n     * @notice Changes the fee beneficiary. Can only be set by the contract owner.\\n     * This value cannot be set to 0 to avoid unsettled fee.\\n     * @param feeTo_ new fee beneficiary\\n     */\\n    function setFeeTo(address feeTo_) external onlyOwner {\\n        _checkAddress(feeTo_);\\n        feeTo = feeTo_;\\n        emit SetFeeTo(feeTo_);\\n    }\\n\\n    /**\\n     * @notice Set min fee to mint\\n     */\\n    function setMintFeeThreshold(uint256 mintFeeThreshold_) external onlyOwner {\\n        mintFeeThreshold = mintFeeThreshold_;\\n        emit SetMintFeeThreshold(mintFeeThreshold_);\\n    }\\n\\n    /* Assets */\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner nonReentrant {\\n        _checkAddress(asset);\\n        _checkAddress(token);\\n\\n        if (_containsAsset(token)) revert WOMBAT_ASSET_ALREADY_EXIST();\\n        _assets.values[token] = IAsset(asset);\\n        _assets.indexOf[token] = _assets.keys.length;\\n        _assets.keys.push(token);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Removes asset from asset struct\\n     * @dev Can only be called by owner\\n     * @param token The address of token to remove\\n     */\\n    function removeAsset(address token) external onlyOwner {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n\\n        address asset = address(_getAsset(token));\\n        delete _assets.values[token];\\n\\n        uint256 index = _assets.indexOf[token];\\n        uint256 lastIndex = _assets.keys.length - 1;\\n        address lastKey = _assets.keys[lastIndex];\\n\\n        _assets.indexOf[lastKey] = index;\\n        delete _assets.indexOf[token];\\n\\n        _assets.keys[index] = lastKey;\\n        _assets.keys.pop();\\n\\n        emit AssetRemoved(token, asset);\\n    }\\n\\n    /**\\n     * @notice Return list of tokens in the pool\\n     */\\n    function getTokens() external view override returns (address[] memory) {\\n        return _assets.keys;\\n    }\\n\\n    /**\\n     * @notice get length of asset list\\n     * @return the size of the asset list\\n     */\\n    function _sizeOfAssetList() internal view returns (uint256) {\\n        return _assets.keys.length;\\n    }\\n\\n    /**\\n     * @notice Gets asset with token address key\\n     * @param key The address of token\\n     * @return the corresponding asset in state\\n     */\\n    function _getAsset(address key) internal view returns (IAsset) {\\n        return _assets.values[key];\\n    }\\n\\n    /**\\n     * @notice Gets key (address) at index\\n     * @param index the index\\n     * @return the key of index\\n     */\\n    function _getKeyAtIndex(uint256 index) internal view returns (address) {\\n        return _assets.keys[index];\\n    }\\n\\n    /**\\n     * @notice Looks if the asset is contained by the list\\n     * @param token The address of token to look for\\n     * @return bool true if the asset is in asset list, false otherwise\\n     */\\n    function _containsAsset(address token) internal view returns (bool) {\\n        return _assets.values[token] != IAsset(address(0));\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) internal view returns (IAsset) {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        return _assets.values[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function addressOfAsset(address token) external view override returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function _exactDepositToInEquil(IAsset asset, uint256 amount)\\n        internal\\n        view\\n        returns (\\n            uint256 lpTokenToMint,\\n            uint256 liabilityToMint,\\n            uint256 reward\\n        )\\n    {\\n        liabilityToMint = exactDepositLiquidityInEquilImpl(\\n            int256(amount),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToMint >= amount) {\\n            reward = liabilityToMint - amount;\\n        } else {\\n            // rounding error\\n            liabilityToMint = amount;\\n        }\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        // collect fee before deposit\\n        _mintFee(asset);\\n\\n        uint256 liabilityToMint;\\n        (liquidity, liabilityToMint, ) = _exactDepositToInEquil(asset, amount);\\n\\n        _checkLiquidity(liquidity);\\n        _checkAmount(minimumLiquidity, liquidity);\\n\\n        asset.addCash(amount);\\n        asset.addLiability(liabilityToMint);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation. This function assumes tax free token.\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external override nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        if (amount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(token);\\n\\n        IAsset asset = _assetOf(token);\\n        IERC20(token).safeTransferFrom(address(msg.sender), address(asset), amount);\\n\\n        if (!shouldStake) {\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, to);\\n        } else {\\n            _checkAddress(masterWombat);\\n            // deposit and stake on behalf of the user\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, address(this));\\n\\n            asset.approve(masterWombat, liquidity);\\n\\n            uint256 pid = IMasterWombat(masterWombat).getAssetPid(address(asset));\\n            IMasterWombat(masterWombat).depositFor(pid, liquidity, to);\\n        }\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential deposit from pool\\n     * @dev To be used by frontend\\n     * @param token The token to deposit by user\\n     * @param amount The amount to deposit\\n     * @return liquidity The potential liquidity user would receive\\n     * @return reward\\n     */\\n    function quotePotentialDeposit(address token, uint256 amount)\\n        external\\n        view\\n        override\\n        returns (uint256 liquidity, uint256 reward)\\n    {\\n        IAsset asset = _assetOf(token);\\n        (liquidity, , reward) = _exactDepositToInEquil(asset, amount.toWad(asset.underlyingTokenDecimals()));\\n    }\\n\\n    /* Withdraw */\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee\\n     */\\n    function _withdrawFrom(IAsset asset, uint256 liquidity)\\n        internal\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 liabilityToBurn,\\n            uint256 fee\\n        )\\n    {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        _checkLiquidity(liabilityToBurn);\\n\\n        amount = withdrawalAmountInEquilImpl(\\n            -int256(liabilityToBurn),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToBurn >= amount) {\\n            fee = liabilityToBurn - amount;\\n        } else {\\n            // rounding error\\n            amount = liabilityToBurn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @return amount The total amount withdrawn\\n     */\\n    function _withdraw(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 minimumAmount\\n    ) internal returns (uint256 amount) {\\n        // collect fee before withdraw\\n        _mintFee(asset);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, ) = _withdrawFrom(asset, liquidity);\\n        _checkAmount(minimumAmount, amount);\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount);\\n        asset.removeLiability(liabilityToBurn);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (asset.liability() > 0 && uint256(asset.cash()).wdiv(asset.liability()) < WAD / 100)\\n            revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        _checkAddress(to);\\n        _ensure(deadline);\\n\\n        IAsset asset = _assetOf(token);\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        amount = _withdraw(asset, liquidity, minimumAmount.toWad(decimals)).fromWad(decimals);\\n        asset.transferUnderlyingToken(to, amount);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Enables withdrawing liquidity from an asset using LP from a different asset\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity to be withdrawn (in fromToken decimal)\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return toAmount The total amount withdrawn\\n     */\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 toAmount) {\\n        _checkAddress(to);\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        // Withdraw and swap\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        IERC20(fromAsset).safeTransferFrom(address(msg.sender), address(fromAsset), liquidity);\\n        uint256 fromAmountInWad = _withdraw(fromAsset, liquidity, 0);\\n        (toAmount, ) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmountInWad,\\n            minimumAmount.toWad(toAsset.underlyingTokenDecimals())\\n        );\\n\\n        toAmount = toAmount.fromWad(toAsset.underlyingTokenDecimals());\\n        toAsset.transferUnderlyingToken(to, toAmount);\\n\\n        emit Withdraw(msg.sender, toToken, toAmount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return fee The fee that would be applied\\n     */\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        override\\n        returns (uint256 amount, uint256 fee)\\n    {\\n        _checkLiquidity(liquidity);\\n        IAsset asset = _assetOf(token);\\n        (amount, , fee) = _withdrawFrom(asset, liquidity);\\n        amount = amount.fromWad(asset.underlyingTokenDecimals());\\n    }\\n\\n    function _quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) internal view returns (uint256 amount, uint256 withdrewAmount) {\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        // quote withdraw\\n        (withdrewAmount, , ) = _withdrawFrom(fromAsset, liquidity);\\n\\n        // quote swap\\n        uint256 fromCash = uint256(fromAsset.cash()) - withdrewAmount;\\n        uint256 fromLiability = uint256(fromAsset.liability()) - liquidity;\\n\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            withdrewAmount = (withdrewAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = _swapQuoteFunc(\\n            int256(fromCash),\\n            int256(uint256(toAsset.cash())),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            int256(withdrewAmount),\\n            int256(ampFactor)\\n        );\\n        // remove haircut\\n        amount = idealToAmount - idealToAmount.wmul(haircutRate);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from other asset from the pool\\n     * @dev To be used by frontend\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity (amount of the lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return withdrewAmount The amount of the from-token that is withdrew\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual returns (uint256 amount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        (amount, withdrewAmount) = _quotePotentialWithdrawFromOtherAsset(fromToken, toToken, liquidity);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        amount = amount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Swap */\\n\\n    /**\\n     * @notice Return the scale factor that should applied on from-amounts in a swap given\\n     * the from-asset and the to-asset.\\n     * @dev not applicable to a plain pool\\n     */\\n    function _quoteFactor(\\n        IAsset, // fromAsset\\n        IAsset // toAsset\\n    ) internal view virtual returns (uint256) {\\n        // virtual function; do nothing\\n        return 1e18;\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view virtual returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 fromCash = uint256(fromAsset.cash());\\n        uint256 fromLiability = uint256(fromAsset.liability());\\n        uint256 toCash = uint256(toAsset.cash());\\n\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * int256(scaleFactor)) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = _swapQuoteFunc(\\n            int256(fromCash),\\n            int256(toCash),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            int256(ampFactor)\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert WOMBAT_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = (uint256(-fromAmount)).wmul(haircutRate);\\n        }\\n    }\\n\\n    /**\\n     * expect fromAmount and minimumToAmount to be in WAD\\n     */\\n    function _swap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = _quoteFrom(fromAsset, toAsset, int256(fromAmount));\\n        _checkAmount(minimumToAmount, actualToAmount);\\n\\n        _feeCollected[toAsset] += haircut;\\n\\n        fromAsset.addCash(fromAmount);\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        toAsset.removeCash(actualToAmount + haircut);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (uint256(toAsset.cash()).wdiv(toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @dev This function assumes tax free token.\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n\\n        (actualToAmount, haircut) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumToAmount.toWad(toDecimal)\\n        );\\n\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        haircut = haircut.fromWad(toDecimal);\\n\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @dev In reverse quote, the haircut is in the `fromAsset`\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The given input amount\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) public view override returns (uint256 potentialOutcome, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        fromAmount = fromAmount.toWad(fromAsset.underlyingTokenDecimals());\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        potentialOutcome = potentialOutcome.fromWad(toAsset.underlyingTokenDecimals());\\n        if (fromAmount >= 0) {\\n            haircut = haircut.fromWad(toAsset.underlyingTokenDecimals());\\n        } else {\\n            haircut = haircut.fromWad(fromAsset.underlyingTokenDecimals());\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param toAmount The given output amount\\n     * @return amountIn The input amount required\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view override returns (uint256 amountIn, uint256 haircut) {\\n        return quotePotentialSwap(toToken, fromToken, -toAmount);\\n    }\\n\\n    /* Queries */\\n\\n    /**\\n     * @notice Returns the exchange rate of the LP token\\n     * @param token The address of the token\\n     * @return xr The exchange rate of LP token\\n     */\\n    function exchangeRate(address token) external view returns (uint256 xr) {\\n        IAsset asset = _assetOf(token);\\n        if (asset.totalSupply() == 0) return WAD;\\n        return xr = uint256(asset.liability()).wdiv(uint256(asset.totalSupply()));\\n    }\\n\\n    function globalEquilCovRatio() external view returns (uint256 equilCovRatio, uint256 invariantInUint) {\\n        int256 invariant;\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        equilCovRatio = uint256(_equilCovRatio(invariant, SL, int256(ampFactor)));\\n        invariantInUint = uint256(invariant);\\n    }\\n\\n    function tipBucketBalance(address token) public view returns (uint256 balance) {\\n        IAsset asset = _assetOf(token);\\n        return\\n            asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) - asset.cash() - _feeCollected[asset];\\n    }\\n\\n    /* Utils */\\n\\n    // this function is used to move fund from tip bucket to the pool to keep r* = 1 as error accumulates\\n    // unit of amount should be in WAD\\n    function fillPool(address token, uint256 amount) external {\\n        _onlyDev();\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n            asset.cash() -\\n            _feeCollected[asset];\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.addCash(amount);\\n        emit FillPool(token, amount);\\n    }\\n\\n    // unit of amount should be in WAD\\n    function transferTipBucket(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOwner {\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = tipBucketBalance(token);\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.transferUnderlyingToken(to, amount.fromWad(asset.underlyingTokenDecimals()));\\n        emit TransferTipBucket(token, amount, to);\\n    }\\n\\n    function _globalInvariantFunc() internal view virtual returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += L_i;\\n            D += L_i.wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to send fee collected to the fee beneficiary\\n     * @param asset The address of the asset to collect fee\\n     */\\n    function _mintFee(IAsset asset) internal {\\n        uint256 feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0 || feeCollected < mintFeeThreshold) {\\n            // early return\\n            return;\\n        }\\n        {\\n            // dividend to veWOM\\n            uint256 dividend = feeCollected.wmul(WAD - lpDividendRatio - retentionRatio);\\n\\n            if (dividend > 0) {\\n                asset.transferUnderlyingToken(feeTo, dividend.fromWad(asset.underlyingTokenDecimals()));\\n            }\\n        }\\n        {\\n            // dividend to LP\\n            uint256 lpDividend = feeCollected.wmul(lpDividendRatio);\\n            if (lpDividend > 0) {\\n                // exact deposit to maintain r* = 1\\n                // increase the value of the LP token, i.e. assetsPerShare\\n                (, uint256 liabilityToMint, ) = _exactDepositToInEquil(asset, lpDividend);\\n                asset.addLiability(liabilityToMint);\\n                asset.addCash(lpDividend);\\n            }\\n        }\\n\\n        _feeCollected[asset] = 0;\\n    }\\n\\n    function mintAllFee() internal {\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send fee collected to the fee beneficiary\\n     * @param token The address of the token to collect fee\\n     */\\n    function mintFee(address token) external {\\n        _mintFee(_assetOf(token));\\n    }\\n}\\n\",\"keccak256\":\"0xe4d5b6876755ba88404730efc970d45555ef9b2a71a08c0c995853cf78944df9\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256 transfered,\\n            uint256[] memory rewards,\\n            uint256[] memory additionalRewards\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x4ed8f1f02ce578468e115e03a4f3671d13a273cad6e373a45a18af6041096444\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001757615e4a90816200001d8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c8063017b829214610383578063017e7e581461037a5780630705999d14610371578063070f81d91461036857806309a5fca31461035f5780630f91f06f146103565780633753b14a1461034d5780633bd61ba8146103445780633f4ba83a1461033b5780634a5e42b1146103325780634a6fee0e146103295780634fdd64e51461032057806352f7c988146103175780635c975abb1461030e5780635cfe092e1461030557806361858e23146102fc5780636281baef146102f35780636922d5ca146102ea578063715018a6146102e1578063815bfd29146102d85780638456cb59146102cf5780638a2dfe09146102c65780638da5cb5b146102bd578063907448ed146102b457806391cca3db146102ab57806393aeea02146102a25780639908fc8b146102995780639abacb41146102905780639e4416b714610287578063a4275ceb1461027e578063aa6ca80814610275578063d043c5651461026c578063d0dd0e5614610263578063d30ffeda1461025a578063d477f05f14610251578063da48999714610248578063dc3b7c8b1461023f578063e4a3011614610236578063e9249cc71461022d578063f2fde38b14610224578063f46901ed1461021b578063f57e84d514610212578063f8b49e72146102095763fca8f3081461020157600080fd5b61000e6129e5565b5061000e6129c5565b5061000e61295a565b5061000e6128c8565b5061000e612803565b5061000e6127d3565b5061000e612615565b5061000e6125f1565b5061000e6124ab565b5061000e612419565b5061000e6123f5565b5061000e6123d6565b5061000e61237b565b5061000e6122b3565b5061000e61201a565b5061000e611faf565b5061000e611ed2565b5061000e611c74565b5061000e611af2565b5061000e611aca565b5061000e611a33565b5061000e611a0b565b5061000e611853565b5061000e6117da565b5061000e6117bb565b5061000e61173c565b5061000e61171d565b5061000e611305565b5061000e611256565b5061000e611237565b5061000e611213565b5061000e611135565b5061000e61110b565b5061000e610ff9565b5061000e610dbe565b5061000e610ce9565b5061000e610cc1565b5061000e610c1b565b5061000e6109d5565b5061000e610793565b5061000e6104c8565b5061000e610436565b5061000e6103b6565b5061000e610397565b600091031261000e57565b503461000e57600060031936011261000e57602060ca54604051908152f35b503461000e57600060031936011261000e5760206001600160a01b0360d05416604051908152f35b600435906001600160a01b038216820361000e57565b606435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602060031936011261000e577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d60206104736103de565b6001600160a01b039061048b82603354163314612a02565b61049481613228565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d154161760d155604051908152a1005b503461000e5760408060031936011261000e576104e36103de565b906024356104ef6131a0565b6104f883613416565b906105f56001600160a01b038316926105ee6105d486517f99c91a640000000000000000000000000000000000000000000000000000000081526effffffffffffffffffffffffffffff61058d6004838a818360209788935afa908115610786575b600091610759575b50848b8d51938480926339420b4560e11b82525afa91821561074c575b60009261071d575b506137c6565b9189517f961be39100000000000000000000000000000000000000000000000000000000815281816004818d5afa918215610710575b6000926106e3575b50501690612c33565b916001600160a01b031660005260d2602052604060002090565b5490612c33565b81116106ba57813b1561000e576000937f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379285855180927f16c9e7a000000000000000000000000000000000000000000000000000000000825281838161066489600483019190602083019252565b03925af180156106ad575b610694575b5083516001600160a01b039190911681526020810191909152604090a151f35b806106a16106a792612af9565b8061038c565b38610674565b6106b5612bba565b61066f565b600483517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b6107029250803d10610709575b6106fa8183612b52565b810190612b93565b38806105cb565b503d6106f0565b610718612bba565b6105c3565b61073e919250853d8711610745575b6107368183612b52565b810190612c78565b9038610587565b503d61072c565b610754612bba565b61057f565b6107799150853d871161077f575b6107718183612b52565b810190613470565b38610562565b503d610767565b61078e612bba565b61055a565b503461000e5760a060031936011261000e576107ad6103de565b602435906107b96103f4565b916107c9600260655414156130d6565b60026065556107dd60ff609754161561313b565b6107e681612f52565b6107ef83613228565b6107fa6084356137fc565b61080382613416565b916001600160a01b0392610864848216916108208584338161347f565b604051906339420b4560e11b8252602082600481875afa91821561097f575b60009261095b575b5061085f9086610859846044356137c6565b91614667565b612def565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101869052610937967ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9939091906000908290604490829084905af1801561094e575b61093b575b5061091a6040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b0390a36109276001606555565b6040519081529081906020820190565b0390f35b806106a161094892612af9565b386108eb565b610956612bba565b6108e6565b61085f9192506109789060203d8111610745576107368183612b52565b9190610847565b610987612bba565b61083f565b60031960c091011261000e576001600160a01b03600435818116810361000e5791602435828116810361000e57916044359160643591608435908116810361000e579060a43590565b503461000e576109e43661098c565b6065959194929554600214156109f9906130d6565b600260655560975460ff1615610a0e9061313b565b610a1785613228565b610a2084612f52565b610a2a8383612f83565b610a33906137fc565b610a3c816131de565b610a4590613416565b610a4e82613416565b946001600160a01b0390610a6685848416338161347f565b610a708584614345565b82881693604051906339420b4560e11b9283835260209a8b80858a815a91600492fa610adf97610aba96610ab4938315610c0e575b600093610bef575b50506137c6565b92614d5b565b506040519182528882600481885afa918215610be2575b600092610bc3575b50612def565b94823b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018790527ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9936000908290604490829084905af18015610bb6575b610ba3575b50610b8e6040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b0390a3610b9b6001606555565b604051908152f35b806106a1610bb092612af9565b38610b5f565b610bbe612bba565b610b5a565b610bdb919250893d8b11610745576107368183612b52565b9038610ad9565b610bea612bba565b610ad1565b610c06929350803d10610745576107368183612b52565b90388f610aad565b610c16612bba565b610aa5565b503461000e57602060031936011261000e577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e610cb7610c596103de565b610c68600260655414156130d6565b6002606555610c756131a0565b610c7e816131de565b6001600160a01b0316600081815260c96020908152604091829020805460ff191660011790558151928352339083015290918291820190565b0390a16001606555005b503461000e57600060031936011261000e5760206001600160a01b0360d15416604051908152f35b503461000e57600060031936011261000e57610d0a600260655414156130d6565b6002606555610d176131a0565b60975460ff811615610d605760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1610d5e6001606555565b005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461000e57602060031936011261000e57610dd86103de565b6001600160a01b03610def81603354163314612a02565b610e19610e15836001600160a01b0380911660005260d460205260406000205416151590565b1590565b610f915781610e5c610e50610e436000956001600160a01b031660005260d4602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b91610ea5610e7d836001600160a01b031660005260d4602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b610f5b610ec5836001600160a01b031660005260d5602052604060002090565b54610f36610ef2610edf610eda60d354612bf7565b613292565b90546001600160a01b039160031b1c1690565b9180610f11846001600160a01b031660005260d5602052604060002090565b5587610f30876001600160a01b031660005260d5602052604060002090565b55613292565b90919082549060031b916001600160a01b039283811b93849216901b16911916179055565b610f63613370565b80604051931691167f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8484a3f35b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b600435906fffffffffffffffffffffffffffffffff8216820361000e57565b602435906fffffffffffffffffffffffffffffffff8216820361000e57565b503461000e57604060031936011261000e57611013610fbb565b61101b610fda565b6110316001600160a01b03603354163314612a02565b6fffffffffffffffffffffffffffffffff80921691670de0b6b3a764000083109081156110ca575b506110a0576fffffffffffffffffffffffffffffffff90911660809190911b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000161760d655005b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b90508116821138611059565b600319606091011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e5761112361111d366110d6565b9161577f565b60408051928352602083019190915290f35b503461000e57604060031936011261000e576004356024356111636001600160a01b03603354163314612a02565b670de0b6b3a76400006111768383612c6c565b116110a05760005b60d3548110156111c757806111bd6111b861119b6111c294615b5a565b6001600160a01b0380911660005260d46020526040600020541690565b615ba7565b615b4a565b61117e565b507f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5918160cc558060cd5561120e6040519283928360209093929193604081019481520152565b0390a1005b503461000e57600060031936011261000e57602060ff609754166040519015158152f35b503461000e57600060031936011261000e57602060ce54604051908152f35b503461000e57604060031936011261000e576112bc61127b6112766103de565b613416565b6112b66040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156112ee575b6000916112d0575b506024356137c6565b906139f6565b604080519384526020840191909152919050f35b6112e8915060203d8111610745576107368183612b52565b386112ad565b6112f6612bba565b6112a5565b8015150361000e57565b503461000e5760c060031936011261000e5761131f6103de565b6044359060243561132e6103f4565b9160a4359361133c856112fb565b61134b600260655414156130d6565b600260655561135f60ff609754161561313b565b60009483156116f35761137185613228565b61137c6084356137fc565b611385836131de565b61138e83613416565b906001600160a01b0396878316916113aa8784338c8a1661347f565b61146d5750857ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b93610937989361140c6004602061141296604051928380926339420b4560e11b82525afa908115611460575b600091611442575b50896137c6565b9061382e565b945b61091a8660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b61145a915060203d8111610745576107368183612b52565b38611405565b611468612bba565b6113fd565b96916114c6919361148e61148960d1546001600160a01b031690565b613228565b6114bf604051996339420b4560e11b8b5260209a8b816004818b5afa9182156116e6575b916116c9575b50886137c6565b309261382e565b9461152887876114de60d1546001600160a01b031690565b60405193849283927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401602090939291936001600160a01b0360408201951681520152565b03816000885af180156116bc575b61168f575b5061159b87611558610e50610e5060d1546001600160a01b031690565b6040517faf929a800000000000000000000000000000000000000000000000000000000081526001600160a01b0390961660048701529491829081906024820190565b0381875afa978815611682575b600098611663575b5050823b1561000e576040517f90210d7e0000000000000000000000000000000000000000000000000000000081526004810197909752602487018690526001600160a01b0381166044880152610937967ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b936000908290606490829084905af18015611656575b611643575b50611414565b806106a161165092612af9565b3861163d565b61165e612bba565b611638565b61167a929850803d1061077f576107718183612b52565b9538806115b0565b61168a612bba565b6115a8565b6116ae90883d8a116116b5575b6116a68183612b52565b81019061345b565b503861153b565b503d61169c565b6116c4612bba565b611536565b6116e091508b3d8d11610745576107368183612b52565b386114b8565b6116ee612bba565b6114b2565b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b503461000e57600060031936011261000e57602060cc54604051908152f35b503461000e576000806003193601126117b8576033547fffffffffffffffffffffffff00000000000000000000000000000000000000006001600160a01b03821691611789338414612a02565b1660335581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600060031936011261000e57602060cd54604051908152f35b503461000e57600060031936011261000e576117fb600260655414156130d6565b60026065556118086131a0565b600160ff1960975461181d60ff82161561313b565b16176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a16001606555005b503461000e576000806003193601126117b857808060ca54918060d354905b8183106118a657856118958661189061188b888561425f565b61409b565b614cb9565b604080519182526020820192909252f35b9091946118b8610e5061119b88615b5a565b6040908151917f961be39100000000000000000000000000000000000000000000000000000000835260209160049183858481855afa9485156119fe575b87956119db575b5090839151928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa9182156119ce575b85926119b1575b50506effffffffffffffffffffffffffffff8091169182156119a4578261198b61197a826119746119979761199d9997611991971661425f565b9a613ceb565b98611985818c61425f565b90613dbe565b9061427e565b90613ceb565b95615b4a565b9190611872565b5050509461199d90615b4a565b6119c79250803d10610709576106fa8183612b52565b388061193a565b6119d6612bba565b611933565b84929195506119f690833d8511610709576106fa8183612b52565b9490916118fd565b611a06612bba565b6118f6565b503461000e57600060031936011261000e5760206001600160a01b0360335416604051908152f35b503461000e57604060031936011261000e5760206118956001600160a01b03611a5a6103de565b611a74611a6d6024359261127684612f52565b91826146f2565b95919290506004604051809581936339420b4560e11b8352165afa918215611abd575b600092611aa45750612def565b610bdb91925060203d8111610745576107368183612b52565b611ac5612bba565b611a97565b503461000e57600060031936011261000e5760206001600160a01b0360cf5416604051908152f35b503461000e57606060031936011261000e57611b0c6103de565b602435611b1761040a565b916001600160a01b03611b2f81603354163314612a02565b611b3882613416565b611b4183615a5d565b84116110a05716611b786040516339420b4560e11b8152602081600481865afa908115611c67575b600091611c49575b5084612def565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101959095527f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda69461120e926000908290604490829084905af18015611c3c575b611c29575b50604051938493849193929060409160608401956001600160a01b038093168552602085015216910152565b806106a1611c3692612af9565b38611bfd565b611c44612bba565b611bf8565b611c61915060203d8111610745576107368183612b52565b38611b71565b611c6f612bba565b611b69565b503461000e57611c833661098c565b611c976002606597949695975414156130d6565b6002606555611cab60ff609754161561313b565b611cb58484612f83565b85156116f357611ccd90611cc883613228565b6137fc565b611cd6826131de565b611cdf82613416565b94611ce984613416565b916001600160a01b039182841693604051976339420b4560e11b808a528a60208b6004818b5afa9a8b15611ec5575b60009b611e9e575b5084928b92888493169d8e916040518093819282525a92600491602094fa92831597610ab4611d7f97611d6c611d7997611d7297611d899d611e91575b600091611e72575b508b6137c6565b936137c6565b9c90612def565b9a612def565b993386891661347f565b833b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602481018890527f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d194611e4592899290916000908290604490829084905af18015611e65575b611e52575b506040519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a36118956001606555565b806106a1611e5f92612af9565b38611e10565b611e6d612bba565b611e0b565b611e8b915060203d602011610745576107368183612b52565b38611d65565b611e99612bba565b611d5d565b87929b5092611ebc869460203d602011610745576107368183612b52565b9b925092611d20565b611ecd612bba565b611d18565b503461000e57602060031936011261000e57611eec6103de565b611efb600260655414156130d6565b6002606555611f086131a0565b6001600160a01b0381168060005260c960205260ff6040600020541615611f8557600090815260c96020908152604091829020805460ff1916905581516001600160a01b0393909316835233908301527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c91a1610d5e6001606555565b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e57600435611fda6001600160a01b03603354163314612a02565b670de0b6b3a764000081116110a0576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a1005b503461000e57606060031936011261000e576120346103de565b61189561203f610420565b916044359061204d82612f52565b6120578482612f83565b612062828583614a0b565b94906120776120718294613416565b92613416565b6001600160a01b0380931696604051927f961be3910000000000000000000000000000000000000000000000000000000084528861212f602098868a816004829a875afa9081156122a6575b600091612289575b506004886120eb886effffffffffffffffffffffffffffff809516612c33565b95604051928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa90811561227c575b60009161225f575b5016612c33565b6121428161213d8685612c6c565b612d4b565b9161217661216160d6546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b8311612228575b505050506121b260049160405190858285816339420b4560e11b9e8f82525afa91821561221b575b6000926122035750612def565b9760405194859384928352165afa9283156121f6575b6000936121d7575b5050612def565b6121ee929350803d10610745576107368183612b52565b9038806121d0565b6121fe612bba565b6121c8565b610bdb919250863d8811610745576107368183612b52565b612223612bba565b6121a5565b60049498508361224b612256946122466121b2979561225095612d4b565b612e5f565b612cf6565b90612c33565b9591388061217d565b6122769150893d8b11610709576106fa8183612b52565b38612128565b612284612bba565b612120565b6122a09150883d8a11610709576106fa8183612b52565b386120cb565b6122ae612bba565b6120c3565b503461000e576000806003193601126117b857604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b81811061235e5750505084612317910385612b52565b60405193838594850191818652518092526040850193925b82811061233e57505050500390f35b83516001600160a01b03168552869550938101939281019260010161232f565b82546001600160a01b031684529286019260019283019201612301565b503461000e57602060031936011261000e577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b70660206004356123c96001600160a01b03603354163314612a02565b8060ce55604051908152a1005b503461000e57600060031936011261000e57602060cb54604051908152f35b503461000e57602060031936011261000e576020610b9b6124146103de565b615a5d565b503461000e57602060031936011261000e577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206124566103de565b6001600160a01b039061246e82603354163314612a02565b61247781613228565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55604051908152a1005b503461000e57604060031936011261000e576124c56103de565b6124cd610420565b906001600160a01b036124e581603354163314612a02565b6124f4600260655414156130d6565b600260655561250283613228565b61250b82613228565b61252e826001600160a01b0380911660005260d460205260406000205416151590565b6125c75761259381600094169183169283855260d46020526125818360408720906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60d35460d560205260408620556132d7565b604051917f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188484a36125c56001606555565bf35b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e576020610b9b6126106103de565b6158eb565b503461000e57604060031936011261000e5760005460ff8160081c1690816000146127ca5750303b155b156127465715806126fe575b612659602435600435612fc1565b6126cc575b6126956714d1120d7b1600007fffffffffffffffffffffffffffffffff0000000000000000000000000000000060d654161760d655565b610d5e7718fae27693b40000000000000000000000000000000000006fffffffffffffffffffffffffffffffff60d654161760d655565b6126f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b61265e565b61272f6101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b612741600160ff196000541617600055565b61264b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b60ff161561263f565b503461000e57602060031936011261000e5760206001600160a01b036127fa6112766103de565b16604051908152f35b503461000e57602060031936011261000e5761281d6103de565b6001600160a01b0361283481603354163314612a02565b81161561284457610d5e90612a67565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e57602060031936011261000e577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206129056103de565b6001600160a01b039061291d82603354163314612a02565b61292681613228565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d054161760d055604051908152a1005b503461000e57602060031936011261000e576004356129856001600160a01b03603354163314612a02565b670de0b6b3a764000081116110a0576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a1005b503461000e57602060031936011261000e57610d5e6111b86112766103de565b503461000e5761112361111d6129fa366110d6565b92909261409b565b15612a0957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111612b0d57604052565b612b15612ac9565b604052565b60a0810190811067ffffffffffffffff821117612b0d57604052565b6040810190811067ffffffffffffffff821117612b0d57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117612b0d57604052565b9081602091031261000e57516effffffffffffffffffffffffffffff8116810361000e5790565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000199060018110612c07570190565b612c0f612bc7565b0190565b670de0b6b3a7640000818110612c27570390565b612c2f612bc7565b0390565b818110612c27570390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111612c07570190565b81198111612c07570190565b9081602091031261000e575160ff8116810361000e5790565b8060001904821181151516612ca4570290565b612cac612bc7565b0290565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8115612cea570490565b612cf2612cb0565b0490565b612d12670de0b6b3a7640000926706f05b59d3b2000092612c91565b7ffffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4dffff8111612d3e57010490565b612d46612bc7565b010490565b612ce090670de0b6b3a76400008160001904811182151516612d73575b8360011c9102612c6c565b612d7b612bc7565b612d68565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee911660128110612c07570190565b60ff1680601210612dc3575b60120390565b612dcb612bc7565b612dbd565b60ff16604d8111612de2575b600a0a90565b612dea612bc7565b612ddc565b9060ff81166012811015612e1a5750612e0a612e0f91612db1565b612dd0565b908115612cea570490565b601210612e25575090565b90612e35612e0a612e3b93612d80565b90612c91565b90565b6fffffffffffffffffffffffffffffffff9182169116818110612c27570390565b9060d654908160801c91828211600014612e9d5760046040517f6158a9f8000000000000000000000000000000000000000000000000000000008152fd5b6fffffffffffffffffffffffffffffffff8116821115612f4957612e3b93612f1e612f18612f2494612f126fffffffffffffffffffffffffffffffff61216196169485811115600014612f2a57612f0c60005b612f07612efd8987612c33565b612e358a88612c33565b612c33565b92612c33565b90612ce0565b60011c90565b93612e3e565b90612d4b565b612f0c612f44612f3a8884612c33565b612e358985612c33565b612ef0565b50505050600090565b15612f5957565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03908116911614612f9757565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b612fdb60ff60005460081c16612fd68161304b565b61304b565b612fe433612a67565b61300360ff60005460081c16612ff98161304b565b600160655561304b565b60ff196097541660975560ca5560cb55670de0b6b3a764000060cd55337fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55565b1561305257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b156130dd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b1561314257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001600160a01b0360cf541633036131b457565b60046040517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b031660005260c960205260ff604060002054166131fe57565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03161561323857565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60d3548110156132ca575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b6132d2613262565b61329d565b6001600160a01b0360d35468010000000000000000811015613363575b600181018060d355811015613356575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b61335e613262565b613304565b61336b612ac9565b6132f4565b60d35480156133e7577f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a5600019820191808310156133da575b60d3600052017fffffffffffffffffffffffff0000000000000000000000000000000000000000815416905560d355565b6133e2613262565b6133a9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b613439816001600160a01b0380911660005260d460205260406000205416151590565b15610f91576001600160a01b0380911660005260d46020526040600020541690565b9081602091031261000e5751612e3b816112fb565b9081602091031261000e575190565b600091613537949383926040519560208701937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248a01521660448801526064870152606486526134df86612b1a565b169082604051956134ef87612b36565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152613525843b15156135e9565b51925af161353161364e565b906136ba565b805180613542575050565b816020806135579361355c950101910161345b565b61355e565b565b1561356557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b156135f057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d156136b5573d9067ffffffffffffffff82116136a8575b6040519161369c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184612b52565b82523d6000602084013e565b6136b0612ac9565b613666565b606090565b909190156136c6575090565b8151156136d65750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b848310613760575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311613753575b01168101030190fd5b600085828601015261374a565b8183018101518684016044015285935091820191613713565b60ff811660128110156137935750612e0a612e3b91612db1565b6012106137a05750600190565b612e0a6137ac91612d80565b80156137b9575b60010490565b6137c1612cb0565b6137b3565b9060ff811660128110156137e5575090612e35612e0a612e3b93612db1565b6012106137f0575090565b612e0a612e0f91612d80565b421161380457565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b9391929361383b81615ba7565b6001600160a01b0361384d83836139f6565b5091909261386584809861386082612f52565b6139c5565b1690813b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600093848160248183875af180156139b8575b6139a5575b50813b156139a1576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810191909152838160248183865af18015613994575b613981575b50803b1561397d576040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b039690961660048701526024860191909152929391928290604490829084905af18015613970575b6139635750565b806106a161355c92612af9565b613978612bba565b61395c565b8280fd5b806106a161398e92612af9565b386138ff565b61399c612bba565b6138fa565b8380fd5b806106a16139b292612af9565b386138b4565b6139c0612bba565b6138af565b116139cc57565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b906001600160a01b0360009216604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481865afa938415613bfe575b600094613bdf575b50604051907f705727b500000000000000000000000000000000000000000000000000000000948583528383600481885afa928315613bd2575b600093613bab575b50613aaf613ab49160ca54906effffffffffffffffffffffffffffff808097169116856140d6565b613c0b565b95818710613ba25750613ac79086612c33565b935b6040519081528281600481875afa908115613b95575b600091613b78575b501690600082613af957505050508192565b600482613b4693613b4b96604051938480927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa928315613b6b575b92613b4e575b505085612c91565b612ce0565b92565b613b649250803d1061077f576107718183612b52565b3880613b3e565b613b73612bba565b613b38565b613b8f9150833d8511610709576106fa8183612b52565b38613ae7565b613b9d612bba565b613adf565b94955094613ac9565b613ab4919350613bca613aaf91863d8811610709576106fa8183612b52565b939150613a87565b613bda612bba565b613a7f565b613bf7919450823d8411610709576106fa8183612b52565b9238613a45565b613c06612bba565b613a3d565b60008112613c165790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b60008112906706f05b59d3b2000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613cde575b817f800000000000000000000000000000000000000000000000000000000000000003831216612c07570190565b613ce6612bc7565b613cb0565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613cde57817f800000000000000000000000000000000000000000000000000000000000000003831216612c07570190565b670de0b6b3a76400006000821280157f80000000000000000000000000000000000000000000000000000000000000008401831216613db1575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612c27570390565b613db9612bc7565b613d83565b60008212827f8000000000000000000000000000000000000000000000000000000000000000018212811516613db157827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612c27570390565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600211600083131616613e92575b60017fc0000000000000000000000000000000000000000000000000000000000000008212600083121616613e85575b60011b90565b613e8d612bc7565b613e7f565b613e9a612bc7565b613e4f565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616613f15575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616613f08575b60021b90565b613f10612bc7565b613f02565b613f1d612bc7565b613ed2565b670de0b6b3a76400009060017809392ee8e921d5d073aff322e62439fcf32d7f344649470f908211600083131616613f88575b60017ffffffffffffffff6c6d11716de2a2f8c500cdd19dbc6030cd280cbb9b6b8f0708212600083121616612ca4570290565b613f90612bc7565b613f55565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81810485118385161661403d575b60008212927f800000000000000000000000000000000000000000000000000000000000000094848787058512911616614030575b82600087129505861290851616614023575b058312911616612ca4570290565b61402b612bc7565b614015565b614038612bc7565b614003565b614045612bc7565b613fce565b811561408e575b60001982147f8000000000000000000000000000000000000000000000000000000000000000821416614082570590565b61408a612bc7565b0590565b614096612cb0565b614051565b7f800000000000000000000000000000000000000000000000000000000000000081146140c9575b60000390565b6140d1612bc7565b6140c3565b909180156142585760006140ea8385613ceb565b1261422e578291816140fb84613f22565b6002820561410891613ceb565b906141129161404a565b9361411c91613ceb565b670de0b6b3a764000080938161413188613d49565b61413b9085613f95565b61414490613c74565b0582614150868a613f95565b61415990613c74565b0561416390613e1c565b61416c91613ceb565b956141778589613f95565b906141819161404a565b61418a91613dbe565b614194908361427e565b918061419f91613f95565b6141a890613c74565b056141b291613dbe565b916141bd8286613f95565b6141c690613c74565b05906141d19161427e565b6141da91613ceb565b6141e48280613f95565b906141ee84613e9f565b906141f891613f95565b61420191613dbe565b61420a8261409b565b9161421491614299565b61421d91613ceb565b906142279161425f565b6002900590565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5091505090565b9061427961426f612e3b93613f22565b6002830590613ceb565b61404a565b614294670de0b6b3a76400009261408a92613f95565b613c74565b9190600060038413156143365750600081138061432c575b156142f557915b6142ce614227846142c9818561404a565b613ceb565b905b8382036142db575050565b9092506142ef614227846142c9818561404a565b906142d0565b600081128061431a575b156143135761430d9061409b565b916142b8565b50816142b8565b50826143258261409b565b13156142ff565b50828113156142b1565b92905061433f57565b60019150565b919061435083615ba7565b61435a81846146f2565b5090936001600160a01b031684813b1561000e576040928351917f9dc29fac0000000000000000000000000000000000000000000000000000000083526000928381806143c260049a898c8401602090939291936001600160a01b0360408201951681520152565b038183895af1801561465a575b614647575b50833b1561397d5784517f9f9ef98800000000000000000000000000000000000000000000000000000000815286810191825290839082908190602001038183885af1801561463a575b614627575b50823b156146235783517fd8b8785300000000000000000000000000000000000000000000000000000000815285810191825290829082908190602001038183875af18015614616575b614603575b5082517f705727b5000000000000000000000000000000000000000000000000000000009081815260209081818881885afa9081156145f6575b84916145d9575b506effffffffffffffffffffffffffffff80911615159384614504575b5050505090506144de575050565b517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6145769450662386f26fc10000958751937f961be39100000000000000000000000000000000000000000000000000000000855280858b81855afa9485156145cc575b83956145ab575b50808495968b8b518095819382525afa92831561459e575b92614581575b5050169116612d4b565b1080388080806144d0565b6145979250803d10610709576106fa8183612b52565b388061456c565b6145a6612bba565b614566565b8495506145c58291823d8411610709576106fa8183612b52565b955061454e565b6145d4612bba565b614547565b6145f09150823d8411610709576106fa8183612b52565b386144b3565b6145fe612bba565b6144ac565b806106a161461092612af9565b38614472565b61461e612bba565b61446d565b5080fd5b806106a161463492612af9565b38614423565b614642612bba565b61441e565b806106a161465492612af9565b386143d4565b614662612bba565b6143cf565b6001600160a01b039093929361467c81615ba7565b61468683826146f2565b509290916146958380986139c5565b1690813b1561000e576040928351917f9dc29fac0000000000000000000000000000000000000000000000000000000083526000928381806143c260049a898c8401602090939291936001600160a01b0360408201951681520152565b916001600160a01b036000931691604051927f705727b500000000000000000000000000000000000000000000000000000000908185526020928386600481855afa958615614907575b6000966148d2575b509161483493916147b261476d613aaf956effffffffffffffffffffffffffffff809a16612c91565b604051907f18160ddd0000000000000000000000000000000000000000000000000000000082528582600481875afa9182156148c5575b6000926148a6575b50612ce0565b966147bc88612f52565b6147c58861409b565b9184604051947f961be3910000000000000000000000000000000000000000000000000000000086528186600481865afa958615614899575b60009661487a575b5060046040518094819382525afa94851561486d575b60009561484e575b50508060ca549416921690614914565b928383106148475750612e3b8383612c33565b9092508192565b614865929550803d10610709576106fa8183612b52565b923880614824565b614875612bba565b61481c565b614892919650823d8411610709576106fa8183612b52565b9438614806565b6148a1612bba565b6147fe565b6148be919250863d881161077f576107718183612b52565b90386147ac565b6148cd612bba565b6147a4565b613aaf93919650916147b261476d6148fa8795614834983d8811610709576106fa8183612b52565b9893955050509193614744565b61490f612bba565b61473c565b9290926149218184613ceb565b908361492c86613f22565b6002820561493991613ceb565b906149439161404a565b809461494e85613f22565b90670de0b6b3a76400009680889493600286950561496b91613ceb565b906149759161404a565b61497e91613dbe565b61498791613f95565b61499090613c74565b059161499b85613d49565b6149a491613f95565b6149ad90613c74565b056149b791613ceb565b600290059283926149c88480613f95565b92806149d391613f95565b6149dc91613f95565b6149e590613c74565b056149ef91613ceb565b906149f991614299565b614a0291613ceb565b612e3b91613dbe565b614b4691614a24614a1e614b3a93613416565b91613416565b93614a2f81836146f2565b50509081956001600160a01b03809416916040517f961be3910000000000000000000000000000000000000000000000000000000093848252602080978184600481865afa938415614be4575b600094614bc5575b50614aeb614aa4896effffffffffffffffffffffffffffff809716612c33565b958560405185816004817f705727b5000000000000000000000000000000000000000000000000000000009a8b82525afa908115614bb8575b600091614ba1575016612c33565b9516916040519687528187600481865afa968715614b94575b600097614b75575b5060046040518094819382525afa968715614b68575b600097614b49575b50508060ca549616931690614bf1565b61225060cb5482612cf6565b91565b614b60929750803d10610709576106fa8183612b52565b943880614b2a565b614b70612bba565b614b22565b614b8d919750823d8411610709576106fa8183612b52565b9538614b0c565b614b9c612bba565b614b04565b6122769150863d8811610709576106fa8183612b52565b614bc0612bba565b614add565b614bdd919450823d8411610709576106fa8183612b52565b9238614a84565b614bec612bba565b614a7c565b92919493909385158015614cb1575b61422e576118908461198585614c94816142798c614c72614c8a614c9f9f8f614c9a9f614c8561198b9f8f85670de0b6b3a7640000614c78614294614c7f948f614c72906119918c614279614c6b6142799f9e61426f9f614c646142799183613ceb565b9c80613f95565b9380613f95565b90613f95565b0590613dbe565b9d613ceb565b613f22565b611985818c61425f565b9261425f565b613dbe565b6000811215612e3b57612e3b9061409b565b508215614c00565b80614c9a61408a92614d3c600295611991614cd48480613f95565b9160017f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211600083131616614d4e575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616614d41575b881b613f22565b614299565b614d49612bc7565b614d35565b614d56612bc7565b614d05565b92939190614d6a828286614fa9565b8093919395614d7a8580996139c5565b614d97846001600160a01b031660005260d2602052604060002090565b614da2838254612c6c565b90556001600160a01b0380911693843b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600094614e0e949086908290602490829084905af18015614f9c575b614f89575b501693612c6c565b823b15614623576040517f9f9ef9880000000000000000000000000000000000000000000000000000000081526004810191909152662386f26fc1000092614f05929091818160248183875af18015614f7c575b614f69575b50604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481845afa938415614f5c575b8394614f36575b509080600492604051938480927f705727b50000000000000000000000000000000000000000000000000000000082525afa928315614f29575b92614f0c575b50506effffffffffffffffffffffffffffff8091169116612d4b565b106131b457565b614f229250803d10610709576106fa8183612b52565b3880614ee9565b614f31612bba565b614ee3565b8291945091614f53600493823d8411610709576106fa8183612b52565b94919250614ea9565b614f64612bba565b614ea2565b806106a1614f7692612af9565b38614e67565b614f84612bba565b614e62565b806106a1614f9692612af9565b38614e06565b614fa4612bba565b614e01565b91929092614fb88185856154a9565b809491809660008512156000146151255750505061507d6001600160a01b0361213d9216926040517f961be39100000000000000000000000000000000000000000000000000000000815260208082600481895afa918215615118575b6000926150f9575b506004816effffffffffffffffffffffffffffff80941697604051928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa9182156150ec575b6000926150cf575b50501692839185612c6c565b9161509c61216160d6546fffffffffffffffffffffffffffffffff1690565b83116150a757505050565b8561224b612e3b959697946122466150c9956150c295612d4b565b8092612c33565b93612c6c565b6150e59250803d10610709576106fa8183612b52565b3880615071565b6150f4612bba565b615069565b816151119293503d8411610709576106fa8183612b52565b903861501d565b615120612bba565b615015565b8093949297506001600160a01b0391959650166040517f961be39100000000000000000000000000000000000000000000000000000000815260208082600481865afa9182156152b7575b600092615298575b506004816effffffffffffffffffffffffffffff80941694604051928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa91821561528b575b60009261526e575b5050166151dd8161213d8885612c6c565b60d65492906fffffffffffffffffffffffffffffffff841610615204575050505050509190565b909193955061521592949750612d4b565b9060801c11156152445761522b6152329161409b565b84836152c4565b9061523f91938491614fa9565b905090565b60046040517f6158a9f8000000000000000000000000000000000000000000000000000000008152fd5b6152849250803d10610709576106fa8183612b52565b38806151cc565b615293612bba565b6151c4565b816152b09293503d8411610709576106fa8183612b52565b9038615178565b6152bf612bba565b615170565b6040516339420b4560e11b81529193926020926153ce906001600160a01b0384168582600481845afa91821561549c575b600092615479575b5061085f9061530b83613779565b96604051907f705727b50000000000000000000000000000000000000000000000000000000082528082600481865afa91821561546c575b60009261544d575b5060048161538a61537c61536461216160d65460801c90565b6effffffffffffffffffffffffffffff809716612c91565b670de0b6b3a7640000900490565b94604051928380927f961be3910000000000000000000000000000000000000000000000000000000082525afa918215610710576000926106e35750501690612c33565b91600195826153e76153e08787612c91565b8385614fa9565b50106152445791905b83871061540557505050612e3b929350612c91565b909192615415612f188289612c6c565b908361542b6154248885612c91565b8786614fa9565b501061543b5750925b91906153f0565b93965061544790612c3e565b95615434565b816154659293503d8411610709576106fa8183612b52565b903861534b565b615474612bba565b615343565b61085f91925061549590873d8911610745576107368183612b52565b91906152fd565b6154a4612bba565b6152f5565b9190600092838312615763575b6001600160a01b0380911693846040918251907f961be391000000000000000000000000000000000000000000000000000000009182815260209660049688838981895afa928315615756575b8493615737575b5086519189838a817f705727b5000000000000000000000000000000000000000000000000000000009a8b82525afa92831561572a575b859361570b575b5016898751928684528a848b81865afa9384156156fe575b86946156dd575b506155af93948b6effffffffffffffffffffffffffffff809716998c8c518097819382525afa9384156156d0575b87946156b1575b508886808060ca54971694169216614bf1565b988289139788958b90876156a7575b50508515615625575b50505050506155ff575050156155e75750614b466150c260cb5483612cf6565b91906155f6612e3b919361409b565b60cb5490612cf6565b517f9a6114b7000000000000000000000000000000000000000000000000000000008152fd5b9091928094955089129485615644575b505050505038808080806155c7565b8192939495508787518095819382525afa93841561569a575b9361567b575b505061566e8661409b565b9116103880808080615635565b615692929350803d10610709576106fa8183612b52565b903880615663565b6156a2612bba565b61565d565b1095508a386155be565b6156c99194508c8d3d10610709576106fa8183612b52565b923861559c565b6156d8612bba565b615595565b6155af94506156f8908c8d3d10610709576106fa8183612b52565b93615567565b615706612bba565b615560565b6157239193508a3d8c11610709576106fa8183612b52565b9138615548565b615732612bba565b615541565b61574f919350893d8b11610709576106fa8183612b52565b913861550a565b61575e612bba565b615503565b916157799061577360cb54613d49565b9061425f565b916154b6565b92919261578c8282612f83565b83156116f357614a1e61579e91613416565b92836001600160a01b0361581881851660006157ee604051976157e66339420b4560e11b998a81526020998a826004818a5afa91821561589e575b869261587f575b506158ab565b9a8b91614fa9565b939094849616946040519089825288826004818a5afa918215615872575b8492610bc35750612def565b981261584757505082612e3b9460046040518094819382525afa9283156121f6576000936121d7575050612def565b9150915082612e3b9460046040518094819382525afa9283156121f6576000936121d7575050612def565b61587a612bba565b61580c565b6158979192508b3d8d11610745576107368183612b52565b90386157e0565b6158a6612bba565b6157d9565b9060ff811660128110156158ca575090614c72612e0a612e3b93612db1565b6012106158d5575090565b906158e5612e0a612e3b93612d80565b9061404a565b610e506158f791613416565b6040517f18160ddd000000000000000000000000000000000000000000000000000000008082526020918281600481875afa908115615a50575b600091615a33575b5015615a2457612e3b9282604051927f705727b50000000000000000000000000000000000000000000000000000000084528184600481865afa938415615a17575b6000946159f8575b5060046040518094819382525afa9283156159eb575b6000936159b9575b50506effffffffffffffffffffffffffffff16612d4b565b6effffffffffffffffffffffffffffff92935090816159e392903d1061077f576107718183612b52565b9190386159a1565b6159f3612bba565b615999565b615a10919450823d8411610709576106fa8183612b52565b9238615983565b615a1f612bba565b61597b565b505050670de0b6b3a764000090565b615a4a9150833d851161077f576107718183612b52565b38615939565b615a58612bba565b615931565b615a69612e3b91613416565b6105ee6105d46001600160a01b0383166effffffffffffffffffffffffffffff61538a60046040517f99c91a640000000000000000000000000000000000000000000000000000000081526020928184818582958a5afa908115615b3d575b600091615b20575b50604051906339420b4560e11b8252838286818b5afa918215615b13575b600092615afb57506137c6565b61073e919250843d8611610745576107368183612b52565b615b1b612bba565b615aee565b615b379150833d851161077f576107718183612b52565b38615ad0565b615b45612bba565b615ac8565b6001906000198114612c07570190565b6001600160a01b039060d354811015615b9a575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a601541690565b615ba2613262565b615b6e565b615bc4816001600160a01b031660005260d2602052604060002090565b5480158015615e09575b615e0557615bf2615bec615be360cd54612c13565b60cc5490612c33565b82612cf6565b9081615d2e575b615c07915060cd5490612cf6565b80615c2b575b506001600160a01b0316600090815260d26020526040812055565b55565b615c3581836139f6565b50916001600160a01b0384169150813b1561000e576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810193909352600092838160248183875af18015615d21575b615d0e575b50813b1561397d576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810191909152600093615c289390928290602490829084905af18015615d01575b615cee575b509150615c0d565b806106a1615cfb92612af9565b38615ce6565b615d09612bba565b615ce1565b806106a1615d1b92612af9565b38615c90565b615d29612bba565b615c8b565b6001600160a01b038316615d79615d4d60d0546001600160a01b031690565b93604051906339420b4560e11b8252602082600481875afa918215611abd57600092611aa45750612def565b92813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b039190911660048201526024810193909352615c0792906000908290604490829084905af18015615df8575b615de5575b50615bf9565b806106a1615df292612af9565b38615ddf565b615e00612bba565b615dda565b5050565b5060ce548110615bce56fea2646970667358221220da6a9888030b20551086ab0e3011218b16daf19fd5ff7a6790e8ea4c3d88861a64736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063017b829214610383578063017e7e581461037a5780630705999d14610371578063070f81d91461036857806309a5fca31461035f5780630f91f06f146103565780633753b14a1461034d5780633bd61ba8146103445780633f4ba83a1461033b5780634a5e42b1146103325780634a6fee0e146103295780634fdd64e51461032057806352f7c988146103175780635c975abb1461030e5780635cfe092e1461030557806361858e23146102fc5780636281baef146102f35780636922d5ca146102ea578063715018a6146102e1578063815bfd29146102d85780638456cb59146102cf5780638a2dfe09146102c65780638da5cb5b146102bd578063907448ed146102b457806391cca3db146102ab57806393aeea02146102a25780639908fc8b146102995780639abacb41146102905780639e4416b714610287578063a4275ceb1461027e578063aa6ca80814610275578063d043c5651461026c578063d0dd0e5614610263578063d30ffeda1461025a578063d477f05f14610251578063da48999714610248578063dc3b7c8b1461023f578063e4a3011614610236578063e9249cc71461022d578063f2fde38b14610224578063f46901ed1461021b578063f57e84d514610212578063f8b49e72146102095763fca8f3081461020157600080fd5b61000e6129e5565b5061000e6129c5565b5061000e61295a565b5061000e6128c8565b5061000e612803565b5061000e6127d3565b5061000e612615565b5061000e6125f1565b5061000e6124ab565b5061000e612419565b5061000e6123f5565b5061000e6123d6565b5061000e61237b565b5061000e6122b3565b5061000e61201a565b5061000e611faf565b5061000e611ed2565b5061000e611c74565b5061000e611af2565b5061000e611aca565b5061000e611a33565b5061000e611a0b565b5061000e611853565b5061000e6117da565b5061000e6117bb565b5061000e61173c565b5061000e61171d565b5061000e611305565b5061000e611256565b5061000e611237565b5061000e611213565b5061000e611135565b5061000e61110b565b5061000e610ff9565b5061000e610dbe565b5061000e610ce9565b5061000e610cc1565b5061000e610c1b565b5061000e6109d5565b5061000e610793565b5061000e6104c8565b5061000e610436565b5061000e6103b6565b5061000e610397565b600091031261000e57565b503461000e57600060031936011261000e57602060ca54604051908152f35b503461000e57600060031936011261000e5760206001600160a01b0360d05416604051908152f35b600435906001600160a01b038216820361000e57565b606435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602060031936011261000e577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d60206104736103de565b6001600160a01b039061048b82603354163314612a02565b61049481613228565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d154161760d155604051908152a1005b503461000e5760408060031936011261000e576104e36103de565b906024356104ef6131a0565b6104f883613416565b906105f56001600160a01b038316926105ee6105d486517f99c91a640000000000000000000000000000000000000000000000000000000081526effffffffffffffffffffffffffffff61058d6004838a818360209788935afa908115610786575b600091610759575b50848b8d51938480926339420b4560e11b82525afa91821561074c575b60009261071d575b506137c6565b9189517f961be39100000000000000000000000000000000000000000000000000000000815281816004818d5afa918215610710575b6000926106e3575b50501690612c33565b916001600160a01b031660005260d2602052604060002090565b5490612c33565b81116106ba57813b1561000e576000937f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379285855180927f16c9e7a000000000000000000000000000000000000000000000000000000000825281838161066489600483019190602083019252565b03925af180156106ad575b610694575b5083516001600160a01b039190911681526020810191909152604090a151f35b806106a16106a792612af9565b8061038c565b38610674565b6106b5612bba565b61066f565b600483517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b6107029250803d10610709575b6106fa8183612b52565b810190612b93565b38806105cb565b503d6106f0565b610718612bba565b6105c3565b61073e919250853d8711610745575b6107368183612b52565b810190612c78565b9038610587565b503d61072c565b610754612bba565b61057f565b6107799150853d871161077f575b6107718183612b52565b810190613470565b38610562565b503d610767565b61078e612bba565b61055a565b503461000e5760a060031936011261000e576107ad6103de565b602435906107b96103f4565b916107c9600260655414156130d6565b60026065556107dd60ff609754161561313b565b6107e681612f52565b6107ef83613228565b6107fa6084356137fc565b61080382613416565b916001600160a01b0392610864848216916108208584338161347f565b604051906339420b4560e11b8252602082600481875afa91821561097f575b60009261095b575b5061085f9086610859846044356137c6565b91614667565b612def565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101869052610937967ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9939091906000908290604490829084905af1801561094e575b61093b575b5061091a6040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b0390a36109276001606555565b6040519081529081906020820190565b0390f35b806106a161094892612af9565b386108eb565b610956612bba565b6108e6565b61085f9192506109789060203d8111610745576107368183612b52565b9190610847565b610987612bba565b61083f565b60031960c091011261000e576001600160a01b03600435818116810361000e5791602435828116810361000e57916044359160643591608435908116810361000e579060a43590565b503461000e576109e43661098c565b6065959194929554600214156109f9906130d6565b600260655560975460ff1615610a0e9061313b565b610a1785613228565b610a2084612f52565b610a2a8383612f83565b610a33906137fc565b610a3c816131de565b610a4590613416565b610a4e82613416565b946001600160a01b0390610a6685848416338161347f565b610a708584614345565b82881693604051906339420b4560e11b9283835260209a8b80858a815a91600492fa610adf97610aba96610ab4938315610c0e575b600093610bef575b50506137c6565b92614d5b565b506040519182528882600481885afa918215610be2575b600092610bc3575b50612def565b94823b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018790527ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9936000908290604490829084905af18015610bb6575b610ba3575b50610b8e6040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b0390a3610b9b6001606555565b604051908152f35b806106a1610bb092612af9565b38610b5f565b610bbe612bba565b610b5a565b610bdb919250893d8b11610745576107368183612b52565b9038610ad9565b610bea612bba565b610ad1565b610c06929350803d10610745576107368183612b52565b90388f610aad565b610c16612bba565b610aa5565b503461000e57602060031936011261000e577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e610cb7610c596103de565b610c68600260655414156130d6565b6002606555610c756131a0565b610c7e816131de565b6001600160a01b0316600081815260c96020908152604091829020805460ff191660011790558151928352339083015290918291820190565b0390a16001606555005b503461000e57600060031936011261000e5760206001600160a01b0360d15416604051908152f35b503461000e57600060031936011261000e57610d0a600260655414156130d6565b6002606555610d176131a0565b60975460ff811615610d605760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1610d5e6001606555565b005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461000e57602060031936011261000e57610dd86103de565b6001600160a01b03610def81603354163314612a02565b610e19610e15836001600160a01b0380911660005260d460205260406000205416151590565b1590565b610f915781610e5c610e50610e436000956001600160a01b031660005260d4602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b91610ea5610e7d836001600160a01b031660005260d4602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b610f5b610ec5836001600160a01b031660005260d5602052604060002090565b54610f36610ef2610edf610eda60d354612bf7565b613292565b90546001600160a01b039160031b1c1690565b9180610f11846001600160a01b031660005260d5602052604060002090565b5587610f30876001600160a01b031660005260d5602052604060002090565b55613292565b90919082549060031b916001600160a01b039283811b93849216901b16911916179055565b610f63613370565b80604051931691167f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8484a3f35b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b600435906fffffffffffffffffffffffffffffffff8216820361000e57565b602435906fffffffffffffffffffffffffffffffff8216820361000e57565b503461000e57604060031936011261000e57611013610fbb565b61101b610fda565b6110316001600160a01b03603354163314612a02565b6fffffffffffffffffffffffffffffffff80921691670de0b6b3a764000083109081156110ca575b506110a0576fffffffffffffffffffffffffffffffff90911660809190911b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000161760d655005b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b90508116821138611059565b600319606091011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e5761112361111d366110d6565b9161577f565b60408051928352602083019190915290f35b503461000e57604060031936011261000e576004356024356111636001600160a01b03603354163314612a02565b670de0b6b3a76400006111768383612c6c565b116110a05760005b60d3548110156111c757806111bd6111b861119b6111c294615b5a565b6001600160a01b0380911660005260d46020526040600020541690565b615ba7565b615b4a565b61117e565b507f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5918160cc558060cd5561120e6040519283928360209093929193604081019481520152565b0390a1005b503461000e57600060031936011261000e57602060ff609754166040519015158152f35b503461000e57600060031936011261000e57602060ce54604051908152f35b503461000e57604060031936011261000e576112bc61127b6112766103de565b613416565b6112b66040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156112ee575b6000916112d0575b506024356137c6565b906139f6565b604080519384526020840191909152919050f35b6112e8915060203d8111610745576107368183612b52565b386112ad565b6112f6612bba565b6112a5565b8015150361000e57565b503461000e5760c060031936011261000e5761131f6103de565b6044359060243561132e6103f4565b9160a4359361133c856112fb565b61134b600260655414156130d6565b600260655561135f60ff609754161561313b565b60009483156116f35761137185613228565b61137c6084356137fc565b611385836131de565b61138e83613416565b906001600160a01b0396878316916113aa8784338c8a1661347f565b61146d5750857ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b93610937989361140c6004602061141296604051928380926339420b4560e11b82525afa908115611460575b600091611442575b50896137c6565b9061382e565b945b61091a8660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b61145a915060203d8111610745576107368183612b52565b38611405565b611468612bba565b6113fd565b96916114c6919361148e61148960d1546001600160a01b031690565b613228565b6114bf604051996339420b4560e11b8b5260209a8b816004818b5afa9182156116e6575b916116c9575b50886137c6565b309261382e565b9461152887876114de60d1546001600160a01b031690565b60405193849283927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401602090939291936001600160a01b0360408201951681520152565b03816000885af180156116bc575b61168f575b5061159b87611558610e50610e5060d1546001600160a01b031690565b6040517faf929a800000000000000000000000000000000000000000000000000000000081526001600160a01b0390961660048701529491829081906024820190565b0381875afa978815611682575b600098611663575b5050823b1561000e576040517f90210d7e0000000000000000000000000000000000000000000000000000000081526004810197909752602487018690526001600160a01b0381166044880152610937967ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b936000908290606490829084905af18015611656575b611643575b50611414565b806106a161165092612af9565b3861163d565b61165e612bba565b611638565b61167a929850803d1061077f576107718183612b52565b9538806115b0565b61168a612bba565b6115a8565b6116ae90883d8a116116b5575b6116a68183612b52565b81019061345b565b503861153b565b503d61169c565b6116c4612bba565b611536565b6116e091508b3d8d11610745576107368183612b52565b386114b8565b6116ee612bba565b6114b2565b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b503461000e57600060031936011261000e57602060cc54604051908152f35b503461000e576000806003193601126117b8576033547fffffffffffffffffffffffff00000000000000000000000000000000000000006001600160a01b03821691611789338414612a02565b1660335581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600060031936011261000e57602060cd54604051908152f35b503461000e57600060031936011261000e576117fb600260655414156130d6565b60026065556118086131a0565b600160ff1960975461181d60ff82161561313b565b16176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a16001606555005b503461000e576000806003193601126117b857808060ca54918060d354905b8183106118a657856118958661189061188b888561425f565b61409b565b614cb9565b604080519182526020820192909252f35b9091946118b8610e5061119b88615b5a565b6040908151917f961be39100000000000000000000000000000000000000000000000000000000835260209160049183858481855afa9485156119fe575b87956119db575b5090839151928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa9182156119ce575b85926119b1575b50506effffffffffffffffffffffffffffff8091169182156119a4578261198b61197a826119746119979761199d9997611991971661425f565b9a613ceb565b98611985818c61425f565b90613dbe565b9061427e565b90613ceb565b95615b4a565b9190611872565b5050509461199d90615b4a565b6119c79250803d10610709576106fa8183612b52565b388061193a565b6119d6612bba565b611933565b84929195506119f690833d8511610709576106fa8183612b52565b9490916118fd565b611a06612bba565b6118f6565b503461000e57600060031936011261000e5760206001600160a01b0360335416604051908152f35b503461000e57604060031936011261000e5760206118956001600160a01b03611a5a6103de565b611a74611a6d6024359261127684612f52565b91826146f2565b95919290506004604051809581936339420b4560e11b8352165afa918215611abd575b600092611aa45750612def565b610bdb91925060203d8111610745576107368183612b52565b611ac5612bba565b611a97565b503461000e57600060031936011261000e5760206001600160a01b0360cf5416604051908152f35b503461000e57606060031936011261000e57611b0c6103de565b602435611b1761040a565b916001600160a01b03611b2f81603354163314612a02565b611b3882613416565b611b4183615a5d565b84116110a05716611b786040516339420b4560e11b8152602081600481865afa908115611c67575b600091611c49575b5084612def565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101959095527f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda69461120e926000908290604490829084905af18015611c3c575b611c29575b50604051938493849193929060409160608401956001600160a01b038093168552602085015216910152565b806106a1611c3692612af9565b38611bfd565b611c44612bba565b611bf8565b611c61915060203d8111610745576107368183612b52565b38611b71565b611c6f612bba565b611b69565b503461000e57611c833661098c565b611c976002606597949695975414156130d6565b6002606555611cab60ff609754161561313b565b611cb58484612f83565b85156116f357611ccd90611cc883613228565b6137fc565b611cd6826131de565b611cdf82613416565b94611ce984613416565b916001600160a01b039182841693604051976339420b4560e11b808a528a60208b6004818b5afa9a8b15611ec5575b60009b611e9e575b5084928b92888493169d8e916040518093819282525a92600491602094fa92831597610ab4611d7f97611d6c611d7997611d7297611d899d611e91575b600091611e72575b508b6137c6565b936137c6565b9c90612def565b9a612def565b993386891661347f565b833b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602481018890527f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d194611e4592899290916000908290604490829084905af18015611e65575b611e52575b506040519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a36118956001606555565b806106a1611e5f92612af9565b38611e10565b611e6d612bba565b611e0b565b611e8b915060203d602011610745576107368183612b52565b38611d65565b611e99612bba565b611d5d565b87929b5092611ebc869460203d602011610745576107368183612b52565b9b925092611d20565b611ecd612bba565b611d18565b503461000e57602060031936011261000e57611eec6103de565b611efb600260655414156130d6565b6002606555611f086131a0565b6001600160a01b0381168060005260c960205260ff6040600020541615611f8557600090815260c96020908152604091829020805460ff1916905581516001600160a01b0393909316835233908301527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c91a1610d5e6001606555565b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e57600435611fda6001600160a01b03603354163314612a02565b670de0b6b3a764000081116110a0576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a1005b503461000e57606060031936011261000e576120346103de565b61189561203f610420565b916044359061204d82612f52565b6120578482612f83565b612062828583614a0b565b94906120776120718294613416565b92613416565b6001600160a01b0380931696604051927f961be3910000000000000000000000000000000000000000000000000000000084528861212f602098868a816004829a875afa9081156122a6575b600091612289575b506004886120eb886effffffffffffffffffffffffffffff809516612c33565b95604051928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa90811561227c575b60009161225f575b5016612c33565b6121428161213d8685612c6c565b612d4b565b9161217661216160d6546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b8311612228575b505050506121b260049160405190858285816339420b4560e11b9e8f82525afa91821561221b575b6000926122035750612def565b9760405194859384928352165afa9283156121f6575b6000936121d7575b5050612def565b6121ee929350803d10610745576107368183612b52565b9038806121d0565b6121fe612bba565b6121c8565b610bdb919250863d8811610745576107368183612b52565b612223612bba565b6121a5565b60049498508361224b612256946122466121b2979561225095612d4b565b612e5f565b612cf6565b90612c33565b9591388061217d565b6122769150893d8b11610709576106fa8183612b52565b38612128565b612284612bba565b612120565b6122a09150883d8a11610709576106fa8183612b52565b386120cb565b6122ae612bba565b6120c3565b503461000e576000806003193601126117b857604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b81811061235e5750505084612317910385612b52565b60405193838594850191818652518092526040850193925b82811061233e57505050500390f35b83516001600160a01b03168552869550938101939281019260010161232f565b82546001600160a01b031684529286019260019283019201612301565b503461000e57602060031936011261000e577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b70660206004356123c96001600160a01b03603354163314612a02565b8060ce55604051908152a1005b503461000e57600060031936011261000e57602060cb54604051908152f35b503461000e57602060031936011261000e576020610b9b6124146103de565b615a5d565b503461000e57602060031936011261000e577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206124566103de565b6001600160a01b039061246e82603354163314612a02565b61247781613228565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55604051908152a1005b503461000e57604060031936011261000e576124c56103de565b6124cd610420565b906001600160a01b036124e581603354163314612a02565b6124f4600260655414156130d6565b600260655561250283613228565b61250b82613228565b61252e826001600160a01b0380911660005260d460205260406000205416151590565b6125c75761259381600094169183169283855260d46020526125818360408720906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60d35460d560205260408620556132d7565b604051917f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188484a36125c56001606555565bf35b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e576020610b9b6126106103de565b6158eb565b503461000e57604060031936011261000e5760005460ff8160081c1690816000146127ca5750303b155b156127465715806126fe575b612659602435600435612fc1565b6126cc575b6126956714d1120d7b1600007fffffffffffffffffffffffffffffffff0000000000000000000000000000000060d654161760d655565b610d5e7718fae27693b40000000000000000000000000000000000006fffffffffffffffffffffffffffffffff60d654161760d655565b6126f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b61265e565b61272f6101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b612741600160ff196000541617600055565b61264b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b60ff161561263f565b503461000e57602060031936011261000e5760206001600160a01b036127fa6112766103de565b16604051908152f35b503461000e57602060031936011261000e5761281d6103de565b6001600160a01b0361283481603354163314612a02565b81161561284457610d5e90612a67565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e57602060031936011261000e577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206129056103de565b6001600160a01b039061291d82603354163314612a02565b61292681613228565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d054161760d055604051908152a1005b503461000e57602060031936011261000e576004356129856001600160a01b03603354163314612a02565b670de0b6b3a764000081116110a0576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a1005b503461000e57602060031936011261000e57610d5e6111b86112766103de565b503461000e5761112361111d6129fa366110d6565b92909261409b565b15612a0957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111612b0d57604052565b612b15612ac9565b604052565b60a0810190811067ffffffffffffffff821117612b0d57604052565b6040810190811067ffffffffffffffff821117612b0d57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117612b0d57604052565b9081602091031261000e57516effffffffffffffffffffffffffffff8116810361000e5790565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000199060018110612c07570190565b612c0f612bc7565b0190565b670de0b6b3a7640000818110612c27570390565b612c2f612bc7565b0390565b818110612c27570390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111612c07570190565b81198111612c07570190565b9081602091031261000e575160ff8116810361000e5790565b8060001904821181151516612ca4570290565b612cac612bc7565b0290565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8115612cea570490565b612cf2612cb0565b0490565b612d12670de0b6b3a7640000926706f05b59d3b2000092612c91565b7ffffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4dffff8111612d3e57010490565b612d46612bc7565b010490565b612ce090670de0b6b3a76400008160001904811182151516612d73575b8360011c9102612c6c565b612d7b612bc7565b612d68565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee911660128110612c07570190565b60ff1680601210612dc3575b60120390565b612dcb612bc7565b612dbd565b60ff16604d8111612de2575b600a0a90565b612dea612bc7565b612ddc565b9060ff81166012811015612e1a5750612e0a612e0f91612db1565b612dd0565b908115612cea570490565b601210612e25575090565b90612e35612e0a612e3b93612d80565b90612c91565b90565b6fffffffffffffffffffffffffffffffff9182169116818110612c27570390565b9060d654908160801c91828211600014612e9d5760046040517f6158a9f8000000000000000000000000000000000000000000000000000000008152fd5b6fffffffffffffffffffffffffffffffff8116821115612f4957612e3b93612f1e612f18612f2494612f126fffffffffffffffffffffffffffffffff61216196169485811115600014612f2a57612f0c60005b612f07612efd8987612c33565b612e358a88612c33565b612c33565b92612c33565b90612ce0565b60011c90565b93612e3e565b90612d4b565b612f0c612f44612f3a8884612c33565b612e358985612c33565b612ef0565b50505050600090565b15612f5957565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03908116911614612f9757565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b612fdb60ff60005460081c16612fd68161304b565b61304b565b612fe433612a67565b61300360ff60005460081c16612ff98161304b565b600160655561304b565b60ff196097541660975560ca5560cb55670de0b6b3a764000060cd55337fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55565b1561305257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b156130dd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b1561314257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001600160a01b0360cf541633036131b457565b60046040517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b031660005260c960205260ff604060002054166131fe57565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03161561323857565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60d3548110156132ca575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b6132d2613262565b61329d565b6001600160a01b0360d35468010000000000000000811015613363575b600181018060d355811015613356575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b61335e613262565b613304565b61336b612ac9565b6132f4565b60d35480156133e7577f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a5600019820191808310156133da575b60d3600052017fffffffffffffffffffffffff0000000000000000000000000000000000000000815416905560d355565b6133e2613262565b6133a9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b613439816001600160a01b0380911660005260d460205260406000205416151590565b15610f91576001600160a01b0380911660005260d46020526040600020541690565b9081602091031261000e5751612e3b816112fb565b9081602091031261000e575190565b600091613537949383926040519560208701937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248a01521660448801526064870152606486526134df86612b1a565b169082604051956134ef87612b36565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152613525843b15156135e9565b51925af161353161364e565b906136ba565b805180613542575050565b816020806135579361355c950101910161345b565b61355e565b565b1561356557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b156135f057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d156136b5573d9067ffffffffffffffff82116136a8575b6040519161369c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184612b52565b82523d6000602084013e565b6136b0612ac9565b613666565b606090565b909190156136c6575090565b8151156136d65750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b848310613760575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311613753575b01168101030190fd5b600085828601015261374a565b8183018101518684016044015285935091820191613713565b60ff811660128110156137935750612e0a612e3b91612db1565b6012106137a05750600190565b612e0a6137ac91612d80565b80156137b9575b60010490565b6137c1612cb0565b6137b3565b9060ff811660128110156137e5575090612e35612e0a612e3b93612db1565b6012106137f0575090565b612e0a612e0f91612d80565b421161380457565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b9391929361383b81615ba7565b6001600160a01b0361384d83836139f6565b5091909261386584809861386082612f52565b6139c5565b1690813b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600093848160248183875af180156139b8575b6139a5575b50813b156139a1576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810191909152838160248183865af18015613994575b613981575b50803b1561397d576040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b039690961660048701526024860191909152929391928290604490829084905af18015613970575b6139635750565b806106a161355c92612af9565b613978612bba565b61395c565b8280fd5b806106a161398e92612af9565b386138ff565b61399c612bba565b6138fa565b8380fd5b806106a16139b292612af9565b386138b4565b6139c0612bba565b6138af565b116139cc57565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b906001600160a01b0360009216604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481865afa938415613bfe575b600094613bdf575b50604051907f705727b500000000000000000000000000000000000000000000000000000000948583528383600481885afa928315613bd2575b600093613bab575b50613aaf613ab49160ca54906effffffffffffffffffffffffffffff808097169116856140d6565b613c0b565b95818710613ba25750613ac79086612c33565b935b6040519081528281600481875afa908115613b95575b600091613b78575b501690600082613af957505050508192565b600482613b4693613b4b96604051938480927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa928315613b6b575b92613b4e575b505085612c91565b612ce0565b92565b613b649250803d1061077f576107718183612b52565b3880613b3e565b613b73612bba565b613b38565b613b8f9150833d8511610709576106fa8183612b52565b38613ae7565b613b9d612bba565b613adf565b94955094613ac9565b613ab4919350613bca613aaf91863d8811610709576106fa8183612b52565b939150613a87565b613bda612bba565b613a7f565b613bf7919450823d8411610709576106fa8183612b52565b9238613a45565b613c06612bba565b613a3d565b60008112613c165790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b60008112906706f05b59d3b2000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613cde575b817f800000000000000000000000000000000000000000000000000000000000000003831216612c07570190565b613ce6612bc7565b613cb0565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613cde57817f800000000000000000000000000000000000000000000000000000000000000003831216612c07570190565b670de0b6b3a76400006000821280157f80000000000000000000000000000000000000000000000000000000000000008401831216613db1575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612c27570390565b613db9612bc7565b613d83565b60008212827f8000000000000000000000000000000000000000000000000000000000000000018212811516613db157827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612c27570390565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600211600083131616613e92575b60017fc0000000000000000000000000000000000000000000000000000000000000008212600083121616613e85575b60011b90565b613e8d612bc7565b613e7f565b613e9a612bc7565b613e4f565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616613f15575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616613f08575b60021b90565b613f10612bc7565b613f02565b613f1d612bc7565b613ed2565b670de0b6b3a76400009060017809392ee8e921d5d073aff322e62439fcf32d7f344649470f908211600083131616613f88575b60017ffffffffffffffff6c6d11716de2a2f8c500cdd19dbc6030cd280cbb9b6b8f0708212600083121616612ca4570290565b613f90612bc7565b613f55565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81810485118385161661403d575b60008212927f800000000000000000000000000000000000000000000000000000000000000094848787058512911616614030575b82600087129505861290851616614023575b058312911616612ca4570290565b61402b612bc7565b614015565b614038612bc7565b614003565b614045612bc7565b613fce565b811561408e575b60001982147f8000000000000000000000000000000000000000000000000000000000000000821416614082570590565b61408a612bc7565b0590565b614096612cb0565b614051565b7f800000000000000000000000000000000000000000000000000000000000000081146140c9575b60000390565b6140d1612bc7565b6140c3565b909180156142585760006140ea8385613ceb565b1261422e578291816140fb84613f22565b6002820561410891613ceb565b906141129161404a565b9361411c91613ceb565b670de0b6b3a764000080938161413188613d49565b61413b9085613f95565b61414490613c74565b0582614150868a613f95565b61415990613c74565b0561416390613e1c565b61416c91613ceb565b956141778589613f95565b906141819161404a565b61418a91613dbe565b614194908361427e565b918061419f91613f95565b6141a890613c74565b056141b291613dbe565b916141bd8286613f95565b6141c690613c74565b05906141d19161427e565b6141da91613ceb565b6141e48280613f95565b906141ee84613e9f565b906141f891613f95565b61420191613dbe565b61420a8261409b565b9161421491614299565b61421d91613ceb565b906142279161425f565b6002900590565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5091505090565b9061427961426f612e3b93613f22565b6002830590613ceb565b61404a565b614294670de0b6b3a76400009261408a92613f95565b613c74565b9190600060038413156143365750600081138061432c575b156142f557915b6142ce614227846142c9818561404a565b613ceb565b905b8382036142db575050565b9092506142ef614227846142c9818561404a565b906142d0565b600081128061431a575b156143135761430d9061409b565b916142b8565b50816142b8565b50826143258261409b565b13156142ff565b50828113156142b1565b92905061433f57565b60019150565b919061435083615ba7565b61435a81846146f2565b5090936001600160a01b031684813b1561000e576040928351917f9dc29fac0000000000000000000000000000000000000000000000000000000083526000928381806143c260049a898c8401602090939291936001600160a01b0360408201951681520152565b038183895af1801561465a575b614647575b50833b1561397d5784517f9f9ef98800000000000000000000000000000000000000000000000000000000815286810191825290839082908190602001038183885af1801561463a575b614627575b50823b156146235783517fd8b8785300000000000000000000000000000000000000000000000000000000815285810191825290829082908190602001038183875af18015614616575b614603575b5082517f705727b5000000000000000000000000000000000000000000000000000000009081815260209081818881885afa9081156145f6575b84916145d9575b506effffffffffffffffffffffffffffff80911615159384614504575b5050505090506144de575050565b517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6145769450662386f26fc10000958751937f961be39100000000000000000000000000000000000000000000000000000000855280858b81855afa9485156145cc575b83956145ab575b50808495968b8b518095819382525afa92831561459e575b92614581575b5050169116612d4b565b1080388080806144d0565b6145979250803d10610709576106fa8183612b52565b388061456c565b6145a6612bba565b614566565b8495506145c58291823d8411610709576106fa8183612b52565b955061454e565b6145d4612bba565b614547565b6145f09150823d8411610709576106fa8183612b52565b386144b3565b6145fe612bba565b6144ac565b806106a161461092612af9565b38614472565b61461e612bba565b61446d565b5080fd5b806106a161463492612af9565b38614423565b614642612bba565b61441e565b806106a161465492612af9565b386143d4565b614662612bba565b6143cf565b6001600160a01b039093929361467c81615ba7565b61468683826146f2565b509290916146958380986139c5565b1690813b1561000e576040928351917f9dc29fac0000000000000000000000000000000000000000000000000000000083526000928381806143c260049a898c8401602090939291936001600160a01b0360408201951681520152565b916001600160a01b036000931691604051927f705727b500000000000000000000000000000000000000000000000000000000908185526020928386600481855afa958615614907575b6000966148d2575b509161483493916147b261476d613aaf956effffffffffffffffffffffffffffff809a16612c91565b604051907f18160ddd0000000000000000000000000000000000000000000000000000000082528582600481875afa9182156148c5575b6000926148a6575b50612ce0565b966147bc88612f52565b6147c58861409b565b9184604051947f961be3910000000000000000000000000000000000000000000000000000000086528186600481865afa958615614899575b60009661487a575b5060046040518094819382525afa94851561486d575b60009561484e575b50508060ca549416921690614914565b928383106148475750612e3b8383612c33565b9092508192565b614865929550803d10610709576106fa8183612b52565b923880614824565b614875612bba565b61481c565b614892919650823d8411610709576106fa8183612b52565b9438614806565b6148a1612bba565b6147fe565b6148be919250863d881161077f576107718183612b52565b90386147ac565b6148cd612bba565b6147a4565b613aaf93919650916147b261476d6148fa8795614834983d8811610709576106fa8183612b52565b9893955050509193614744565b61490f612bba565b61473c565b9290926149218184613ceb565b908361492c86613f22565b6002820561493991613ceb565b906149439161404a565b809461494e85613f22565b90670de0b6b3a76400009680889493600286950561496b91613ceb565b906149759161404a565b61497e91613dbe565b61498791613f95565b61499090613c74565b059161499b85613d49565b6149a491613f95565b6149ad90613c74565b056149b791613ceb565b600290059283926149c88480613f95565b92806149d391613f95565b6149dc91613f95565b6149e590613c74565b056149ef91613ceb565b906149f991614299565b614a0291613ceb565b612e3b91613dbe565b614b4691614a24614a1e614b3a93613416565b91613416565b93614a2f81836146f2565b50509081956001600160a01b03809416916040517f961be3910000000000000000000000000000000000000000000000000000000093848252602080978184600481865afa938415614be4575b600094614bc5575b50614aeb614aa4896effffffffffffffffffffffffffffff809716612c33565b958560405185816004817f705727b5000000000000000000000000000000000000000000000000000000009a8b82525afa908115614bb8575b600091614ba1575016612c33565b9516916040519687528187600481865afa968715614b94575b600097614b75575b5060046040518094819382525afa968715614b68575b600097614b49575b50508060ca549616931690614bf1565b61225060cb5482612cf6565b91565b614b60929750803d10610709576106fa8183612b52565b943880614b2a565b614b70612bba565b614b22565b614b8d919750823d8411610709576106fa8183612b52565b9538614b0c565b614b9c612bba565b614b04565b6122769150863d8811610709576106fa8183612b52565b614bc0612bba565b614add565b614bdd919450823d8411610709576106fa8183612b52565b9238614a84565b614bec612bba565b614a7c565b92919493909385158015614cb1575b61422e576118908461198585614c94816142798c614c72614c8a614c9f9f8f614c9a9f614c8561198b9f8f85670de0b6b3a7640000614c78614294614c7f948f614c72906119918c614279614c6b6142799f9e61426f9f614c646142799183613ceb565b9c80613f95565b9380613f95565b90613f95565b0590613dbe565b9d613ceb565b613f22565b611985818c61425f565b9261425f565b613dbe565b6000811215612e3b57612e3b9061409b565b508215614c00565b80614c9a61408a92614d3c600295611991614cd48480613f95565b9160017f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211600083131616614d4e575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616614d41575b881b613f22565b614299565b614d49612bc7565b614d35565b614d56612bc7565b614d05565b92939190614d6a828286614fa9565b8093919395614d7a8580996139c5565b614d97846001600160a01b031660005260d2602052604060002090565b614da2838254612c6c565b90556001600160a01b0380911693843b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600094614e0e949086908290602490829084905af18015614f9c575b614f89575b501693612c6c565b823b15614623576040517f9f9ef9880000000000000000000000000000000000000000000000000000000081526004810191909152662386f26fc1000092614f05929091818160248183875af18015614f7c575b614f69575b50604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481845afa938415614f5c575b8394614f36575b509080600492604051938480927f705727b50000000000000000000000000000000000000000000000000000000082525afa928315614f29575b92614f0c575b50506effffffffffffffffffffffffffffff8091169116612d4b565b106131b457565b614f229250803d10610709576106fa8183612b52565b3880614ee9565b614f31612bba565b614ee3565b8291945091614f53600493823d8411610709576106fa8183612b52565b94919250614ea9565b614f64612bba565b614ea2565b806106a1614f7692612af9565b38614e67565b614f84612bba565b614e62565b806106a1614f9692612af9565b38614e06565b614fa4612bba565b614e01565b91929092614fb88185856154a9565b809491809660008512156000146151255750505061507d6001600160a01b0361213d9216926040517f961be39100000000000000000000000000000000000000000000000000000000815260208082600481895afa918215615118575b6000926150f9575b506004816effffffffffffffffffffffffffffff80941697604051928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa9182156150ec575b6000926150cf575b50501692839185612c6c565b9161509c61216160d6546fffffffffffffffffffffffffffffffff1690565b83116150a757505050565b8561224b612e3b959697946122466150c9956150c295612d4b565b8092612c33565b93612c6c565b6150e59250803d10610709576106fa8183612b52565b3880615071565b6150f4612bba565b615069565b816151119293503d8411610709576106fa8183612b52565b903861501d565b615120612bba565b615015565b8093949297506001600160a01b0391959650166040517f961be39100000000000000000000000000000000000000000000000000000000815260208082600481865afa9182156152b7575b600092615298575b506004816effffffffffffffffffffffffffffff80941694604051928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa91821561528b575b60009261526e575b5050166151dd8161213d8885612c6c565b60d65492906fffffffffffffffffffffffffffffffff841610615204575050505050509190565b909193955061521592949750612d4b565b9060801c11156152445761522b6152329161409b565b84836152c4565b9061523f91938491614fa9565b905090565b60046040517f6158a9f8000000000000000000000000000000000000000000000000000000008152fd5b6152849250803d10610709576106fa8183612b52565b38806151cc565b615293612bba565b6151c4565b816152b09293503d8411610709576106fa8183612b52565b9038615178565b6152bf612bba565b615170565b6040516339420b4560e11b81529193926020926153ce906001600160a01b0384168582600481845afa91821561549c575b600092615479575b5061085f9061530b83613779565b96604051907f705727b50000000000000000000000000000000000000000000000000000000082528082600481865afa91821561546c575b60009261544d575b5060048161538a61537c61536461216160d65460801c90565b6effffffffffffffffffffffffffffff809716612c91565b670de0b6b3a7640000900490565b94604051928380927f961be3910000000000000000000000000000000000000000000000000000000082525afa918215610710576000926106e35750501690612c33565b91600195826153e76153e08787612c91565b8385614fa9565b50106152445791905b83871061540557505050612e3b929350612c91565b909192615415612f188289612c6c565b908361542b6154248885612c91565b8786614fa9565b501061543b5750925b91906153f0565b93965061544790612c3e565b95615434565b816154659293503d8411610709576106fa8183612b52565b903861534b565b615474612bba565b615343565b61085f91925061549590873d8911610745576107368183612b52565b91906152fd565b6154a4612bba565b6152f5565b9190600092838312615763575b6001600160a01b0380911693846040918251907f961be391000000000000000000000000000000000000000000000000000000009182815260209660049688838981895afa928315615756575b8493615737575b5086519189838a817f705727b5000000000000000000000000000000000000000000000000000000009a8b82525afa92831561572a575b859361570b575b5016898751928684528a848b81865afa9384156156fe575b86946156dd575b506155af93948b6effffffffffffffffffffffffffffff809716998c8c518097819382525afa9384156156d0575b87946156b1575b508886808060ca54971694169216614bf1565b988289139788958b90876156a7575b50508515615625575b50505050506155ff575050156155e75750614b466150c260cb5483612cf6565b91906155f6612e3b919361409b565b60cb5490612cf6565b517f9a6114b7000000000000000000000000000000000000000000000000000000008152fd5b9091928094955089129485615644575b505050505038808080806155c7565b8192939495508787518095819382525afa93841561569a575b9361567b575b505061566e8661409b565b9116103880808080615635565b615692929350803d10610709576106fa8183612b52565b903880615663565b6156a2612bba565b61565d565b1095508a386155be565b6156c99194508c8d3d10610709576106fa8183612b52565b923861559c565b6156d8612bba565b615595565b6155af94506156f8908c8d3d10610709576106fa8183612b52565b93615567565b615706612bba565b615560565b6157239193508a3d8c11610709576106fa8183612b52565b9138615548565b615732612bba565b615541565b61574f919350893d8b11610709576106fa8183612b52565b913861550a565b61575e612bba565b615503565b916157799061577360cb54613d49565b9061425f565b916154b6565b92919261578c8282612f83565b83156116f357614a1e61579e91613416565b92836001600160a01b0361581881851660006157ee604051976157e66339420b4560e11b998a81526020998a826004818a5afa91821561589e575b869261587f575b506158ab565b9a8b91614fa9565b939094849616946040519089825288826004818a5afa918215615872575b8492610bc35750612def565b981261584757505082612e3b9460046040518094819382525afa9283156121f6576000936121d7575050612def565b9150915082612e3b9460046040518094819382525afa9283156121f6576000936121d7575050612def565b61587a612bba565b61580c565b6158979192508b3d8d11610745576107368183612b52565b90386157e0565b6158a6612bba565b6157d9565b9060ff811660128110156158ca575090614c72612e0a612e3b93612db1565b6012106158d5575090565b906158e5612e0a612e3b93612d80565b9061404a565b610e506158f791613416565b6040517f18160ddd000000000000000000000000000000000000000000000000000000008082526020918281600481875afa908115615a50575b600091615a33575b5015615a2457612e3b9282604051927f705727b50000000000000000000000000000000000000000000000000000000084528184600481865afa938415615a17575b6000946159f8575b5060046040518094819382525afa9283156159eb575b6000936159b9575b50506effffffffffffffffffffffffffffff16612d4b565b6effffffffffffffffffffffffffffff92935090816159e392903d1061077f576107718183612b52565b9190386159a1565b6159f3612bba565b615999565b615a10919450823d8411610709576106fa8183612b52565b9238615983565b615a1f612bba565b61597b565b505050670de0b6b3a764000090565b615a4a9150833d851161077f576107718183612b52565b38615939565b615a58612bba565b615931565b615a69612e3b91613416565b6105ee6105d46001600160a01b0383166effffffffffffffffffffffffffffff61538a60046040517f99c91a640000000000000000000000000000000000000000000000000000000081526020928184818582958a5afa908115615b3d575b600091615b20575b50604051906339420b4560e11b8252838286818b5afa918215615b13575b600092615afb57506137c6565b61073e919250843d8611610745576107368183612b52565b615b1b612bba565b615aee565b615b379150833d851161077f576107718183612b52565b38615ad0565b615b45612bba565b615ac8565b6001906000198114612c07570190565b6001600160a01b039060d354811015615b9a575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a601541690565b615ba2613262565b615b6e565b615bc4816001600160a01b031660005260d2602052604060002090565b5480158015615e09575b615e0557615bf2615bec615be360cd54612c13565b60cc5490612c33565b82612cf6565b9081615d2e575b615c07915060cd5490612cf6565b80615c2b575b506001600160a01b0316600090815260d26020526040812055565b55565b615c3581836139f6565b50916001600160a01b0384169150813b1561000e576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810193909352600092838160248183875af18015615d21575b615d0e575b50813b1561397d576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810191909152600093615c289390928290602490829084905af18015615d01575b615cee575b509150615c0d565b806106a1615cfb92612af9565b38615ce6565b615d09612bba565b615ce1565b806106a1615d1b92612af9565b38615c90565b615d29612bba565b615c8b565b6001600160a01b038316615d79615d4d60d0546001600160a01b031690565b93604051906339420b4560e11b8252602082600481875afa918215611abd57600092611aa45750612def565b92813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b039190911660048201526024810193909352615c0792906000908290604490829084905af18015615df8575b615de5575b50615bf9565b806106a1615df292612af9565b38615ddf565b615e00612bba565b615dda565b5050565b5060ce548110615bce56fea2646970667358221220da6a9888030b20551086ab0e3011218b16daf19fd5ff7a6790e8ea4c3d88861a64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "addressOfAsset(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "details": "Asset needs to be created and added to pool before any operation. This function assumes tax free token.",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "exchangeRate(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "xr": "The exchange rate of LP token"
        }
      },
      "mintFee(address)": {
        "params": {
          "token": "The address of the token to collect fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "pauseAsset(address)": {
        "details": "pause asset, restricting deposit and swap operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quoteAmountIn(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromToken": "The initial ERC20 token",
          "toAmount": "The given output amount",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "amountIn": "The input amount required",
          "haircut": "The haircut that would be applied"
        }
      },
      "quotePotentialDeposit(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "amount": "The amount to deposit",
          "token": "The token to deposit by user"
        },
        "returns": {
          "liquidity": "The potential liquidity user would receive",
          "reward": "reward"
        }
      },
      "quotePotentialSwap(address,address,int256)": {
        "details": "In reverse quote, the haircut is in the `fromAsset`",
        "params": {
          "fromAmount": "The given input amount",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "fee": "The fee that would be applied"
        }
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "details": "take into account high cov ratio fee"
      },
      "removeAsset(address)": {
        "details": "Can only be called by owner",
        "params": {
          "token": "The address of token to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAmpFactor(uint256)": {
        "params": {
          "ampFactor_": "new pool's amplification factor"
        }
      },
      "setDev(address)": {
        "params": {
          "dev_": "new contract dev address"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "feeTo_": "new fee beneficiary"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "details": "This function assumes tax free token.",
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "unpauseAsset(address)": {
        "details": "unpause asset, enabling deposit and swap operations"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity to be withdrawn (in fromToken decimal)",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "toAmount": "The total amount withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "AssetRemoved(address,address)": {
        "notice": "An event thats emitted when asset is removed from Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "addressOfAsset(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "ampFactor()": {
        "notice": "Amplification factor"
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "dev()": {
        "notice": "Dev address"
      },
      "exchangeRate(address)": {
        "notice": "Returns the exchange rate of the LP token"
      },
      "getTokens()": {
        "notice": "Return list of tokens in the pool"
      },
      "haircutRate()": {
        "notice": "Haircut rate"
      },
      "initialize(uint256,uint256)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpDividendRatio()": {
        "notice": "LP dividend ratio : the ratio of haircut that should distribute to LP"
      },
      "mintFee(address)": {
        "notice": "Send fee collected to the fee beneficiary"
      },
      "mintFeeThreshold()": {
        "notice": "The threshold to mint fee (unit: WAD)"
      },
      "quoteAmountIn(address,address,int256)": {
        "notice": "Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)"
      },
      "quotePotentialDeposit(address,uint256)": {
        "notice": "Quotes potential deposit from pool"
      },
      "quotePotentialSwap(address,address,int256)": {
        "notice": "Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage)."
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "removeAsset(address)": {
        "notice": "Removes asset from asset struct"
      },
      "retentionRatio()": {
        "notice": "Retention ratio: the ratio of haircut that should stay in the pool"
      },
      "setAmpFactor(uint256)": {
        "notice": "Changes the pools amplification factor. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setFeeTo(address)": {
        "notice": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setMintFeeThreshold(uint256)": {
        "notice": "Set min fee to mint"
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "notice": "Enables withdrawing liquidity from an asset using LP from a different asset"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7384,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "_pausedAssets",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7518,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "ampFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 7521,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "haircutRate",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 7524,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "retentionRatio",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 7527,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "lpDividendRatio",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 7530,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "mintFeeThreshold",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 7533,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "dev",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 7535,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "feeTo",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 7537,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "masterWombat",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 7543,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "_feeCollected",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_contract(IAsset)4298,t_uint256)"
      },
      {
        "astId": 7547,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "_assets",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(AssetMap)7515_storage"
      },
      {
        "astId": 6828,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "startCovRatio",
        "offset": 0,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 6830,
        "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
        "label": "endCovRatio",
        "offset": 16,
        "slot": "214",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAsset)4298": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IAsset)4298)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IAsset)",
        "numberOfBytes": "32",
        "value": "t_contract(IAsset)4298"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IAsset)4298,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAsset)4298",
        "label": "mapping(contract IAsset => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetMap)7515_storage": {
        "encoding": "inplace",
        "label": "struct Pool.AssetMap",
        "members": [
          {
            "astId": 7505,
            "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7510,
            "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_contract(IAsset)4298)"
          },
          {
            "astId": 7514,
            "contract": "contracts/wombat-core/pool/HighCovRatioFeePool.sol:HighCovRatioFeePool",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}