{
  "address": "0xF80722121949C4Ae1047D9A3e26D25b71D8de4D2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_master",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergencyTokenWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "master",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "onReward",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newVote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalTotalVotes",
          "type": "uint256"
        }
      ],
      "name": "onVote",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokens",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tokenPerSec",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "accTokenPerShare",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "distributedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardDebt",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "unpaidRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc8aa0bf100d14043f028e424ad1156d5370909c0f75ec002dd5b3c9797181170",
  "receipt": {
    "to": null,
    "from": "0x9e031064ce7C3E9b6dda1FfCF9E5D41AFBbdfEEa",
    "contractAddress": "0xF80722121949C4Ae1047D9A3e26D25b71D8de4D2",
    "transactionIndex": 0,
    "gasUsed": "1688337",
    "logsBloom": "0x
    "blockHash": "0x1e57620778605161c0cc339f29306ac7f1be0535767170a1662fc9a1d7ef6c6d",
    "transactionHash": "0xc8aa0bf100d14043f028e424ad1156d5370909c0f75ec002dd5b3c9797181170",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25313552,
        "transactionHash": "0xc8aa0bf100d14043f028e424ad1156d5370909c0f75ec002dd5b3c9797181170",
        "address": "0xF80722121949C4Ae1047D9A3e26D25b71D8de4D2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e031064ce7c3e9b6dda1ffcf9e5d41afbbdfeea"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1e57620778605161c0cc339f29306ac7f1be0535767170a1662fc9a1d7ef6c6d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25313552,
        "transactionHash": "0xc8aa0bf100d14043f028e424ad1156d5370909c0f75ec002dd5b3c9797181170",
        "address": "0xF80722121949C4Ae1047D9A3e26D25b71D8de4D2",
        "topics": [
          "0x225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a",
          "0x0000000000000000000000000a3bb08b3a15a19b4de82f8acfc862606fb69a2d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x1e57620778605161c0cc339f29306ac7f1be0535767170a1662fc9a1d7ef6c6d"
      }
    ],
    "blockNumber": 25313552,
    "cumulativeGasUsed": "1688337",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x04D4e1C1F3D6539071b6D3849fDaED04d48D563d",
    "0x3A29dF144bB54A8bF3d20357c116befa7adE962d",
    1675325299,
    "0x0A3BB08b3a15A19b4De82F8AcFc862606FB69A2D",
    "0"
  ],
  "numDeployments": 1,
  "solcInputHash": "3244f2af385044922bc4e9fd0add1ce4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"onReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalTotalVotes\",\"type\":\"uint256\"}],\"name\":\"onVote\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenPerSec\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"accTokenPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"distributedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"unpaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyTokenWithdraw(address)\":{\"details\":\"only to be called by owner\"},\"onReward(address,uint256)\":{\"details\":\"Assume `_getTotalShare` isn't updated yet when this function is called\",\"params\":{\"_lpAmount\":\"The new amount of LP\",\"_user\":\"Address of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardRate(uint256,uint96)\":{\"params\":{\"_tokenPerSec\":\"The number of tokens to distribute per second\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balances()\":{\"notice\":\"View function to see balances of reward token.\"},\"emergencyTokenWithdraw(address)\":{\"notice\":\"avoids loosing funds in case there is any tokens sent to this contract\"},\"emergencyWithdraw()\":{\"notice\":\"In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens.\"},\"onReward(address,uint256)\":{\"notice\":\"Function called by Master whenever staker claims WOM harvest.Allows staker to also receive a 2nd reward token.\"},\"operator()\":{\"notice\":\"address of the operator\"},\"rewardInfo(uint256)\":{\"notice\":\"Info of the rewardInfo.\"},\"setOperator(address)\":{\"notice\":\"Set operator address\"},\"setRewardRate(uint256,uint96)\":{\"notice\":\"Sets the distribution reward rate. This will also update the rewardInfo.\"},\"userInfo(uint256,address)\":{\"notice\":\"tokenId => userId => UserInfo\"}},\"notice\":\"Simple bribe per sec. Distribute bribe rewards to voters Bribe.onVote->updateReward() is a bit different from SimpleRewarder. Here we reduce the original total amount of share\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/gauge/Bribe.sol\":\"Bribe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-governance/gauge/Bribe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '../interfaces/IBribe.sol';\\nimport '../rewarders/MultiRewarderPerSec.sol';\\n\\ninterface IVoter {\\n    struct GaugeWeight {\\n        uint128 allocPoint;\\n        uint128 voteWeight; // total amount of votes for an LP-token\\n    }\\n\\n    // lpToken => weight, equals to sum of votes for a LP token\\n    function weights(address _lpToken) external view returns (GaugeWeight memory);\\n\\n    // user address => lpToken => votes\\n    function votes(address _user, address _lpToken) external view returns (uint256);\\n}\\n\\n/**\\n * Simple bribe per sec. Distribute bribe rewards to voters\\n * Bribe.onVote->updateReward() is a bit different from SimpleRewarder.\\n * Here we reduce the original total amount of share\\n */\\ncontract Bribe is IBribe, MultiRewarderPerSec {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _master,\\n        IERC20 _lpToken,\\n        uint256 _startTimestamp,\\n        IERC20 _rewardToken,\\n        uint96 _tokenPerSec\\n    ) MultiRewarderPerSec(_master, _lpToken, _startTimestamp, _rewardToken, _tokenPerSec) {}\\n\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external override onlyMaster nonReentrant returns (uint256[] memory rewards) {\\n        _updateReward(originalTotalVotes);\\n        return _onReward(user, newVote);\\n    }\\n\\n    function onReward(\\n        address _user,\\n        uint256 _lpAmount\\n    ) external override onlyMaster nonReentrant returns (uint256[] memory rewards) {\\n        revert('Call onVote instead');\\n    }\\n\\n    function _getTotalShare() internal view override returns (uint256) {\\n        return IVoter(master).weights(address(lpToken)).voteWeight;\\n    }\\n\\n    function rewardLength() external view override(IBribe, MultiRewarderPerSec) returns (uint256) {\\n        return _rewardLength();\\n    }\\n\\n    function rewardTokens() external view override(IBribe, MultiRewarderPerSec) returns (IERC20[] memory tokens) {\\n        return _rewardTokens();\\n    }\\n\\n    function pendingTokens(\\n        address _user\\n    ) external view override(IBribe, MultiRewarderPerSec) returns (uint256[] memory tokens) {\\n        return _pendingTokens(_user);\\n    }\\n}\\n\",\"keccak256\":\"0x3a57ce22b749244e50dcba34042d2bc36ff33d55cdeecbcaeb5b4975ce3c5161\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x289e9cd8cfb67d77555c2b4ee92d437d48065fd4f2d94cce0288c73741f97c13\",\"license\":\"MIT\"},\"contracts/wombat-governance/interfaces/IMultiRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMultiRewarder {\\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2cae5469e2fd3201eb912287d022bbac97a4cd5fe7aa5775ac97eac4d855e84\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../interfaces/IMultiRewarder.sol';\\n\\n/**\\n * This is a sample contract to be used in the Master contract for partners to reward\\n * stakers with their native token alongside WOM.\\n *\\n * It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n *\\n * - This contract has no knowledge on the LP amount and Master is\\n *   responsible to pass the amount into this contract\\n * - Supports multiple reward tokens\\n */\\ncontract MultiRewarderPerSec is IMultiRewarder, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant ACC_TOKEN_PRECISION = 1e12;\\n    IERC20 public immutable lpToken;\\n    address public immutable master;\\n\\n    struct UserInfo {\\n        uint128 amount; // 20.18 fixed point.\\n        // if the pool is activated, rewardDebt should be > 0\\n        uint128 rewardDebt; // 20.18 fixed point. distributed reward per weight\\n        uint256 unpaidRewards; // 20.18 fixed point.\\n    }\\n\\n    /// @notice Info of each rewardInfo.\\n    struct RewardInfo {\\n        IERC20 rewardToken; // if rewardToken is 0, native token is used as reward token\\n        uint96 tokenPerSec; // 10.18 fixed point\\n        uint128 accTokenPerShare; // 26.12 fixed point. Amount of reward token each LP token is worth.\\n        uint128 distributedAmount; // 20.18 fixed point, depending on the decimals of the reward token. This value is used to\\n        // track the amount of distributed tokens. If `distributedAmount` is closed to the amount of total received\\n        // tokens, we should refill reward or prepare to stop distributing reward.\\n    }\\n\\n    /// @notice address of the operator\\n    /// @dev operator is able to set emission rate\\n    address public operator;\\n\\n    uint256 public lastRewardTimestamp;\\n\\n    /// @notice Info of the rewardInfo.\\n    RewardInfo[] public rewardInfo;\\n    /// @notice tokenId => userId => UserInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    event OnReward(address indexed rewardToken, address indexed user, uint256 amount);\\n    event RewardRateUpdated(address indexed rewardToken, uint256 oldRate, uint256 newRate);\\n\\n    modifier onlyMaster() {\\n        require(msg.sender == address(master), 'onlyMaster: only Master can call this function');\\n        _;\\n    }\\n\\n    modifier onlyOperatorOrOwner() {\\n        require(msg.sender == owner() || msg.sender == operator, 'onlyOperatorOrOwner');\\n        _;\\n    }\\n\\n    /// @notice payable function needed to receive BNB\\n    receive() external payable {}\\n\\n    constructor(address _master, IERC20 _lpToken, uint256 _startTimestamp, IERC20 _rewardToken, uint96 _tokenPerSec) {\\n        require(\\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\\n            'constructor: reward token must be a valid contract'\\n        );\\n        require(Address.isContract(address(_lpToken)), 'constructor: LP token must be a valid contract');\\n        require(Address.isContract(address(_master)), 'constructor: Master must be a valid contract');\\n        require(_startTimestamp >= block.timestamp);\\n\\n        master = _master;\\n        lpToken = _lpToken;\\n\\n        lastRewardTimestamp = _startTimestamp;\\n\\n        // use non-zero amount for accTokenPerShare as we want to check if user\\n        // has activated the pool by checking rewardDebt > 0\\n        RewardInfo memory reward = RewardInfo({\\n            rewardToken: _rewardToken,\\n            tokenPerSec: _tokenPerSec,\\n            accTokenPerShare: 1e18,\\n            distributedAmount: 0\\n        });\\n        rewardInfo.push(reward);\\n        emit RewardRateUpdated(address(_rewardToken), 0, _tokenPerSec);\\n    }\\n\\n    /// @notice Set operator address\\n    function setOperator(address _operator) external onlyOwner {\\n        operator = _operator;\\n    }\\n\\n    function addRewardToken(IERC20 _rewardToken, uint96 _tokenPerSec) external onlyOwner {\\n        _updateReward();\\n        // use non-zero amount for accTokenPerShare as we want to check if user\\n        // has activated the pool by checking rewardDebt > 0\\n        RewardInfo memory reward = RewardInfo({\\n            rewardToken: _rewardToken,\\n            tokenPerSec: _tokenPerSec,\\n            accTokenPerShare: 1e18,\\n            distributedAmount: 0\\n        });\\n        rewardInfo.push(reward);\\n        emit RewardRateUpdated(address(_rewardToken), 0, _tokenPerSec);\\n    }\\n\\n    function updateReward() public {\\n        _updateReward();\\n    }\\n\\n    /// @dev This function should be called before lpSupply and sumOfFactors update\\n    function _updateReward() internal {\\n        _updateReward(_getTotalShare());\\n    }\\n\\n    function _updateReward(uint256 totalShare) internal {\\n        if (block.timestamp > lastRewardTimestamp && totalShare > 0) {\\n            uint256 length = rewardInfo.length;\\n            for (uint256 i; i < length; ++i) {\\n                RewardInfo storage reward = rewardInfo[i];\\n                uint256 timeElapsed = block.timestamp - lastRewardTimestamp;\\n                uint256 tokenReward = timeElapsed * reward.tokenPerSec;\\n                // use `max(totalShare, 1e18)` in case of overflow\\n                reward.accTokenPerShare += toUint128((tokenReward * ACC_TOKEN_PRECISION) / max(totalShare, 1e18));\\n                reward.distributedAmount += toUint128(tokenReward);\\n            }\\n            lastRewardTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @notice Sets the distribution reward rate. This will also update the rewardInfo.\\n    /// @param _tokenPerSec The number of tokens to distribute per second\\n    function setRewardRate(uint256 _tokenId, uint96 _tokenPerSec) external onlyOperatorOrOwner {\\n        require(_tokenPerSec <= 10000e18, 'reward rate too high'); // in case of accTokenPerShare overflow\\n        _updateReward();\\n\\n        uint256 oldRate = rewardInfo[_tokenId].tokenPerSec;\\n        rewardInfo[_tokenId].tokenPerSec = _tokenPerSec;\\n\\n        emit RewardRateUpdated(address(rewardInfo[_tokenId].rewardToken), oldRate, _tokenPerSec);\\n    }\\n\\n    /// @notice Function called by Master whenever staker claims WOM harvest.\\n    /// @notice Allows staker to also receive a 2nd reward token.\\n    /// @dev Assume `_getTotalShare` isn't updated yet when this function is called\\n    /// @param _user Address of user\\n    /// @param _lpAmount The new amount of LP\\n    function onReward(\\n        address _user,\\n        uint256 _lpAmount\\n    ) external virtual override onlyMaster nonReentrant returns (uint256[] memory rewards) {\\n        _updateReward();\\n        return _onReward(_user, _lpAmount);\\n    }\\n\\n    function _onReward(address _user, uint256 _lpAmount) internal virtual returns (uint256[] memory rewards) {\\n        uint256 length = rewardInfo.length;\\n        rewards = new uint256[](length);\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage reward = rewardInfo[i];\\n            UserInfo storage user = userInfo[i][_user];\\n            IERC20 rewardToken = reward.rewardToken;\\n\\n            if (user.rewardDebt > 0) {\\n                // rewardDebt > 0 indicates the user has activated the pool and we should distribute rewards\\n                uint256 pending = ((user.amount * uint256(reward.accTokenPerShare)) / ACC_TOKEN_PRECISION) +\\n                    user.unpaidRewards -\\n                    user.rewardDebt;\\n\\n                if (address(rewardToken) == address(0)) {\\n                    // is native token\\n                    uint256 tokenBalance = address(this).balance;\\n                    if (pending > tokenBalance) {\\n                        // Note: this line may fail if the receiver is a contract and refuse to receive BNB\\n                        (bool success, ) = _user.call{value: tokenBalance}('');\\n                        require(success, 'Transfer failed');\\n                        rewards[i] = tokenBalance;\\n                        user.unpaidRewards = pending - tokenBalance;\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}('');\\n                        require(success, 'Transfer failed');\\n                        rewards[i] = pending;\\n                        user.unpaidRewards = 0;\\n                    }\\n                } else {\\n                    // ERC20 token\\n                    uint256 tokenBalance = rewardToken.balanceOf(address(this));\\n                    if (pending > tokenBalance) {\\n                        rewardToken.safeTransfer(_user, tokenBalance);\\n                        rewards[i] = tokenBalance;\\n                        user.unpaidRewards = pending - tokenBalance;\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                        rewards[i] = pending;\\n                        user.unpaidRewards = 0;\\n                    }\\n                }\\n            }\\n\\n            user.amount = toUint128(_lpAmount);\\n            user.rewardDebt = toUint128((_lpAmount * reward.accTokenPerShare) / ACC_TOKEN_PRECISION);\\n            emit OnReward(address(rewardToken), _user, rewards[i]);\\n        }\\n    }\\n\\n    /// @notice returns reward length\\n    function rewardLength() external view virtual override returns (uint256) {\\n        return _rewardLength();\\n    }\\n\\n    function _rewardLength() internal view returns (uint256) {\\n        return rewardInfo.length;\\n    }\\n\\n    /// @notice View function to see pending tokens\\n    /// @param _user Address of user.\\n    /// @return rewards reward for a given user.\\n    function pendingTokens(address _user) external view virtual override returns (uint256[] memory rewards) {\\n        return _pendingTokens(_user);\\n    }\\n\\n    function _pendingTokens(address _user) internal view returns (uint256[] memory rewards) {\\n        uint256 length = rewardInfo.length;\\n        rewards = new uint256[](length);\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory pool = rewardInfo[i];\\n            UserInfo storage user = userInfo[i][_user];\\n\\n            uint256 accTokenPerShare = pool.accTokenPerShare;\\n            uint256 totalShare = _getTotalShare();\\n\\n            if (block.timestamp > lastRewardTimestamp && totalShare > 0) {\\n                uint256 timeElapsed = block.timestamp - lastRewardTimestamp;\\n                uint256 tokenReward = timeElapsed * pool.tokenPerSec;\\n                // use `max(totalShare, 1e18)` in case of overflow\\n                accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / max(totalShare, 1e18);\\n            }\\n\\n            rewards[i] =\\n                ((user.amount * uint256(accTokenPerShare)) / ACC_TOKEN_PRECISION) -\\n                user.rewardDebt +\\n                user.unpaidRewards;\\n        }\\n    }\\n\\n    function _getTotalShare() internal view virtual returns (uint256) {\\n        return lpToken.balanceOf(address(master));\\n    }\\n\\n    /// @notice return an array of reward tokens\\n    function _rewardTokens() internal view returns (IERC20[] memory tokens) {\\n        uint256 length = rewardInfo.length;\\n        tokens = new IERC20[](length);\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory pool = rewardInfo[i];\\n            tokens[i] = pool.rewardToken;\\n        }\\n    }\\n\\n    function rewardTokens() external view virtual override returns (IERC20[] memory tokens) {\\n        return _rewardTokens();\\n    }\\n\\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\\n    /// withdrawal of remaining tokens.\\n    function emergencyWithdraw() external onlyOwner {\\n        uint256 length = rewardInfo.length;\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage pool = rewardInfo[i];\\n            emergencyTokenWithdraw(address(pool.rewardToken));\\n        }\\n    }\\n\\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\\n    /// @dev only to be called by owner\\n    function emergencyTokenWithdraw(address token) public onlyOwner {\\n        // send that balance back to owner\\n        if (token == address(0)) {\\n            // is native token\\n            (bool success, ) = msg.sender.call{value: address(this).balance}('');\\n            require(success, 'Transfer failed');\\n        } else {\\n            IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// @notice View function to see balances of reward token.\\n    function balances() external view returns (uint256[] memory balances_) {\\n        uint256 length = rewardInfo.length;\\n        balances_ = new uint256[](length);\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage pool = rewardInfo[i];\\n            if (address(pool.rewardToken) == address(0)) {\\n                // is native token\\n                balances_[i] = address(this).balance;\\n            } else {\\n                balances_[i] = pool.rewardToken.balanceOf(address(this));\\n            }\\n        }\\n    }\\n\\n    function toUint128(uint256 val) internal pure returns (uint128) {\\n        if (val > type(uint128).max) revert('uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x07d19aa8eb7e6cf0dee0a88b77cf68a363f336b9db4d71119084a7778a9933ce\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c0346200037c57601f62001eb938819003918201601f1916830192916001600160401b03918285118486101762000381578160a092859260409788528339810103126200037c578151916001600160a01b039182841684036200037c576020906200006d82840162000397565b9386840151936080620000836060830162000397565b9101516001600160601b03811695908690036200037c576000968754988460018060a01b03199433868d16178b558c519b823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08d80a36001805516998a3b1580159062000373575b156200031657508482163b15620002bb57803b1562000262574283106200025e5760a0526080526003558751926080840190848210908211176200024a57885286835283830185815288840191670de0b6b3a7640000835260608501938885526004546801000000000000000081101562000236576001810180600455811015620002225760048a52878a209651935160a01b909216921691909117600191821b9094019384559051915160801b6001600160801b0319166001600160801b03929092169190911791015584519283528201527f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a908390a251611b0c9081620003ad82396080518181816102c60152611369015260a05181818161036001528181610cde01528181610f4301526113900152f35b634e487b7160e01b8a52603260045260248afd5b634e487b7160e01b8a52604160045260248afd5b634e487b7160e01b87526041600452602487fd5b8880fd5b8a5162461bcd60e51b815260048101889052602c60248201527f636f6e7374727563746f723a204d6173746572206d757374206265206120766160448201526b1b1a590818dbdb9d1c9858dd60a21b6064820152608490fd5b8a5162461bcd60e51b815260048101889052602e60248201527f636f6e7374727563746f723a204c5020746f6b656e206d75737420626520612060448201526d1d985b1a590818dbdb9d1c9858dd60921b6064820152608490fd5b62461bcd60e51b815260048101889052603260248201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604482015271194818481d985b1a590818dbdb9d1c9858dd60721b6064820152608490fd5b508a15620000ee565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200037c5756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630bc79363146101bf578063570ca735146101b65780635fcbd285146101ad57806365d9aa4a146101a4578063715018a61461019b5780637bb98a681461019257806381a00f83146101895780638da5cb5b1461018057806393f1a40b14610177578063ad5688271461016e578063b3ab15fb14610165578063b95c57461461015c578063c031a66f14610153578063c2b18aa01461014a578063c372328814610141578063db2e21bc14610138578063edc9d7721461012f578063ee97f7f314610126578063f2fde38b1461011d578063f36c0a72146101145763f8077fae0361000e5761010f611033565b61000e565b5061010f611016565b5061010f610f67565b5061010f610f22565b5061010f610e43565b5061010f610d58565b5061010f610cb4565b5061010f610c31565b5061010f610a84565b5061010f610a65565b5061010f610a18565b5061010f610960565b5061010f6108ef565b5061010f6108c7565b5061010f610865565b5061010f61070f565b5061010f6106ad565b5061010f610336565b5061010f6102a5565b5061010f61027d565b5061010f6101e8565b602435906bffffffffffffffffffffffff821682036101e357565b600080fd5b50346101e35760403660031901126101e3576102026101c8565b6001600160a01b038060005416331490811561026f575b501561022b57610019906004356115e7565b606460405162461bcd60e51b815260206004820152601360248201527f6f6e6c794f70657261746f724f724f776e6572000000000000000000000000006044820152fd5b905060025416331438610219565b50346101e35760003660031901126101e35760206001600160a01b0360025416604051908152f35b50346101e35760003660031901126101e35760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b6001600160a01b038116036101e357565b6020908160408183019282815285518094520193019160005b828110610322575050505090565b835185529381019392810192600101610314565b50346101e35760603660031901126101e3576103536004356102ea565b6103876001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633146110e5565b61039660026001541415611156565b60026001556103a6604435611514565b6004546103b281611701565b9060005b8181106103da576103d6836103ca60018055565b604051918291826102fb565b0390f35b806103e76105319261081d565b506104db61041d600435610405856000526005602052604060002090565b906001600160a01b0316600052602052604060002090565b6104b36104ae6104a361049b61048f600161043f89546001600160a01b031690565b988d88548060801c610536575b505061048161045c602435611a65565b89906001600160801b03166fffffffffffffffffffffffffffffffff19825416179055565b01546001600160801b031690565b6001600160801b031690565b6024356114c6565b64e8d4a51000900490565b611a65565b6001600160801b036fffffffffffffffffffffffffffffffff1983549260801b169116179055565b6104e5828661174f565b517f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b527604051806105296001600160a01b038060043516961694829190602083019252565b0390a361147b565b6103b6565b8c61057e8b6105798761056a6104a361055b61048f848c01546001600160801b031690565b6001600160801b0389166114c6565b92019460801c91855490611733565b611497565b8d6001600160a01b038116806105fc57505047918282116000146105d7576105c783916105cd95966105c26000808080886004355af16105bc611771565b506117bf565b61174f565b52611497565b90555b8d3861044c565b8192506000946105c2868080806105f5976004355af16105bc611771565b52556105d0565b6040516370a0823160e01b815230600482015291956020949290918590829060249082905afa9485156106a0575b600095610671575b50508383111561065b5783916105c7916105c28461065498996004359061180a565b90556105d0565b8293506105c26105f5936000976004359061180a565b610691929550803d10610699575b61068981836111fd565b810190611740565b923880610632565b503d61067f565b6106a8611324565b61062a565b50346101e35760008060031936011261070c578080546001600160a01b03196001600160a01b038216916106e2338414611052565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50346101e35760008060031936011261070c5760049081549061073182611701565b92815b83811061074957604051806103d687826102fb565b8061077661076a61075c6107969461081d565b50546001600160a01b031690565b6001600160a01b031690565b6001600160a01b03811661079b575047610790828861174f565b5261147b565b610734565b6040516370a0823160e01b815230858201908152602092839183919082908190850103915afa9182156107f9575b86926107dc575b5050610790828861174f565b6107f29250803d106106995761068981836111fd565b38806107d0565b610801611324565b6107c9565b50634e487b7160e01b600052603260045260246000fd5b600454811015610858575b600460005260011b7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b610860610806565b610828565b50346101e35760203660031901126101e3576004356004548110156101e35761088f60809161081d565b5060018154910154604051916001600160a01b038116835260a01c60208301526001600160801b0381166040830152821c6060820152f35b50346101e35760003660031901126101e35760206001600160a01b0360005416604051908152f35b50346101e35760403660031901126101e357606061093a602435610912816102ea565b60043560005260056020526040600020906001600160a01b0316600052602052604060002090565b60018154910154604051916001600160801b038116835260801c60208301526040820152f35b50346101e35760203660031901126101e35760043561097e816102ea565b6001600160a01b03600091610997828454163314611052565b16806109b457506109b18180808047335af16105bc611771565b80f35b6040516370a0823160e01b81523060048201526109b191602082602481845afa918215610a0b575b84926109eb575b50339061180a565b610a0491925060203d81116106995761068981836111fd565b90386109e3565b610a13611324565b6109dc565b50346101e35760203660031901126101e357600435610a36816102ea565b6001600160a01b0390610a4e82600054163314611052565b166001600160a01b03196002541617600255600080f35b50346101e35760003660031901126101e3576020600454604051908152f35b50346101e3576020806003193601126101e35760043590610aa4826102ea565b60045490610ab182611701565b92600060035491824211915b858110610ad257604051806103d689826102fb565b80610b67610aeb610ae5610b719461081d565b50611a23565b6001610b5e610b0887610405876000526005602052604060002090565b92610b2061048f60408301516001600160801b031690565b90610b29611331565b908c8c8c80610be4575b610b76575b50505050610b546104a38554926001600160801b0384166114c6565b9060801c90611497565b91015490611733565b610790828a61174f565b610abd565b610bc9610bc4610bd594610bbe610bad610bdb999896610b99610bcf9742611497565b9301516bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690565b906114c6565b6114ac565b91611abd565b906114d9565b90611733565b38808c8c610b38565b50831515610b33565b6020908160408183019282815285518094520193019160005b828110610c14575050505090565b83516001600160a01b031685529381019392810192600101610c06565b50346101e35760003660031901126101e357600454610c4f816116da565b90610c5d60405192836111fd565b808252601f19610c6c826116da565b0136602084013760005b818110610c8b57604051806103d68582610bed565b806001600160a01b03610ca3610ae5610caf9461081d565b5116610790828661174f565b610c76565b50346101e35760403660031901126101e357610cd16004356102ea565b610d056001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633146110e5565b610d1460026001541415611156565b606460405162461bcd60e51b815260206004820152601360248201527f43616c6c206f6e566f746520696e7374656164000000000000000000000000006044820152fd5b50346101e35760008060031936011261070c576001600160a01b03610d81818354163314611052565b6004805491835b838110610d93578480f35b8082610da1610dd09361081d565b505416610db2338589541614611052565b80610dd55750610dcb8680808047335af16105bc611771565b61147b565b610d88565b6040516370a0823160e01b815230868201908152610dcb92602092909183908290819083010381855afa928315610e36575b8a93610e17575b5050339061180a565b610e2e929350803d106106995761068981836111fd565b903880610e0e565b610e3e611324565b610e07565b50346101e35760403660031901126101e357600435610e61816102ea565b7f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a610f1d610e8d6101c8565b610ef76001600160a01b03610ea781600054163314611052565b610eb7610eb2611331565b611514565b60405195610ec4876111b8565b16948581526bffffffffffffffffffffffff83166020820152670de0b6b3a764000060408201526000606082015261121f565b60408051600081526bffffffffffffffffffffffff909216602083015290918291820190565b0390a2005b50346101e35760003660031901126101e35760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101e35760203660031901126101e357600435610f85816102ea565b6001600160a01b03610f9c81600054163314611052565b811615610fac576100199061109d565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346101e35760003660031901126101e357610019610eb2611331565b50346101e35760003660031901126101e3576020600354604051908152f35b1561105957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b156110ec57565b608460405162461bcd60e51b815260206004820152602e60248201527f6f6e6c794d61737465723a206f6e6c79204d61737465722063616e2063616c6c60448201527f20746869732066756e6374696f6e0000000000000000000000000000000000006064820152fd5b1561115d57565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b50634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176111d457604052565b6111dc6111a1565b604052565b6040810190811067ffffffffffffffff8211176111d457604052565b90601f8019910116810190811067ffffffffffffffff8211176111d457604052565b6112f4907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c60045468010000000000000000811015611303575b60018101806004558110156112f6575b60046000528251602084015160a01b6001600160a01b0319166001600160a01b03909116177f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60019290921b9182015560408301516060909301516001600160801b039093166fffffffffffffffffffffffffffffffff1960809490941b9390931692909217910155565b565b6112fe610806565b611269565b61130b6111a1565b611259565b51906001600160801b03821682036101e357565b506040513d6000823e3d90fd5b60408051907fa7cac84600000000000000000000000000000000000000000000000000000000825280826024816001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001660048301527f0000000000000000000000000000000000000000000000000000000000000000165afa918215611457575b6000926113dd575b5050602001516113da906001600160801b031661048f565b90565b90918282813d8311611450575b6113f481836111fd565b8101031261070c57506020826114388261048f946113da9651938085019085821067ffffffffffffffff831117611443575b5261143081611310565b845201611310565b8282015292506113c2565b61144b6111a1565b611426565b503d6113ea565b61145f611324565b6113ba565b50634e487b7160e01b600052601160045260246000fd5b600190600019811461148b570190565b611493611464565b0190565b919082039182116114a457565b6112f4611464565b9064e8d4a51000918281029281840414901517156114a457565b818102929181159184041417156114a457565b81156114e3570490565b634e487b7160e01b600052601260045260246000fd5b9190916001600160801b03808094169116019182116114a457565b600380544211806115de575b611528575050565b6004549160005b83811061154357505050506112f442600355565b80610dcb6115536115d99361081d565b506104b36115cf611576611568895442611497565b610bbe610bad865460a01c90565b6104ae6115aa60016115916104ae8c610bcf610bc9886114ac565b9601956115a587546001600160801b031690565b6114f9565b85906001600160801b03166fffffffffffffffffffffffffffffffff19825416179055565b825460801c6114f9565b61152f565b50811515611520565b906bffffffffffffffffffffffff81169169021e19e0c9bab24000008311611696577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a916001600160a01b03611685604093611644610eb2611331565b6116806116508261081d565b505460a01c9461165f8361081d565b50906001600160a01b036001600160a01b031983549260a01b169116179055565b61081d565b5054169382519182526020820152a2565b606460405162461bcd60e51b815260206004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b60209067ffffffffffffffff81116116f4575b60051b0190565b6116fc6111a1565b6116ed565b9061170b826116da565b61171860405191826111fd565b8281528092611729601f19916116da565b0190602036910137565b919082018092116114a457565b908160209103126101e3575190565b6020918151811015611764575b60051b010190565b61176c610806565b61175c565b3d156117ba573d9067ffffffffffffffff82116117ad575b604051916117a1601f8201601f1916602001846111fd565b82523d6000602084013e565b6117b56111a1565b611789565b606090565b156117c657565b606460405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b9160405191602093848401927fa9059cbb0000000000000000000000000000000000000000000000000000000084526001600160a01b03809316602486015260448501526044845261185b846111b8565b16906040519261186a846111e1565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b156118db576118b6939260009283809351925af16118b0611771565b906119a8565b805190816118c357505050565b826112f4936118d693830101910161191f565b611937565b6064856040519062461bcd60e51b82526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b908160209103126101e3575180151581036101e35790565b1561193e57565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b909190156119b4575090565b8151156119c45750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611a0a575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506119e7565b90604051611a30816111b8565b60606001829480546001600160a01b038116855260a01c602085015201546001600160801b038116604084015260801c910152565b6001600160801b0390818111611a79571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b670de0b6b3a7640000808210611ad1575090565b90509056fea264697066735822122028577f906fdbbfcadcb6f435379ee7e55a34baf8635ca19fb0327fa52b4ed17664736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630bc79363146101bf578063570ca735146101b65780635fcbd285146101ad57806365d9aa4a146101a4578063715018a61461019b5780637bb98a681461019257806381a00f83146101895780638da5cb5b1461018057806393f1a40b14610177578063ad5688271461016e578063b3ab15fb14610165578063b95c57461461015c578063c031a66f14610153578063c2b18aa01461014a578063c372328814610141578063db2e21bc14610138578063edc9d7721461012f578063ee97f7f314610126578063f2fde38b1461011d578063f36c0a72146101145763f8077fae0361000e5761010f611033565b61000e565b5061010f611016565b5061010f610f67565b5061010f610f22565b5061010f610e43565b5061010f610d58565b5061010f610cb4565b5061010f610c31565b5061010f610a84565b5061010f610a65565b5061010f610a18565b5061010f610960565b5061010f6108ef565b5061010f6108c7565b5061010f610865565b5061010f61070f565b5061010f6106ad565b5061010f610336565b5061010f6102a5565b5061010f61027d565b5061010f6101e8565b602435906bffffffffffffffffffffffff821682036101e357565b600080fd5b50346101e35760403660031901126101e3576102026101c8565b6001600160a01b038060005416331490811561026f575b501561022b57610019906004356115e7565b606460405162461bcd60e51b815260206004820152601360248201527f6f6e6c794f70657261746f724f724f776e6572000000000000000000000000006044820152fd5b905060025416331438610219565b50346101e35760003660031901126101e35760206001600160a01b0360025416604051908152f35b50346101e35760003660031901126101e35760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b6001600160a01b038116036101e357565b6020908160408183019282815285518094520193019160005b828110610322575050505090565b835185529381019392810192600101610314565b50346101e35760603660031901126101e3576103536004356102ea565b6103876001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633146110e5565b61039660026001541415611156565b60026001556103a6604435611514565b6004546103b281611701565b9060005b8181106103da576103d6836103ca60018055565b604051918291826102fb565b0390f35b806103e76105319261081d565b506104db61041d600435610405856000526005602052604060002090565b906001600160a01b0316600052602052604060002090565b6104b36104ae6104a361049b61048f600161043f89546001600160a01b031690565b988d88548060801c610536575b505061048161045c602435611a65565b89906001600160801b03166fffffffffffffffffffffffffffffffff19825416179055565b01546001600160801b031690565b6001600160801b031690565b6024356114c6565b64e8d4a51000900490565b611a65565b6001600160801b036fffffffffffffffffffffffffffffffff1983549260801b169116179055565b6104e5828661174f565b517f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b527604051806105296001600160a01b038060043516961694829190602083019252565b0390a361147b565b6103b6565b8c61057e8b6105798761056a6104a361055b61048f848c01546001600160801b031690565b6001600160801b0389166114c6565b92019460801c91855490611733565b611497565b8d6001600160a01b038116806105fc57505047918282116000146105d7576105c783916105cd95966105c26000808080886004355af16105bc611771565b506117bf565b61174f565b52611497565b90555b8d3861044c565b8192506000946105c2868080806105f5976004355af16105bc611771565b52556105d0565b6040516370a0823160e01b815230600482015291956020949290918590829060249082905afa9485156106a0575b600095610671575b50508383111561065b5783916105c7916105c28461065498996004359061180a565b90556105d0565b8293506105c26105f5936000976004359061180a565b610691929550803d10610699575b61068981836111fd565b810190611740565b923880610632565b503d61067f565b6106a8611324565b61062a565b50346101e35760008060031936011261070c578080546001600160a01b03196001600160a01b038216916106e2338414611052565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50346101e35760008060031936011261070c5760049081549061073182611701565b92815b83811061074957604051806103d687826102fb565b8061077661076a61075c6107969461081d565b50546001600160a01b031690565b6001600160a01b031690565b6001600160a01b03811661079b575047610790828861174f565b5261147b565b610734565b6040516370a0823160e01b815230858201908152602092839183919082908190850103915afa9182156107f9575b86926107dc575b5050610790828861174f565b6107f29250803d106106995761068981836111fd565b38806107d0565b610801611324565b6107c9565b50634e487b7160e01b600052603260045260246000fd5b600454811015610858575b600460005260011b7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b610860610806565b610828565b50346101e35760203660031901126101e3576004356004548110156101e35761088f60809161081d565b5060018154910154604051916001600160a01b038116835260a01c60208301526001600160801b0381166040830152821c6060820152f35b50346101e35760003660031901126101e35760206001600160a01b0360005416604051908152f35b50346101e35760403660031901126101e357606061093a602435610912816102ea565b60043560005260056020526040600020906001600160a01b0316600052602052604060002090565b60018154910154604051916001600160801b038116835260801c60208301526040820152f35b50346101e35760203660031901126101e35760043561097e816102ea565b6001600160a01b03600091610997828454163314611052565b16806109b457506109b18180808047335af16105bc611771565b80f35b6040516370a0823160e01b81523060048201526109b191602082602481845afa918215610a0b575b84926109eb575b50339061180a565b610a0491925060203d81116106995761068981836111fd565b90386109e3565b610a13611324565b6109dc565b50346101e35760203660031901126101e357600435610a36816102ea565b6001600160a01b0390610a4e82600054163314611052565b166001600160a01b03196002541617600255600080f35b50346101e35760003660031901126101e3576020600454604051908152f35b50346101e3576020806003193601126101e35760043590610aa4826102ea565b60045490610ab182611701565b92600060035491824211915b858110610ad257604051806103d689826102fb565b80610b67610aeb610ae5610b719461081d565b50611a23565b6001610b5e610b0887610405876000526005602052604060002090565b92610b2061048f60408301516001600160801b031690565b90610b29611331565b908c8c8c80610be4575b610b76575b50505050610b546104a38554926001600160801b0384166114c6565b9060801c90611497565b91015490611733565b610790828a61174f565b610abd565b610bc9610bc4610bd594610bbe610bad610bdb999896610b99610bcf9742611497565b9301516bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690565b906114c6565b6114ac565b91611abd565b906114d9565b90611733565b38808c8c610b38565b50831515610b33565b6020908160408183019282815285518094520193019160005b828110610c14575050505090565b83516001600160a01b031685529381019392810192600101610c06565b50346101e35760003660031901126101e357600454610c4f816116da565b90610c5d60405192836111fd565b808252601f19610c6c826116da565b0136602084013760005b818110610c8b57604051806103d68582610bed565b806001600160a01b03610ca3610ae5610caf9461081d565b5116610790828661174f565b610c76565b50346101e35760403660031901126101e357610cd16004356102ea565b610d056001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633146110e5565b610d1460026001541415611156565b606460405162461bcd60e51b815260206004820152601360248201527f43616c6c206f6e566f746520696e7374656164000000000000000000000000006044820152fd5b50346101e35760008060031936011261070c576001600160a01b03610d81818354163314611052565b6004805491835b838110610d93578480f35b8082610da1610dd09361081d565b505416610db2338589541614611052565b80610dd55750610dcb8680808047335af16105bc611771565b61147b565b610d88565b6040516370a0823160e01b815230868201908152610dcb92602092909183908290819083010381855afa928315610e36575b8a93610e17575b5050339061180a565b610e2e929350803d106106995761068981836111fd565b903880610e0e565b610e3e611324565b610e07565b50346101e35760403660031901126101e357600435610e61816102ea565b7f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a610f1d610e8d6101c8565b610ef76001600160a01b03610ea781600054163314611052565b610eb7610eb2611331565b611514565b60405195610ec4876111b8565b16948581526bffffffffffffffffffffffff83166020820152670de0b6b3a764000060408201526000606082015261121f565b60408051600081526bffffffffffffffffffffffff909216602083015290918291820190565b0390a2005b50346101e35760003660031901126101e35760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101e35760203660031901126101e357600435610f85816102ea565b6001600160a01b03610f9c81600054163314611052565b811615610fac576100199061109d565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346101e35760003660031901126101e357610019610eb2611331565b50346101e35760003660031901126101e3576020600354604051908152f35b1561105957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b156110ec57565b608460405162461bcd60e51b815260206004820152602e60248201527f6f6e6c794d61737465723a206f6e6c79204d61737465722063616e2063616c6c60448201527f20746869732066756e6374696f6e0000000000000000000000000000000000006064820152fd5b1561115d57565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b50634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176111d457604052565b6111dc6111a1565b604052565b6040810190811067ffffffffffffffff8211176111d457604052565b90601f8019910116810190811067ffffffffffffffff8211176111d457604052565b6112f4907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c60045468010000000000000000811015611303575b60018101806004558110156112f6575b60046000528251602084015160a01b6001600160a01b0319166001600160a01b03909116177f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60019290921b9182015560408301516060909301516001600160801b039093166fffffffffffffffffffffffffffffffff1960809490941b9390931692909217910155565b565b6112fe610806565b611269565b61130b6111a1565b611259565b51906001600160801b03821682036101e357565b506040513d6000823e3d90fd5b60408051907fa7cac84600000000000000000000000000000000000000000000000000000000825280826024816001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001660048301527f0000000000000000000000000000000000000000000000000000000000000000165afa918215611457575b6000926113dd575b5050602001516113da906001600160801b031661048f565b90565b90918282813d8311611450575b6113f481836111fd565b8101031261070c57506020826114388261048f946113da9651938085019085821067ffffffffffffffff831117611443575b5261143081611310565b845201611310565b8282015292506113c2565b61144b6111a1565b611426565b503d6113ea565b61145f611324565b6113ba565b50634e487b7160e01b600052601160045260246000fd5b600190600019811461148b570190565b611493611464565b0190565b919082039182116114a457565b6112f4611464565b9064e8d4a51000918281029281840414901517156114a457565b818102929181159184041417156114a457565b81156114e3570490565b634e487b7160e01b600052601260045260246000fd5b9190916001600160801b03808094169116019182116114a457565b600380544211806115de575b611528575050565b6004549160005b83811061154357505050506112f442600355565b80610dcb6115536115d99361081d565b506104b36115cf611576611568895442611497565b610bbe610bad865460a01c90565b6104ae6115aa60016115916104ae8c610bcf610bc9886114ac565b9601956115a587546001600160801b031690565b6114f9565b85906001600160801b03166fffffffffffffffffffffffffffffffff19825416179055565b825460801c6114f9565b61152f565b50811515611520565b906bffffffffffffffffffffffff81169169021e19e0c9bab24000008311611696577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a916001600160a01b03611685604093611644610eb2611331565b6116806116508261081d565b505460a01c9461165f8361081d565b50906001600160a01b036001600160a01b031983549260a01b169116179055565b61081d565b5054169382519182526020820152a2565b606460405162461bcd60e51b815260206004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b60209067ffffffffffffffff81116116f4575b60051b0190565b6116fc6111a1565b6116ed565b9061170b826116da565b61171860405191826111fd565b8281528092611729601f19916116da565b0190602036910137565b919082018092116114a457565b908160209103126101e3575190565b6020918151811015611764575b60051b010190565b61176c610806565b61175c565b3d156117ba573d9067ffffffffffffffff82116117ad575b604051916117a1601f8201601f1916602001846111fd565b82523d6000602084013e565b6117b56111a1565b611789565b606090565b156117c657565b606460405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b9160405191602093848401927fa9059cbb0000000000000000000000000000000000000000000000000000000084526001600160a01b03809316602486015260448501526044845261185b846111b8565b16906040519261186a846111e1565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b156118db576118b6939260009283809351925af16118b0611771565b906119a8565b805190816118c357505050565b826112f4936118d693830101910161191f565b611937565b6064856040519062461bcd60e51b82526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b908160209103126101e3575180151581036101e35790565b1561193e57565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b909190156119b4575090565b8151156119c45750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611a0a575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506119e7565b90604051611a30816111b8565b60606001829480546001600160a01b038116855260a01c602085015201546001600160801b038116604084015260801c910152565b6001600160801b0390818111611a79571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b670de0b6b3a7640000808210611ad1575090565b90509056fea264697066735822122028577f906fdbbfcadcb6f435379ee7e55a34baf8635ca19fb0327fa52b4ed17664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyTokenWithdraw(address)": {
        "details": "only to be called by owner"
      },
      "onReward(address,uint256)": {
        "details": "Assume `_getTotalShare` isn't updated yet when this function is called",
        "params": {
          "_lpAmount": "The new amount of LP",
          "_user": "Address of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardRate(uint256,uint96)": {
        "params": {
          "_tokenPerSec": "The number of tokens to distribute per second"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balances()": {
        "notice": "View function to see balances of reward token."
      },
      "emergencyTokenWithdraw(address)": {
        "notice": "avoids loosing funds in case there is any tokens sent to this contract"
      },
      "emergencyWithdraw()": {
        "notice": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens."
      },
      "onReward(address,uint256)": {
        "notice": "Function called by Master whenever staker claims WOM harvest.Allows staker to also receive a 2nd reward token."
      },
      "operator()": {
        "notice": "address of the operator"
      },
      "rewardInfo(uint256)": {
        "notice": "Info of the rewardInfo."
      },
      "setOperator(address)": {
        "notice": "Set operator address"
      },
      "setRewardRate(uint256,uint96)": {
        "notice": "Sets the distribution reward rate. This will also update the rewardInfo."
      },
      "userInfo(uint256,address)": {
        "notice": "tokenId => userId => UserInfo"
      }
    },
    "notice": "Simple bribe per sec. Distribute bribe rewards to voters Bribe.onVote->updateReward() is a bit different from SimpleRewarder. Here we reduce the original total amount of share",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 660,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 767,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 33372,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 33374,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 33379,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "rewardInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(RewardInfo)33369_storage)dyn_storage"
      },
      {
        "astId": 33387,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)33359_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardInfo)33369_storage)dyn_storage": {
        "base": "t_struct(RewardInfo)33369_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiRewarderPerSec.RewardInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1420": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)33359_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiRewarderPerSec.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)33359_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)33359_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MultiRewarderPerSec.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)33359_storage)"
      },
      "t_struct(RewardInfo)33369_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSec.RewardInfo",
        "members": [
          {
            "astId": 33362,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "rewardToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1420"
          },
          {
            "astId": 33364,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "tokenPerSec",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 33366,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 33368,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "distributedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)33359_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSec.UserInfo",
        "members": [
          {
            "astId": 33354,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 33356,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "rewardDebt",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 33358,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "unpaidRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}