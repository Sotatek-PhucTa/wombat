{
  "address": "0xdAa33667A9aB2791Fb0F3c0261C74c4A3d0A7eFA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_master",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergencyTokenWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "master",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "onReward",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newVote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalTotalVotes",
          "type": "uint256"
        }
      ],
      "name": "onVote",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokens",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tokenPerSec",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "accTokenPerShare",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "distributedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardDebt",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "unpaidRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe5a8ad33d0a6ed77856b01491e11dc69eb0a4528777c22d794471a7395781d27",
  "receipt": {
    "to": null,
    "from": "0xcB3Bb767104e0b3235520fafB182e005D7efD045",
    "contractAddress": "0xdAa33667A9aB2791Fb0F3c0261C74c4A3d0A7eFA",
    "transactionIndex": 0,
    "gasUsed": "1565405",
    "logsBloom": "0x
    "blockHash": "0xaad55ab380cf9aa7a9ca405bd8019203fde2294c46d372498cde384cc6c02dac",
    "transactionHash": "0xe5a8ad33d0a6ed77856b01491e11dc69eb0a4528777c22d794471a7395781d27",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26991017,
        "transactionHash": "0xe5a8ad33d0a6ed77856b01491e11dc69eb0a4528777c22d794471a7395781d27",
        "address": "0xdAa33667A9aB2791Fb0F3c0261C74c4A3d0A7eFA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cb3bb767104e0b3235520fafb182e005d7efd045"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaad55ab380cf9aa7a9ca405bd8019203fde2294c46d372498cde384cc6c02dac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 26991017,
        "transactionHash": "0xe5a8ad33d0a6ed77856b01491e11dc69eb0a4528777c22d794471a7395781d27",
        "address": "0xdAa33667A9aB2791Fb0F3c0261C74c4A3d0A7eFA",
        "topics": [
          "0x225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a",
          "0x000000000000000000000000e80772eaf6e2e18b651f160bc9158b2a5cafca65"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0xaad55ab380cf9aa7a9ca405bd8019203fde2294c46d372498cde384cc6c02dac"
      }
    ],
    "blockNumber": 26991017,
    "cumulativeGasUsed": "1565405",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x04D4e1C1F3D6539071b6D3849fDaED04d48D563d",
    "0x88bEb144352BD3109c79076202Fac2bcEAb87117",
    1680413582,
    "0xe80772eaf6e2e18b651f160bc9158b2a5cafca65",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "80c86dbc3c9fdcc6cd72d31768362d04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"onReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalTotalVotes\",\"type\":\"uint256\"}],\"name\":\"onVote\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenPerSec\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"accTokenPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"distributedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"unpaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyTokenWithdraw(address)\":{\"details\":\"only to be called by owner\"},\"onReward(address,uint256)\":{\"details\":\"Assume `_getTotalShare` isn't updated yet when this function is called\",\"params\":{\"_lpAmount\":\"The new amount of LP\",\"_user\":\"Address of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardRate(uint256,uint96)\":{\"params\":{\"_tokenPerSec\":\"The number of tokens to distribute per second\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balances()\":{\"notice\":\"View function to see balances of reward token.\"},\"emergencyTokenWithdraw(address)\":{\"notice\":\"avoids loosing funds in case there is any tokens sent to this contract\"},\"emergencyWithdraw()\":{\"notice\":\"In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens.\"},\"onReward(address,uint256)\":{\"notice\":\"Function called by Master whenever staker claims WOM harvest.Allows staker to also receive a 2nd reward token.\"},\"operator()\":{\"notice\":\"address of the operator\"},\"rewardInfo(uint256)\":{\"notice\":\"Info of the rewardInfo.\"},\"setOperator(address)\":{\"notice\":\"Set operator address\"},\"setRewardRate(uint256,uint96)\":{\"notice\":\"Sets the distribution reward rate. This will also update the rewardInfo.\"},\"userInfo(uint256,address)\":{\"notice\":\"tokenId => userId => UserInfo\"}},\"notice\":\"Simple bribe per sec. Distribute bribe rewards to voters Bribe.onVote->updateReward() is a bit different from SimpleRewarder. Here we reduce the original total amount of share\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/gauge/Bribe.sol\":\"Bribe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/wombat-governance/gauge/Bribe.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '../interfaces/IBribe.sol';\\nimport '../rewarders/MultiRewarderPerSec.sol';\\n\\ninterface IVoter {\\n    struct GaugeWeight {\\n        uint128 allocPoint;\\n        uint128 voteWeight; // total amount of votes for an LP-token\\n    }\\n\\n    // lpToken => weight, equals to sum of votes for a LP token\\n    function weights(address _lpToken) external view returns (GaugeWeight memory);\\n\\n    // user address => lpToken => votes\\n    function votes(address _user, address _lpToken) external view returns (uint256);\\n}\\n\\n/**\\n * Simple bribe per sec. Distribute bribe rewards to voters\\n * Bribe.onVote->updateReward() is a bit different from SimpleRewarder.\\n * Here we reduce the original total amount of share\\n */\\ncontract Bribe is IBribe, MultiRewarderPerSec {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _master,\\n        IERC20 _lpToken,\\n        uint256 _startTimestamp,\\n        IERC20 _rewardToken,\\n        uint96 _tokenPerSec\\n    ) MultiRewarderPerSec(_master, _lpToken, _startTimestamp, _rewardToken, _tokenPerSec) {}\\n\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external override onlyMaster nonReentrant returns (uint256[] memory rewards) {\\n        _updateReward(originalTotalVotes);\\n        return _onReward(user, newVote);\\n    }\\n\\n    function onReward(\\n        address _user,\\n        uint256 _lpAmount\\n    ) external override onlyMaster nonReentrant returns (uint256[] memory rewards) {\\n        revert('Call onVote instead');\\n    }\\n\\n    function _getTotalShare() internal view override returns (uint256) {\\n        return IVoter(master).weights(address(lpToken)).voteWeight;\\n    }\\n\\n    function rewardLength() external view override(IBribe, MultiRewarderPerSec) returns (uint256) {\\n        return _rewardLength();\\n    }\\n\\n    function rewardTokens() external view override(IBribe, MultiRewarderPerSec) returns (IERC20[] memory tokens) {\\n        return _rewardTokens();\\n    }\\n\\n    function pendingTokens(\\n        address _user\\n    ) external view override(IBribe, MultiRewarderPerSec) returns (uint256[] memory tokens) {\\n        return _pendingTokens(_user);\\n    }\\n}\\n\",\"keccak256\":\"0x050de3ddf9df5a626805b6064723f4d2a768250000e9bcd46c526da6f62cfd0c\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4e608dfd8e58a597cee1864154092b199ceb623aad70eb62887275d124b1e6f\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IMultiRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMultiRewarder {\\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2cae5469e2fd3201eb912287d022bbac97a4cd5fe7aa5775ac97eac4d855e84\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../interfaces/IMultiRewarder.sol';\\n\\n/**\\n * This is a sample contract to be used in the Master contract for partners to reward\\n * stakers with their native token alongside WOM.\\n *\\n * It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n *\\n * - This contract has no knowledge on the LP amount and Master is\\n *   responsible to pass the amount into this contract\\n * - Supports multiple reward tokens\\n */\\ncontract MultiRewarderPerSec is IMultiRewarder, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant ACC_TOKEN_PRECISION = 1e12;\\n    IERC20 public immutable lpToken;\\n    address public immutable master;\\n\\n    struct UserInfo {\\n        uint128 amount; // 20.18 fixed point.\\n        // if the pool is activated, rewardDebt should be > 0\\n        uint128 rewardDebt; // 20.18 fixed point. distributed reward per weight\\n        uint256 unpaidRewards; // 20.18 fixed point.\\n    }\\n\\n    /// @notice Info of each rewardInfo.\\n    struct RewardInfo {\\n        IERC20 rewardToken; // if rewardToken is 0, native token is used as reward token\\n        uint96 tokenPerSec; // 10.18 fixed point\\n        uint128 accTokenPerShare; // 26.12 fixed point. Amount of reward token each LP token is worth.\\n        uint128 distributedAmount; // 20.18 fixed point, depending on the decimals of the reward token. This value is used to\\n        // track the amount of distributed tokens. If `distributedAmount` is closed to the amount of total received\\n        // tokens, we should refill reward or prepare to stop distributing reward.\\n    }\\n\\n    /// @notice address of the operator\\n    /// @dev operator is able to set emission rate\\n    address public operator;\\n\\n    uint256 public lastRewardTimestamp;\\n\\n    /// @notice Info of the rewardInfo.\\n    RewardInfo[] public rewardInfo;\\n    /// @notice tokenId => userId => UserInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    event OnReward(address indexed rewardToken, address indexed user, uint256 amount);\\n    event RewardRateUpdated(address indexed rewardToken, uint256 oldRate, uint256 newRate);\\n\\n    modifier onlyMaster() {\\n        require(msg.sender == address(master), 'onlyMaster: only Master can call this function');\\n        _;\\n    }\\n\\n    modifier onlyOperatorOrOwner() {\\n        require(msg.sender == owner() || msg.sender == operator, 'onlyOperatorOrOwner');\\n        _;\\n    }\\n\\n    /// @notice payable function needed to receive BNB\\n    receive() external payable {}\\n\\n    constructor(address _master, IERC20 _lpToken, uint256 _startTimestamp, IERC20 _rewardToken, uint96 _tokenPerSec) {\\n        require(\\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\\n            'constructor: reward token must be a valid contract'\\n        );\\n        require(Address.isContract(address(_lpToken)), 'constructor: LP token must be a valid contract');\\n        require(Address.isContract(address(_master)), 'constructor: Master must be a valid contract');\\n        require(_startTimestamp >= block.timestamp);\\n\\n        master = _master;\\n        lpToken = _lpToken;\\n\\n        lastRewardTimestamp = _startTimestamp;\\n\\n        // use non-zero amount for accTokenPerShare as we want to check if user\\n        // has activated the pool by checking rewardDebt > 0\\n        RewardInfo memory reward = RewardInfo({\\n            rewardToken: _rewardToken,\\n            tokenPerSec: _tokenPerSec,\\n            accTokenPerShare: 1e18,\\n            distributedAmount: 0\\n        });\\n        rewardInfo.push(reward);\\n        emit RewardRateUpdated(address(_rewardToken), 0, _tokenPerSec);\\n    }\\n\\n    /// @notice Set operator address\\n    function setOperator(address _operator) external onlyOwner {\\n        operator = _operator;\\n    }\\n\\n    function addRewardToken(IERC20 _rewardToken, uint96 _tokenPerSec) external onlyOwner {\\n        _updateReward();\\n        // use non-zero amount for accTokenPerShare as we want to check if user\\n        // has activated the pool by checking rewardDebt > 0\\n        RewardInfo memory reward = RewardInfo({\\n            rewardToken: _rewardToken,\\n            tokenPerSec: _tokenPerSec,\\n            accTokenPerShare: 1e18,\\n            distributedAmount: 0\\n        });\\n        rewardInfo.push(reward);\\n        emit RewardRateUpdated(address(_rewardToken), 0, _tokenPerSec);\\n    }\\n\\n    function updateReward() public {\\n        _updateReward();\\n    }\\n\\n    /// @dev This function should be called before lpSupply and sumOfFactors update\\n    function _updateReward() internal {\\n        _updateReward(_getTotalShare());\\n    }\\n\\n    function _updateReward(uint256 totalShare) internal {\\n        if (block.timestamp > lastRewardTimestamp && totalShare > 0) {\\n            uint256 length = rewardInfo.length;\\n            for (uint256 i; i < length; ++i) {\\n                RewardInfo storage reward = rewardInfo[i];\\n                uint256 timeElapsed = block.timestamp - lastRewardTimestamp;\\n                uint256 tokenReward = timeElapsed * reward.tokenPerSec;\\n                // use `max(totalShare, 1e18)` in case of overflow\\n                reward.accTokenPerShare += toUint128((tokenReward * ACC_TOKEN_PRECISION) / max(totalShare, 1e18));\\n                reward.distributedAmount += toUint128(tokenReward);\\n            }\\n            lastRewardTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @notice Sets the distribution reward rate. This will also update the rewardInfo.\\n    /// @param _tokenPerSec The number of tokens to distribute per second\\n    function setRewardRate(uint256 _tokenId, uint96 _tokenPerSec) external onlyOperatorOrOwner {\\n        require(_tokenPerSec <= 10000e18, 'reward rate too high'); // in case of accTokenPerShare overflow\\n        _updateReward();\\n\\n        uint256 oldRate = rewardInfo[_tokenId].tokenPerSec;\\n        rewardInfo[_tokenId].tokenPerSec = _tokenPerSec;\\n\\n        emit RewardRateUpdated(address(rewardInfo[_tokenId].rewardToken), oldRate, _tokenPerSec);\\n    }\\n\\n    /// @notice Function called by Master whenever staker claims WOM harvest.\\n    /// @notice Allows staker to also receive a 2nd reward token.\\n    /// @dev Assume `_getTotalShare` isn't updated yet when this function is called\\n    /// @param _user Address of user\\n    /// @param _lpAmount The new amount of LP\\n    function onReward(\\n        address _user,\\n        uint256 _lpAmount\\n    ) external virtual override onlyMaster nonReentrant returns (uint256[] memory rewards) {\\n        _updateReward();\\n        return _onReward(_user, _lpAmount);\\n    }\\n\\n    function _onReward(address _user, uint256 _lpAmount) internal virtual returns (uint256[] memory rewards) {\\n        uint256 length = rewardInfo.length;\\n        rewards = new uint256[](length);\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage reward = rewardInfo[i];\\n            UserInfo storage user = userInfo[i][_user];\\n            IERC20 rewardToken = reward.rewardToken;\\n\\n            if (user.rewardDebt > 0) {\\n                // rewardDebt > 0 indicates the user has activated the pool and we should distribute rewards\\n                uint256 pending = ((user.amount * uint256(reward.accTokenPerShare)) / ACC_TOKEN_PRECISION) +\\n                    user.unpaidRewards -\\n                    user.rewardDebt;\\n\\n                if (address(rewardToken) == address(0)) {\\n                    // is native token\\n                    uint256 tokenBalance = address(this).balance;\\n                    if (pending > tokenBalance) {\\n                        // Note: this line may fail if the receiver is a contract and refuse to receive BNB\\n                        (bool success, ) = _user.call{value: tokenBalance}('');\\n                        require(success, 'Transfer failed');\\n                        rewards[i] = tokenBalance;\\n                        user.unpaidRewards = pending - tokenBalance;\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}('');\\n                        require(success, 'Transfer failed');\\n                        rewards[i] = pending;\\n                        user.unpaidRewards = 0;\\n                    }\\n                } else {\\n                    // ERC20 token\\n                    uint256 tokenBalance = rewardToken.balanceOf(address(this));\\n                    if (pending > tokenBalance) {\\n                        rewardToken.safeTransfer(_user, tokenBalance);\\n                        rewards[i] = tokenBalance;\\n                        user.unpaidRewards = pending - tokenBalance;\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                        rewards[i] = pending;\\n                        user.unpaidRewards = 0;\\n                    }\\n                }\\n            }\\n\\n            user.amount = toUint128(_lpAmount);\\n            user.rewardDebt = toUint128((_lpAmount * reward.accTokenPerShare) / ACC_TOKEN_PRECISION);\\n            emit OnReward(address(rewardToken), _user, rewards[i]);\\n        }\\n    }\\n\\n    /// @notice returns reward length\\n    function rewardLength() external view virtual override returns (uint256) {\\n        return _rewardLength();\\n    }\\n\\n    function _rewardLength() internal view returns (uint256) {\\n        return rewardInfo.length;\\n    }\\n\\n    /// @notice View function to see pending tokens\\n    /// @param _user Address of user.\\n    /// @return rewards reward for a given user.\\n    function pendingTokens(address _user) external view virtual override returns (uint256[] memory rewards) {\\n        return _pendingTokens(_user);\\n    }\\n\\n    function _pendingTokens(address _user) internal view returns (uint256[] memory rewards) {\\n        uint256 length = rewardInfo.length;\\n        rewards = new uint256[](length);\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory pool = rewardInfo[i];\\n            UserInfo storage user = userInfo[i][_user];\\n\\n            uint256 accTokenPerShare = pool.accTokenPerShare;\\n            uint256 totalShare = _getTotalShare();\\n\\n            if (block.timestamp > lastRewardTimestamp && totalShare > 0) {\\n                uint256 timeElapsed = block.timestamp - lastRewardTimestamp;\\n                uint256 tokenReward = timeElapsed * pool.tokenPerSec;\\n                // use `max(totalShare, 1e18)` in case of overflow\\n                accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / max(totalShare, 1e18);\\n            }\\n\\n            rewards[i] =\\n                ((user.amount * uint256(accTokenPerShare)) / ACC_TOKEN_PRECISION) -\\n                user.rewardDebt +\\n                user.unpaidRewards;\\n        }\\n    }\\n\\n    function _getTotalShare() internal view virtual returns (uint256) {\\n        return lpToken.balanceOf(address(master));\\n    }\\n\\n    /// @notice return an array of reward tokens\\n    function _rewardTokens() internal view returns (IERC20[] memory tokens) {\\n        uint256 length = rewardInfo.length;\\n        tokens = new IERC20[](length);\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory pool = rewardInfo[i];\\n            tokens[i] = pool.rewardToken;\\n        }\\n    }\\n\\n    function rewardTokens() external view virtual override returns (IERC20[] memory tokens) {\\n        return _rewardTokens();\\n    }\\n\\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\\n    /// withdrawal of remaining tokens.\\n    function emergencyWithdraw() external onlyOwner {\\n        uint256 length = rewardInfo.length;\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage pool = rewardInfo[i];\\n            emergencyTokenWithdraw(address(pool.rewardToken));\\n        }\\n    }\\n\\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\\n    /// @dev only to be called by owner\\n    function emergencyTokenWithdraw(address token) public onlyOwner {\\n        // send that balance back to owner\\n        if (token == address(0)) {\\n            // is native token\\n            (bool success, ) = msg.sender.call{value: address(this).balance}('');\\n            require(success, 'Transfer failed');\\n        } else {\\n            IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// @notice View function to see balances of reward token.\\n    function balances() external view returns (uint256[] memory balances_) {\\n        uint256 length = rewardInfo.length;\\n        balances_ = new uint256[](length);\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage pool = rewardInfo[i];\\n            if (address(pool.rewardToken) == address(0)) {\\n                // is native token\\n                balances_[i] = address(this).balance;\\n            } else {\\n                balances_[i] = pool.rewardToken.balanceOf(address(this));\\n            }\\n        }\\n    }\\n\\n    function toUint128(uint256 val) internal pure returns (uint128) {\\n        if (val > type(uint128).max) revert('uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0xb9184f0185627bbb2795d1d4bb380f924b8b1dce128351154e10aefbb19bab2d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c0346200037c57601f62001c8238819003918201601f1916830192916001600160401b03918285118486101762000381578160a092859260409788528339810103126200037c578151916001600160a01b039182841684036200037c576020906200006d82840162000397565b9386840151936080620000836060830162000397565b9101516001600160601b03811695908690036200037c576000968754988460018060a01b03199433868d16178b558c519b823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08d80a36001805516998a3b1580159062000373575b156200031657508482163b15620002bb57803b1562000262574283106200025e5760a0526080526003558751926080840190848210908211176200024a57885286835283830185815288840191670de0b6b3a7640000835260608501938885526004546801000000000000000081101562000236576001810180600455811015620002225760048a52878a209651935160a01b909216921691909117600191821b9094019384559051915160801b6001600160801b0319166001600160801b03929092169190911791015584519283528201527f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a908390a2516118d59081620003ad8239608051818181610e4e0152611271015260a05181818161024d015281816104fb01528181610b2901526112980152f35b634e487b7160e01b8a52603260045260248afd5b634e487b7160e01b8a52604160045260248afd5b634e487b7160e01b87526041600452602487fd5b8880fd5b8a5162461bcd60e51b815260048101889052602c60248201527f636f6e7374727563746f723a204d6173746572206d757374206265206120766160448201526b1b1a590818dbdb9d1c9858dd60a21b6064820152608490fd5b8a5162461bcd60e51b815260048101889052602e60248201527f636f6e7374727563746f723a204c5020746f6b656e206d75737420626520612060448201526d1d985b1a590818dbdb9d1c9858dd60921b6064820152608490fd5b62461bcd60e51b815260048101889052603260248201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604482015271194818481d985b1a590818dbdb9d1c9858dd60721b6064820152608490fd5b508a15620000ee565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200037c5756fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c9081630bc7936314610e9957508063570ca73514610e725780635fcbd28514610e2e57806365d9aa4a14610b03578063715018a614610aaa5780637bb98a68146109d757806381a00f83146109765780638da5cb5b1461094f57806393f1a40b146108e6578063ad56882714610835578063b3ab15fb146107f5578063b95c5746146107d7578063c031a66f1461063e578063c2b18aa01461056e578063c3723288146104d4578063db2e21bc146103e7578063edc9d77214610271578063ee97f7f31461022d578063f2fde38b14610155578063f36c0a72146101345763f8077fae14610111573861000f565b3461012f57600036600319011261012f576020600354604051908152f35b600080fd5b3461012f57600036600319011261012f5761001b610150611239565b6113d6565b3461012f57602036600319011261012f5761016e611028565b6101766110c9565b6001600160a01b038091169081156101c357600054826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461012f57600036600319011261012f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461012f57604036600319011261012f576004356001600160a01b0380821680920361012f5761029f61100d565b6102a76110c9565b6102b2610150611239565b604051916102bf836111e7565b838352602083016bffffffffffffffffffffffff8093169182825260408501670de0b6b3a76400008152606086019160008352600454680100000000000000008110156103d1578060016103169201600455611079565b6103bb5761037d6040976103ac966001947f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a9b51166001600160a01b0319855416178455511682906001600160a01b036001600160a01b031983549260a01b169116179055565b9151925160801b6fffffffffffffffffffffffffffffffff19166001600160801b039390931692909217910155565b815190600082526020820152a2005b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b3461012f57600036600319011261012f576104006110c9565b60045460005b81811061040f57005b6001600160a01b0361042082611079565b5054169061042c6110c9565b8161045a576104559150610450600080808047335af161044a61154d565b5061158d565b61136c565b610406565b6040516370a0823160e01b81523060048201526020908181602481875afa9182156104c857600092610498575b5050610450906104559333906115d8565b90809250813d83116104c1575b6104af8183611203565b8101031261012f575182610450610487565b503d6104a5565b6040513d6000823e3d90fd5b3461012f57604036600319011261012f576104ed611028565b506105226001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314611121565b61052a611192565b606460405162461bcd60e51b815260206004820152601360248201527f43616c6c206f6e566f746520696e7374656164000000000000000000000000006044820152fd5b3461012f57600036600319011261012f5760045461058b816114e2565b6105986040519182611203565b8181526105a4826114e2565b6020928383019291601f190136843760005b81811061060957505090604051928392818401908285525180915260408401929160005b8281106105e957505050500390f35b83516001600160a01b0316855286955093810193928101926001016105da565b806001600160a01b0361062761062161063994611079565b50611805565b51166106338286611539565b5261136c565b6105b6565b3461012f5760208060031936011261012f57610658611028565b90600454610665816114fa565b916000906003546001600160a01b038142119616925b8481106106945760405180610690888261103e565b0390f35b6106a061062182611079565b908060005260058452604060002085600052845260406000206001600160801b039283604082015116906106d2611239565b908b806107ce575b610725575b505090600161070d6107209564e8d4a51000610702610716968654938416611388565b049060801c9061137b565b9101549061152c565b6106338289611539565b61067b565b61074e906bffffffffffffffffffffffff896107448a9796974261137b565b9201511690611388565b64e8d4a51000908181029181830414901517156107b8576107209564e8d4a510006107026107a46107169761079e61070d96600198670de0b6b3a7640000808210156000146107b057509061139b565b9061152c565b959650505095506106df565b90509061139b565b634e487b7160e01b600052601160045260246000fd5b508115156106da565b3461012f57600036600319011261012f576020600454604051908152f35b3461012f57602036600319011261012f576001600160a01b03610816611028565b61081e6110c9565b166001600160a01b03196002541617600255600080f35b3461012f57602036600319011261012f576001600160a01b03610856611028565b61085e6110c9565b1680610879575061001b600080808047335af161044a61154d565b604051906370a0823160e01b8252306004830152602082602481845afa9081156104c8576000916108b1575b61001b925033906115d8565b90506020823d82116108de575b816108cb60209383611203565b8101031261012f5761001b9151906108a5565b3d91506108be565b3461012f57604036600319011261012f576024356001600160a01b03811680910361012f5760043560005260056020526040600020906000526020526060604060002060018154910154604051916001600160801b038116835260801c60208301526040820152f35b3461012f57600036600319011261012f5760206001600160a01b0360005416604051908152f35b3461012f57602036600319011261012f5760043560045481101561012f5761099f608091611079565b5060018154910154604051916001600160a01b038116835260a01c60208301526001600160801b0381166040830152821c6060820152f35b3461012f57600036600319011261012f576004546109f4816114fa565b9060005b818110610a0d5760405180610690858261103e565b6001600160a01b03610a1e82611079565b5054169081610a3c57610a379150476106338286611539565b6109f8565b60405180926370a0823160e01b825230600483015281602460209384935afa9081156104c857600091610a7a575b50610a3792506106338286611539565b905082813d8311610aa3575b610a908183611203565b8101031261012f57610a37915185610a6a565b503d610a86565b3461012f57600036600319011261012f57610ac36110c9565b60006001600160a01b0381546001600160a01b031981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461012f57606036600319011261012f57610b1c611028565b610b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314611121565b610b58611192565b610b636044356113d6565b600454610b6f816114fa565b9160005b828110610b8c576001805560405180610690868261103e565b610b9581611079565b509080600052600560205260406000206001600160a01b0384166000526020526040600020916001600160a01b0381541690848454888160801c80610ca1575b50505050610c9c93610c2e64e8d4a51000610c28610c569460016001600160801b039182610c04602435611847565b166fffffffffffffffffffffffffffffffff19885416178755015416602435611388565b04611847565b6001600160801b036fffffffffffffffffffffffffffffffff1983549260801b169116179055565b610c608287611539565b51906040519182527f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b52760206001600160a01b03871693a361136c565b610b73565b610cda90610cd564e8d4a51000610cca6001600160801b039660019780898c0154169116611388565b04858b01549061152c565b61137b565b85610d6457610c5694610c9c9894610c2e9464e8d4a5100094610c28948b4792838311600014610d40578391610d2791610d22600080808088610d2d9c9d5af161044a61154d565b611539565b5261137b565b908601555b9450889397508a9150610bd5565b829350610d226000808080610d5b97819b5af161044a61154d565b52860155610d32565b925050604051916370a0823160e01b8352306004840152602083602481885afa9081156104c8578a8994600093610ded575b5094610c9c9894610c2e9484848b610c569a8c64e8d4a5100099610c289911600014610dda5791610d2791610d2286610dd1989981966115d8565b90860155610d32565b83610d5b949550600097610d22926115d8565b989450509190506020873d602011610e26575b81610e0d60209383611203565b8101031261012f5795519195879290918a610c9c610d96565b3d9150610e00565b3461012f57600036600319011261012f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461012f57600036600319011261012f5760206001600160a01b0360025416604051908152f35b3461012f57604036600319011261012f5760043590610eb661100d565b916001600160a01b0391826000541633148015611000575b15610fbe57506bffffffffffffffffffffffff83169269021e19e0c9bab24000008411610f7a577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a92610f69604093610f28610150611239565b610f64610f3482611079565b505460a01c94610f4383611079565b50906001600160a01b036001600160a01b031983549260a01b169116179055565b611079565b5054169382519182526020820152a2005b606460405162461bcd60e51b815260206004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b8062461bcd60e51b6064925260206004820152601360248201527f6f6e6c794f70657261746f724f724f776e6572000000000000000000000000006044820152fd5b5082600254163314610ece565b602435906bffffffffffffffffffffffff8216820361012f57565b600435906001600160a01b038216820361012f57565b6020908160408183019282815285518094520193019160005b828110611065575050505090565b835185529381019392810192600101611057565b6004548110156110b357600460005260011b7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b036000541633036110dd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561112857565b608460405162461bcd60e51b815260206004820152602e60248201527f6f6e6c794d61737465723a206f6e6c79204d61737465722063616e2063616c6c60448201527f20746869732066756e6374696f6e0000000000000000000000000000000000006064820152fd5b6002600154146111a3576002600155565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b6080810190811067ffffffffffffffff8211176103d157604052565b90601f8019910116810190811067ffffffffffffffff8211176103d157604052565b51906001600160801b038216820361012f57565b60408051907fa7cac84600000000000000000000000000000000000000000000000000000000825280826024816001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001660048301527f0000000000000000000000000000000000000000000000000000000000000000165afa918215611361576000926112db575b5050602001516001600160801b031690565b90918282813d831161135a575b6112f28183611203565b81010312611357578251928084019184831067ffffffffffffffff8411176113435750602080936001600160801b039593611339935261133181611225565b845201611225565b82820152916112c9565b80634e487b7160e01b602492526041600452fd5b80fd5b503d6112e8565b50513d6000823e3d90fd5b60001981146107b85760010190565b919082039182116107b857565b818102929181159184041417156107b857565b81156113a5570490565b634e487b7160e01b600052601260045260246000fd5b9190916001600160801b03808094169116019182116107b857565b60039081544211806114d9575b6113eb575050565b60049081549160005b8381106114045750505050429055565b61140d81611079565b5061142761141c87544261137b565b825460a01c90611388565b64e8d4a510008082029082820414821517156114c45791610c2e610450926114b060016114776114726114b999988c670de0b6b3a7640000809110156000146114be57508c9061139b565b611847565b9401936fffffffffffffffffffffffffffffffff198554916114a36001600160801b03918285166113bb565b1691161791828555611847565b9060801c6113bb565b6113f4565b9061139b565b601185634e487b7160e01b6000525260246000fd5b508015156113e3565b67ffffffffffffffff81116103d15760051b60200190565b90611504826114e2565b6115116040519182611203565b8281528092611522601f19916114e2565b0190602036910137565b919082018092116107b857565b80518210156110b35760209160051b010190565b3d15611588573d9067ffffffffffffffff82116103d1576040519161157c601f8201601f191660200184611203565b82523d6000602084013e565b606090565b1561159457565b606460405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b919060405190602093848301937fa9059cbb0000000000000000000000000000000000000000000000000000000085526001600160a01b03809316602485015260448401526044835261162a836111e7565b1660405190604082019282841067ffffffffffffffff8511176103d157611690936040528583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486840152600080958192519082855af161168a61154d565b91611732565b80518061169e575b50505050565b8184918101031261172e578201519081159182150361135757506116c457808080611698565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b5080fd5b919290156117935750815115611746575090565b3b1561174f5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156117a65750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106117ec575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506117c9565b90604051611812816111e7565b60606001829480546001600160a01b038116855260a01c602085015201546001600160801b038116604084015260801c910152565b6001600160801b039081811161185b571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fdfea26469706673582212202ea304691b78ee1e38dacc891c6779a6ae733c034051e8b6d92d52b21c049e4864736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c9081630bc7936314610e9957508063570ca73514610e725780635fcbd28514610e2e57806365d9aa4a14610b03578063715018a614610aaa5780637bb98a68146109d757806381a00f83146109765780638da5cb5b1461094f57806393f1a40b146108e6578063ad56882714610835578063b3ab15fb146107f5578063b95c5746146107d7578063c031a66f1461063e578063c2b18aa01461056e578063c3723288146104d4578063db2e21bc146103e7578063edc9d77214610271578063ee97f7f31461022d578063f2fde38b14610155578063f36c0a72146101345763f8077fae14610111573861000f565b3461012f57600036600319011261012f576020600354604051908152f35b600080fd5b3461012f57600036600319011261012f5761001b610150611239565b6113d6565b3461012f57602036600319011261012f5761016e611028565b6101766110c9565b6001600160a01b038091169081156101c357600054826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461012f57600036600319011261012f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461012f57604036600319011261012f576004356001600160a01b0380821680920361012f5761029f61100d565b6102a76110c9565b6102b2610150611239565b604051916102bf836111e7565b838352602083016bffffffffffffffffffffffff8093169182825260408501670de0b6b3a76400008152606086019160008352600454680100000000000000008110156103d1578060016103169201600455611079565b6103bb5761037d6040976103ac966001947f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a9b51166001600160a01b0319855416178455511682906001600160a01b036001600160a01b031983549260a01b169116179055565b9151925160801b6fffffffffffffffffffffffffffffffff19166001600160801b039390931692909217910155565b815190600082526020820152a2005b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b3461012f57600036600319011261012f576104006110c9565b60045460005b81811061040f57005b6001600160a01b0361042082611079565b5054169061042c6110c9565b8161045a576104559150610450600080808047335af161044a61154d565b5061158d565b61136c565b610406565b6040516370a0823160e01b81523060048201526020908181602481875afa9182156104c857600092610498575b5050610450906104559333906115d8565b90809250813d83116104c1575b6104af8183611203565b8101031261012f575182610450610487565b503d6104a5565b6040513d6000823e3d90fd5b3461012f57604036600319011261012f576104ed611028565b506105226001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314611121565b61052a611192565b606460405162461bcd60e51b815260206004820152601360248201527f43616c6c206f6e566f746520696e7374656164000000000000000000000000006044820152fd5b3461012f57600036600319011261012f5760045461058b816114e2565b6105986040519182611203565b8181526105a4826114e2565b6020928383019291601f190136843760005b81811061060957505090604051928392818401908285525180915260408401929160005b8281106105e957505050500390f35b83516001600160a01b0316855286955093810193928101926001016105da565b806001600160a01b0361062761062161063994611079565b50611805565b51166106338286611539565b5261136c565b6105b6565b3461012f5760208060031936011261012f57610658611028565b90600454610665816114fa565b916000906003546001600160a01b038142119616925b8481106106945760405180610690888261103e565b0390f35b6106a061062182611079565b908060005260058452604060002085600052845260406000206001600160801b039283604082015116906106d2611239565b908b806107ce575b610725575b505090600161070d6107209564e8d4a51000610702610716968654938416611388565b049060801c9061137b565b9101549061152c565b6106338289611539565b61067b565b61074e906bffffffffffffffffffffffff896107448a9796974261137b565b9201511690611388565b64e8d4a51000908181029181830414901517156107b8576107209564e8d4a510006107026107a46107169761079e61070d96600198670de0b6b3a7640000808210156000146107b057509061139b565b9061152c565b959650505095506106df565b90509061139b565b634e487b7160e01b600052601160045260246000fd5b508115156106da565b3461012f57600036600319011261012f576020600454604051908152f35b3461012f57602036600319011261012f576001600160a01b03610816611028565b61081e6110c9565b166001600160a01b03196002541617600255600080f35b3461012f57602036600319011261012f576001600160a01b03610856611028565b61085e6110c9565b1680610879575061001b600080808047335af161044a61154d565b604051906370a0823160e01b8252306004830152602082602481845afa9081156104c8576000916108b1575b61001b925033906115d8565b90506020823d82116108de575b816108cb60209383611203565b8101031261012f5761001b9151906108a5565b3d91506108be565b3461012f57604036600319011261012f576024356001600160a01b03811680910361012f5760043560005260056020526040600020906000526020526060604060002060018154910154604051916001600160801b038116835260801c60208301526040820152f35b3461012f57600036600319011261012f5760206001600160a01b0360005416604051908152f35b3461012f57602036600319011261012f5760043560045481101561012f5761099f608091611079565b5060018154910154604051916001600160a01b038116835260a01c60208301526001600160801b0381166040830152821c6060820152f35b3461012f57600036600319011261012f576004546109f4816114fa565b9060005b818110610a0d5760405180610690858261103e565b6001600160a01b03610a1e82611079565b5054169081610a3c57610a379150476106338286611539565b6109f8565b60405180926370a0823160e01b825230600483015281602460209384935afa9081156104c857600091610a7a575b50610a3792506106338286611539565b905082813d8311610aa3575b610a908183611203565b8101031261012f57610a37915185610a6a565b503d610a86565b3461012f57600036600319011261012f57610ac36110c9565b60006001600160a01b0381546001600160a01b031981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461012f57606036600319011261012f57610b1c611028565b610b506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163314611121565b610b58611192565b610b636044356113d6565b600454610b6f816114fa565b9160005b828110610b8c576001805560405180610690868261103e565b610b9581611079565b509080600052600560205260406000206001600160a01b0384166000526020526040600020916001600160a01b0381541690848454888160801c80610ca1575b50505050610c9c93610c2e64e8d4a51000610c28610c569460016001600160801b039182610c04602435611847565b166fffffffffffffffffffffffffffffffff19885416178755015416602435611388565b04611847565b6001600160801b036fffffffffffffffffffffffffffffffff1983549260801b169116179055565b610c608287611539565b51906040519182527f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b52760206001600160a01b03871693a361136c565b610b73565b610cda90610cd564e8d4a51000610cca6001600160801b039660019780898c0154169116611388565b04858b01549061152c565b61137b565b85610d6457610c5694610c9c9894610c2e9464e8d4a5100094610c28948b4792838311600014610d40578391610d2791610d22600080808088610d2d9c9d5af161044a61154d565b611539565b5261137b565b908601555b9450889397508a9150610bd5565b829350610d226000808080610d5b97819b5af161044a61154d565b52860155610d32565b925050604051916370a0823160e01b8352306004840152602083602481885afa9081156104c8578a8994600093610ded575b5094610c9c9894610c2e9484848b610c569a8c64e8d4a5100099610c289911600014610dda5791610d2791610d2286610dd1989981966115d8565b90860155610d32565b83610d5b949550600097610d22926115d8565b989450509190506020873d602011610e26575b81610e0d60209383611203565b8101031261012f5795519195879290918a610c9c610d96565b3d9150610e00565b3461012f57600036600319011261012f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461012f57600036600319011261012f5760206001600160a01b0360025416604051908152f35b3461012f57604036600319011261012f5760043590610eb661100d565b916001600160a01b0391826000541633148015611000575b15610fbe57506bffffffffffffffffffffffff83169269021e19e0c9bab24000008411610f7a577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a92610f69604093610f28610150611239565b610f64610f3482611079565b505460a01c94610f4383611079565b50906001600160a01b036001600160a01b031983549260a01b169116179055565b611079565b5054169382519182526020820152a2005b606460405162461bcd60e51b815260206004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b8062461bcd60e51b6064925260206004820152601360248201527f6f6e6c794f70657261746f724f724f776e6572000000000000000000000000006044820152fd5b5082600254163314610ece565b602435906bffffffffffffffffffffffff8216820361012f57565b600435906001600160a01b038216820361012f57565b6020908160408183019282815285518094520193019160005b828110611065575050505090565b835185529381019392810192600101611057565b6004548110156110b357600460005260011b7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b036000541633036110dd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561112857565b608460405162461bcd60e51b815260206004820152602e60248201527f6f6e6c794d61737465723a206f6e6c79204d61737465722063616e2063616c6c60448201527f20746869732066756e6374696f6e0000000000000000000000000000000000006064820152fd5b6002600154146111a3576002600155565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b6080810190811067ffffffffffffffff8211176103d157604052565b90601f8019910116810190811067ffffffffffffffff8211176103d157604052565b51906001600160801b038216820361012f57565b60408051907fa7cac84600000000000000000000000000000000000000000000000000000000825280826024816001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001660048301527f0000000000000000000000000000000000000000000000000000000000000000165afa918215611361576000926112db575b5050602001516001600160801b031690565b90918282813d831161135a575b6112f28183611203565b81010312611357578251928084019184831067ffffffffffffffff8411176113435750602080936001600160801b039593611339935261133181611225565b845201611225565b82820152916112c9565b80634e487b7160e01b602492526041600452fd5b80fd5b503d6112e8565b50513d6000823e3d90fd5b60001981146107b85760010190565b919082039182116107b857565b818102929181159184041417156107b857565b81156113a5570490565b634e487b7160e01b600052601260045260246000fd5b9190916001600160801b03808094169116019182116107b857565b60039081544211806114d9575b6113eb575050565b60049081549160005b8381106114045750505050429055565b61140d81611079565b5061142761141c87544261137b565b825460a01c90611388565b64e8d4a510008082029082820414821517156114c45791610c2e610450926114b060016114776114726114b999988c670de0b6b3a7640000809110156000146114be57508c9061139b565b611847565b9401936fffffffffffffffffffffffffffffffff198554916114a36001600160801b03918285166113bb565b1691161791828555611847565b9060801c6113bb565b6113f4565b9061139b565b601185634e487b7160e01b6000525260246000fd5b508015156113e3565b67ffffffffffffffff81116103d15760051b60200190565b90611504826114e2565b6115116040519182611203565b8281528092611522601f19916114e2565b0190602036910137565b919082018092116107b857565b80518210156110b35760209160051b010190565b3d15611588573d9067ffffffffffffffff82116103d1576040519161157c601f8201601f191660200184611203565b82523d6000602084013e565b606090565b1561159457565b606460405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b919060405190602093848301937fa9059cbb0000000000000000000000000000000000000000000000000000000085526001600160a01b03809316602485015260448401526044835261162a836111e7565b1660405190604082019282841067ffffffffffffffff8511176103d157611690936040528583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486840152600080958192519082855af161168a61154d565b91611732565b80518061169e575b50505050565b8184918101031261172e578201519081159182150361135757506116c457808080611698565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b5080fd5b919290156117935750815115611746575090565b3b1561174f5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156117a65750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106117ec575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506117c9565b90604051611812816111e7565b60606001829480546001600160a01b038116855260a01c602085015201546001600160801b038116604084015260801c910152565b6001600160801b039081811161185b571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fdfea26469706673582212202ea304691b78ee1e38dacc891c6779a6ae733c034051e8b6d92d52b21c049e4864736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyTokenWithdraw(address)": {
        "details": "only to be called by owner"
      },
      "onReward(address,uint256)": {
        "details": "Assume `_getTotalShare` isn't updated yet when this function is called",
        "params": {
          "_lpAmount": "The new amount of LP",
          "_user": "Address of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardRate(uint256,uint96)": {
        "params": {
          "_tokenPerSec": "The number of tokens to distribute per second"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balances()": {
        "notice": "View function to see balances of reward token."
      },
      "emergencyTokenWithdraw(address)": {
        "notice": "avoids loosing funds in case there is any tokens sent to this contract"
      },
      "emergencyWithdraw()": {
        "notice": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens."
      },
      "onReward(address,uint256)": {
        "notice": "Function called by Master whenever staker claims WOM harvest.Allows staker to also receive a 2nd reward token."
      },
      "operator()": {
        "notice": "address of the operator"
      },
      "rewardInfo(uint256)": {
        "notice": "Info of the rewardInfo."
      },
      "setOperator(address)": {
        "notice": "Set operator address"
      },
      "setRewardRate(uint256,uint96)": {
        "notice": "Sets the distribution reward rate. This will also update the rewardInfo."
      },
      "userInfo(uint256,address)": {
        "notice": "tokenId => userId => UserInfo"
      }
    },
    "notice": "Simple bribe per sec. Distribute bribe rewards to voters Bribe.onVote->updateReward() is a bit different from SimpleRewarder. Here we reduce the original total amount of share",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1373,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1489,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 36115,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 36117,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 36122,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "rewardInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(RewardInfo)36112_storage)dyn_storage"
      },
      {
        "astId": 36130,
        "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)36102_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardInfo)36112_storage)dyn_storage": {
        "base": "t_struct(RewardInfo)36112_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiRewarderPerSec.RewardInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2197": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)36102_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiRewarderPerSec.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)36102_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)36102_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MultiRewarderPerSec.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)36102_storage)"
      },
      "t_struct(RewardInfo)36112_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSec.RewardInfo",
        "members": [
          {
            "astId": 36105,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "rewardToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2197"
          },
          {
            "astId": 36107,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "tokenPerSec",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 36109,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 36111,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "distributedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)36102_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSec.UserInfo",
        "members": [
          {
            "astId": 36097,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 36099,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "rewardDebt",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 36101,
            "contract": "contracts/wombat-governance/gauge/Bribe.sol:Bribe",
            "label": "unpaidRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}