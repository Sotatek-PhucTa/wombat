{
  "address": "0x024D75Ea2BB81210a9218619ea7df35239B1f29B",
  "abi": [
    {
      "inputs": [],
      "name": "CORE_UNDERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_AMOUNT_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_COV_RATIO_LIMIT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_SAME_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetAmpFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpDividendRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retentionRatio",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetHaircutRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetMasterWombat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetMintFeeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferTipBucket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnpausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addressOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ampFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endCovRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantInUint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDividendRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "pauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "toAmount",
          "type": "int256"
        }
      ],
      "name": "quoteAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAmpFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "startCovRatio_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "endCovRatio_",
          "type": "uint128"
        }
      ],
      "name": "setCovRatioFeeParam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev_",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpDividendRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterWombat_",
          "type": "address"
        }
      ],
      "name": "setMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFeeThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setMintFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startCovRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tipBucketBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferTipBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unpauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1c596013a25e1bf8913454c69009bf269b029e58414bbcf56d65ffd16532490",
  "receipt": {
    "to": null,
    "from": "0xcB3Bb767104e0b3235520fafB182e005D7efD045",
    "contractAddress": "0x024D75Ea2BB81210a9218619ea7df35239B1f29B",
    "transactionIndex": 0,
    "gasUsed": "5298985",
    "logsBloom": "0x
    "blockHash": "0x2b2631def55e7fc740c7e179e76083756707aa898cc63556697e1a956ba63cb2",
    "transactionHash": "0xf1c596013a25e1bf8913454c69009bf269b029e58414bbcf56d65ffd16532490",
    "logs": [],
    "blockNumber": 24927352,
    "cumulativeGasUsed": "5298985",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9bda5d13882899b118f62c96b39f24db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CORE_UNDERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_AMOUNT_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_COV_RATIO_LIMIT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_SAME_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetAmpFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpDividendRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retentionRatio\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHaircutRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMasterWombat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMintFeeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferTipBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addressOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCovRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantInUint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"toAmount\",\"type\":\"int256\"}],\"name\":\"quoteAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"}],\"name\":\"setAmpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"startCovRatio_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endCovRatio_\",\"type\":\"uint128\"}],\"name\":\"setCovRatioFeeParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterWombat_\",\"type\":\"address\"}],\"name\":\"setMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeThreshold_\",\"type\":\"uint256\"}],\"name\":\"setMintFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCovRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tipBucketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTipBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unpauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Supports dynamic assets. Assume r* to be close to 1. Be aware that r* changes when the relative price of the asset updates Change log: - add `gap` to prevent storage collision for future upgrades - Inherite from `HighCovRatioFeePoolV2` instead of `Pool`\",\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"addressOfAsset(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"details\":\"Asset needs to be created and added to pool before any operation. This function assumes tax free token.\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"exchangeRate(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"xr\":\"The exchange rate of LP token\"}},\"mintFee(address)\":{\"params\":{\"token\":\"The address of the token to collect fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"pauseAsset(address)\":{\"details\":\"pause asset, restricting deposit and swap operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quoteAmountIn(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromToken\":\"The initial ERC20 token\",\"toAmount\":\"The given output amount\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"amountIn\":\"The input amount required\",\"haircut\":\"The haircut that would be applied\"}},\"quotePotentialDeposit(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"amount\":\"The amount to deposit\",\"token\":\"The token to deposit by user\"},\"returns\":{\"liquidity\":\"The potential liquidity user would receive\",\"reward\":\"reward\"}},\"quotePotentialSwap(address,address,int256)\":{\"details\":\"In reverse quote, the haircut is in the `fromAsset`\",\"params\":{\"fromAmount\":\"The given input amount\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"fee\":\"The fee that would be applied\"}},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"details\":\"take into account high cov ratio fee\"},\"removeAsset(address)\":{\"details\":\"Can only be called by owner\",\"params\":{\"token\":\"The address of token to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAmpFactor(uint256)\":{\"params\":{\"ampFactor_\":\"new pool's amplification factor\"}},\"setDev(address)\":{\"params\":{\"dev_\":\"new contract dev address\"}},\"setFeeTo(address)\":{\"params\":{\"feeTo_\":\"new fee beneficiary\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"details\":\"This function assumes tax free token.\",\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTipBucket(address,uint256,address)\":{\"details\":\"unit of amount should be in WAD\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"unpauseAsset(address)\":{\"details\":\"unpause asset, enabling deposit and swap operations\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity to be withdrawn (in fromToken decimal)\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"toAmount\":\"The total amount withdrawn\"}}},\"title\":\"Dynamic Pool V2\",\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"AssetRemoved(address,address)\":{\"notice\":\"An event thats emitted when asset is removed from Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"addressOfAsset(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"ampFactor()\":{\"notice\":\"Amplification factor\"},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"dev()\":{\"notice\":\"Dev address\"},\"exchangeRate(address)\":{\"notice\":\"Returns the exchange rate of the LP token\"},\"fillPool(address,uint256)\":{\"notice\":\"Move fund from tip bucket to the pool to keep r* = 1 as error accumulates unit of amount should be in WAD\"},\"getTokens()\":{\"notice\":\"Return list of tokens in the pool\"},\"haircutRate()\":{\"notice\":\"Haircut rate\"},\"initialize(uint256,uint256)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpDividendRatio()\":{\"notice\":\"LP dividend ratio : the ratio of haircut that should distribute to LP\"},\"mintFee(address)\":{\"notice\":\"Send fee collected to the fee beneficiary\"},\"mintFeeThreshold()\":{\"notice\":\"The threshold to mint fee (unit: WAD)\"},\"quoteAmountIn(address,address,int256)\":{\"notice\":\"Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)\"},\"quotePotentialDeposit(address,uint256)\":{\"notice\":\"Quotes potential deposit from pool\"},\"quotePotentialSwap(address,address,int256)\":{\"notice\":\"Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage).\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"removeAsset(address)\":{\"notice\":\"Removes asset from asset struct\"},\"retentionRatio()\":{\"notice\":\"Retention ratio: the ratio of haircut that should stay in the pool\"},\"setAmpFactor(uint256)\":{\"notice\":\"Changes the pools amplification factor. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setFeeTo(address)\":{\"notice\":\"Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setMintFeeThreshold(uint256)\":{\"notice\":\"Set min fee to mint\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Enables withdrawing liquidity from an asset using LP from a different asset\"}},\"notice\":\"Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/DynamicPoolV2.sol\":\"DynamicPoolV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc4fad3a1df63344db686f3764208f5e62592346ec3bc5a7fcb161f9d1b1e59b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf2611a58f79def15405a1144303fbdcdbac177d3a2b291baec538fc4d04a5c09\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x97f61115b32d97ee057cea0c3a7a28ab516927da9cb65d79cf77382f30bcfe8d\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IRelativePriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IRelativePriceProvider {\\n    /**\\n     * @notice get the relative price in WAD\\n     */\\n    function getRelativePrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe3e9082f4cbd2e9ee69930cee61838aa7a0e25dfa47ab1df54126187df756f60\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10 ** 18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10 ** (18 - d);\\n        } else if (d > 18) {\\n            return (x / (10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * 10 ** (d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xd6cacca5817b3c8820f60e203c1485ef19ebe8c07dfdda7df9c870f3dbffaaf5\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10 ** 18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10 ** (18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10 ** (d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc36a2ddfd52a2a0b18987d1da24fa45bebe1dd0c9fa10e631895b4eab7b80e44\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV2\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n */\\ncontract CoreV2 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n    int256 internal constant WAD_I = 10 ** 18;\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    error CORE_UNDERFLOW();\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function _swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) internal pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        if (Dy < 0) {\\n            quote = uint256(-Dy);\\n        } else {\\n            quote = uint256(Dy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(int256 Lx, int256 rx, int256 Ly, int256 ry, int256 A) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(int256 Lx, int256 Ly, int256 rx_, int256 D, int256 A) internal pure returns (int256) {\\n        return Lx.wmul(rx_ - A.wdiv(rx_)).wdiv(Ly) - D.wdiv(Ly);\\n    }\\n\\n    /**\\n     * @return v positive value indicates a reward and negative value indicates a fee\\n     */\\n    function depositRewardImpl(\\n        int256 D,\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 v) {\\n        if (L_i == 0) {\\n            // early return in case of div of 0\\n            return 0;\\n        }\\n        if (delta_i + SL == 0) {\\n            return L_i - A_i;\\n        }\\n\\n        int256 r_i_ = _targetedCovRatio(SL, delta_i, A_i, L_i, D, A);\\n        v = A_i + delta_i - (L_i + delta_i).wmul(r_i_);\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = _equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _equilCovRatio(int256 D, int256 SL, int256 A) internal pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    function _newEquilCovRatio(int256 er, int256 SL, int256 delta_i) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(int256 er_, int256 A, int256 SL, int256 delta_i) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice TODO (if any) from Yellow Paper (Haircut).\\n     * @dev Applies haircut rate to amount\\n     * @param amount The amount that will receive the discount\\n     * @param rate The rate to be applied\\n     * @return The result of operation.\\n     */\\n    function _haircut(uint256 amount, uint256 rate) internal pure returns (uint256) {\\n        return amount.wmul(rate);\\n    }\\n}\\n\",\"keccak256\":\"0xeb377cbb0b56ae886bfd1e2199c6817581219b459c37125fa7fd845ba5adb728\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/DynamicPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../interfaces/IRelativePriceProvider.sol';\\nimport './HighCovRatioFeePoolV2.sol';\\n\\n/**\\n * @title Dynamic Pool V2\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev Supports dynamic assets. Assume r* to be close to 1.\\n * Be aware that r* changes when the relative price of the asset updates\\n * Change log:\\n * - add `gap` to prevent storage collision for future upgrades\\n * - Inherite from `HighCovRatioFeePoolV2` instead of `Pool`\\n */\\ncontract DynamicPoolV2 is HighCovRatioFeePoolV2 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256[50] private gap;\\n\\n    /**\\n     * @notice multiply / divide the cash, liability and amount of a swap by relative price\\n     * Invariant: D = Sum of P_i * L_i * (r_i - A / r_i)\\n     */\\n    function _quoteFactor(IAsset fromAsset, IAsset toAsset) internal view override returns (uint256) {\\n        uint256 fromAssetRelativePrice = IRelativePriceProvider(address(fromAsset)).getRelativePrice();\\n        // theoretically we should multiply toCash, toLiability and idealToAmount by toAssetRelativePrice\\n        // however we simplify the calculation by dividing \\\"from amounts\\\" by toAssetRelativePrice\\n        uint256 toAssetRelativePrice = IRelativePriceProvider(address(toAsset)).getRelativePrice();\\n\\n        return (1e18 * fromAssetRelativePrice) / toAssetRelativePrice;\\n    }\\n\\n    /**\\n     * @dev Invariant: D = Sum of P_i * L_i * (r_i - A / r_i)\\n     */\\n    function _globalInvariantFunc() internal view override returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n            int256 P_i = int256(IRelativePriceProvider(address(asset)).getRelativePrice());\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += P_i.wmul(L_i);\\n            D += P_i.wmul(L_i).wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17c13dc0d0284e9e0780ffde51017467e74573542daff46b56b4e621bc95c9a6\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/HighCovRatioFeePoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport './PoolV2.sol';\\n\\n/**\\n * @title HighCovRatioFeePoolV2\\n * @dev Pool with high cov ratio fee protection\\n * Change log:\\n * - add `gap` to prevent storage collision for future upgrades\\n */\\ncontract HighCovRatioFeePoolV2 is PoolV2 {\\n    using DSMath for uint256;\\n\\n    uint128 public startCovRatio; // 1.5\\n    uint128 public endCovRatio; // 1.8\\n\\n    uint256[50] private gap;\\n\\n    error WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public override {\\n        super.initialize(ampFactor_, haircutRate_);\\n        startCovRatio = 15e17;\\n        endCovRatio = 18e17;\\n    }\\n\\n    function setCovRatioFeeParam(uint128 startCovRatio_, uint128 endCovRatio_) external onlyOwner {\\n        if (startCovRatio_ < 1e18 || startCovRatio_ > endCovRatio_) revert WOMBAT_INVALID_VALUE();\\n\\n        startCovRatio = startCovRatio_;\\n        endCovRatio = endCovRatio_;\\n    }\\n\\n    /**\\n     * @notice Calculate the high cov ratio fee in the to-asset in a swap.\\n     * @dev When cov ratio is in the range [startCovRatio, endCovRatio], the marginal cov ratio is\\n     * (r - startCovRatio) / (endCovRatio - startCovRatio). Here we approximate the high cov ratio cut\\n     * by calculating the \\\"average\\\" fee.\\n     * Note: `finalCovRatio` should be greater than `initCovRatio`\\n     */\\n    function _highCovRatioFee(uint256 initCovRatio, uint256 finalCovRatio) internal view returns (uint256 fee) {\\n        if (finalCovRatio > endCovRatio) {\\n            // invalid swap\\n            revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n        } else if (finalCovRatio <= startCovRatio || finalCovRatio <= initCovRatio) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // 1. Calculate the area of fee(r) = (r - startCovRatio) / (endCovRatio - startCovRatio)\\n            // when r increase from initCovRatio to finalCovRatio\\n            // 2. Then multiply it by (endCovRatio - startCovRatio) / (finalCovRatio - initCovRatio)\\n            // to get the average fee over the range\\n            uint256 a = initCovRatio <= startCovRatio\\n                ? 0\\n                : (initCovRatio - startCovRatio) * (initCovRatio - startCovRatio);\\n            uint256 b = (finalCovRatio - startCovRatio) * (finalCovRatio - startCovRatio);\\n            fee = ((b - a) / (finalCovRatio - initCovRatio) / 2).wdiv(endCovRatio - startCovRatio);\\n        }\\n    }\\n\\n    /**\\n     * @dev Exact output swap (fromAmount < 0) should be only used by off-chain quoting function as it is a gas monster\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view override returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = super._quoteFrom(fromAsset, toAsset, fromAmount);\\n\\n        if (fromAmount >= 0) {\\n            // normal quote\\n            uint256 fromAssetCash = fromAsset.cash();\\n            uint256 fromAssetLiability = fromAsset.liability();\\n            uint256 finalFromAssetCovRatio = (fromAssetCash + uint256(fromAmount)).wdiv(fromAssetLiability);\\n\\n            if (finalFromAssetCovRatio > startCovRatio) {\\n                // charge high cov ratio fee\\n                uint256 highCovRatioFee = _highCovRatioFee(\\n                    fromAssetCash.wdiv(fromAssetLiability),\\n                    finalFromAssetCovRatio\\n                ).wmul(actualToAmount);\\n\\n                actualToAmount -= highCovRatioFee;\\n                unchecked {\\n                    haircut += highCovRatioFee;\\n                }\\n            }\\n        } else {\\n            // reverse quote\\n            uint256 toAssetCash = toAsset.cash();\\n            uint256 toAssetLiability = toAsset.liability();\\n            uint256 finalToAssetCovRatio = (toAssetCash + uint256(actualToAmount)).wdiv(toAssetLiability);\\n            if (finalToAssetCovRatio <= startCovRatio) {\\n                // happy path: no high cov ratio fee is charged\\n                return (actualToAmount, haircut);\\n            } else if (toAssetCash.wdiv(toAssetLiability) >= endCovRatio) {\\n                // the to-asset exceeds it's cov ratio limit, further swap to increase cov ratio is impossible\\n                revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n            }\\n\\n            // reverse quote: cov ratio of the to-asset exceed endCovRatio. direct reverse quote is not supported\\n            // we binary search for a upper bound\\n            actualToAmount = _findUpperBound(toAsset, fromAsset, uint256(-fromAmount));\\n            (, haircut) = _quoteFrom(toAsset, fromAsset, int256(actualToAmount));\\n        }\\n    }\\n\\n    /**\\n     * @notice Binary search to find the upper bound of `fromAmount` required to swap `fromAsset` to `toAmount` of `toAsset`\\n     * @dev This function should only used as off-chain view function as it is a gas monster\\n     */\\n    function _findUpperBound(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 toAmount\\n    ) internal view returns (uint256 upperBound) {\\n        uint8 decimals = fromAsset.underlyingTokenDecimals();\\n        uint256 toWadFactor = DSMath.toWad(1, decimals);\\n        // the search value uses the same number of digits as the token\\n        uint256 high = (uint256(fromAsset.liability()).wmul(endCovRatio) - fromAsset.cash()).fromWad(decimals);\\n        uint256 low = 1;\\n\\n        // verify `high` is a valid upper bound\\n        uint256 quote;\\n        (quote, ) = _quoteFrom(fromAsset, toAsset, int256(high * toWadFactor));\\n        if (quote < toAmount) revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n        // Note: we might limit the maximum number of rounds if the request is always rejected by the RPC server\\n        while (low < high) {\\n            unchecked {\\n                uint256 mid = (low + high) / 2;\\n                (quote, ) = _quoteFrom(fromAsset, toAsset, int256(mid * toWadFactor));\\n                if (quote >= toAmount) {\\n                    high = mid;\\n                } else {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n        return high * toWadFactor;\\n    }\\n\\n    /**\\n     * @dev take into account high cov ratio fee\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view override returns (uint256 amount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        (amount, withdrewAmount) = _quotePotentialWithdrawFromOtherAsset(fromToken, toToken, liquidity);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        uint256 fromAssetCash = fromAsset.cash() - withdrewAmount;\\n        uint256 fromAssetLiability = fromAsset.liability() - liquidity;\\n        uint256 finalFromAssetCovRatio = (fromAssetCash + uint256(withdrewAmount)).wdiv(fromAssetLiability);\\n\\n        if (finalFromAssetCovRatio > startCovRatio) {\\n            uint256 highCovRatioFee = _highCovRatioFee(fromAssetCash.wdiv(fromAssetLiability), finalFromAssetCovRatio)\\n                .wmul(amount);\\n\\n            amount -= highCovRatioFee;\\n        }\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        amount = amount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n}\\n\",\"keccak256\":\"0xfe659fc51797973412b64ce96ec4d4b0c815bd8fafca91ec6c6850274e1ff23d\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PausableAssets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\n/**\\n * @title PausableAssets\\n * @notice Handles assets pause and unpause of Wombat protocol.\\n * @dev Allows pausing and unpausing of deposit and swap operations\\n */\\ncontract PausableAssets {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event PausedAsset(address asset, address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event UnpausedAsset(address asset, address account);\\n\\n    mapping(address => bool) private _pausedAssets;\\n\\n    error WOMBAT_ASSET_ALREADY_PAUSED();\\n    error WOMBAT_ASSET_NOT_PAUSED();\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function requireAssetNotPaused(address asset) internal view {\\n        if (_pausedAssets[asset]) revert WOMBAT_ASSET_ALREADY_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function requireAssetPaused(address asset) internal view {\\n        if (!_pausedAssets[asset]) revert WOMBAT_ASSET_NOT_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Triggers paused state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function _pauseAsset(address asset) internal {\\n        requireAssetNotPaused(asset);\\n        _pausedAssets[asset] = true;\\n        emit PausedAsset(asset, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function _unpauseAsset(address asset) internal {\\n        requireAssetPaused(asset);\\n        _pausedAssets[asset] = false;\\n        emit UnpausedAsset(asset, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe12faf6a6814fa9734798b98dc025a0e2b17c2a16a0de3d4e6a0a733ccbcd7a6\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './CoreV2.sol';\\nimport '../interfaces/IAsset.sol';\\nimport './PausableAssets.sol';\\nimport '../../wombat-governance/interfaces/IMasterWombat.sol';\\nimport '../interfaces/IPool.sol';\\n\\n/**\\n * @title Pool V2\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n * Note: All variables are 18 decimals, except from that of underlying tokens\\n * Change log:\\n * - add `gap` to prevent storage collision for future upgrades\\n */\\ncontract PoolV2 is\\n    Initializable,\\n    IPool,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PausableAssets,\\n    CoreV2\\n{\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    /// @notice Asset Map struct holds assets\\n    struct AssetMap {\\n        address[] keys;\\n        mapping(address => IAsset) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    /* Storage */\\n\\n    /// @notice Amplification factor\\n    uint256 public ampFactor;\\n\\n    /// @notice Haircut rate\\n    uint256 public haircutRate;\\n\\n    /// @notice Retention ratio: the ratio of haircut that should stay in the pool\\n    uint256 public retentionRatio;\\n\\n    /// @notice LP dividend ratio : the ratio of haircut that should distribute to LP\\n    uint256 public lpDividendRatio;\\n\\n    /// @notice The threshold to mint fee (unit: WAD)\\n    uint256 public mintFeeThreshold;\\n\\n    /// @notice Dev address\\n    address public dev;\\n\\n    address public feeTo;\\n\\n    address public masterWombat;\\n\\n    /// @notice Dividend collected by each asset (unit: WAD)\\n    mapping(IAsset => uint256) internal _feeCollected;\\n\\n    /// @notice A record of assets inside Pool\\n    AssetMap internal _assets;\\n\\n    // Slots reserved for future use\\n    uint128 internal _used1; // Remember to initialize before use.\\n    uint128 internal _used2; // Remember to initialize before use.\\n    uint256[49] private gap;\\n\\n    /* Events */\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when asset is removed from Pool\\n    event AssetRemoved(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    event SetDev(address addr);\\n    event SetMasterWombat(address addr);\\n    event SetFeeTo(address addr);\\n\\n    event SetMintFeeThreshold(uint256 value);\\n    event SetFee(uint256 lpDividendRatio, uint256 retentionRatio);\\n    event SetAmpFactor(uint256 value);\\n    event SetHaircutRate(uint256 value);\\n\\n    event FillPool(address token, uint256 amount);\\n    event TransferTipBucket(address token, uint256 amount, address to);\\n\\n    /* Errors */\\n\\n    error WOMBAT_FORBIDDEN();\\n    error WOMBAT_EXPIRED();\\n\\n    error WOMBAT_ASSET_NOT_EXISTS();\\n    error WOMBAT_ASSET_ALREADY_EXIST();\\n\\n    error WOMBAT_ZERO_ADDRESS();\\n    error WOMBAT_ZERO_AMOUNT();\\n    error WOMBAT_ZERO_LIQUIDITY();\\n    error WOMBAT_INVALID_VALUE();\\n    error WOMBAT_SAME_ADDRESS();\\n    error WOMBAT_AMOUNT_TOO_LOW();\\n    error WOMBAT_CASH_NOT_ENOUGH();\\n\\n    /* Pesudo modifiers to safe gas */\\n\\n    function _checkLiquidity(uint256 liquidity) internal pure {\\n        if (liquidity == 0) revert WOMBAT_ZERO_LIQUIDITY();\\n    }\\n\\n    function _checkAddress(address to) internal pure {\\n        if (to == address(0)) revert WOMBAT_ZERO_ADDRESS();\\n    }\\n\\n    function _checkSameAddress(address from, address to) internal pure {\\n        if (from == to) revert WOMBAT_SAME_ADDRESS();\\n    }\\n\\n    function _checkAmount(uint256 minAmt, uint256 amt) internal pure {\\n        if (minAmt > amt) revert WOMBAT_AMOUNT_TOO_LOW();\\n    }\\n\\n    function _ensure(uint256 deadline) internal view {\\n        if (deadline < block.timestamp) revert WOMBAT_EXPIRED();\\n    }\\n\\n    function _onlyDev() internal view {\\n        if (dev != msg.sender) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /* Construtor and setters */\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public virtual initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        ampFactor = ampFactor_;\\n        haircutRate = haircutRate_;\\n\\n        lpDividendRatio = WAD;\\n\\n        dev = msg.sender;\\n    }\\n\\n    /**\\n     * Permisioneed functions\\n     */\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner {\\n        _checkAddress(asset);\\n        _checkAddress(token);\\n\\n        if (_containsAsset(token)) revert WOMBAT_ASSET_ALREADY_EXIST();\\n        _assets.values[token] = IAsset(asset);\\n        _assets.indexOf[token] = _assets.keys.length;\\n        _assets.keys.push(token);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Removes asset from asset struct\\n     * @dev Can only be called by owner\\n     * @param token The address of token to remove\\n     */\\n    function removeAsset(address token) external onlyOwner {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n\\n        address asset = address(_getAsset(token));\\n        delete _assets.values[token];\\n\\n        uint256 index = _assets.indexOf[token];\\n        uint256 lastIndex = _assets.keys.length - 1;\\n        address lastKey = _assets.keys[lastIndex];\\n\\n        _assets.indexOf[lastKey] = index;\\n        delete _assets.indexOf[token];\\n\\n        _assets.keys[index] = lastKey;\\n        _assets.keys.pop();\\n\\n        emit AssetRemoved(token, asset);\\n    }\\n\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev_ new contract dev address\\n     */\\n    function setDev(address dev_) external onlyOwner {\\n        _checkAddress(dev_);\\n        dev = dev_;\\n        emit SetDev(dev_);\\n    }\\n\\n    function setMasterWombat(address masterWombat_) external onlyOwner {\\n        _checkAddress(masterWombat_);\\n        masterWombat = masterWombat_;\\n        emit SetMasterWombat(masterWombat_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools amplification factor. Can only be set by the contract owner.\\n     * @param ampFactor_ new pool's amplification factor\\n     */\\n    function setAmpFactor(uint256 ampFactor_) external onlyOwner {\\n        if (ampFactor_ > WAD) revert WOMBAT_INVALID_VALUE(); // ampFactor_ should not be set bigger than 1\\n        ampFactor = ampFactor_;\\n        emit SetAmpFactor(ampFactor_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        if (haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE(); // haircutRate_ should not be set bigger than 1\\n        haircutRate = haircutRate_;\\n        emit SetHaircutRate(haircutRate_);\\n    }\\n\\n    function setFee(uint256 lpDividendRatio_, uint256 retentionRatio_) external onlyOwner {\\n        unchecked {\\n            if (retentionRatio_ + lpDividendRatio_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        }\\n        _mintAllFees();\\n        retentionRatio = retentionRatio_;\\n        lpDividendRatio = lpDividendRatio_;\\n        emit SetFee(lpDividendRatio_, retentionRatio_);\\n    }\\n\\n    /**\\n     * @dev unit of amount should be in WAD\\n     */\\n    function transferTipBucket(address token, uint256 amount, address to) external onlyOwner {\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = tipBucketBalance(token);\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.transferUnderlyingToken(to, amount.fromWad(asset.underlyingTokenDecimals()));\\n        emit TransferTipBucket(token, amount, to);\\n    }\\n\\n    /**\\n     * @notice Changes the fee beneficiary. Can only be set by the contract owner.\\n     * This value cannot be set to 0 to avoid unsettled fee.\\n     * @param feeTo_ new fee beneficiary\\n     */\\n    function setFeeTo(address feeTo_) external onlyOwner {\\n        _checkAddress(feeTo_);\\n        feeTo = feeTo_;\\n        emit SetFeeTo(feeTo_);\\n    }\\n\\n    /**\\n     * @notice Set min fee to mint\\n     */\\n    function setMintFeeThreshold(uint256 mintFeeThreshold_) external onlyOwner {\\n        mintFeeThreshold = mintFeeThreshold_;\\n        emit SetMintFeeThreshold(mintFeeThreshold_);\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external {\\n        _onlyDev();\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external {\\n        _onlyDev();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev pause asset, restricting deposit and swap operations\\n     */\\n    function pauseAsset(address token) external {\\n        _onlyDev();\\n        _pauseAsset(token);\\n    }\\n\\n    /**\\n     * @dev unpause asset, enabling deposit and swap operations\\n     */\\n    function unpauseAsset(address token) external {\\n        _onlyDev();\\n        _unpauseAsset(token);\\n    }\\n\\n    /**\\n     * @notice Move fund from tip bucket to the pool to keep r* = 1 as error accumulates\\n     * unit of amount should be in WAD\\n     */\\n    function fillPool(address token, uint256 amount) external {\\n        _onlyDev();\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n            asset.cash() -\\n            _feeCollected[asset];\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.addCash(amount);\\n        emit FillPool(token, amount);\\n    }\\n\\n    /* Assets */\\n\\n    /**\\n     * @notice Return list of tokens in the pool\\n     */\\n    function getTokens() external view override returns (address[] memory) {\\n        return _assets.keys;\\n    }\\n\\n    /**\\n     * @notice get length of asset list\\n     * @return the size of the asset list\\n     */\\n    function _sizeOfAssetList() internal view returns (uint256) {\\n        return _assets.keys.length;\\n    }\\n\\n    /**\\n     * @notice Gets asset with token address key\\n     * @param key The address of token\\n     * @return the corresponding asset in state\\n     */\\n    function _getAsset(address key) internal view returns (IAsset) {\\n        return _assets.values[key];\\n    }\\n\\n    /**\\n     * @notice Gets key (address) at index\\n     * @param index the index\\n     * @return the key of index\\n     */\\n    function _getKeyAtIndex(uint256 index) internal view returns (address) {\\n        return _assets.keys[index];\\n    }\\n\\n    /**\\n     * @notice Looks if the asset is contained by the list\\n     * @param token The address of token to look for\\n     * @return bool true if the asset is in asset list, false otherwise\\n     */\\n    function _containsAsset(address token) internal view returns (bool) {\\n        return _assets.values[token] != IAsset(address(0));\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) internal view returns (IAsset) {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        return _assets.values[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function addressOfAsset(address token) external view override returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function _exactDepositToInEquil(\\n        IAsset asset,\\n        uint256 amount\\n    ) internal view returns (uint256 lpTokenToMint, uint256 liabilityToMint, uint256 reward) {\\n        liabilityToMint = exactDepositLiquidityInEquilImpl(\\n            int256(amount),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToMint >= amount) {\\n            unchecked {\\n                reward = liabilityToMint - amount;\\n            }\\n        } else {\\n            // rounding error\\n            liabilityToMint = amount;\\n        }\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        // collect fee before deposit\\n        _mintFee(asset);\\n\\n        uint256 liabilityToMint;\\n        (liquidity, liabilityToMint, ) = _exactDepositToInEquil(asset, amount);\\n\\n        _checkLiquidity(liquidity);\\n        _checkAmount(minimumLiquidity, liquidity);\\n\\n        asset.addCash(amount);\\n        asset.addLiability(liabilityToMint);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation. This function assumes tax free token.\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external override nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        if (amount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(token);\\n\\n        IAsset asset = _assetOf(token);\\n        IERC20(token).safeTransferFrom(address(msg.sender), address(asset), amount);\\n\\n        if (!shouldStake) {\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, to);\\n        } else {\\n            _checkAddress(masterWombat);\\n            // deposit and stake on behalf of the user\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, address(this));\\n\\n            asset.approve(masterWombat, liquidity);\\n\\n            uint256 pid = IMasterWombat(masterWombat).getAssetPid(address(asset));\\n            IMasterWombat(masterWombat).depositFor(pid, liquidity, to);\\n        }\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential deposit from pool\\n     * @dev To be used by frontend\\n     * @param token The token to deposit by user\\n     * @param amount The amount to deposit\\n     * @return liquidity The potential liquidity user would receive\\n     * @return reward\\n     */\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view override returns (uint256 liquidity, uint256 reward) {\\n        IAsset asset = _assetOf(token);\\n        (liquidity, , reward) = _exactDepositToInEquil(asset, amount.toWad(asset.underlyingTokenDecimals()));\\n    }\\n\\n    /* Withdraw */\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee\\n     */\\n    function _withdrawFrom(\\n        IAsset asset,\\n        uint256 liquidity\\n    ) internal view returns (uint256 amount, uint256 liabilityToBurn, uint256 fee) {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        _checkLiquidity(liabilityToBurn);\\n\\n        amount = withdrawalAmountInEquilImpl(\\n            -int256(liabilityToBurn),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToBurn >= amount) {\\n            fee = liabilityToBurn - amount;\\n        } else {\\n            // rounding error\\n            amount = liabilityToBurn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @return amount The total amount withdrawn\\n     */\\n    function _withdraw(IAsset asset, uint256 liquidity, uint256 minimumAmount) internal returns (uint256 amount) {\\n        // collect fee before withdraw\\n        _mintFee(asset);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, ) = _withdrawFrom(asset, liquidity);\\n        _checkAmount(minimumAmount, amount);\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount);\\n        asset.removeLiability(liabilityToBurn);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (asset.liability() > 0 && uint256(asset.cash()).wdiv(asset.liability()) < WAD / 100)\\n            revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        _checkAddress(to);\\n        _ensure(deadline);\\n\\n        IAsset asset = _assetOf(token);\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        amount = _withdraw(asset, liquidity, minimumAmount.toWad(decimals)).fromWad(decimals);\\n        asset.transferUnderlyingToken(to, amount);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Enables withdrawing liquidity from an asset using LP from a different asset\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity to be withdrawn (in fromToken decimal)\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return toAmount The total amount withdrawn\\n     */\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 toAmount) {\\n        _checkAddress(to);\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        // Withdraw and swap\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        IERC20(fromAsset).safeTransferFrom(address(msg.sender), address(fromAsset), liquidity);\\n        uint256 fromAmountInWad = _withdraw(fromAsset, liquidity, 0);\\n        (toAmount, ) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmountInWad,\\n            minimumAmount.toWad(toAsset.underlyingTokenDecimals())\\n        );\\n\\n        toAmount = toAmount.fromWad(toAsset.underlyingTokenDecimals());\\n        toAsset.transferUnderlyingToken(to, toAmount);\\n\\n        emit Withdraw(msg.sender, toToken, toAmount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return fee The fee that would be applied\\n     */\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view override returns (uint256 amount, uint256 fee) {\\n        _checkLiquidity(liquidity);\\n        IAsset asset = _assetOf(token);\\n        (amount, , fee) = _withdrawFrom(asset, liquidity);\\n        amount = amount.fromWad(asset.underlyingTokenDecimals());\\n    }\\n\\n    function _quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) internal view returns (uint256 amount, uint256 withdrewAmount) {\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        // quote withdraw\\n        (withdrewAmount, , ) = _withdrawFrom(fromAsset, liquidity);\\n\\n        // quote swap\\n        uint256 fromCash = fromAsset.cash() - withdrewAmount;\\n        uint256 fromLiability = fromAsset.liability() - liquidity;\\n\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            withdrewAmount = (withdrewAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = _swapQuoteFunc(\\n            int256(fromCash),\\n            int256(uint256(toAsset.cash())),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            int256(withdrewAmount),\\n            int256(ampFactor)\\n        );\\n        // remove haircut\\n        amount = idealToAmount - idealToAmount.wmul(haircutRate);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from other asset from the pool\\n     * @dev To be used by frontend\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity (amount of the lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return withdrewAmount The amount of the from-token that is withdrew\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual returns (uint256 amount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        (amount, withdrewAmount) = _quotePotentialWithdrawFromOtherAsset(fromToken, toToken, liquidity);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        amount = amount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Swap */\\n\\n    /**\\n     * @notice Return the scale factor that should applied on from-amounts in a swap given\\n     * the from-asset and the to-asset.\\n     * @dev not applicable to a plain pool\\n     */\\n    function _quoteFactor(\\n        IAsset, // fromAsset\\n        IAsset // toAsset\\n    ) internal view virtual returns (uint256) {\\n        // virtual function; do nothing\\n        return 1e18;\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view virtual returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 fromCash = uint256(fromAsset.cash());\\n        uint256 fromLiability = uint256(fromAsset.liability());\\n        uint256 toCash = uint256(toAsset.cash());\\n\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * int256(scaleFactor)) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = _swapQuoteFunc(\\n            int256(fromCash),\\n            int256(toCash),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            int256(ampFactor)\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert WOMBAT_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = (uint256(-fromAmount)).wmul(haircutRate);\\n        }\\n    }\\n\\n    /**\\n     * expect fromAmount and minimumToAmount to be in WAD\\n     */\\n    function _swap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = _quoteFrom(fromAsset, toAsset, int256(fromAmount));\\n        _checkAmount(minimumToAmount, actualToAmount);\\n\\n        unchecked {\\n            _feeCollected[toAsset] += haircut;\\n        }\\n\\n        fromAsset.addCash(fromAmount);\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        unchecked {\\n            toAsset.removeCash(actualToAmount + haircut);\\n        }\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (uint256(toAsset.cash()).wdiv(toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @dev This function assumes tax free token.\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n\\n        (actualToAmount, haircut) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumToAmount.toWad(toDecimal)\\n        );\\n\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        haircut = haircut.fromWad(toDecimal);\\n\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @dev In reverse quote, the haircut is in the `fromAsset`\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The given input amount\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) public view override returns (uint256 potentialOutcome, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        fromAmount = fromAmount.toWad(fromAsset.underlyingTokenDecimals());\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        potentialOutcome = potentialOutcome.fromWad(toAsset.underlyingTokenDecimals());\\n        if (fromAmount >= 0) {\\n            haircut = haircut.fromWad(toAsset.underlyingTokenDecimals());\\n        } else {\\n            haircut = haircut.fromWad(fromAsset.underlyingTokenDecimals());\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param toAmount The given output amount\\n     * @return amountIn The input amount required\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view override returns (uint256 amountIn, uint256 haircut) {\\n        return quotePotentialSwap(toToken, fromToken, -toAmount);\\n    }\\n\\n    /* Queries */\\n\\n    /**\\n     * @notice Returns the exchange rate of the LP token\\n     * @param token The address of the token\\n     * @return xr The exchange rate of LP token\\n     */\\n    function exchangeRate(address token) external view returns (uint256 xr) {\\n        IAsset asset = _assetOf(token);\\n        if (asset.totalSupply() == 0) return WAD;\\n        return xr = uint256(asset.liability()).wdiv(uint256(asset.totalSupply()));\\n    }\\n\\n    function globalEquilCovRatio() external view returns (uint256 equilCovRatio, uint256 invariantInUint) {\\n        int256 invariant;\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        equilCovRatio = uint256(_equilCovRatio(invariant, SL, int256(ampFactor)));\\n        invariantInUint = uint256(invariant);\\n    }\\n\\n    function tipBucketBalance(address token) public view returns (uint256 balance) {\\n        IAsset asset = _assetOf(token);\\n        unchecked {\\n            return\\n                asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n                asset.cash() -\\n                _feeCollected[asset];\\n        }\\n    }\\n\\n    /* Utils */\\n\\n    function _globalInvariantFunc() internal view virtual returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += L_i;\\n            D += L_i.wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to send fee collected to the fee beneficiary\\n     * @param asset The address of the asset to collect fee\\n     */\\n    function _mintFee(IAsset asset) internal {\\n        uint256 feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0 || feeCollected < mintFeeThreshold) {\\n            // early return\\n            return;\\n        }\\n        {\\n            // dividend to veWOM\\n            uint256 dividend = feeCollected.wmul(WAD - lpDividendRatio - retentionRatio);\\n\\n            if (dividend > 0) {\\n                asset.transferUnderlyingToken(feeTo, dividend.fromWad(asset.underlyingTokenDecimals()));\\n            }\\n        }\\n        {\\n            // dividend to LP\\n            uint256 lpDividend = feeCollected.wmul(lpDividendRatio);\\n            if (lpDividend > 0) {\\n                // exact deposit to maintain r* = 1\\n                // increase the value of the LP token, i.e. assetsPerShare\\n                (, uint256 liabilityToMint, ) = _exactDepositToInEquil(asset, lpDividend);\\n                asset.addLiability(liabilityToMint);\\n                asset.addCash(lpDividend);\\n            }\\n        }\\n\\n        _feeCollected[asset] = 0;\\n    }\\n\\n    function _mintAllFees() internal {\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send fee collected to the fee beneficiary\\n     * @param token The address of the token to collect fee\\n     */\\n    function mintFee(address token) external {\\n        _mintFee(_assetOf(token));\\n    }\\n}\\n\",\"keccak256\":\"0xdb85163c5750322eb3b1e6b5c74b17b84c6059bf15a4dce3cba1072349935e56\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(\\n        uint256 _pid,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(\\n        uint256 _pid\\n    ) external view returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(\\n        uint256[] memory _pids\\n    ) external returns (uint256 transfered, uint256[] memory rewards, uint256[] memory additionalRewards);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x374ee1072672236959e8ec928ce63690ec3bcc18edcadfffce165a38dd7082ed\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Supports dynamic assets. Assume r* to be close to 1. Be aware that r* changes when the relative price of the asset updates Change log: - add `gap` to prevent storage collision for future upgrades - Inherite from `HighCovRatioFeePoolV2` instead of `Pool`",
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "addressOfAsset(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "details": "Asset needs to be created and added to pool before any operation. This function assumes tax free token.",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "exchangeRate(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "xr": "The exchange rate of LP token"
        }
      },
      "mintFee(address)": {
        "params": {
          "token": "The address of the token to collect fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "pauseAsset(address)": {
        "details": "pause asset, restricting deposit and swap operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quoteAmountIn(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromToken": "The initial ERC20 token",
          "toAmount": "The given output amount",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "amountIn": "The input amount required",
          "haircut": "The haircut that would be applied"
        }
      },
      "quotePotentialDeposit(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "amount": "The amount to deposit",
          "token": "The token to deposit by user"
        },
        "returns": {
          "liquidity": "The potential liquidity user would receive",
          "reward": "reward"
        }
      },
      "quotePotentialSwap(address,address,int256)": {
        "details": "In reverse quote, the haircut is in the `fromAsset`",
        "params": {
          "fromAmount": "The given input amount",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "fee": "The fee that would be applied"
        }
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "details": "take into account high cov ratio fee"
      },
      "removeAsset(address)": {
        "details": "Can only be called by owner",
        "params": {
          "token": "The address of token to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAmpFactor(uint256)": {
        "params": {
          "ampFactor_": "new pool's amplification factor"
        }
      },
      "setDev(address)": {
        "params": {
          "dev_": "new contract dev address"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "feeTo_": "new fee beneficiary"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "details": "This function assumes tax free token.",
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTipBucket(address,uint256,address)": {
        "details": "unit of amount should be in WAD"
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "unpauseAsset(address)": {
        "details": "unpause asset, enabling deposit and swap operations"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity to be withdrawn (in fromToken decimal)",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "toAmount": "The total amount withdrawn"
        }
      }
    },
    "title": "Dynamic Pool V2",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "AssetRemoved(address,address)": {
        "notice": "An event thats emitted when asset is removed from Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "addressOfAsset(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "ampFactor()": {
        "notice": "Amplification factor"
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "dev()": {
        "notice": "Dev address"
      },
      "exchangeRate(address)": {
        "notice": "Returns the exchange rate of the LP token"
      },
      "fillPool(address,uint256)": {
        "notice": "Move fund from tip bucket to the pool to keep r* = 1 as error accumulates unit of amount should be in WAD"
      },
      "getTokens()": {
        "notice": "Return list of tokens in the pool"
      },
      "haircutRate()": {
        "notice": "Haircut rate"
      },
      "initialize(uint256,uint256)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpDividendRatio()": {
        "notice": "LP dividend ratio : the ratio of haircut that should distribute to LP"
      },
      "mintFee(address)": {
        "notice": "Send fee collected to the fee beneficiary"
      },
      "mintFeeThreshold()": {
        "notice": "The threshold to mint fee (unit: WAD)"
      },
      "quoteAmountIn(address,address,int256)": {
        "notice": "Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)"
      },
      "quotePotentialDeposit(address,uint256)": {
        "notice": "Quotes potential deposit from pool"
      },
      "quotePotentialSwap(address,address,int256)": {
        "notice": "Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage)."
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "removeAsset(address)": {
        "notice": "Removes asset from asset struct"
      },
      "retentionRatio()": {
        "notice": "Retention ratio: the ratio of haircut that should stay in the pool"
      },
      "setAmpFactor(uint256)": {
        "notice": "Changes the pools amplification factor. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setFeeTo(address)": {
        "notice": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setMintFeeThreshold(uint256)": {
        "notice": "Set min fee to mint"
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "notice": "Enables withdrawing liquidity from an asset using LP from a different asset"
      }
    },
    "notice": "Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8109,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_pausedAssets",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10997,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "ampFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 11000,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "haircutRate",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 11003,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "retentionRatio",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 11006,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "lpDividendRatio",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 11009,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "mintFeeThreshold",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 11012,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "dev",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 11014,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "feeTo",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 11016,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "masterWombat",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 11022,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_feeCollected",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_contract(IAsset)4298,t_uint256)"
      },
      {
        "astId": 11026,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_assets",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(AssetMap)10994_storage"
      },
      {
        "astId": 11028,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_used1",
        "offset": 0,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 11030,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_used2",
        "offset": 16,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 11034,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "gap",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7546,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "startCovRatio",
        "offset": 0,
        "slot": "264",
        "type": "t_uint128"
      },
      {
        "astId": 7548,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "endCovRatio",
        "offset": 16,
        "slot": "264",
        "type": "t_uint128"
      },
      {
        "astId": 7552,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "gap",
        "offset": 0,
        "slot": "265",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6835,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "gap",
        "offset": 0,
        "slot": "315",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAsset)4298": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IAsset)4298)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IAsset)",
        "numberOfBytes": "32",
        "value": "t_contract(IAsset)4298"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IAsset)4298,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAsset)4298",
        "label": "mapping(contract IAsset => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetMap)10994_storage": {
        "encoding": "inplace",
        "label": "struct PoolV2.AssetMap",
        "members": [
          {
            "astId": 10984,
            "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10989,
            "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_contract(IAsset)4298)"
          },
          {
            "astId": 10993,
            "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}