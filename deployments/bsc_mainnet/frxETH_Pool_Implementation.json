{
  "address": "0xf2Fd53151444348C9734b2E19488651f38B36B68",
  "abi": [
    {
      "inputs": [],
      "name": "CORE_UNDERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_AMOUNT_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_COV_RATIO_LIMIT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_SAME_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetAmpFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpDividendRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retentionRatio",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetHaircutRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetMasterWombat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetMintFeeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferTipBucket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnpausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addressOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ampFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endCovRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantInUint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDividendRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "pauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "toAmount",
          "type": "int256"
        }
      ],
      "name": "quoteAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAmpFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "startCovRatio_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "endCovRatio_",
          "type": "uint128"
        }
      ],
      "name": "setCovRatioFeeParam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev_",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpDividendRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterWombat_",
          "type": "address"
        }
      ],
      "name": "setMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFeeThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setMintFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startCovRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tipBucketBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferTipBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unpauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ac4a698f23633462a32f95ef7a712f69a6d84a39c06fb1424b509377d318887",
  "receipt": {
    "to": null,
    "from": "0x9e031064ce7C3E9b6dda1FfCF9E5D41AFBbdfEEa",
    "contractAddress": "0xf2Fd53151444348C9734b2E19488651f38B36B68",
    "transactionIndex": 1,
    "gasUsed": "4353302",
    "logsBloom": "0x
    "blockHash": "0x38f60695321b232233fc4bde9297d5dcaa375c94f40f8bef79ba6dc7c6055cd5",
    "transactionHash": "0x5ac4a698f23633462a32f95ef7a712f69a6d84a39c06fb1424b509377d318887",
    "logs": [],
    "blockNumber": 26056617,
    "cumulativeGasUsed": "4374417",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a401cfd8cd19e00a7ec098c42ae9513a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CORE_UNDERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_AMOUNT_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_COV_RATIO_LIMIT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_SAME_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetAmpFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpDividendRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retentionRatio\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHaircutRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMasterWombat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMintFeeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferTipBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addressOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCovRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantInUint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"toAmount\",\"type\":\"int256\"}],\"name\":\"quoteAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"}],\"name\":\"setAmpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"startCovRatio_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endCovRatio_\",\"type\":\"uint128\"}],\"name\":\"setCovRatioFeeParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterWombat_\",\"type\":\"address\"}],\"name\":\"setMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeThreshold_\",\"type\":\"uint256\"}],\"name\":\"setMintFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCovRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tipBucketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTipBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unpauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Supports dynamic assets. Assume r* to be close to 1. Be aware that r* changes when the relative price of the asset updates Change log: - add `gap` to prevent storage collision for future upgrades - Inherite from `HighCovRatioFeePoolV2` instead of `Pool`\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PausedAsset(address,address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"UnpausedAsset(address,address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"addressOfAsset(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"details\":\"Asset needs to be created and added to pool before any operation. This function assumes tax free token.\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"exchangeRate(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"xr\":\"The exchange rate of LP token\"}},\"mintFee(address)\":{\"params\":{\"token\":\"The address of the token to collect fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"pauseAsset(address)\":{\"details\":\"pause asset, restricting deposit and swap operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quoteAmountIn(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromToken\":\"The initial ERC20 token\",\"toAmount\":\"The given output amount\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"amountIn\":\"The input amount required\",\"haircut\":\"The haircut that would be applied\"}},\"quotePotentialDeposit(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"amount\":\"The amount to deposit\",\"token\":\"The token to deposit by user\"},\"returns\":{\"liquidity\":\"The potential liquidity user would receive\",\"reward\":\"reward\"}},\"quotePotentialSwap(address,address,int256)\":{\"details\":\"In reverse quote, the haircut is in the `fromAsset`\",\"params\":{\"fromAmount\":\"The given input amount\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"fee\":\"The fee that would be applied\"}},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"details\":\"take into account high cov ratio fee\"},\"removeAsset(address)\":{\"details\":\"Can only be called by owner\",\"params\":{\"token\":\"The address of token to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAmpFactor(uint256)\":{\"params\":{\"ampFactor_\":\"new pool's amplification factor\"}},\"setDev(address)\":{\"params\":{\"dev_\":\"new contract dev address\"}},\"setFeeTo(address)\":{\"params\":{\"feeTo_\":\"new fee beneficiary\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"details\":\"This function assumes tax free token.\",\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTipBucket(address,uint256,address)\":{\"details\":\"unit of amount should be in WAD\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"unpauseAsset(address)\":{\"details\":\"unpause asset, enabling deposit and swap operations\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity to be withdrawn (in fromToken decimal)\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"toAmount\":\"The total amount withdrawn\"}}},\"title\":\"Dynamic Pool V2\",\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"AssetRemoved(address,address)\":{\"notice\":\"An event thats emitted when asset is removed from Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"addressOfAsset(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"ampFactor()\":{\"notice\":\"Amplification factor\"},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"dev()\":{\"notice\":\"Dev address\"},\"exchangeRate(address)\":{\"notice\":\"Returns the exchange rate of the LP token\"},\"fillPool(address,uint256)\":{\"notice\":\"Move fund from tip bucket to the pool to keep r* = 1 as error accumulates unit of amount should be in WAD\"},\"getTokens()\":{\"notice\":\"Return list of tokens in the pool\"},\"haircutRate()\":{\"notice\":\"Haircut rate\"},\"initialize(uint256,uint256)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpDividendRatio()\":{\"notice\":\"LP dividend ratio : the ratio of haircut that should distribute to LP\"},\"mintFee(address)\":{\"notice\":\"Send fee collected to the fee beneficiary\"},\"mintFeeThreshold()\":{\"notice\":\"The threshold to mint fee (unit: WAD)\"},\"quoteAmountIn(address,address,int256)\":{\"notice\":\"Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)\"},\"quotePotentialDeposit(address,uint256)\":{\"notice\":\"Quotes potential deposit from pool\"},\"quotePotentialSwap(address,address,int256)\":{\"notice\":\"Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage).\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"removeAsset(address)\":{\"notice\":\"Removes asset from asset struct\"},\"retentionRatio()\":{\"notice\":\"Retention ratio: the ratio of haircut that should stay in the pool\"},\"setAmpFactor(uint256)\":{\"notice\":\"Changes the pools amplification factor. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setFeeTo(address)\":{\"notice\":\"Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setMintFeeThreshold(uint256)\":{\"notice\":\"Set min fee to mint\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Enables withdrawing liquidity from an asset using LP from a different asset\"}},\"notice\":\"Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/DynamicPoolV2.sol\":\"DynamicPoolV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf2611a58f79def15405a1144303fbdcdbac177d3a2b291baec538fc4d04a5c09\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x97f61115b32d97ee057cea0c3a7a28ab516927da9cb65d79cf77382f30bcfe8d\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IRelativePriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IRelativePriceProvider {\\n    /**\\n     * @notice get the relative price in WAD\\n     */\\n    function getRelativePrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe3e9082f4cbd2e9ee69930cee61838aa7a0e25dfa47ab1df54126187df756f60\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10 ** 18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10 ** (18 - d);\\n        } else if (d > 18) {\\n            return (x / (10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * 10 ** (d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xd6cacca5817b3c8820f60e203c1485ef19ebe8c07dfdda7df9c870f3dbffaaf5\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10 ** 18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10 ** (18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10 ** (d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc36a2ddfd52a2a0b18987d1da24fa45bebe1dd0c9fa10e631895b4eab7b80e44\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV2\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n */\\ncontract CoreV2 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n    int256 internal constant WAD_I = 10 ** 18;\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    error CORE_UNDERFLOW();\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function _swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) internal pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        if (Dy < 0) {\\n            quote = uint256(-Dy);\\n        } else {\\n            quote = uint256(Dy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(int256 Lx, int256 rx, int256 Ly, int256 ry, int256 A) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(int256 Lx, int256 Ly, int256 rx_, int256 D, int256 A) internal pure returns (int256) {\\n        return Lx.wmul(rx_ - A.wdiv(rx_)).wdiv(Ly) - D.wdiv(Ly);\\n    }\\n\\n    /**\\n     * @return v positive value indicates a reward and negative value indicates a fee\\n     */\\n    function depositRewardImpl(\\n        int256 D,\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 v) {\\n        if (L_i == 0) {\\n            // early return in case of div of 0\\n            return 0;\\n        }\\n        if (delta_i + SL == 0) {\\n            return L_i - A_i;\\n        }\\n\\n        int256 r_i_ = _targetedCovRatio(SL, delta_i, A_i, L_i, D, A);\\n        v = A_i + delta_i - (L_i + delta_i).wmul(r_i_);\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = _equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _equilCovRatio(int256 D, int256 SL, int256 A) internal pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    function _newEquilCovRatio(int256 er, int256 SL, int256 delta_i) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(int256 er_, int256 A, int256 SL, int256 delta_i) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice TODO (if any) from Yellow Paper (Haircut).\\n     * @dev Applies haircut rate to amount\\n     * @param amount The amount that will receive the discount\\n     * @param rate The rate to be applied\\n     * @return The result of operation.\\n     */\\n    function _haircut(uint256 amount, uint256 rate) internal pure returns (uint256) {\\n        return amount.wmul(rate);\\n    }\\n}\\n\",\"keccak256\":\"0xeb377cbb0b56ae886bfd1e2199c6817581219b459c37125fa7fd845ba5adb728\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/DynamicPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../interfaces/IRelativePriceProvider.sol';\\nimport './HighCovRatioFeePoolV2.sol';\\n\\n/**\\n * @title Dynamic Pool V2\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev Supports dynamic assets. Assume r* to be close to 1.\\n * Be aware that r* changes when the relative price of the asset updates\\n * Change log:\\n * - add `gap` to prevent storage collision for future upgrades\\n * - Inherite from `HighCovRatioFeePoolV2` instead of `Pool`\\n */\\ncontract DynamicPoolV2 is HighCovRatioFeePoolV2 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256[50] private gap;\\n\\n    /**\\n     * @notice multiply / divide the cash, liability and amount of a swap by relative price\\n     * Invariant: D = Sum of P_i * L_i * (r_i - A / r_i)\\n     */\\n    function _quoteFactor(IAsset fromAsset, IAsset toAsset) internal view override returns (uint256) {\\n        uint256 fromAssetRelativePrice = IRelativePriceProvider(address(fromAsset)).getRelativePrice();\\n        // theoretically we should multiply toCash, toLiability and idealToAmount by toAssetRelativePrice\\n        // however we simplify the calculation by dividing \\\"from amounts\\\" by toAssetRelativePrice\\n        uint256 toAssetRelativePrice = IRelativePriceProvider(address(toAsset)).getRelativePrice();\\n\\n        return (1e18 * fromAssetRelativePrice) / toAssetRelativePrice;\\n    }\\n\\n    /**\\n     * @dev Invariant: D = Sum of P_i * L_i * (r_i - A / r_i)\\n     */\\n    function _globalInvariantFunc() internal view override returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n            int256 P_i = int256(IRelativePriceProvider(address(asset)).getRelativePrice());\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += P_i.wmul(L_i);\\n            D += P_i.wmul(L_i).wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17c13dc0d0284e9e0780ffde51017467e74573542daff46b56b4e621bc95c9a6\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/HighCovRatioFeePoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport './PoolV2.sol';\\n\\n/**\\n * @title HighCovRatioFeePoolV2\\n * @dev Pool with high cov ratio fee protection\\n * Change log:\\n * - add `gap` to prevent storage collision for future upgrades\\n */\\ncontract HighCovRatioFeePoolV2 is PoolV2 {\\n    using DSMath for uint256;\\n\\n    uint128 public startCovRatio; // 1.5\\n    uint128 public endCovRatio; // 1.8\\n\\n    uint256[50] private gap;\\n\\n    error WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public override {\\n        super.initialize(ampFactor_, haircutRate_);\\n        startCovRatio = 15e17;\\n        endCovRatio = 18e17;\\n    }\\n\\n    function setCovRatioFeeParam(uint128 startCovRatio_, uint128 endCovRatio_) external onlyOwner {\\n        if (startCovRatio_ < 1e18 || startCovRatio_ > endCovRatio_) revert WOMBAT_INVALID_VALUE();\\n\\n        startCovRatio = startCovRatio_;\\n        endCovRatio = endCovRatio_;\\n    }\\n\\n    /**\\n     * @notice Calculate the high cov ratio fee in the to-asset in a swap.\\n     * @dev When cov ratio is in the range [startCovRatio, endCovRatio], the marginal cov ratio is\\n     * (r - startCovRatio) / (endCovRatio - startCovRatio). Here we approximate the high cov ratio cut\\n     * by calculating the \\\"average\\\" fee.\\n     * Note: `finalCovRatio` should be greater than `initCovRatio`\\n     */\\n    function _highCovRatioFee(uint256 initCovRatio, uint256 finalCovRatio) internal view returns (uint256 fee) {\\n        if (finalCovRatio > endCovRatio) {\\n            // invalid swap\\n            revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n        } else if (finalCovRatio <= startCovRatio || finalCovRatio <= initCovRatio) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // 1. Calculate the area of fee(r) = (r - startCovRatio) / (endCovRatio - startCovRatio)\\n            // when r increase from initCovRatio to finalCovRatio\\n            // 2. Then multiply it by (endCovRatio - startCovRatio) / (finalCovRatio - initCovRatio)\\n            // to get the average fee over the range\\n            uint256 a = initCovRatio <= startCovRatio\\n                ? 0\\n                : (initCovRatio - startCovRatio) * (initCovRatio - startCovRatio);\\n            uint256 b = (finalCovRatio - startCovRatio) * (finalCovRatio - startCovRatio);\\n            fee = ((b - a) / (finalCovRatio - initCovRatio) / 2).wdiv(endCovRatio - startCovRatio);\\n        }\\n    }\\n\\n    /**\\n     * @dev Exact output swap (fromAmount < 0) should be only used by off-chain quoting function as it is a gas monster\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view override returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = super._quoteFrom(fromAsset, toAsset, fromAmount);\\n\\n        if (fromAmount >= 0) {\\n            // normal quote\\n            uint256 fromAssetCash = fromAsset.cash();\\n            uint256 fromAssetLiability = fromAsset.liability();\\n            uint256 finalFromAssetCovRatio = (fromAssetCash + uint256(fromAmount)).wdiv(fromAssetLiability);\\n\\n            if (finalFromAssetCovRatio > startCovRatio) {\\n                // charge high cov ratio fee\\n                uint256 highCovRatioFee = _highCovRatioFee(\\n                    fromAssetCash.wdiv(fromAssetLiability),\\n                    finalFromAssetCovRatio\\n                ).wmul(actualToAmount);\\n\\n                actualToAmount -= highCovRatioFee;\\n                unchecked {\\n                    haircut += highCovRatioFee;\\n                }\\n            }\\n        } else {\\n            // reverse quote\\n            uint256 toAssetCash = toAsset.cash();\\n            uint256 toAssetLiability = toAsset.liability();\\n            uint256 finalToAssetCovRatio = (toAssetCash + uint256(actualToAmount)).wdiv(toAssetLiability);\\n            if (finalToAssetCovRatio <= startCovRatio) {\\n                // happy path: no high cov ratio fee is charged\\n                return (actualToAmount, haircut);\\n            } else if (toAssetCash.wdiv(toAssetLiability) >= endCovRatio) {\\n                // the to-asset exceeds it's cov ratio limit, further swap to increase cov ratio is impossible\\n                revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n            }\\n\\n            // reverse quote: cov ratio of the to-asset exceed endCovRatio. direct reverse quote is not supported\\n            // we binary search for a upper bound\\n            actualToAmount = _findUpperBound(toAsset, fromAsset, uint256(-fromAmount));\\n            (, haircut) = _quoteFrom(toAsset, fromAsset, int256(actualToAmount));\\n        }\\n    }\\n\\n    /**\\n     * @notice Binary search to find the upper bound of `fromAmount` required to swap `fromAsset` to `toAmount` of `toAsset`\\n     * @dev This function should only used as off-chain view function as it is a gas monster\\n     */\\n    function _findUpperBound(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 toAmount\\n    ) internal view returns (uint256 upperBound) {\\n        uint8 decimals = fromAsset.underlyingTokenDecimals();\\n        uint256 toWadFactor = DSMath.toWad(1, decimals);\\n        // the search value uses the same number of digits as the token\\n        uint256 high = (uint256(fromAsset.liability()).wmul(endCovRatio) - fromAsset.cash()).fromWad(decimals);\\n        uint256 low = 1;\\n\\n        // verify `high` is a valid upper bound\\n        uint256 quote;\\n        (quote, ) = _quoteFrom(fromAsset, toAsset, int256(high * toWadFactor));\\n        if (quote < toAmount) revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n        // Note: we might limit the maximum number of rounds if the request is always rejected by the RPC server\\n        while (low < high) {\\n            unchecked {\\n                uint256 mid = (low + high) / 2;\\n                (quote, ) = _quoteFrom(fromAsset, toAsset, int256(mid * toWadFactor));\\n                if (quote >= toAmount) {\\n                    high = mid;\\n                } else {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n        return high * toWadFactor;\\n    }\\n\\n    /**\\n     * @dev take into account high cov ratio fee\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view override returns (uint256 amount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        (amount, withdrewAmount) = _quotePotentialWithdrawFromOtherAsset(fromToken, toToken, liquidity);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        uint256 fromAssetCash = fromAsset.cash() - withdrewAmount;\\n        uint256 fromAssetLiability = fromAsset.liability() - liquidity;\\n        uint256 finalFromAssetCovRatio = (fromAssetCash + uint256(withdrewAmount)).wdiv(fromAssetLiability);\\n\\n        if (finalFromAssetCovRatio > startCovRatio) {\\n            uint256 highCovRatioFee = _highCovRatioFee(fromAssetCash.wdiv(fromAssetLiability), finalFromAssetCovRatio)\\n                .wmul(amount);\\n\\n            amount -= highCovRatioFee;\\n        }\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        amount = amount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n}\\n\",\"keccak256\":\"0xfe659fc51797973412b64ce96ec4d4b0c815bd8fafca91ec6c6850274e1ff23d\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PausableAssets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\n/**\\n * @title PausableAssets\\n * @notice Handles assets pause and unpause of Wombat protocol.\\n * @dev Allows pausing and unpausing of deposit and swap operations\\n */\\ncontract PausableAssets {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event PausedAsset(address asset, address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event UnpausedAsset(address asset, address account);\\n\\n    mapping(address => bool) private _pausedAssets;\\n\\n    error WOMBAT_ASSET_ALREADY_PAUSED();\\n    error WOMBAT_ASSET_NOT_PAUSED();\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function requireAssetNotPaused(address asset) internal view {\\n        if (_pausedAssets[asset]) revert WOMBAT_ASSET_ALREADY_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function requireAssetPaused(address asset) internal view {\\n        if (!_pausedAssets[asset]) revert WOMBAT_ASSET_NOT_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Triggers paused state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function _pauseAsset(address asset) internal {\\n        requireAssetNotPaused(asset);\\n        _pausedAssets[asset] = true;\\n        emit PausedAsset(asset, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function _unpauseAsset(address asset) internal {\\n        requireAssetPaused(asset);\\n        _pausedAssets[asset] = false;\\n        emit UnpausedAsset(asset, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe12faf6a6814fa9734798b98dc025a0e2b17c2a16a0de3d4e6a0a733ccbcd7a6\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './CoreV2.sol';\\nimport '../interfaces/IAsset.sol';\\nimport './PausableAssets.sol';\\nimport '../../wombat-governance/interfaces/IMasterWombat.sol';\\nimport '../interfaces/IPool.sol';\\n\\n/**\\n * @title Pool V2\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n * Note: All variables are 18 decimals, except from that of underlying tokens\\n * Change log:\\n * - add `gap` to prevent storage collision for future upgrades\\n */\\ncontract PoolV2 is\\n    Initializable,\\n    IPool,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PausableAssets,\\n    CoreV2\\n{\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    /// @notice Asset Map struct holds assets\\n    struct AssetMap {\\n        address[] keys;\\n        mapping(address => IAsset) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    /* Storage */\\n\\n    /// @notice Amplification factor\\n    uint256 public ampFactor;\\n\\n    /// @notice Haircut rate\\n    uint256 public haircutRate;\\n\\n    /// @notice Retention ratio: the ratio of haircut that should stay in the pool\\n    uint256 public retentionRatio;\\n\\n    /// @notice LP dividend ratio : the ratio of haircut that should distribute to LP\\n    uint256 public lpDividendRatio;\\n\\n    /// @notice The threshold to mint fee (unit: WAD)\\n    uint256 public mintFeeThreshold;\\n\\n    /// @notice Dev address\\n    address public dev;\\n\\n    address public feeTo;\\n\\n    address public masterWombat;\\n\\n    /// @notice Dividend collected by each asset (unit: WAD)\\n    mapping(IAsset => uint256) internal _feeCollected;\\n\\n    /// @notice A record of assets inside Pool\\n    AssetMap internal _assets;\\n\\n    // Slots reserved for future use\\n    uint128 internal _used1; // Remember to initialize before use.\\n    uint128 internal _used2; // Remember to initialize before use.\\n    uint256[49] private gap;\\n\\n    /* Events */\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when asset is removed from Pool\\n    event AssetRemoved(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    event SetDev(address addr);\\n    event SetMasterWombat(address addr);\\n    event SetFeeTo(address addr);\\n\\n    event SetMintFeeThreshold(uint256 value);\\n    event SetFee(uint256 lpDividendRatio, uint256 retentionRatio);\\n    event SetAmpFactor(uint256 value);\\n    event SetHaircutRate(uint256 value);\\n\\n    event FillPool(address token, uint256 amount);\\n    event TransferTipBucket(address token, uint256 amount, address to);\\n\\n    /* Errors */\\n\\n    error WOMBAT_FORBIDDEN();\\n    error WOMBAT_EXPIRED();\\n\\n    error WOMBAT_ASSET_NOT_EXISTS();\\n    error WOMBAT_ASSET_ALREADY_EXIST();\\n\\n    error WOMBAT_ZERO_ADDRESS();\\n    error WOMBAT_ZERO_AMOUNT();\\n    error WOMBAT_ZERO_LIQUIDITY();\\n    error WOMBAT_INVALID_VALUE();\\n    error WOMBAT_SAME_ADDRESS();\\n    error WOMBAT_AMOUNT_TOO_LOW();\\n    error WOMBAT_CASH_NOT_ENOUGH();\\n\\n    /* Pesudo modifiers to safe gas */\\n\\n    function _checkLiquidity(uint256 liquidity) internal pure {\\n        if (liquidity == 0) revert WOMBAT_ZERO_LIQUIDITY();\\n    }\\n\\n    function _checkAddress(address to) internal pure {\\n        if (to == address(0)) revert WOMBAT_ZERO_ADDRESS();\\n    }\\n\\n    function _checkSameAddress(address from, address to) internal pure {\\n        if (from == to) revert WOMBAT_SAME_ADDRESS();\\n    }\\n\\n    function _checkAmount(uint256 minAmt, uint256 amt) internal pure {\\n        if (minAmt > amt) revert WOMBAT_AMOUNT_TOO_LOW();\\n    }\\n\\n    function _ensure(uint256 deadline) internal view {\\n        if (deadline < block.timestamp) revert WOMBAT_EXPIRED();\\n    }\\n\\n    function _onlyDev() internal view {\\n        if (dev != msg.sender) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /* Construtor and setters */\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public virtual initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        ampFactor = ampFactor_;\\n        haircutRate = haircutRate_;\\n\\n        lpDividendRatio = WAD;\\n\\n        dev = msg.sender;\\n    }\\n\\n    /**\\n     * Permisioneed functions\\n     */\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner {\\n        _checkAddress(asset);\\n        _checkAddress(token);\\n\\n        if (_containsAsset(token)) revert WOMBAT_ASSET_ALREADY_EXIST();\\n        _assets.values[token] = IAsset(asset);\\n        _assets.indexOf[token] = _assets.keys.length;\\n        _assets.keys.push(token);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Removes asset from asset struct\\n     * @dev Can only be called by owner\\n     * @param token The address of token to remove\\n     */\\n    function removeAsset(address token) external onlyOwner {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n\\n        address asset = address(_getAsset(token));\\n        delete _assets.values[token];\\n\\n        uint256 index = _assets.indexOf[token];\\n        uint256 lastIndex = _assets.keys.length - 1;\\n        address lastKey = _assets.keys[lastIndex];\\n\\n        _assets.indexOf[lastKey] = index;\\n        delete _assets.indexOf[token];\\n\\n        _assets.keys[index] = lastKey;\\n        _assets.keys.pop();\\n\\n        emit AssetRemoved(token, asset);\\n    }\\n\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev_ new contract dev address\\n     */\\n    function setDev(address dev_) external onlyOwner {\\n        _checkAddress(dev_);\\n        dev = dev_;\\n        emit SetDev(dev_);\\n    }\\n\\n    function setMasterWombat(address masterWombat_) external onlyOwner {\\n        _checkAddress(masterWombat_);\\n        masterWombat = masterWombat_;\\n        emit SetMasterWombat(masterWombat_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools amplification factor. Can only be set by the contract owner.\\n     * @param ampFactor_ new pool's amplification factor\\n     */\\n    function setAmpFactor(uint256 ampFactor_) external onlyOwner {\\n        if (ampFactor_ > WAD) revert WOMBAT_INVALID_VALUE(); // ampFactor_ should not be set bigger than 1\\n        ampFactor = ampFactor_;\\n        emit SetAmpFactor(ampFactor_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        if (haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE(); // haircutRate_ should not be set bigger than 1\\n        haircutRate = haircutRate_;\\n        emit SetHaircutRate(haircutRate_);\\n    }\\n\\n    function setFee(uint256 lpDividendRatio_, uint256 retentionRatio_) external onlyOwner {\\n        unchecked {\\n            if (retentionRatio_ + lpDividendRatio_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        }\\n        _mintAllFees();\\n        retentionRatio = retentionRatio_;\\n        lpDividendRatio = lpDividendRatio_;\\n        emit SetFee(lpDividendRatio_, retentionRatio_);\\n    }\\n\\n    /**\\n     * @dev unit of amount should be in WAD\\n     */\\n    function transferTipBucket(address token, uint256 amount, address to) external onlyOwner {\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = tipBucketBalance(token);\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.transferUnderlyingToken(to, amount.fromWad(asset.underlyingTokenDecimals()));\\n        emit TransferTipBucket(token, amount, to);\\n    }\\n\\n    /**\\n     * @notice Changes the fee beneficiary. Can only be set by the contract owner.\\n     * This value cannot be set to 0 to avoid unsettled fee.\\n     * @param feeTo_ new fee beneficiary\\n     */\\n    function setFeeTo(address feeTo_) external onlyOwner {\\n        _checkAddress(feeTo_);\\n        feeTo = feeTo_;\\n        emit SetFeeTo(feeTo_);\\n    }\\n\\n    /**\\n     * @notice Set min fee to mint\\n     */\\n    function setMintFeeThreshold(uint256 mintFeeThreshold_) external onlyOwner {\\n        mintFeeThreshold = mintFeeThreshold_;\\n        emit SetMintFeeThreshold(mintFeeThreshold_);\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external {\\n        _onlyDev();\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external {\\n        _onlyDev();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev pause asset, restricting deposit and swap operations\\n     */\\n    function pauseAsset(address token) external {\\n        _onlyDev();\\n        _pauseAsset(token);\\n    }\\n\\n    /**\\n     * @dev unpause asset, enabling deposit and swap operations\\n     */\\n    function unpauseAsset(address token) external {\\n        _onlyDev();\\n        _unpauseAsset(token);\\n    }\\n\\n    /**\\n     * @notice Move fund from tip bucket to the pool to keep r* = 1 as error accumulates\\n     * unit of amount should be in WAD\\n     */\\n    function fillPool(address token, uint256 amount) external {\\n        _onlyDev();\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n            asset.cash() -\\n            _feeCollected[asset];\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.addCash(amount);\\n        emit FillPool(token, amount);\\n    }\\n\\n    /* Assets */\\n\\n    /**\\n     * @notice Return list of tokens in the pool\\n     */\\n    function getTokens() external view override returns (address[] memory) {\\n        return _assets.keys;\\n    }\\n\\n    /**\\n     * @notice get length of asset list\\n     * @return the size of the asset list\\n     */\\n    function _sizeOfAssetList() internal view returns (uint256) {\\n        return _assets.keys.length;\\n    }\\n\\n    /**\\n     * @notice Gets asset with token address key\\n     * @param key The address of token\\n     * @return the corresponding asset in state\\n     */\\n    function _getAsset(address key) internal view returns (IAsset) {\\n        return _assets.values[key];\\n    }\\n\\n    /**\\n     * @notice Gets key (address) at index\\n     * @param index the index\\n     * @return the key of index\\n     */\\n    function _getKeyAtIndex(uint256 index) internal view returns (address) {\\n        return _assets.keys[index];\\n    }\\n\\n    /**\\n     * @notice Looks if the asset is contained by the list\\n     * @param token The address of token to look for\\n     * @return bool true if the asset is in asset list, false otherwise\\n     */\\n    function _containsAsset(address token) internal view returns (bool) {\\n        return _assets.values[token] != IAsset(address(0));\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) internal view returns (IAsset) {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        return _assets.values[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function addressOfAsset(address token) external view override returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function _exactDepositToInEquil(\\n        IAsset asset,\\n        uint256 amount\\n    ) internal view returns (uint256 lpTokenToMint, uint256 liabilityToMint, uint256 reward) {\\n        liabilityToMint = exactDepositLiquidityInEquilImpl(\\n            int256(amount),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToMint >= amount) {\\n            unchecked {\\n                reward = liabilityToMint - amount;\\n            }\\n        } else {\\n            // rounding error\\n            liabilityToMint = amount;\\n        }\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        // collect fee before deposit\\n        _mintFee(asset);\\n\\n        uint256 liabilityToMint;\\n        (liquidity, liabilityToMint, ) = _exactDepositToInEquil(asset, amount);\\n\\n        _checkLiquidity(liquidity);\\n        _checkAmount(minimumLiquidity, liquidity);\\n\\n        asset.addCash(amount);\\n        asset.addLiability(liabilityToMint);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation. This function assumes tax free token.\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external override nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        if (amount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(token);\\n\\n        IAsset asset = _assetOf(token);\\n        IERC20(token).safeTransferFrom(address(msg.sender), address(asset), amount);\\n\\n        if (!shouldStake) {\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, to);\\n        } else {\\n            _checkAddress(masterWombat);\\n            // deposit and stake on behalf of the user\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, address(this));\\n\\n            asset.approve(masterWombat, liquidity);\\n\\n            uint256 pid = IMasterWombat(masterWombat).getAssetPid(address(asset));\\n            IMasterWombat(masterWombat).depositFor(pid, liquidity, to);\\n        }\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential deposit from pool\\n     * @dev To be used by frontend\\n     * @param token The token to deposit by user\\n     * @param amount The amount to deposit\\n     * @return liquidity The potential liquidity user would receive\\n     * @return reward\\n     */\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view override returns (uint256 liquidity, uint256 reward) {\\n        IAsset asset = _assetOf(token);\\n        (liquidity, , reward) = _exactDepositToInEquil(asset, amount.toWad(asset.underlyingTokenDecimals()));\\n    }\\n\\n    /* Withdraw */\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee\\n     */\\n    function _withdrawFrom(\\n        IAsset asset,\\n        uint256 liquidity\\n    ) internal view returns (uint256 amount, uint256 liabilityToBurn, uint256 fee) {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        _checkLiquidity(liabilityToBurn);\\n\\n        amount = withdrawalAmountInEquilImpl(\\n            -int256(liabilityToBurn),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToBurn >= amount) {\\n            fee = liabilityToBurn - amount;\\n        } else {\\n            // rounding error\\n            amount = liabilityToBurn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @return amount The total amount withdrawn\\n     */\\n    function _withdraw(IAsset asset, uint256 liquidity, uint256 minimumAmount) internal returns (uint256 amount) {\\n        // collect fee before withdraw\\n        _mintFee(asset);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, ) = _withdrawFrom(asset, liquidity);\\n        _checkAmount(minimumAmount, amount);\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount);\\n        asset.removeLiability(liabilityToBurn);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (asset.liability() > 0 && uint256(asset.cash()).wdiv(asset.liability()) < WAD / 100)\\n            revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        _checkAddress(to);\\n        _ensure(deadline);\\n\\n        IAsset asset = _assetOf(token);\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        amount = _withdraw(asset, liquidity, minimumAmount.toWad(decimals)).fromWad(decimals);\\n        asset.transferUnderlyingToken(to, amount);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Enables withdrawing liquidity from an asset using LP from a different asset\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity to be withdrawn (in fromToken decimal)\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return toAmount The total amount withdrawn\\n     */\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 toAmount) {\\n        _checkAddress(to);\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        // Withdraw and swap\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        IERC20(fromAsset).safeTransferFrom(address(msg.sender), address(fromAsset), liquidity);\\n        uint256 fromAmountInWad = _withdraw(fromAsset, liquidity, 0);\\n        (toAmount, ) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmountInWad,\\n            minimumAmount.toWad(toAsset.underlyingTokenDecimals())\\n        );\\n\\n        toAmount = toAmount.fromWad(toAsset.underlyingTokenDecimals());\\n        toAsset.transferUnderlyingToken(to, toAmount);\\n\\n        emit Withdraw(msg.sender, toToken, toAmount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return fee The fee that would be applied\\n     */\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view override returns (uint256 amount, uint256 fee) {\\n        _checkLiquidity(liquidity);\\n        IAsset asset = _assetOf(token);\\n        (amount, , fee) = _withdrawFrom(asset, liquidity);\\n        amount = amount.fromWad(asset.underlyingTokenDecimals());\\n    }\\n\\n    function _quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) internal view returns (uint256 amount, uint256 withdrewAmount) {\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        // quote withdraw\\n        (withdrewAmount, , ) = _withdrawFrom(fromAsset, liquidity);\\n\\n        // quote swap\\n        uint256 fromCash = fromAsset.cash() - withdrewAmount;\\n        uint256 fromLiability = fromAsset.liability() - liquidity;\\n\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            withdrewAmount = (withdrewAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = _swapQuoteFunc(\\n            int256(fromCash),\\n            int256(uint256(toAsset.cash())),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            int256(withdrewAmount),\\n            int256(ampFactor)\\n        );\\n        // remove haircut\\n        amount = idealToAmount - idealToAmount.wmul(haircutRate);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from other asset from the pool\\n     * @dev To be used by frontend\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity (amount of the lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return withdrewAmount The amount of the from-token that is withdrew\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual returns (uint256 amount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        (amount, withdrewAmount) = _quotePotentialWithdrawFromOtherAsset(fromToken, toToken, liquidity);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        amount = amount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Swap */\\n\\n    /**\\n     * @notice Return the scale factor that should applied on from-amounts in a swap given\\n     * the from-asset and the to-asset.\\n     * @dev not applicable to a plain pool\\n     */\\n    function _quoteFactor(\\n        IAsset, // fromAsset\\n        IAsset // toAsset\\n    ) internal view virtual returns (uint256) {\\n        // virtual function; do nothing\\n        return 1e18;\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view virtual returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 fromCash = uint256(fromAsset.cash());\\n        uint256 fromLiability = uint256(fromAsset.liability());\\n        uint256 toCash = uint256(toAsset.cash());\\n\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * int256(scaleFactor)) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = _swapQuoteFunc(\\n            int256(fromCash),\\n            int256(toCash),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            int256(ampFactor)\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert WOMBAT_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = (uint256(-fromAmount)).wmul(haircutRate);\\n        }\\n    }\\n\\n    /**\\n     * expect fromAmount and minimumToAmount to be in WAD\\n     */\\n    function _swap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = _quoteFrom(fromAsset, toAsset, int256(fromAmount));\\n        _checkAmount(minimumToAmount, actualToAmount);\\n\\n        unchecked {\\n            _feeCollected[toAsset] += haircut;\\n        }\\n\\n        fromAsset.addCash(fromAmount);\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        unchecked {\\n            toAsset.removeCash(actualToAmount + haircut);\\n        }\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (uint256(toAsset.cash()).wdiv(toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @dev This function assumes tax free token.\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n\\n        (actualToAmount, haircut) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumToAmount.toWad(toDecimal)\\n        );\\n\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        haircut = haircut.fromWad(toDecimal);\\n\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @dev In reverse quote, the haircut is in the `fromAsset`\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The given input amount\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) public view override returns (uint256 potentialOutcome, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        fromAmount = fromAmount.toWad(fromAsset.underlyingTokenDecimals());\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        potentialOutcome = potentialOutcome.fromWad(toAsset.underlyingTokenDecimals());\\n        if (fromAmount >= 0) {\\n            haircut = haircut.fromWad(toAsset.underlyingTokenDecimals());\\n        } else {\\n            haircut = haircut.fromWad(fromAsset.underlyingTokenDecimals());\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param toAmount The given output amount\\n     * @return amountIn The input amount required\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view override returns (uint256 amountIn, uint256 haircut) {\\n        return quotePotentialSwap(toToken, fromToken, -toAmount);\\n    }\\n\\n    /* Queries */\\n\\n    /**\\n     * @notice Returns the exchange rate of the LP token\\n     * @param token The address of the token\\n     * @return xr The exchange rate of LP token\\n     */\\n    function exchangeRate(address token) external view returns (uint256 xr) {\\n        IAsset asset = _assetOf(token);\\n        if (asset.totalSupply() == 0) return WAD;\\n        return xr = uint256(asset.liability()).wdiv(uint256(asset.totalSupply()));\\n    }\\n\\n    function globalEquilCovRatio() external view returns (uint256 equilCovRatio, uint256 invariantInUint) {\\n        int256 invariant;\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        equilCovRatio = uint256(_equilCovRatio(invariant, SL, int256(ampFactor)));\\n        invariantInUint = uint256(invariant);\\n    }\\n\\n    function tipBucketBalance(address token) public view returns (uint256 balance) {\\n        IAsset asset = _assetOf(token);\\n        unchecked {\\n            return\\n                asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n                asset.cash() -\\n                _feeCollected[asset];\\n        }\\n    }\\n\\n    /* Utils */\\n\\n    function _globalInvariantFunc() internal view virtual returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += L_i;\\n            D += L_i.wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to send fee collected to the fee beneficiary\\n     * @param asset The address of the asset to collect fee\\n     */\\n    function _mintFee(IAsset asset) internal {\\n        uint256 feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0 || feeCollected < mintFeeThreshold) {\\n            // early return\\n            return;\\n        }\\n        {\\n            // dividend to veWOM\\n            uint256 dividend = feeCollected.wmul(WAD - lpDividendRatio - retentionRatio);\\n\\n            if (dividend > 0) {\\n                asset.transferUnderlyingToken(feeTo, dividend.fromWad(asset.underlyingTokenDecimals()));\\n            }\\n        }\\n        {\\n            // dividend to LP\\n            uint256 lpDividend = feeCollected.wmul(lpDividendRatio);\\n            if (lpDividend > 0) {\\n                // exact deposit to maintain r* = 1\\n                // increase the value of the LP token, i.e. assetsPerShare\\n                (, uint256 liabilityToMint, ) = _exactDepositToInEquil(asset, lpDividend);\\n                asset.addLiability(liabilityToMint);\\n                asset.addCash(lpDividend);\\n            }\\n        }\\n\\n        _feeCollected[asset] = 0;\\n    }\\n\\n    function _mintAllFees() internal {\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send fee collected to the fee beneficiary\\n     * @param token The address of the token to collect fee\\n     */\\n    function mintFee(address token) external {\\n        _mintFee(_assetOf(token));\\n    }\\n}\\n\",\"keccak256\":\"0xdb85163c5750322eb3b1e6b5c74b17b84c6059bf15a4dce3cba1072349935e56\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(\\n        uint256 _pid,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(\\n        uint256 _pid\\n    ) external view returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(\\n        uint256[] memory _pids\\n    ) external returns (uint256 transfered, uint256[] memory rewards, uint256[] memory additionalRewards);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x374ee1072672236959e8ec928ce63690ec3bcc18edcadfffce165a38dd7082ed\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657614ddd908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908163017b82921461297757508063017e7e58146129505780630705999d146128dd578063070f81d9146126ea57806309a5fca3146122de5780630f91f06f14611edb5780633753b14a14611e535780633bd61ba814611e2c5780633f4ba83a14611d8f5780634a5e42b114611c2d5780634a6fee0e14611b995780634fdd64e514611b8557806352f7c98814611aca5780635c975abb14611aa75780635cfe092e14611a8957806361858e23146119ef5780636281baef1461168b5780636922d5ca1461166d578063715018a61461161157806374cbbdb9146115ef578063815bfd29146115d15780638456cb59146115765780638a2dfe09146113215780638da5cb5b146112fa578063907448ed1461126d57806391cca3db1461124657806393aeea02146110f35780639908fc8b14610ea25780639abacb4114610ddc5780639e4416b714610d7e578063a4275ceb1461095e578063aa6ca80814610898578063d043c5651461084a578063d0dd0e561461082c578063d30ffeda14610808578063d477f05f14610795578063da48999714610651578063dc3b7c8b14610625578063e4a3011614610472578063e9249cc714610442578063f2fde38b1461039e578063f46901ed1461032b578063f57e84d5146102a3578063f8b49e7214610276578063fb7f5cc21461024e5763fca8f3081461021b57600080fd5b3461024b57604061023f61023961023136612a1e565b9290926137b3565b91614779565b82519182526020820152f35b80fd5b503461024b578060031936011261024b5760206001600160801b036101085416604051908152f35b503461024b57602036600319011261024b576102a061029b610296612993565b612ff0565b614bc6565b80f35b503461024b57602036600319011261024b576004356102c0612a69565b670de0b6b3a76400008111610301576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a180f35b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b503461024b57602036600319011261024b577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206001600160a01b03610370612993565b610378612a69565b61038181612e8f565b16806001600160a01b031960d054161760d055604051908152a180f35b503461024b57602036600319011261024b576103b8612993565b6103c0612a69565b6001600160a01b038116156103d8576102a090612ac1565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461024b57602036600319011261024b5760206001600160a01b03610469610296612993565b16604051908152f35b503461024b5761048136612a53565b9082549160ff8360081c161591828093610618575b8015610601575b156105975760ff1984811660011786559383610586575b506104ce60ff865460081c166104c981612dd1565b612dd1565b6104d733612ac1565b8454936104f760ff8660081c166104ed81612dd1565b6001606555612dd1565b6097541660975560ca5560cb55670de0b6b3a764000060cd55336001600160a01b031960cf54161760cf5561054e575b506101087718fae27693b40000000000000000000014d1120d7b1600008282541617905580f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a138610527565b61ffff1916610101178555386104b4565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b15801561049d5750600160ff85161461049d565b50600160ff851610610496565b503461024b57602036600319011261024b576020610649610644612993565b61493a565b604051908152f35b503461024b57604036600319011261024b5761066b612993565b6106736129bf565b61067b612a69565b61068481612e8f565b61068d82612e8f565b6106b0826001600160a01b0380911660005260d460205260406000205416151590565b61076b576001600160a01b03809116911680835260d460205260408320826001600160a01b031982541617905560d35460d5602052806040852055680100000000000000008110156107575761072e61071082600185940160d355612e42565b819391549060031b916001600160a01b03809116831b921b19161790565b90557f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188380a380f35b602484634e487b7160e01b81526041600452fd5b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b503461024b57602036600319011261024b577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206001600160a01b036107da612993565b6107e2612a69565b6107eb81612e8f565b16806001600160a01b031960cf54161760cf55604051908152a180f35b503461024b57602036600319011261024b576020610649610827612993565b614a8e565b503461024b578060031936011261024b57602060cb54604051908152f35b503461024b57602036600319011261024b577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b706602060043561088a612a69565b8060ce55604051908152a180f35b503461024b578060031936011261024b57604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b81811061094157505050846108fa910385612b33565b60405193838594850191818652518092526040850193925b82811061092157505050500390f35b83516001600160a01b031685528695509381019392810192600101610912565b82546001600160a01b0316845292860192600192830192016108e4565b503461024b57606036600319011261024b57610978612993565b6109806129bf565b61098b604435612d62565b6109958183612d93565b61099e82612ff0565b91836109a983612ff0565b6109b560443586613a15565b5050948560405163961be39160e01b81526020816004816001600160a01b0387165afa8015610d18576001600160781b0383916109fa938891610cd8575b5016612b74565b9060405163705727b560e01b81526020816004816001600160a01b0388165afa8015610c6957610a438691610a49938991610c9e575b506001600160781b036044359116612b74565b94613e47565b670de0b6b3a764000090818103610d4e575b5050506040519263961be39160e01b84526020846004816001600160a01b0385165afa938415610d18578594610d23575b5060206001600160a01b039160046040518094819363705727b560e01b8352165afa8015610d185788610b0395610afd95610afd95610aeb956001600160a01b039a95610cf7575b506001600160781b038060ca549616931690613cbb565b610af760cb5482612bf0565b90612b74565b93612ff0565b92169260405163961be39160e01b8152602081600481885afa8015610c69576001600160781b038391610b3d938991610cd8575016612b74565b60405163705727b560e01b8152602081600481895afa8015610ccd57610b76918891610c9e57506001600160781b036044359116612b74565b610b8981610b848585612b97565b612c1a565b916001600160801b0361010854168311610c74575b505050604051926020846004816339420b4560e11b988982525afa918215610c6957610bdf6020936004926001600160a01b03978a92610c51575b50612c83565b9560405195869384928352165afa918215610c465790610c08929160409592610c155750612c83565b9082519182526020820152f35b610c3891925060203d602011610c3f575b610c308183612b33565b810190612ba4565b9038610bd9565b503d610c26565b6040513d86823e3d90fd5b610c38919250863d8811610c3f57610c308183612b33565b6040513d88823e3d90fd5b93610c908193610c8b610af794610c959798612c1a565b612cce565b612bf0565b90388080610b9e565b610cc0915060203d602011610cc6575b610cb88183612b33565b810190612b55565b38610a30565b503d610cae565b6040513d89823e3d90fd5b610cf1915060203d602011610cc657610cb88183612b33565b386109f3565b610d1191955060203d602011610cc657610cb88183612b33565b9338610ad4565b6040513d87823e3d90fd5b6001600160a01b03919450610d46602091823d8411610cc657610cb88183612b33565b949150610a8c565b90610d7492949950610d6d8282610d66828298612bbd565b049b612bbd565b0493612bbd565b0495388080610a5b565b503461024b57602036600319011261024b57600435610d9b612a69565b670de0b6b3a76400008111610301576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a180f35b503461024b57602036600319011261024b57610df6612993565b610dfe612f19565b6001600160a01b03811680835260c960205260ff60408420541615610e7857825260c960209081526040808420805460ff1916905580516001600160a01b03909316835233918301919091527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c9190819081015b0390a180f35b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b503461024b57610eb1366129d5565b610ebf95939192949561304d565b610ec7612ec9565b610ed18685612d93565b81156110c957610ee990610ee484612e8f565b613314565b610ef283612f2d565b610efb83612ff0565b91610f0586612ff0565b91604051956339420b4560e11b8088526020886004816001600160a01b0389165afa978815611078576000986110a8575b506040519081526020816004816001600160a01b038a165afa908115611078576001600160a01b03610fa18a610f9b610f948b610fac988c610f8e86610f888e9c8b9c600091611089575b508d612fb6565b93612fb6565b92613f1a565b9d90612c83565b9b612c83565b9816961633876130a2565b6001600160a01b0383163b156110845760006040518094639e79eaa560e01b825281836001600160a01b0382610ffc8d8a60048401602090939291936001600160a01b0360408201951681520152565b0393165af18015611078576040976001600160a01b03948592611069575b5088519586521660208501528684015284606084015216907f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d160803392a3600160655582519182526020820152f35b61107290612b09565b8961101a565b6040513d6000823e3d90fd5b600080fd5b6110a2915060203d602011610c3f57610c308183612b33565b38610f81565b6110c291985060203d602011610c3f57610c308183612b33565b9689610f36565b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b503461024b57606036600319011261024b5761110d612993565b602435906044356001600160a01b03808216918281036110845761112f612a69565b61113884612ff0565b9061114285614a8e565b86116103015782879216906040516339420b4560e11b8152602081600481865afa8015610c465761117b918591611228575b5088612c83565b823b1561122457604051639e79eaa560e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af18015611219576111fb575b50927f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda692856060936040519316835260208301526040820152a180f35b6112089094939294612b09565b61121557909184386111be565b8480fd5b6040513d84823e3d90fd5b8380fd5b611240915060203d8111610c3f57610c308183612b33565b38611174565b503461024b578060031936011261024b5760206001600160a01b0360cf5416604051908152f35b503461024b57604036600319011261024b5760206001600160a01b03611291612993565b6112ab6112a46024359261029684612d62565b9182613a15565b94919290506004604051809581936339420b4560e11b8352165afa918215610c465790610c089291604095926112e15750612c83565b610c3891925060203d8111610c3f57610c308183612b33565b503461024b578060031936011261024b5760206001600160a01b0360335416604051908152f35b503461024b578060031936011261024b57808160ca54908060d354905b81831061137857604085610c088661137361136e8b61136961135f87613758565b6002830590613700565b613798565b6137b3565b613e09565b9091936113b861138786612e42565b91906001600160a01b03928391549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b169560405163961be39160e01b815260209081816004818c5afa908115610d18578591611559575b506040519063705727b560e01b825282826004818d5afa918215610c6957869261153a575b506004836001600160781b038094169b604051928380926317d1d06960e11b82525afa938415610ccd57879461150a575b505089156114fb57899161144a9116613758565b918160029384820561145b91613700565b9061146591613798565b918291670de0b6b3a7640000958661147e819484613775565b611487906136dc565b0561149191613700565b9b61149b91613775565b6114a4906136dc565b05926114af89613758565b9082056114bb91613700565b906114c591613798565b6114ce9161373f565b6114d791613775565b6114e0906136dc565b056114ea91613700565b936114f490614a7f565b919061133e565b5050509550936114f490614a7f565b9080929450813d8311611533575b6115228183612b33565b810103126110845751913880611436565b503d611518565b611552919250833d8511610cc657610cb88183612b33565b9038611405565b6115709150823d8411610cc657610cb88183612b33565b386113e0565b503461024b578060031936011261024b5761158f612f19565b611597612ec9565b600160ff1960975416176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b503461024b578060031936011261024b57602060cd54604051908152f35b503461024b578060031936011261024b5760206101085460801c604051908152f35b503461024b578060031936011261024b5761162a612a69565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461024b578060031936011261024b57602060cc54604051908152f35b503461024b5760c036600319011261024b576116a5612993565b602435604435916116b46129a9565b9260a435908115918215036119eb576116cb61304d565b6116d3612ec9565b83156110c9576116e285612e8f565b6116ed608435613314565b6116f683612f2d565b6116ff83612ff0565b6001600160a01b03928382169061171a878333888a166130a2565b156117e9576020600491604051928380926339420b4560e11b82525afa9081156117de57926117819261177b89937ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b979660209c916117c1575b5089612fb6565b90613346565b945b6117b18660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b0390a36001606555604051908152f35b6117d891508c3d8111610c3f57610c308183612b33565b38611774565b6040513d8a823e3d90fd5b906117fc8460d199949895995416612e8f565b604051966339420b4560e11b88526020978881600481875afa908115610d185761183a9392916118339187916119d4575089612fb6565b3092613346565b60d1546040517f095ea7b30000000000000000000000000000000000000000000000000000000081529089166001600160a01b0316600482015260248101829052909690818160448187875af18015610c46576119a7575b508760d1541691604051907faf929a8000000000000000000000000000000000000000000000000000000000825260048201528181602481865afa918215610c46578492611979575b5050813b156119755782916064839260405194859384927f90210d7e00000000000000000000000000000000000000000000000000000000845260048401528b60248401528c891660448401525af1801561121957611961575b50506020947ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b91611783565b61196b8291612b09565b61024b5780611935565b8280fd5b90809250813d83116119a0575b6119908183612b33565b81010312611084575138806118db565b503d611986565b6119c690823d84116119cd575b6119be8183612b33565b810190613035565b5038611892565b503d6119b4565b6117d891508b3d8d11610c3f57610c308183612b33565b8580fd5b503461024b57604036600319011261024b57611a0c610296612993565b6040516339420b4560e11b81526020816004816001600160a01b0386165afa908115611a7e57611a539291611a4d9160409591611a60575b50602435612fb6565b906134ce565b8351928352602083015250f35b611a78915060203d8111610c3f57610c308183612b33565b38611a44565b6040513d85823e3d90fd5b503461024b578060031936011261024b57602060ce54604051908152f35b503461024b578060031936011261024b57602060ff609754166040519015158152f35b503461024b57611ad936612a53565b90611ae2612a69565b670de0b6b3a76400008183011161030157825b60d354811015611b495780611b3f61029b6001600160a01b03611b1a611b4495612e42565b90549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b614a7f565b611af5565b506040907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5928060cc558160cd5582519182526020820152a180f35b503461024b57604061023f61023936612a1e565b503461024b57604036600319011261024b576004356001600160801b038082168092036110845760243590811680820361108457611bd5612a69565b670de0b6b3a76400008310908115611c23575b506103015761010891837fffffffffffffffffffffffffffffffff0000000000000000000000000000000084549360801b1692161717905580f35b9050821138611be8565b503461024b57602036600319011261024b57611c47612993565b611c4f612a69565b611c72816001600160a01b0380911660005260d460205260406000205416151590565b15611d65576001600160a01b038091169081835260d4602052604083208054906001600160a01b03198216905560d5602052604084205460d3549060001991828101908111611d515761071085611ccb611cf093612e42565b90549060031b1c169283895260d56020528060408a2055878952886040812055612e42565b905560d3548015611d3d5701611d0581612e42565b8482549160031b1b1916905560d35516907f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8380a380f35b602486634e487b7160e01b81526031600452fd5b602487634e487b7160e01b81526011600452fd5b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b503461024b578060031936011261024b57611da8612f19565b60975460ff811615611de85760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461024b578060031936011261024b5760206001600160a01b0360d15416604051908152f35b503461024b57602036600319011261024b577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e610e72611e91612993565b611e99612f19565b611ea281612f2d565b6001600160a01b031680845260c960209081526040808620805460ff191660011790558051928352339183019190915290918291820190565b503461024b57611f2c611f23611ef0366129d5565b611eff9793959296919761304d565b611f07612ec9565b611f1088612e8f565b611f1986612d62565b610ee48584612d93565b61029681612f2d565b92611f3682612ff0565b906001600160a01b03851694611f4e858733816130a2565b600095611f5a82614bc6565b611f648683613a15565b509097823b1561024b57604051632770a7eb60e21b81526001600160a01b038416600482015260248101899052818160448183885af18015611219576122cf575b5090823b156122b7576040516313f3df3160e31b8152896004820152828160248183885af18015611a7e579083916122bb575b5050823b156122b7576040519063d8b8785360e01b82526004820152818160248183875af18015611219579082916122a3575b505060405163705727b560e01b91828252602082600481875afa918215612296578192612275575b506001600160781b03809216151593846121bc575b505050506121ab576001600160a01b03831695604051936339420b4560e11b948581526020816004818c5afa80156110785761209095610f8e9260009261218a575b50612fb6565b50604051918252602082600481885afa908115611078576120b8926000926121695750612c83565b92803b1561108457604051639e79eaa560e01b81526001600160a01b038616600482015260248101859052906000908290604490829084905af18015611078576020957ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9926001600160a01b039261215a575b506117b16040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b61216390612b09565b8761212b565b61218391925060203d602011610c3f57610c308183612b33565b9087610bd9565b6121a491925060203d602011610c3f57610c308183612b33565b908c61208a565b60046040516316fde3bd60e21b8152fd5b90919293506040519363961be39160e01b8552602085600481855afa948515611a7e578395612253575b5060209060046040518094819382525afa9182156122475792662386f26fc100009492819261221e9591612228575b50169116612c1a565b1088808080612048565b612241915060203d602011610cc657610cb88183612b33565b8d612215565b604051903d90823e3d90fd5b602091955061226e90823d8411610cc657610cb88183612b33565b94906121e6565b61228f91925060203d602011610cc657610cb88183612b33565b908b612033565b50604051903d90823e3d90fd5b6122ac90612b09565b61024b57808a61200b565b5080fd5b6122c490612b09565b6122b757818b611fd8565b6122d890612b09565b8a611fa5565b503461024b5760a036600319011261024b576122f8612993565b6123006129a9565b61230861304d565b612310612ec9565b61231b602435612d62565b61232481612e8f565b61232f608435613314565b61233882612ff0565b916123506024356001600160a01b03851633816130a2565b6040516339420b4560e11b81526020816004816001600160a01b0388165afa908115610d185785916126cb575b5061238a81604435612fb6565b9061239485614bc6565b6123ad6123a360243587613a15565b509190809461349d565b6001600160a01b0386163b1561108457604051632770a7eb60e21b81526001600160a01b03871660048201526024803590820152600090818180604481010381836001600160a01b038d165af18015611219576126bc575b50906001600160a01b0387163b156122b7576040516313f3df3160e31b81528460048201528281602481836001600160a01b038d165af18015611a7e579083916126a8575b50506001600160a01b0387163b156122b7576040519063d8b8785360e01b825260048201528181602481836001600160a01b038c165af1801561121957908291612694575b505060405163705727b560e01b908181526020816004816001600160a01b038c165afa908115611a7e57906001600160781b03918491612675575b5016151591826125b7575b50506121ab576124e491612c83565b926001600160a01b0381163b1561121557846040518092639e79eaa560e01b825281836001600160a01b03826125348b8b60048401602090939291936001600160a01b0360408201951681520152565b0393165af18015610d18576125a3575b50602093507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad96001600160a01b03604051931692806117b133948760243591846040919493926001600160a01b03606083019616825260208201520152565b6125ad8591612b09565b6112245783612544565b60405163961be39160e01b81529250906020836004816001600160a01b038c165afa928315611219578293612654575b506040519081526020816004816001600160a01b038c165afa918215612247576001600160781b0361262d93662386f26fc1000095938293916126355750169116612c1a565b1038806124d5565b61264e915060203d602011610cc657610cb88183612b33565b38612215565b61266e91935060203d602011610cc657610cb88183612b33565b91386125e7565b61268e915060203d602011610cc657610cb88183612b33565b386124ca565b61269d90612b09565b61024b57803861248f565b6126b190612b09565b6122b757813861244a565b6126c590612b09565b38612405565b6126e4915060203d602011610c3f57610c308183612b33565b3861237d565b503461024b57604036600319011261024b57612704612993565b90602435612710612f19565b6001600160a01b0361272184612ff0565b16604051632672469960e21b81526020908181600481865afa908115610d185785916128b0575b50604051906339420b4560e11b82528282600481875afa918215610c695790612778929187926128915750612fb6565b60405163961be39160e01b81528281600481875afa908115610c69576127c793926001600160781b0360d2936127b7938a91612874575b501690612b74565b9184875252604085205490612b74565b821161030157803b156119755782809160246040518094819362b64f3d60e51b83528760048401525af18015611a7e57612843575b50604080516001600160a01b039094168452602084019190915290917f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379181908101610e72565b9161286e7f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff13793612b09565b916127fc565b61288b9150863d8811610cc657610cb88183612b33565b386127af565b6128a9919250843d8611610c3f57610c308183612b33565b903861208a565b90508181813d83116128d6575b6128c78183612b33565b81010312611215575138612748565b503d6128bd565b503461024b57602036600319011261024b577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d60206001600160a01b03612922612993565b61292a612a69565b61293381612e8f565b16806001600160a01b031960d154161760d155604051908152a180f35b503461024b578060031936011261024b5760206001600160a01b0360d05416604051908152f35b9050346122b757816003193601126122b75760209060ca548152f35b600435906001600160a01b038216820361108457565b606435906001600160a01b038216820361108457565b602435906001600160a01b038216820361108457565b60c0906003190112611084576001600160a01b03600435818116810361108457916024358281168103611084579160443591606435916084359081168103611084579060a43590565b6060906003190112611084576001600160a01b0390600435828116810361108457916024359081168103611084579060443590565b6040906003190112611084576004359060243590565b6001600160a01b03603354163303612a7d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b67ffffffffffffffff8111612b1d57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612b1d57604052565b9081602091031261108457516001600160781b03811681036110845790565b91908203918211612b8157565b634e487b7160e01b600052601160045260246000fd5b91908201809211612b8157565b90816020910312611084575160ff811681036110845790565b81810292918115918404141715612b8157565b8115612bda570490565b634e487b7160e01b600052601260045260246000fd5b90612bfa91612bbd565b6706f05b59d3b200008101809111612b8157670de0b6b3a7640000900490565b90670de0b6b3a764000091828102928184041490151715612b8157612c46612c4b928260011c90612b97565b612bd0565b90565b60ff6011199116019060ff8211612b8157565b60ff166012039060ff8211612b8157565b60ff16604d8111612b8157600a0a90565b9060ff81166012811015612cad575090612ca7612ca2612c4b93612c61565b612c72565b90612bd0565b601210612cb8575090565b90612cc8612ca2612c4b93612c4e565b90612bbd565b610108548060801c91828411600014612cf2576004604051630c2b153f60e31b8152fd5b6001600160801b0382168411801590612d58575b612d4f57612c4b936001600160801b0392831691612d389190838111612d44576000905b848303920391800203612bd0565b60011c92031690612c1a565b838103800290612d2a565b50505050600090565b5080841115612d06565b15612d6957565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03908116911614612da757565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b15612dd857565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60d354811015612e795760d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b031615612e9f57565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b60ff60975416612ed557565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001600160a01b0360cf541633036121ab57565b6001600160a01b031660005260c960205260ff60406000205416612f4d57565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b60ff81166012811015612f915750612ca2612c4b91612c61565b601210612f9e5750600190565b612ca2612faa91612c4e565b8015612bda5760010490565b9060ff81166012811015612fd5575090612cc8612ca2612c4b93612c61565b601210612fe0575090565b90612ca7612ca2612c4b93612c4e565b613013816001600160a01b0380911660005260d460205260406000205416151590565b15611d65576001600160a01b0380911660005260d46020526040600020541690565b90816020910312611084575180151581036110845790565b60026065541461305e576002606555565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b93929190604051602093848201927f23b872dd0000000000000000000000000000000000000000000000000000000084526001600160a01b039485809216602485015216604483015260648201526064815260a081019267ffffffffffffffff9682851088861117612b1d57169060e0810184811088821117612b1d576040528484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152600080938192519082855af1903d15613234573d968711613220576131919495966040519061318388601f19601f8401160183612b33565b81528093873d92013e613241565b8051908161319e57505050565b82806131ae938301019101613035565b156131b65750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b602483634e487b7160e01b81526041600452fd5b9150613191939495506060915b919290156132a25750815115613255575090565b3b1561325e5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156132b55750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106132fb575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506132d8565b421161331c57565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b039192949361335b82614bc6565b61336584836134ce565b5093909261337d84809961337882612d62565b61349d565b1690813b1561108457604093845162b64f3d60e51b81526000966004820152868160248183885af1801561349357613480575b50823b156119eb5784519063283c3d8160e21b82526004820152858160248183875af1801561347657908691613462575b5050813b156112155783517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019290925290919083908390604490829084905af19081156134595750613448575050565b6134528291612b09565b61024b5750565b513d84823e3d90fd5b61346b90612b09565b6112155784386133e1565b85513d88823e3d90fd5b61348c90969196612b09565b94386133b0565b86513d89823e3d90fd5b116134a457565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b6000916001600160a01b036000921660409081519363961be39160e01b85526020938486600481865afa958615613683578296613664575b5083519063705727b560e01b968783528683600481885afa92831561365a578493613633575b5061354c6135519160ca54906001600160781b03808097169116856137c4565b61368d565b9781891061362a57508703955b84519081528581600481875afa908115613620578391613603575b5016938461358a5750505050508192565b806004938551948580926318160ddd60e01b82525afa9384156135f8575081936135c3575b50505090612c466135c09285612bbd565b92565b9091809350813d83116135f1575b6135db8183612b33565b8101031261024b575051612c466135c0386135af565b503d6135d1565b51913d9150823e3d90fd5b61361a9150863d8811610cc657610cb88183612b33565b38613579565b85513d85823e3d90fd5b9697509661355e565b61355191935061365261354c91893d8b11610cc657610cb88183612b33565b93915061352c565b86513d86823e3d90fd5b61367c919650853d8711610cc657610cb88183612b33565b9438613506565b84513d84823e3d90fd5b600081126136985790565b606460405162461bcd60e51b815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b906706f05b59d3b200009160008382019384129112908015821691151617612b8157565b91909160008382019384129112908015821691151617612b8157565b90670de0b6b3a764000060008382039312818412811691841390151617612b8157565b81810392916000138015828513169184121617612b8157565b90670de0b6b3a764000091828102928184051490151715612b8157565b818102929160008212600160ff1b821416612b81578184051490151715612b8157565b8115612bda57600160ff1b8114600019831416612b81570590565b600160ff1b8114612b815760000390565b9190811561395f5760006137d88483613700565b12613935576137f7816137f18461136961135f84613758565b94613700565b670de0b6b3a7640000918261381c6138176138118961371c565b85613775565b6136dc565b05908361382c613817878a613775565b05908160011b916002830503612b81576138498593928493613700565b96613854878a613775565b9061385e91613798565b6138679161373f565b6138719084613775565b61387a906136dc565b05918061388691613775565b61388f906136dc565b056138999161373f565b91816138a58287613775565b6138ae906136dc565b05906138b991613775565b6138c2906136dc565b056138cc91613700565b916138d78280613775565b928160021b90600482058303612b81576139236139319461391d61390d6002986139076139289661136998613775565b9061373f565b91613917816137b3565b92613966565b90613700565b613758565b84830590613700565b0590565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5050905090565b919060006003841315613a06575060008113806139fc575b156139c557915b60028061399b856139968186613798565b613700565b05915b8483036139aa57505050565b91935090816139bd856139968185613798565b05919061399e565b60008112806139ea575b156139e3576139dd906137b3565b91613985565b5081613985565b50826139f5826137b3565b13156139cf565b508281131561397e565b929050613a0f57565b60019150565b916000926001600160a01b036000911690604080519063705727b560e01b938483526020968784600481855afa938415613cb1578594613c8e575b50613a65906001600160781b03809516612bbd565b82516318160ddd60e01b81528881600481865afa908115613c84578691613c55575b50613a9191612bd0565b96613a9b88612d62565b613aa4886137b3565b94835163961be39160e01b81528281600481875afa908115613c4b57839187918491613c2e575b501697600486518096819382525afa938415613c24575092613c07575b5050169060ca5490613afa8184613700565b9083613b0586613758565b60028205613b1291613700565b90613b1c91613798565b8094613b2785613758565b90670de0b6b3a764000096808894936002869505613b4491613700565b90613b4e91613798565b613b579161373f565b613b6091613775565b613b69906136dc565b0591613b748561371c565b613b7d91613775565b613b86906136dc565b05613b9091613700565b60029005928392613ba18480613775565b9280613bac91613775565b613bb591613775565b613bbe906136dc565b05613bc891613700565b90613bd291613966565b613bdb91613700565b613be49161373f565b613bed9061368d565b92838310613c005750612c4b8383612b74565b9092508192565b613c1d9250803d10610cc657610cb88183612b33565b3880613ae8565b51903d90823e3d90fd5b613c459150833d8511610cc657610cb88183612b33565b38613acb565b85513d84823e3d90fd5b90508881813d8311613c7d575b613c6c8183612b33565b810103126119eb5751613a91613a87565b503d613c62565b84513d88823e3d90fd5b613a65919450613caa90893d8b11610cc657610cb88183612b33565b9390613a50565b83513d87823e3d90fd5b9390949180158015613e01575b6139355783818192613cda8989613700565b9780613ce68380613775565b90613cf091613798565b98670de0b6b3a7640000809a8c613d078880613775565b90613d1191613798565b613d1a91613700565b613d24908a613775565b613d2d906136dc565b05613d379161373f565b95613d4191613700565b613d4a90613758565b60028205613d5791613700565b90613d6191613798565b80613d6b87613758565b60028205613d7891613700565b90613d8291613798565b613d8b9161373f565b613d9491613775565b90613d9e91613798565b91613da890613758565b60028205613db591613700565b90613dbf91613798565b613dc89161373f565b90613dd291613e09565b613ddb91613775565b613de4906136dc565b0590613def9161373f565b6000811215612c4b57612c4b906137b3565b508315613cc8565b613e138180613775565b908260021b9280840560041490151715612b8157613e4281613e3d6139319461391d600297613758565b613966565b61373f565b604051916317d1d06960e11b9081845260209182856004816001600160a01b038098165afa94851561107857600095613eea575b50906004839260405195869384928352165afa90811561107857600091613ebe575b509050670de0b6b3a76400009180830292830403612b8157612c4b91612bd0565b82813d8311613ee3575b613ed28183612b33565b8101031261024b5750518038613e9d565b503d613ec8565b90948382813d8311613f13575b613f018183612b33565b8101031261024b575051936004613e7b565b503d613ef7565b90929391613f298185846140c5565b90948195613f3881809961349d565b6000926001600160a01b038093169485855260209360d285526040978887208481540190551690813b156119eb578591602483928a51948593849262b64f3d60e51b845260048401525af180156140bb576140a8575b50843b15611224578551916313f3df3160e31b8352016004820152828160248183885af1801561362057908391614094575b505083519263961be39160e01b84528184600481845afa93841561362057839461406e575b50908060049286519384809263705727b560e01b82525afa928315614063579161402e9391662386f26fc10000959392614046575b50506001600160781b038091169116612c1a565b106140365750565b600490516316fde3bd60e21b8152fd5b61405c9250803d10610cc657610cb88183612b33565b388061401a565b8551903d90823e3d90fd5b829194509161408b600493823d8411610cc657610cb88183612b33565b94919250613fe5565b61409d90612b09565b6122b7578138613fc0565b6140b490949194612b09565b9238613f8e565b87513d87823e3d90fd5b919290926140d48185856144a1565b809491809660008512156000146141f0575050506001600160a01b0316906040519063961be39160e01b82526020908183600481875afa80156141ce576004936000916141d3575b50826001600160781b03809216956040519586809263705727b560e01b82525afa80156141ce57610b849461415f946000926141b1575b50501692839185612b97565b91614182614176610108546001600160801b031690565b6001600160801b031690565b831161418d57505050565b94610c906141ac93610c8b6141a59484979899612c1a565b8092612b74565b920190565b6141c79250803d10610cc657610cb88183612b33565b3880614153565b611078565b6141ea9150833d8511610cc657610cb88183612b33565b3861411c565b8093949297506001600160a01b03919596501660405163961be39160e01b815260208082600481865afa9182156141ce576000926142f9575b506004816001600160781b03809416946040519283809263705727b560e01b82525afa9182156141ce576000926142dc575b50501661426c81610b848885612b97565b6101085492906001600160801b0384161061428b575050505050509190565b909193955061429c92949750612c1a565b9060801c11156142cb576142b26142b9916137b3565b8483614318565b906142c6919384916140c5565b905090565b6004604051630c2b153f60e31b8152fd5b6142f29250803d10610cc657610cb88183612b33565b388061425b565b816143119293503d8411610cc657610cb88183612b33565b9038614229565b6040516339420b4560e11b81529193926020926001600160a01b038316908481600481855afa9081156141ce57600091614484575b5061435781612f77565b946040519263705727b560e01b84528184600481845afa80156141ce57600494600091614467575b50826143a46143946141766101085460801c90565b6001600160781b03809416612bf0565b926040519687809263961be39160e01b82525afa80156141ce576143dc956143d79460009261444a575b50501690612b74565b612c83565b9160019586836143f66143ef8888612bbd565b84866140c5565b50106142cb579291905b8484106144165750505050612c4b929350612bbd565b90919293808501881c90888561442f89850286886140c5565b5010614441575050935b929190614400565b90955001614439565b6144609250803d10610cc657610cb88183612b33565b38806143ce565b61447e9150833d8511610cc657610cb88183612b33565b3861437f565b61449b9150853d8711610c3f57610c308183612b33565b3861434d565b91906000808312614757575b6040805163961be39160e01b8082526001600160a01b038781169760209660049691949192888389818e5afa92831561474d57849361472e575b506001600160781b03809316908b88518b818c8163705727b560e01b958682525afa908115614724579086918891614707575b50169184169389518881528c818d81895afa9081156146fd5761454b929188918f8b926146e0575b50501699613e47565b670de0b6b3a7640000908181036146b0575b50508a908a8a518096819382525afa9283156146a657918b9161459094938794614687575b50888660ca54951692613cbb565b988289139788958b908761467d575b50508515614609575b50505050506145e3575050156145cb57506145c86141a560cb5483612bf0565b91565b91906145da612c4b91936137b3565b60cb5490612bf0565b517f9a6114b7000000000000000000000000000000000000000000000000000000008152fd5b9091928094955089129485614628575b505050505038808080806145a8565b8192939495508787518095819382525afa938415614063579361465e575b5050614651866137b3565b9116103880808080614619565b614675929350803d10610cc657610cb88183612b33565b903880614646565b1095508a3861459f565b61469f9194508c8d3d10610cc657610cb88183612b33565b9238614582565b88513d87823e3d90fd5b80828e949f959682826146c96146d7966146d094612bbd565b0498612bbd565b0494613775565b059b903861455d565b6146f69250803d10610cc657610cb88183612b33565b388f614542565b8b513d8a823e3d90fd5b61471e91508d803d10610cc657610cb88183612b33565b3861451a565b8a513d89823e3d90fd5b614746919350893d8b11610cc657610cb88183612b33565b91386144e7565b87513d86823e3d90fd5b916147739061136961135f61476d60cb5461371c565b92613758565b916144ad565b929091926147878382612d93565b83156110c95761479961479f91612ff0565b92612ff0565b916001600160a01b03938482166040958651926339420b4560e11b908185526020958686600481885afa9586156148e95789966147f0936147e8926000926148ca575b506148f4565b9889916140c5565b9092819516938951938385528785600481895afa9485156148bf5788956000926148209284926148a75750612c83565b991261487b575050600488518094819382525afa92831561487057612c4b94959650600093614851575b5050612c83565b614868929350803d10610c3f57610c308183612b33565b90388061484a565b86513d6000823e3d90fd5b93509350600488518094819382525afa92831561487057612c4b94959650600093614851575050612c83565b610c38919250883d8a11610c3f57610c308183612b33565b8b513d6000823e3d90fd5b6148e29192508a3d8c11610c3f57610c308183612b33565b90386147e2565b8a513d6000823e3d90fd5b9060ff81166012811015614919575090614913612ca2612c4b93612c61565b90613775565b601210614924575090565b90614934612ca2612c4b93612c4e565b90613798565b61494b6001600160a01b0391612ff0565b1660408051916318160ddd60e01b928381526020908181600481865afa908115614a3757600091614a52575b5015614a425782519363705727b560e01b85528185600481865afa948515614a3757600095614a16575b508190600485518095819382525afa928315614a0c57506000926149d4575b50506001600160781b03612c4b9216612c1a565b81819392933d8311614a05575b6149eb8183612b33565b8101031261024b5750516001600160781b03612c4b6149c0565b503d6149e1565b513d6000823e3d90fd5b82919550614a3090823d8411610cc657610cb88183612b33565b94906149a1565b84513d6000823e3d90fd5b50505050670de0b6b3a764000090565b908282813d8311614a78575b614a688183612b33565b8101031261024b57505138614977565b503d614a5e565b6000198114612b815760010190565b614a9f6001600160a01b0391612ff0565b166040805190632672469960e21b82526020918281600481875afa908115614bbb57600091614b8e575b508151906339420b4560e11b82528382600481885afa918215614b6b5790614af99291600092614b765750612fb6565b9181519363961be39160e01b85528185600481845afa948515614b6b57600095614b3c575b506001600160781b03929160d2916000525260002054921690030390565b60d291955091614b616001600160781b039493823d8411610cc657610cb88183612b33565b9591509192614b1e565b83513d6000823e3d90fd5b6128a9919250853d8711610c3f57610c308183612b33565b908382813d8311614bb4575b614ba48183612b33565b8101031261024b57505138614ac9565b503d614b9a565b82513d6000823e3d90fd5b6000906001600160a01b03908181169081845260d2602052604092838520549081158015614d9c575b614d945760cd54670de0b6b3a7640000908103908111611d5157614c19614c1f9160cc5490612b74565b83612bf0565b9081614cf6575b505060cd54614c3491612bf0565b9081614c49575b5050825260d2602052812055565b81614c53916134ce565b509050823b156112155783519063283c3d8160e21b82526004820152848160248183875af18015614cec57908591614cd8575b5050813b156112245782519062b64f3d60e51b82526004820152838160248183865af18015614ccb5790849115614c3b57614cc090612b09565b611975578238614c3b565b50505051903d90823e3d90fd5b614ce190612b09565b611224578338614c86565b84513d87823e3d90fd5b60d05416908551906339420b4560e11b8252602082600481895afa918215614d8a5790614d2a929189926112e15750612c83565b90843b15614d86578551639e79eaa560e01b81526001600160a01b039190911660048201526024810191909152858160448183885af1801561347657614d71575b80614c26565b94614d7f614c349296612b09565b9490614d6b565b8680fd5b87513d8a823e3d90fd5b505050505050565b5060ce548210614bef56fea26469706673582212209d61eb759dcc294bdbafa1a49a07bc7b571ebd077310f996ed0fa221ab1e2c6164736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c908163017b82921461297757508063017e7e58146129505780630705999d146128dd578063070f81d9146126ea57806309a5fca3146122de5780630f91f06f14611edb5780633753b14a14611e535780633bd61ba814611e2c5780633f4ba83a14611d8f5780634a5e42b114611c2d5780634a6fee0e14611b995780634fdd64e514611b8557806352f7c98814611aca5780635c975abb14611aa75780635cfe092e14611a8957806361858e23146119ef5780636281baef1461168b5780636922d5ca1461166d578063715018a61461161157806374cbbdb9146115ef578063815bfd29146115d15780638456cb59146115765780638a2dfe09146113215780638da5cb5b146112fa578063907448ed1461126d57806391cca3db1461124657806393aeea02146110f35780639908fc8b14610ea25780639abacb4114610ddc5780639e4416b714610d7e578063a4275ceb1461095e578063aa6ca80814610898578063d043c5651461084a578063d0dd0e561461082c578063d30ffeda14610808578063d477f05f14610795578063da48999714610651578063dc3b7c8b14610625578063e4a3011614610472578063e9249cc714610442578063f2fde38b1461039e578063f46901ed1461032b578063f57e84d5146102a3578063f8b49e7214610276578063fb7f5cc21461024e5763fca8f3081461021b57600080fd5b3461024b57604061023f61023961023136612a1e565b9290926137b3565b91614779565b82519182526020820152f35b80fd5b503461024b578060031936011261024b5760206001600160801b036101085416604051908152f35b503461024b57602036600319011261024b576102a061029b610296612993565b612ff0565b614bc6565b80f35b503461024b57602036600319011261024b576004356102c0612a69565b670de0b6b3a76400008111610301576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a180f35b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b503461024b57602036600319011261024b577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206001600160a01b03610370612993565b610378612a69565b61038181612e8f565b16806001600160a01b031960d054161760d055604051908152a180f35b503461024b57602036600319011261024b576103b8612993565b6103c0612a69565b6001600160a01b038116156103d8576102a090612ac1565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461024b57602036600319011261024b5760206001600160a01b03610469610296612993565b16604051908152f35b503461024b5761048136612a53565b9082549160ff8360081c161591828093610618575b8015610601575b156105975760ff1984811660011786559383610586575b506104ce60ff865460081c166104c981612dd1565b612dd1565b6104d733612ac1565b8454936104f760ff8660081c166104ed81612dd1565b6001606555612dd1565b6097541660975560ca5560cb55670de0b6b3a764000060cd55336001600160a01b031960cf54161760cf5561054e575b506101087718fae27693b40000000000000000000014d1120d7b1600008282541617905580f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a138610527565b61ffff1916610101178555386104b4565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b15801561049d5750600160ff85161461049d565b50600160ff851610610496565b503461024b57602036600319011261024b576020610649610644612993565b61493a565b604051908152f35b503461024b57604036600319011261024b5761066b612993565b6106736129bf565b61067b612a69565b61068481612e8f565b61068d82612e8f565b6106b0826001600160a01b0380911660005260d460205260406000205416151590565b61076b576001600160a01b03809116911680835260d460205260408320826001600160a01b031982541617905560d35460d5602052806040852055680100000000000000008110156107575761072e61071082600185940160d355612e42565b819391549060031b916001600160a01b03809116831b921b19161790565b90557f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188380a380f35b602484634e487b7160e01b81526041600452fd5b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b503461024b57602036600319011261024b577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206001600160a01b036107da612993565b6107e2612a69565b6107eb81612e8f565b16806001600160a01b031960cf54161760cf55604051908152a180f35b503461024b57602036600319011261024b576020610649610827612993565b614a8e565b503461024b578060031936011261024b57602060cb54604051908152f35b503461024b57602036600319011261024b577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b706602060043561088a612a69565b8060ce55604051908152a180f35b503461024b578060031936011261024b57604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b81811061094157505050846108fa910385612b33565b60405193838594850191818652518092526040850193925b82811061092157505050500390f35b83516001600160a01b031685528695509381019392810192600101610912565b82546001600160a01b0316845292860192600192830192016108e4565b503461024b57606036600319011261024b57610978612993565b6109806129bf565b61098b604435612d62565b6109958183612d93565b61099e82612ff0565b91836109a983612ff0565b6109b560443586613a15565b5050948560405163961be39160e01b81526020816004816001600160a01b0387165afa8015610d18576001600160781b0383916109fa938891610cd8575b5016612b74565b9060405163705727b560e01b81526020816004816001600160a01b0388165afa8015610c6957610a438691610a49938991610c9e575b506001600160781b036044359116612b74565b94613e47565b670de0b6b3a764000090818103610d4e575b5050506040519263961be39160e01b84526020846004816001600160a01b0385165afa938415610d18578594610d23575b5060206001600160a01b039160046040518094819363705727b560e01b8352165afa8015610d185788610b0395610afd95610afd95610aeb956001600160a01b039a95610cf7575b506001600160781b038060ca549616931690613cbb565b610af760cb5482612bf0565b90612b74565b93612ff0565b92169260405163961be39160e01b8152602081600481885afa8015610c69576001600160781b038391610b3d938991610cd8575016612b74565b60405163705727b560e01b8152602081600481895afa8015610ccd57610b76918891610c9e57506001600160781b036044359116612b74565b610b8981610b848585612b97565b612c1a565b916001600160801b0361010854168311610c74575b505050604051926020846004816339420b4560e11b988982525afa918215610c6957610bdf6020936004926001600160a01b03978a92610c51575b50612c83565b9560405195869384928352165afa918215610c465790610c08929160409592610c155750612c83565b9082519182526020820152f35b610c3891925060203d602011610c3f575b610c308183612b33565b810190612ba4565b9038610bd9565b503d610c26565b6040513d86823e3d90fd5b610c38919250863d8811610c3f57610c308183612b33565b6040513d88823e3d90fd5b93610c908193610c8b610af794610c959798612c1a565b612cce565b612bf0565b90388080610b9e565b610cc0915060203d602011610cc6575b610cb88183612b33565b810190612b55565b38610a30565b503d610cae565b6040513d89823e3d90fd5b610cf1915060203d602011610cc657610cb88183612b33565b386109f3565b610d1191955060203d602011610cc657610cb88183612b33565b9338610ad4565b6040513d87823e3d90fd5b6001600160a01b03919450610d46602091823d8411610cc657610cb88183612b33565b949150610a8c565b90610d7492949950610d6d8282610d66828298612bbd565b049b612bbd565b0493612bbd565b0495388080610a5b565b503461024b57602036600319011261024b57600435610d9b612a69565b670de0b6b3a76400008111610301576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a180f35b503461024b57602036600319011261024b57610df6612993565b610dfe612f19565b6001600160a01b03811680835260c960205260ff60408420541615610e7857825260c960209081526040808420805460ff1916905580516001600160a01b03909316835233918301919091527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c9190819081015b0390a180f35b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b503461024b57610eb1366129d5565b610ebf95939192949561304d565b610ec7612ec9565b610ed18685612d93565b81156110c957610ee990610ee484612e8f565b613314565b610ef283612f2d565b610efb83612ff0565b91610f0586612ff0565b91604051956339420b4560e11b8088526020886004816001600160a01b0389165afa978815611078576000986110a8575b506040519081526020816004816001600160a01b038a165afa908115611078576001600160a01b03610fa18a610f9b610f948b610fac988c610f8e86610f888e9c8b9c600091611089575b508d612fb6565b93612fb6565b92613f1a565b9d90612c83565b9b612c83565b9816961633876130a2565b6001600160a01b0383163b156110845760006040518094639e79eaa560e01b825281836001600160a01b0382610ffc8d8a60048401602090939291936001600160a01b0360408201951681520152565b0393165af18015611078576040976001600160a01b03948592611069575b5088519586521660208501528684015284606084015216907f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d160803392a3600160655582519182526020820152f35b61107290612b09565b8961101a565b6040513d6000823e3d90fd5b600080fd5b6110a2915060203d602011610c3f57610c308183612b33565b38610f81565b6110c291985060203d602011610c3f57610c308183612b33565b9689610f36565b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b503461024b57606036600319011261024b5761110d612993565b602435906044356001600160a01b03808216918281036110845761112f612a69565b61113884612ff0565b9061114285614a8e565b86116103015782879216906040516339420b4560e11b8152602081600481865afa8015610c465761117b918591611228575b5088612c83565b823b1561122457604051639e79eaa560e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af18015611219576111fb575b50927f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda692856060936040519316835260208301526040820152a180f35b6112089094939294612b09565b61121557909184386111be565b8480fd5b6040513d84823e3d90fd5b8380fd5b611240915060203d8111610c3f57610c308183612b33565b38611174565b503461024b578060031936011261024b5760206001600160a01b0360cf5416604051908152f35b503461024b57604036600319011261024b5760206001600160a01b03611291612993565b6112ab6112a46024359261029684612d62565b9182613a15565b94919290506004604051809581936339420b4560e11b8352165afa918215610c465790610c089291604095926112e15750612c83565b610c3891925060203d8111610c3f57610c308183612b33565b503461024b578060031936011261024b5760206001600160a01b0360335416604051908152f35b503461024b578060031936011261024b57808160ca54908060d354905b81831061137857604085610c088661137361136e8b61136961135f87613758565b6002830590613700565b613798565b6137b3565b613e09565b9091936113b861138786612e42565b91906001600160a01b03928391549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b169560405163961be39160e01b815260209081816004818c5afa908115610d18578591611559575b506040519063705727b560e01b825282826004818d5afa918215610c6957869261153a575b506004836001600160781b038094169b604051928380926317d1d06960e11b82525afa938415610ccd57879461150a575b505089156114fb57899161144a9116613758565b918160029384820561145b91613700565b9061146591613798565b918291670de0b6b3a7640000958661147e819484613775565b611487906136dc565b0561149191613700565b9b61149b91613775565b6114a4906136dc565b05926114af89613758565b9082056114bb91613700565b906114c591613798565b6114ce9161373f565b6114d791613775565b6114e0906136dc565b056114ea91613700565b936114f490614a7f565b919061133e565b5050509550936114f490614a7f565b9080929450813d8311611533575b6115228183612b33565b810103126110845751913880611436565b503d611518565b611552919250833d8511610cc657610cb88183612b33565b9038611405565b6115709150823d8411610cc657610cb88183612b33565b386113e0565b503461024b578060031936011261024b5761158f612f19565b611597612ec9565b600160ff1960975416176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b503461024b578060031936011261024b57602060cd54604051908152f35b503461024b578060031936011261024b5760206101085460801c604051908152f35b503461024b578060031936011261024b5761162a612a69565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461024b578060031936011261024b57602060cc54604051908152f35b503461024b5760c036600319011261024b576116a5612993565b602435604435916116b46129a9565b9260a435908115918215036119eb576116cb61304d565b6116d3612ec9565b83156110c9576116e285612e8f565b6116ed608435613314565b6116f683612f2d565b6116ff83612ff0565b6001600160a01b03928382169061171a878333888a166130a2565b156117e9576020600491604051928380926339420b4560e11b82525afa9081156117de57926117819261177b89937ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b979660209c916117c1575b5089612fb6565b90613346565b945b6117b18660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b0390a36001606555604051908152f35b6117d891508c3d8111610c3f57610c308183612b33565b38611774565b6040513d8a823e3d90fd5b906117fc8460d199949895995416612e8f565b604051966339420b4560e11b88526020978881600481875afa908115610d185761183a9392916118339187916119d4575089612fb6565b3092613346565b60d1546040517f095ea7b30000000000000000000000000000000000000000000000000000000081529089166001600160a01b0316600482015260248101829052909690818160448187875af18015610c46576119a7575b508760d1541691604051907faf929a8000000000000000000000000000000000000000000000000000000000825260048201528181602481865afa918215610c46578492611979575b5050813b156119755782916064839260405194859384927f90210d7e00000000000000000000000000000000000000000000000000000000845260048401528b60248401528c891660448401525af1801561121957611961575b50506020947ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b91611783565b61196b8291612b09565b61024b5780611935565b8280fd5b90809250813d83116119a0575b6119908183612b33565b81010312611084575138806118db565b503d611986565b6119c690823d84116119cd575b6119be8183612b33565b810190613035565b5038611892565b503d6119b4565b6117d891508b3d8d11610c3f57610c308183612b33565b8580fd5b503461024b57604036600319011261024b57611a0c610296612993565b6040516339420b4560e11b81526020816004816001600160a01b0386165afa908115611a7e57611a539291611a4d9160409591611a60575b50602435612fb6565b906134ce565b8351928352602083015250f35b611a78915060203d8111610c3f57610c308183612b33565b38611a44565b6040513d85823e3d90fd5b503461024b578060031936011261024b57602060ce54604051908152f35b503461024b578060031936011261024b57602060ff609754166040519015158152f35b503461024b57611ad936612a53565b90611ae2612a69565b670de0b6b3a76400008183011161030157825b60d354811015611b495780611b3f61029b6001600160a01b03611b1a611b4495612e42565b90549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b614a7f565b611af5565b506040907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5928060cc558160cd5582519182526020820152a180f35b503461024b57604061023f61023936612a1e565b503461024b57604036600319011261024b576004356001600160801b038082168092036110845760243590811680820361108457611bd5612a69565b670de0b6b3a76400008310908115611c23575b506103015761010891837fffffffffffffffffffffffffffffffff0000000000000000000000000000000084549360801b1692161717905580f35b9050821138611be8565b503461024b57602036600319011261024b57611c47612993565b611c4f612a69565b611c72816001600160a01b0380911660005260d460205260406000205416151590565b15611d65576001600160a01b038091169081835260d4602052604083208054906001600160a01b03198216905560d5602052604084205460d3549060001991828101908111611d515761071085611ccb611cf093612e42565b90549060031b1c169283895260d56020528060408a2055878952886040812055612e42565b905560d3548015611d3d5701611d0581612e42565b8482549160031b1b1916905560d35516907f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8380a380f35b602486634e487b7160e01b81526031600452fd5b602487634e487b7160e01b81526011600452fd5b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b503461024b578060031936011261024b57611da8612f19565b60975460ff811615611de85760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461024b578060031936011261024b5760206001600160a01b0360d15416604051908152f35b503461024b57602036600319011261024b577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e610e72611e91612993565b611e99612f19565b611ea281612f2d565b6001600160a01b031680845260c960209081526040808620805460ff191660011790558051928352339183019190915290918291820190565b503461024b57611f2c611f23611ef0366129d5565b611eff9793959296919761304d565b611f07612ec9565b611f1088612e8f565b611f1986612d62565b610ee48584612d93565b61029681612f2d565b92611f3682612ff0565b906001600160a01b03851694611f4e858733816130a2565b600095611f5a82614bc6565b611f648683613a15565b509097823b1561024b57604051632770a7eb60e21b81526001600160a01b038416600482015260248101899052818160448183885af18015611219576122cf575b5090823b156122b7576040516313f3df3160e31b8152896004820152828160248183885af18015611a7e579083916122bb575b5050823b156122b7576040519063d8b8785360e01b82526004820152818160248183875af18015611219579082916122a3575b505060405163705727b560e01b91828252602082600481875afa918215612296578192612275575b506001600160781b03809216151593846121bc575b505050506121ab576001600160a01b03831695604051936339420b4560e11b948581526020816004818c5afa80156110785761209095610f8e9260009261218a575b50612fb6565b50604051918252602082600481885afa908115611078576120b8926000926121695750612c83565b92803b1561108457604051639e79eaa560e01b81526001600160a01b038616600482015260248101859052906000908290604490829084905af18015611078576020957ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9926001600160a01b039261215a575b506117b16040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b61216390612b09565b8761212b565b61218391925060203d602011610c3f57610c308183612b33565b9087610bd9565b6121a491925060203d602011610c3f57610c308183612b33565b908c61208a565b60046040516316fde3bd60e21b8152fd5b90919293506040519363961be39160e01b8552602085600481855afa948515611a7e578395612253575b5060209060046040518094819382525afa9182156122475792662386f26fc100009492819261221e9591612228575b50169116612c1a565b1088808080612048565b612241915060203d602011610cc657610cb88183612b33565b8d612215565b604051903d90823e3d90fd5b602091955061226e90823d8411610cc657610cb88183612b33565b94906121e6565b61228f91925060203d602011610cc657610cb88183612b33565b908b612033565b50604051903d90823e3d90fd5b6122ac90612b09565b61024b57808a61200b565b5080fd5b6122c490612b09565b6122b757818b611fd8565b6122d890612b09565b8a611fa5565b503461024b5760a036600319011261024b576122f8612993565b6123006129a9565b61230861304d565b612310612ec9565b61231b602435612d62565b61232481612e8f565b61232f608435613314565b61233882612ff0565b916123506024356001600160a01b03851633816130a2565b6040516339420b4560e11b81526020816004816001600160a01b0388165afa908115610d185785916126cb575b5061238a81604435612fb6565b9061239485614bc6565b6123ad6123a360243587613a15565b509190809461349d565b6001600160a01b0386163b1561108457604051632770a7eb60e21b81526001600160a01b03871660048201526024803590820152600090818180604481010381836001600160a01b038d165af18015611219576126bc575b50906001600160a01b0387163b156122b7576040516313f3df3160e31b81528460048201528281602481836001600160a01b038d165af18015611a7e579083916126a8575b50506001600160a01b0387163b156122b7576040519063d8b8785360e01b825260048201528181602481836001600160a01b038c165af1801561121957908291612694575b505060405163705727b560e01b908181526020816004816001600160a01b038c165afa908115611a7e57906001600160781b03918491612675575b5016151591826125b7575b50506121ab576124e491612c83565b926001600160a01b0381163b1561121557846040518092639e79eaa560e01b825281836001600160a01b03826125348b8b60048401602090939291936001600160a01b0360408201951681520152565b0393165af18015610d18576125a3575b50602093507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad96001600160a01b03604051931692806117b133948760243591846040919493926001600160a01b03606083019616825260208201520152565b6125ad8591612b09565b6112245783612544565b60405163961be39160e01b81529250906020836004816001600160a01b038c165afa928315611219578293612654575b506040519081526020816004816001600160a01b038c165afa918215612247576001600160781b0361262d93662386f26fc1000095938293916126355750169116612c1a565b1038806124d5565b61264e915060203d602011610cc657610cb88183612b33565b38612215565b61266e91935060203d602011610cc657610cb88183612b33565b91386125e7565b61268e915060203d602011610cc657610cb88183612b33565b386124ca565b61269d90612b09565b61024b57803861248f565b6126b190612b09565b6122b757813861244a565b6126c590612b09565b38612405565b6126e4915060203d602011610c3f57610c308183612b33565b3861237d565b503461024b57604036600319011261024b57612704612993565b90602435612710612f19565b6001600160a01b0361272184612ff0565b16604051632672469960e21b81526020908181600481865afa908115610d185785916128b0575b50604051906339420b4560e11b82528282600481875afa918215610c695790612778929187926128915750612fb6565b60405163961be39160e01b81528281600481875afa908115610c69576127c793926001600160781b0360d2936127b7938a91612874575b501690612b74565b9184875252604085205490612b74565b821161030157803b156119755782809160246040518094819362b64f3d60e51b83528760048401525af18015611a7e57612843575b50604080516001600160a01b039094168452602084019190915290917f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379181908101610e72565b9161286e7f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff13793612b09565b916127fc565b61288b9150863d8811610cc657610cb88183612b33565b386127af565b6128a9919250843d8611610c3f57610c308183612b33565b903861208a565b90508181813d83116128d6575b6128c78183612b33565b81010312611215575138612748565b503d6128bd565b503461024b57602036600319011261024b577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d60206001600160a01b03612922612993565b61292a612a69565b61293381612e8f565b16806001600160a01b031960d154161760d155604051908152a180f35b503461024b578060031936011261024b5760206001600160a01b0360d05416604051908152f35b9050346122b757816003193601126122b75760209060ca548152f35b600435906001600160a01b038216820361108457565b606435906001600160a01b038216820361108457565b602435906001600160a01b038216820361108457565b60c0906003190112611084576001600160a01b03600435818116810361108457916024358281168103611084579160443591606435916084359081168103611084579060a43590565b6060906003190112611084576001600160a01b0390600435828116810361108457916024359081168103611084579060443590565b6040906003190112611084576004359060243590565b6001600160a01b03603354163303612a7d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b67ffffffffffffffff8111612b1d57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117612b1d57604052565b9081602091031261108457516001600160781b03811681036110845790565b91908203918211612b8157565b634e487b7160e01b600052601160045260246000fd5b91908201809211612b8157565b90816020910312611084575160ff811681036110845790565b81810292918115918404141715612b8157565b8115612bda570490565b634e487b7160e01b600052601260045260246000fd5b90612bfa91612bbd565b6706f05b59d3b200008101809111612b8157670de0b6b3a7640000900490565b90670de0b6b3a764000091828102928184041490151715612b8157612c46612c4b928260011c90612b97565b612bd0565b90565b60ff6011199116019060ff8211612b8157565b60ff166012039060ff8211612b8157565b60ff16604d8111612b8157600a0a90565b9060ff81166012811015612cad575090612ca7612ca2612c4b93612c61565b612c72565b90612bd0565b601210612cb8575090565b90612cc8612ca2612c4b93612c4e565b90612bbd565b610108548060801c91828411600014612cf2576004604051630c2b153f60e31b8152fd5b6001600160801b0382168411801590612d58575b612d4f57612c4b936001600160801b0392831691612d389190838111612d44576000905b848303920391800203612bd0565b60011c92031690612c1a565b838103800290612d2a565b50505050600090565b5080841115612d06565b15612d6957565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03908116911614612da757565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b15612dd857565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60d354811015612e795760d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b031615612e9f57565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b60ff60975416612ed557565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001600160a01b0360cf541633036121ab57565b6001600160a01b031660005260c960205260ff60406000205416612f4d57565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b60ff81166012811015612f915750612ca2612c4b91612c61565b601210612f9e5750600190565b612ca2612faa91612c4e565b8015612bda5760010490565b9060ff81166012811015612fd5575090612cc8612ca2612c4b93612c61565b601210612fe0575090565b90612ca7612ca2612c4b93612c4e565b613013816001600160a01b0380911660005260d460205260406000205416151590565b15611d65576001600160a01b0380911660005260d46020526040600020541690565b90816020910312611084575180151581036110845790565b60026065541461305e576002606555565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b93929190604051602093848201927f23b872dd0000000000000000000000000000000000000000000000000000000084526001600160a01b039485809216602485015216604483015260648201526064815260a081019267ffffffffffffffff9682851088861117612b1d57169060e0810184811088821117612b1d576040528484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152600080938192519082855af1903d15613234573d968711613220576131919495966040519061318388601f19601f8401160183612b33565b81528093873d92013e613241565b8051908161319e57505050565b82806131ae938301019101613035565b156131b65750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b602483634e487b7160e01b81526041600452fd5b9150613191939495506060915b919290156132a25750815115613255575090565b3b1561325e5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156132b55750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106132fb575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506132d8565b421161331c57565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b039192949361335b82614bc6565b61336584836134ce565b5093909261337d84809961337882612d62565b61349d565b1690813b1561108457604093845162b64f3d60e51b81526000966004820152868160248183885af1801561349357613480575b50823b156119eb5784519063283c3d8160e21b82526004820152858160248183875af1801561347657908691613462575b5050813b156112155783517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019290925290919083908390604490829084905af19081156134595750613448575050565b6134528291612b09565b61024b5750565b513d84823e3d90fd5b61346b90612b09565b6112155784386133e1565b85513d88823e3d90fd5b61348c90969196612b09565b94386133b0565b86513d89823e3d90fd5b116134a457565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b6000916001600160a01b036000921660409081519363961be39160e01b85526020938486600481865afa958615613683578296613664575b5083519063705727b560e01b968783528683600481885afa92831561365a578493613633575b5061354c6135519160ca54906001600160781b03808097169116856137c4565b61368d565b9781891061362a57508703955b84519081528581600481875afa908115613620578391613603575b5016938461358a5750505050508192565b806004938551948580926318160ddd60e01b82525afa9384156135f8575081936135c3575b50505090612c466135c09285612bbd565b92565b9091809350813d83116135f1575b6135db8183612b33565b8101031261024b575051612c466135c0386135af565b503d6135d1565b51913d9150823e3d90fd5b61361a9150863d8811610cc657610cb88183612b33565b38613579565b85513d85823e3d90fd5b9697509661355e565b61355191935061365261354c91893d8b11610cc657610cb88183612b33565b93915061352c565b86513d86823e3d90fd5b61367c919650853d8711610cc657610cb88183612b33565b9438613506565b84513d84823e3d90fd5b600081126136985790565b606460405162461bcd60e51b815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b906706f05b59d3b200009160008382019384129112908015821691151617612b8157565b91909160008382019384129112908015821691151617612b8157565b90670de0b6b3a764000060008382039312818412811691841390151617612b8157565b81810392916000138015828513169184121617612b8157565b90670de0b6b3a764000091828102928184051490151715612b8157565b818102929160008212600160ff1b821416612b81578184051490151715612b8157565b8115612bda57600160ff1b8114600019831416612b81570590565b600160ff1b8114612b815760000390565b9190811561395f5760006137d88483613700565b12613935576137f7816137f18461136961135f84613758565b94613700565b670de0b6b3a7640000918261381c6138176138118961371c565b85613775565b6136dc565b05908361382c613817878a613775565b05908160011b916002830503612b81576138498593928493613700565b96613854878a613775565b9061385e91613798565b6138679161373f565b6138719084613775565b61387a906136dc565b05918061388691613775565b61388f906136dc565b056138999161373f565b91816138a58287613775565b6138ae906136dc565b05906138b991613775565b6138c2906136dc565b056138cc91613700565b916138d78280613775565b928160021b90600482058303612b81576139236139319461391d61390d6002986139076139289661136998613775565b9061373f565b91613917816137b3565b92613966565b90613700565b613758565b84830590613700565b0590565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5050905090565b919060006003841315613a06575060008113806139fc575b156139c557915b60028061399b856139968186613798565b613700565b05915b8483036139aa57505050565b91935090816139bd856139968185613798565b05919061399e565b60008112806139ea575b156139e3576139dd906137b3565b91613985565b5081613985565b50826139f5826137b3565b13156139cf565b508281131561397e565b929050613a0f57565b60019150565b916000926001600160a01b036000911690604080519063705727b560e01b938483526020968784600481855afa938415613cb1578594613c8e575b50613a65906001600160781b03809516612bbd565b82516318160ddd60e01b81528881600481865afa908115613c84578691613c55575b50613a9191612bd0565b96613a9b88612d62565b613aa4886137b3565b94835163961be39160e01b81528281600481875afa908115613c4b57839187918491613c2e575b501697600486518096819382525afa938415613c24575092613c07575b5050169060ca5490613afa8184613700565b9083613b0586613758565b60028205613b1291613700565b90613b1c91613798565b8094613b2785613758565b90670de0b6b3a764000096808894936002869505613b4491613700565b90613b4e91613798565b613b579161373f565b613b6091613775565b613b69906136dc565b0591613b748561371c565b613b7d91613775565b613b86906136dc565b05613b9091613700565b60029005928392613ba18480613775565b9280613bac91613775565b613bb591613775565b613bbe906136dc565b05613bc891613700565b90613bd291613966565b613bdb91613700565b613be49161373f565b613bed9061368d565b92838310613c005750612c4b8383612b74565b9092508192565b613c1d9250803d10610cc657610cb88183612b33565b3880613ae8565b51903d90823e3d90fd5b613c459150833d8511610cc657610cb88183612b33565b38613acb565b85513d84823e3d90fd5b90508881813d8311613c7d575b613c6c8183612b33565b810103126119eb5751613a91613a87565b503d613c62565b84513d88823e3d90fd5b613a65919450613caa90893d8b11610cc657610cb88183612b33565b9390613a50565b83513d87823e3d90fd5b9390949180158015613e01575b6139355783818192613cda8989613700565b9780613ce68380613775565b90613cf091613798565b98670de0b6b3a7640000809a8c613d078880613775565b90613d1191613798565b613d1a91613700565b613d24908a613775565b613d2d906136dc565b05613d379161373f565b95613d4191613700565b613d4a90613758565b60028205613d5791613700565b90613d6191613798565b80613d6b87613758565b60028205613d7891613700565b90613d8291613798565b613d8b9161373f565b613d9491613775565b90613d9e91613798565b91613da890613758565b60028205613db591613700565b90613dbf91613798565b613dc89161373f565b90613dd291613e09565b613ddb91613775565b613de4906136dc565b0590613def9161373f565b6000811215612c4b57612c4b906137b3565b508315613cc8565b613e138180613775565b908260021b9280840560041490151715612b8157613e4281613e3d6139319461391d600297613758565b613966565b61373f565b604051916317d1d06960e11b9081845260209182856004816001600160a01b038098165afa94851561107857600095613eea575b50906004839260405195869384928352165afa90811561107857600091613ebe575b509050670de0b6b3a76400009180830292830403612b8157612c4b91612bd0565b82813d8311613ee3575b613ed28183612b33565b8101031261024b5750518038613e9d565b503d613ec8565b90948382813d8311613f13575b613f018183612b33565b8101031261024b575051936004613e7b565b503d613ef7565b90929391613f298185846140c5565b90948195613f3881809961349d565b6000926001600160a01b038093169485855260209360d285526040978887208481540190551690813b156119eb578591602483928a51948593849262b64f3d60e51b845260048401525af180156140bb576140a8575b50843b15611224578551916313f3df3160e31b8352016004820152828160248183885af1801561362057908391614094575b505083519263961be39160e01b84528184600481845afa93841561362057839461406e575b50908060049286519384809263705727b560e01b82525afa928315614063579161402e9391662386f26fc10000959392614046575b50506001600160781b038091169116612c1a565b106140365750565b600490516316fde3bd60e21b8152fd5b61405c9250803d10610cc657610cb88183612b33565b388061401a565b8551903d90823e3d90fd5b829194509161408b600493823d8411610cc657610cb88183612b33565b94919250613fe5565b61409d90612b09565b6122b7578138613fc0565b6140b490949194612b09565b9238613f8e565b87513d87823e3d90fd5b919290926140d48185856144a1565b809491809660008512156000146141f0575050506001600160a01b0316906040519063961be39160e01b82526020908183600481875afa80156141ce576004936000916141d3575b50826001600160781b03809216956040519586809263705727b560e01b82525afa80156141ce57610b849461415f946000926141b1575b50501692839185612b97565b91614182614176610108546001600160801b031690565b6001600160801b031690565b831161418d57505050565b94610c906141ac93610c8b6141a59484979899612c1a565b8092612b74565b920190565b6141c79250803d10610cc657610cb88183612b33565b3880614153565b611078565b6141ea9150833d8511610cc657610cb88183612b33565b3861411c565b8093949297506001600160a01b03919596501660405163961be39160e01b815260208082600481865afa9182156141ce576000926142f9575b506004816001600160781b03809416946040519283809263705727b560e01b82525afa9182156141ce576000926142dc575b50501661426c81610b848885612b97565b6101085492906001600160801b0384161061428b575050505050509190565b909193955061429c92949750612c1a565b9060801c11156142cb576142b26142b9916137b3565b8483614318565b906142c6919384916140c5565b905090565b6004604051630c2b153f60e31b8152fd5b6142f29250803d10610cc657610cb88183612b33565b388061425b565b816143119293503d8411610cc657610cb88183612b33565b9038614229565b6040516339420b4560e11b81529193926020926001600160a01b038316908481600481855afa9081156141ce57600091614484575b5061435781612f77565b946040519263705727b560e01b84528184600481845afa80156141ce57600494600091614467575b50826143a46143946141766101085460801c90565b6001600160781b03809416612bf0565b926040519687809263961be39160e01b82525afa80156141ce576143dc956143d79460009261444a575b50501690612b74565b612c83565b9160019586836143f66143ef8888612bbd565b84866140c5565b50106142cb579291905b8484106144165750505050612c4b929350612bbd565b90919293808501881c90888561442f89850286886140c5565b5010614441575050935b929190614400565b90955001614439565b6144609250803d10610cc657610cb88183612b33565b38806143ce565b61447e9150833d8511610cc657610cb88183612b33565b3861437f565b61449b9150853d8711610c3f57610c308183612b33565b3861434d565b91906000808312614757575b6040805163961be39160e01b8082526001600160a01b038781169760209660049691949192888389818e5afa92831561474d57849361472e575b506001600160781b03809316908b88518b818c8163705727b560e01b958682525afa908115614724579086918891614707575b50169184169389518881528c818d81895afa9081156146fd5761454b929188918f8b926146e0575b50501699613e47565b670de0b6b3a7640000908181036146b0575b50508a908a8a518096819382525afa9283156146a657918b9161459094938794614687575b50888660ca54951692613cbb565b988289139788958b908761467d575b50508515614609575b50505050506145e3575050156145cb57506145c86141a560cb5483612bf0565b91565b91906145da612c4b91936137b3565b60cb5490612bf0565b517f9a6114b7000000000000000000000000000000000000000000000000000000008152fd5b9091928094955089129485614628575b505050505038808080806145a8565b8192939495508787518095819382525afa938415614063579361465e575b5050614651866137b3565b9116103880808080614619565b614675929350803d10610cc657610cb88183612b33565b903880614646565b1095508a3861459f565b61469f9194508c8d3d10610cc657610cb88183612b33565b9238614582565b88513d87823e3d90fd5b80828e949f959682826146c96146d7966146d094612bbd565b0498612bbd565b0494613775565b059b903861455d565b6146f69250803d10610cc657610cb88183612b33565b388f614542565b8b513d8a823e3d90fd5b61471e91508d803d10610cc657610cb88183612b33565b3861451a565b8a513d89823e3d90fd5b614746919350893d8b11610cc657610cb88183612b33565b91386144e7565b87513d86823e3d90fd5b916147739061136961135f61476d60cb5461371c565b92613758565b916144ad565b929091926147878382612d93565b83156110c95761479961479f91612ff0565b92612ff0565b916001600160a01b03938482166040958651926339420b4560e11b908185526020958686600481885afa9586156148e95789966147f0936147e8926000926148ca575b506148f4565b9889916140c5565b9092819516938951938385528785600481895afa9485156148bf5788956000926148209284926148a75750612c83565b991261487b575050600488518094819382525afa92831561487057612c4b94959650600093614851575b5050612c83565b614868929350803d10610c3f57610c308183612b33565b90388061484a565b86513d6000823e3d90fd5b93509350600488518094819382525afa92831561487057612c4b94959650600093614851575050612c83565b610c38919250883d8a11610c3f57610c308183612b33565b8b513d6000823e3d90fd5b6148e29192508a3d8c11610c3f57610c308183612b33565b90386147e2565b8a513d6000823e3d90fd5b9060ff81166012811015614919575090614913612ca2612c4b93612c61565b90613775565b601210614924575090565b90614934612ca2612c4b93612c4e565b90613798565b61494b6001600160a01b0391612ff0565b1660408051916318160ddd60e01b928381526020908181600481865afa908115614a3757600091614a52575b5015614a425782519363705727b560e01b85528185600481865afa948515614a3757600095614a16575b508190600485518095819382525afa928315614a0c57506000926149d4575b50506001600160781b03612c4b9216612c1a565b81819392933d8311614a05575b6149eb8183612b33565b8101031261024b5750516001600160781b03612c4b6149c0565b503d6149e1565b513d6000823e3d90fd5b82919550614a3090823d8411610cc657610cb88183612b33565b94906149a1565b84513d6000823e3d90fd5b50505050670de0b6b3a764000090565b908282813d8311614a78575b614a688183612b33565b8101031261024b57505138614977565b503d614a5e565b6000198114612b815760010190565b614a9f6001600160a01b0391612ff0565b166040805190632672469960e21b82526020918281600481875afa908115614bbb57600091614b8e575b508151906339420b4560e11b82528382600481885afa918215614b6b5790614af99291600092614b765750612fb6565b9181519363961be39160e01b85528185600481845afa948515614b6b57600095614b3c575b506001600160781b03929160d2916000525260002054921690030390565b60d291955091614b616001600160781b039493823d8411610cc657610cb88183612b33565b9591509192614b1e565b83513d6000823e3d90fd5b6128a9919250853d8711610c3f57610c308183612b33565b908382813d8311614bb4575b614ba48183612b33565b8101031261024b57505138614ac9565b503d614b9a565b82513d6000823e3d90fd5b6000906001600160a01b03908181169081845260d2602052604092838520549081158015614d9c575b614d945760cd54670de0b6b3a7640000908103908111611d5157614c19614c1f9160cc5490612b74565b83612bf0565b9081614cf6575b505060cd54614c3491612bf0565b9081614c49575b5050825260d2602052812055565b81614c53916134ce565b509050823b156112155783519063283c3d8160e21b82526004820152848160248183875af18015614cec57908591614cd8575b5050813b156112245782519062b64f3d60e51b82526004820152838160248183865af18015614ccb5790849115614c3b57614cc090612b09565b611975578238614c3b565b50505051903d90823e3d90fd5b614ce190612b09565b611224578338614c86565b84513d87823e3d90fd5b60d05416908551906339420b4560e11b8252602082600481895afa918215614d8a5790614d2a929189926112e15750612c83565b90843b15614d86578551639e79eaa560e01b81526001600160a01b039190911660048201526024810191909152858160448183885af1801561347657614d71575b80614c26565b94614d7f614c349296612b09565b9490614d6b565b8680fd5b87513d8a823e3d90fd5b505050505050565b5060ce548210614bef56fea26469706673582212209d61eb759dcc294bdbafa1a49a07bc7b571ebd077310f996ed0fa221ab1e2c6164736f6c63430008120033",
  "devdoc": {
    "details": "Supports dynamic assets. Assume r* to be close to 1. Be aware that r* changes when the relative price of the asset updates Change log: - add `gap` to prevent storage collision for future upgrades - Inherite from `HighCovRatioFeePoolV2` instead of `Pool`",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PausedAsset(address,address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "UnpausedAsset(address,address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "addressOfAsset(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "details": "Asset needs to be created and added to pool before any operation. This function assumes tax free token.",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "exchangeRate(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "xr": "The exchange rate of LP token"
        }
      },
      "mintFee(address)": {
        "params": {
          "token": "The address of the token to collect fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "pauseAsset(address)": {
        "details": "pause asset, restricting deposit and swap operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quoteAmountIn(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromToken": "The initial ERC20 token",
          "toAmount": "The given output amount",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "amountIn": "The input amount required",
          "haircut": "The haircut that would be applied"
        }
      },
      "quotePotentialDeposit(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "amount": "The amount to deposit",
          "token": "The token to deposit by user"
        },
        "returns": {
          "liquidity": "The potential liquidity user would receive",
          "reward": "reward"
        }
      },
      "quotePotentialSwap(address,address,int256)": {
        "details": "In reverse quote, the haircut is in the `fromAsset`",
        "params": {
          "fromAmount": "The given input amount",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "fee": "The fee that would be applied"
        }
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "details": "take into account high cov ratio fee"
      },
      "removeAsset(address)": {
        "details": "Can only be called by owner",
        "params": {
          "token": "The address of token to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAmpFactor(uint256)": {
        "params": {
          "ampFactor_": "new pool's amplification factor"
        }
      },
      "setDev(address)": {
        "params": {
          "dev_": "new contract dev address"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "feeTo_": "new fee beneficiary"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "details": "This function assumes tax free token.",
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTipBucket(address,uint256,address)": {
        "details": "unit of amount should be in WAD"
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "unpauseAsset(address)": {
        "details": "unpause asset, enabling deposit and swap operations"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity to be withdrawn (in fromToken decimal)",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "toAmount": "The total amount withdrawn"
        }
      }
    },
    "title": "Dynamic Pool V2",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "AssetRemoved(address,address)": {
        "notice": "An event thats emitted when asset is removed from Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "addressOfAsset(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "ampFactor()": {
        "notice": "Amplification factor"
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "dev()": {
        "notice": "Dev address"
      },
      "exchangeRate(address)": {
        "notice": "Returns the exchange rate of the LP token"
      },
      "fillPool(address,uint256)": {
        "notice": "Move fund from tip bucket to the pool to keep r* = 1 as error accumulates unit of amount should be in WAD"
      },
      "getTokens()": {
        "notice": "Return list of tokens in the pool"
      },
      "haircutRate()": {
        "notice": "Haircut rate"
      },
      "initialize(uint256,uint256)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpDividendRatio()": {
        "notice": "LP dividend ratio : the ratio of haircut that should distribute to LP"
      },
      "mintFee(address)": {
        "notice": "Send fee collected to the fee beneficiary"
      },
      "mintFeeThreshold()": {
        "notice": "The threshold to mint fee (unit: WAD)"
      },
      "quoteAmountIn(address,address,int256)": {
        "notice": "Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)"
      },
      "quotePotentialDeposit(address,uint256)": {
        "notice": "Quotes potential deposit from pool"
      },
      "quotePotentialSwap(address,address,int256)": {
        "notice": "Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage)."
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "removeAsset(address)": {
        "notice": "Removes asset from asset struct"
      },
      "retentionRatio()": {
        "notice": "Retention ratio: the ratio of haircut that should stay in the pool"
      },
      "setAmpFactor(uint256)": {
        "notice": "Changes the pools amplification factor. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setFeeTo(address)": {
        "notice": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setMintFeeThreshold(uint256)": {
        "notice": "Set min fee to mint"
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "notice": "Enables withdrawing liquidity from an asset using LP from a different asset"
      }
    },
    "notice": "Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 825,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 441,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14322,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_pausedAssets",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17210,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "ampFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 17213,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "haircutRate",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 17216,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "retentionRatio",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 17219,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "lpDividendRatio",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 17222,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "mintFeeThreshold",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 17225,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "dev",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 17227,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "feeTo",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 17229,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "masterWombat",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 17235,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_feeCollected",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_contract(IAsset)5889,t_uint256)"
      },
      {
        "astId": 17239,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_assets",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(AssetMap)17207_storage"
      },
      {
        "astId": 17241,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_used1",
        "offset": 0,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 17243,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "_used2",
        "offset": 16,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 17247,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "gap",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12418,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "startCovRatio",
        "offset": 0,
        "slot": "264",
        "type": "t_uint128"
      },
      {
        "astId": 12420,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "endCovRatio",
        "offset": 16,
        "slot": "264",
        "type": "t_uint128"
      },
      {
        "astId": 12424,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "gap",
        "offset": 0,
        "slot": "265",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11534,
        "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
        "label": "gap",
        "offset": 0,
        "slot": "315",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAsset)5889": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IAsset)5889)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IAsset)",
        "numberOfBytes": "32",
        "value": "t_contract(IAsset)5889"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IAsset)5889,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAsset)5889",
        "label": "mapping(contract IAsset => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetMap)17207_storage": {
        "encoding": "inplace",
        "label": "struct PoolV2.AssetMap",
        "members": [
          {
            "astId": 17197,
            "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 17202,
            "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_contract(IAsset)5889)"
          },
          {
            "astId": 17206,
            "contract": "contracts/wombat-core/pool/DynamicPoolV2.sol:DynamicPoolV2",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}