{
  "address": "0xD61C53dcd6F3b4258E28c7Eb1C328789fa71B591",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ApproveWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RevokeWallet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "approveWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "check",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "revokeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x831cec2a95c5605e07857c0f7ec20dc9943dad19c18750672f786fbe5f90edb5",
  "receipt": {
    "to": null,
    "from": "0x8c6644415b3F3CD7FC0A453c5bE3d3306Fe0b2F9",
    "contractAddress": "0xD61C53dcd6F3b4258E28c7Eb1C328789fa71B591",
    "transactionIndex": 5,
    "gasUsed": "326982",
    "logsBloom": "0x
    "blockHash": "0x8bf02b44bb08c10d5fe7a3c4a2b9c714d00c3a2c5600c2f3070d56b9615f3914",
    "transactionHash": "0x831cec2a95c5605e07857c0f7ec20dc9943dad19c18750672f786fbe5f90edb5",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 20774968,
        "transactionHash": "0x831cec2a95c5605e07857c0f7ec20dc9943dad19c18750672f786fbe5f90edb5",
        "address": "0xD61C53dcd6F3b4258E28c7Eb1C328789fa71B591",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c6644415b3f3cd7fc0a453c5be3d3306fe0b2f9"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x8bf02b44bb08c10d5fe7a3c4a2b9c714d00c3a2c5600c2f3070d56b9615f3914"
      }
    ],
    "blockNumber": 20774968,
    "cumulativeGasUsed": "516423",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "34cdd204f3b508d5068dd4661cec53ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ApproveWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RevokeWallet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"approveWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"revokeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveWallet(address)\":{\"params\":{\"_wallet\":\"the wallet to approve\"}},\"check(address)\":{\"params\":{\"_wallet\":\"the wallet to check\"},\"returns\":{\"_0\":\"true if wallet is whitelisted\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeWallet(address)\":{\"params\":{\"_wallet\":\"the wallet to revoke\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Whitelist\",\"version\":1},\"userdoc\":{\"events\":{\"ApproveWallet(address)\":{\"notice\":\"events of approval and revoking wallets\"}},\"kind\":\"user\",\"methods\":{\"approveWallet(address)\":{\"notice\":\"approves wallet\"},\"check(address)\":{\"notice\":\"checks if _wallet is whitelisted\"},\"revokeWallet(address)\":{\"notice\":\"revokes wallet\"}},\"notice\":\"contains a list of wallets allowed to perform a certain operation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/Whitelist.sol\":\"Whitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-governance/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/// @title Whitelist\\n/// @notice contains a list of wallets allowed to perform a certain operation\\ncontract Whitelist is Ownable {\\n    mapping(address => bool) internal wallets;\\n\\n    /// @notice events of approval and revoking wallets\\n    event ApproveWallet(address);\\n    event RevokeWallet(address);\\n\\n    /// @notice approves wallet\\n    /// @param _wallet the wallet to approve\\n    function approveWallet(address _wallet) external onlyOwner {\\n        if (!wallets[_wallet]) {\\n            wallets[_wallet] = true;\\n            emit ApproveWallet(_wallet);\\n        }\\n    }\\n\\n    /// @notice revokes wallet\\n    /// @param _wallet the wallet to revoke\\n    function revokeWallet(address _wallet) external onlyOwner {\\n        if (wallets[_wallet]) {\\n            wallets[_wallet] = false;\\n            emit RevokeWallet(_wallet);\\n        }\\n    }\\n\\n    /// @notice checks if _wallet is whitelisted\\n    /// @param _wallet the wallet to check\\n    /// @return true if wallet is whitelisted\\n    function check(address _wallet) external view returns (bool) {\\n        return wallets[_wallet];\\n    }\\n}\\n\",\"keccak256\":\"0x65d805fcab1e2bdd336699b4d003dd83039c9fb58046e3d4aea346c01e3597de\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a361048c90816100618239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c80630fcb0ae51461033f578063715018a6146102ba578063808a9d40146102085780638da5cb5b146101d1578063c23697a8146101865763f2fde38b1461006257600080fd5b346101825760206003193601126101825781359073ffffffffffffffffffffffffffffffffffffffff80831680930361017e578454908116936100a63386146103f1565b83156100fb57507fffffffffffffffffffffffff0000000000000000000000000000000000000000168217845551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60849060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b509034610182576020600319360112610182573573ffffffffffffffffffffffffffffffffffffffff811680910361018257818360ff92602095526001855220541690519015158152f35b83823461020457816003193601126102045773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5080fd5b509034610182576020600319360112610182573573ffffffffffffffffffffffffffffffffffffffff8082168092036102b6576102499084541633146103f1565b808352600160205260ff8284205416610260575051f35b60207f1b676c3cc753786cb95aff57280fd7406f1da74e2a8b9755fdd395aded3e16dd918385207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690558351908152a151f35b8380fd5b838234610204578160031936011261020457818054917fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8416936103143386146103f1565b16825551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b509034610182576020600319360112610182573573ffffffffffffffffffffffffffffffffffffffff8082168092036102b6576103809084541633146103f1565b808352600160205260ff828420541615610398575051f35b60207fc1e7aae3f3125e58cfc69ab2a872a655dbb9427614aa85b29bb5abeaca4d6a929183852060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790558351908152a151f35b156103f857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212200e3bc9d738eb23a11c4eea2222363dbc1200b8b6217406b4f43c968b19196ee464736f6c634300080f0033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c80630fcb0ae51461033f578063715018a6146102ba578063808a9d40146102085780638da5cb5b146101d1578063c23697a8146101865763f2fde38b1461006257600080fd5b346101825760206003193601126101825781359073ffffffffffffffffffffffffffffffffffffffff80831680930361017e578454908116936100a63386146103f1565b83156100fb57507fffffffffffffffffffffffff0000000000000000000000000000000000000000168217845551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60849060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b509034610182576020600319360112610182573573ffffffffffffffffffffffffffffffffffffffff811680910361018257818360ff92602095526001855220541690519015158152f35b83823461020457816003193601126102045773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5080fd5b509034610182576020600319360112610182573573ffffffffffffffffffffffffffffffffffffffff8082168092036102b6576102499084541633146103f1565b808352600160205260ff8284205416610260575051f35b60207f1b676c3cc753786cb95aff57280fd7406f1da74e2a8b9755fdd395aded3e16dd918385207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690558351908152a151f35b8380fd5b838234610204578160031936011261020457818054917fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8416936103143386146103f1565b16825551917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b509034610182576020600319360112610182573573ffffffffffffffffffffffffffffffffffffffff8082168092036102b6576103809084541633146103f1565b808352600160205260ff828420541615610398575051f35b60207fc1e7aae3f3125e58cfc69ab2a872a655dbb9427614aa85b29bb5abeaca4d6a929183852060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790558351908152a151f35b156103f857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212200e3bc9d738eb23a11c4eea2222363dbc1200b8b6217406b4f43c968b19196ee464736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveWallet(address)": {
        "params": {
          "_wallet": "the wallet to approve"
        }
      },
      "check(address)": {
        "params": {
          "_wallet": "the wallet to check"
        },
        "returns": {
          "_0": "true if wallet is whitelisted"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeWallet(address)": {
        "params": {
          "_wallet": "the wallet to revoke"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Whitelist",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ApproveWallet(address)": {
        "notice": "events of approval and revoking wallets"
      }
    },
    "kind": "user",
    "methods": {
      "approveWallet(address)": {
        "notice": "approves wallet"
      },
      "check(address)": {
        "notice": "checks if _wallet is whitelisted"
      },
      "revokeWallet(address)": {
        "notice": "revokes wallet"
      }
    },
    "notice": "contains a list of wallets allowed to perform a certain operation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 660,
        "contract": "contracts/wombat-governance/Whitelist.sol:Whitelist",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17144,
        "contract": "contracts/wombat-governance/Whitelist.sol:Whitelist",
        "label": "wallets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}