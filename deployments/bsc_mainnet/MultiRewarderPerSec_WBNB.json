{
  "address": "0x414D1a760320f948147FB71113851BB11CB53976",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMasterWombat",
          "name": "_MP",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergencyTokenWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "contract IMasterWombat",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "onReward",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tokenPerSec",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "accTokenPerShare",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardDebt",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "unpaidRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe6f96d52def2a341442b005f5a9772dc2dc1099054c93eb7f655ab265a3206ca",
  "receipt": {
    "to": null,
    "from": "0x8c6644415b3F3CD7FC0A453c5bE3d3306Fe0b2F9",
    "contractAddress": "0x414D1a760320f948147FB71113851BB11CB53976",
    "transactionIndex": 1,
    "gasUsed": "1962243",
    "logsBloom": "0x
    "blockHash": "0x8eb485a526581db442ecd0826f1a89b68693c15de21e8c554e43f1b486a29885",
    "transactionHash": "0xe6f96d52def2a341442b005f5a9772dc2dc1099054c93eb7f655ab265a3206ca",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 21299121,
        "transactionHash": "0xe6f96d52def2a341442b005f5a9772dc2dc1099054c93eb7f655ab265a3206ca",
        "address": "0x414D1a760320f948147FB71113851BB11CB53976",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c6644415b3f3cd7fc0a453c5be3d3306fe0b2f9"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x8eb485a526581db442ecd0826f1a89b68693c15de21e8c554e43f1b486a29885"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 21299121,
        "transactionHash": "0xe6f96d52def2a341442b005f5a9772dc2dc1099054c93eb7f655ab265a3206ca",
        "address": "0x414D1a760320f948147FB71113851BB11CB53976",
        "topics": [
          "0x225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a",
          "0x000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000da475abf000",
        "logIndex": 2,
        "blockHash": "0x8eb485a526581db442ecd0826f1a89b68693c15de21e8c554e43f1b486a29885"
      }
    ],
    "blockNumber": 21299121,
    "cumulativeGasUsed": "2013346",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE2C07d20AF0Fb50CAE6cDD615CA44AbaAA31F9c8",
    "0x74f019A5C4eD2C2950Ce16FaD7Af838549092c5b",
    1663119171,
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    "15000000000000"
  ],
  "solcInputHash": "f7b63696ab8cb6fe9f131c3283b16b3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMasterWombat\",\"name\":\"_MP\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"contract IMasterWombat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"onReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenPerSec\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"accTokenPerShare\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"unpaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyTokenWithdraw(address)\":{\"details\":\"only to be called by owner\"},\"onReward(address,uint256)\":{\"details\":\"Assume lpSupply and sumOfFactors isn't updated yet when this function is called\",\"params\":{\"_lpAmount\":\"The new amount of LP\",\"_user\":\"Address of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingTokens(address)\":{\"params\":{\"_user\":\"Address of user.\"},\"returns\":{\"rewards\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardRate(uint256,uint96)\":{\"params\":{\"_tokenPerSec\":\"The number of tokens to distribute per second\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"operator\":{\"details\":\"operator is able to set emission rate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balances()\":{\"notice\":\"View function to see balances of reward token.\"},\"emergencyTokenWithdraw(address)\":{\"notice\":\"avoids loosing funds in case there is any tokens sent to this contract\"},\"emergencyWithdraw()\":{\"notice\":\"In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens.\"},\"onReward(address,uint256)\":{\"notice\":\"Function called by MasterWombat whenever staker claims WOM harvest.Allows staker to also receive a 2nd reward token.\"},\"operator()\":{\"notice\":\"address of the operator\"},\"pendingTokens(address)\":{\"notice\":\"View function to see pending tokens\"},\"rewardInfo(uint256)\":{\"notice\":\"Info of the rewardInfo.\"},\"rewardLength()\":{\"notice\":\"returns reward length\"},\"rewardTokens()\":{\"notice\":\"return an array of reward tokens\"},\"setOperator(address)\":{\"notice\":\"Set operator address\"},\"setRewardRate(uint256,uint96)\":{\"notice\":\"Sets the distribution reward rate. This will also update the rewardInfo.\"},\"userInfo(uint256,address)\":{\"notice\":\"tokenId => userId => UserInfo\"}},\"notice\":\"This is a sample contract to be used in the MasterWombat contract for partners to reward stakers with their native token alongside WOM. It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days. - This contract has no knowledge on the LP amount and MasterWombat is   responsible to pass the amount into this contract - Supports multiple reward tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol\":\"MultiRewarderPerSec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256 transfered,\\n            uint256[] memory rewards,\\n            uint256[] memory additionalRewards\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x4ed8f1f02ce578468e115e03a4f3671d13a273cad6e373a45a18af6041096444\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IMultiRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMultiRewarder {\\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2cae5469e2fd3201eb912287d022bbac97a4cd5fe7aa5775ac97eac4d855e84\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/IMasterWombat.sol';\\nimport '../interfaces/IMultiRewarder.sol';\\n\\n/**\\n * This is a sample contract to be used in the MasterWombat contract for partners to reward\\n * stakers with their native token alongside WOM.\\n *\\n * It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n *\\n * - This contract has no knowledge on the LP amount and MasterWombat is\\n *   responsible to pass the amount into this contract\\n * - Supports multiple reward tokens\\n */\\ncontract MultiRewarderPerSec is IMultiRewarder, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\n    IERC20 public immutable lpToken;\\n    IMasterWombat public immutable masterWombat;\\n\\n    struct UserInfo {\\n        uint128 amount; // 20.18 fixed point.\\n        // if the pool is activated, rewardDebt should be > 0\\n        uint128 rewardDebt; // 20.18 fixed point. distributed reward per weight\\n        uint256 unpaidRewards; // 20.18 fixed point.\\n    }\\n\\n    /// @notice Info of each masterWombat rewardInfo.\\n    struct RewardInfo {\\n        IERC20 rewardToken; // if rewardToken is 0, native token is used as reward token\\n        uint96 tokenPerSec; // 10.18 fixed point\\n        uint128 accTokenPerShare; // 26.12 fixed point. Amount of reward token each LP token is worth.\\n    }\\n\\n    /// @notice address of the operator\\n    /// @dev operator is able to set emission rate\\n    address public operator;\\n\\n    uint256 public lastRewardTimestamp;\\n\\n    /// @notice Info of the rewardInfo.\\n    RewardInfo[] public rewardInfo;\\n    /// @notice tokenId => userId => UserInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    event OnReward(address indexed rewardToken, address indexed user, uint256 amount);\\n    event RewardRateUpdated(address indexed rewardToken, uint256 oldRate, uint256 newRate);\\n\\n    modifier onlyMW() {\\n        require(msg.sender == address(masterWombat), 'onlyMW: only MasterWombat can call this function');\\n        _;\\n    }\\n\\n    modifier onlyOperatorOrOwner() {\\n        require(msg.sender == owner() || msg.sender == operator, 'onlyOperatorOrOwner');\\n        _;\\n    }\\n\\n    /// @notice payable function needed to receive BNB\\n    receive() external payable {}\\n\\n    constructor(\\n        IMasterWombat _MP,\\n        IERC20 _lpToken,\\n        uint256 _startTimestamp,\\n        IERC20 _rewardToken,\\n        uint96 _tokenPerSec\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\\n            'constructor: reward token must be a valid contract'\\n        );\\n        require(Address.isContract(address(_lpToken)), 'constructor: LP token must be a valid contract');\\n        require(Address.isContract(address(_MP)), 'constructor: MasterWombat must be a valid contract');\\n        require(_startTimestamp >= block.timestamp);\\n\\n        masterWombat = _MP;\\n        lpToken = _lpToken;\\n\\n        lastRewardTimestamp = _startTimestamp;\\n\\n        // use non-zero amount for accTokenPerShare as we want to check if user\\n        // has activated the pool by checking rewardDebt > 0\\n        RewardInfo memory reward = RewardInfo({\\n            rewardToken: _rewardToken,\\n            tokenPerSec: _tokenPerSec,\\n            accTokenPerShare: 1e18\\n        });\\n        rewardInfo.push(reward);\\n        emit RewardRateUpdated(address(_rewardToken), 0, _tokenPerSec);\\n    }\\n\\n    /// @notice Set operator address\\n    function setOperator(address _operator) external onlyOwner {\\n        operator = _operator;\\n    }\\n\\n    function addRewardToken(IERC20 _rewardToken, uint96 _tokenPerSec) external onlyOwner {\\n        _updateReward();\\n        // use non-zero amount for accTokenPerShare as we want to check if user\\n        // has activated the pool by checking rewardDebt > 0\\n        RewardInfo memory reward = RewardInfo({\\n            rewardToken: _rewardToken,\\n            tokenPerSec: _tokenPerSec,\\n            accTokenPerShare: 1e18\\n        });\\n        rewardInfo.push(reward);\\n        emit RewardRateUpdated(address(_rewardToken), 0, _tokenPerSec);\\n    }\\n\\n    /// @dev This function should be called before lpSupply and sumOfFactors update\\n    function _updateReward() internal {\\n        uint256 length = rewardInfo.length;\\n        uint256 lpSupply = lpToken.balanceOf(address(masterWombat));\\n\\n        if (block.timestamp > lastRewardTimestamp && lpSupply > 0) {\\n            for (uint256 i; i < length; ++i) {\\n                RewardInfo storage reward = rewardInfo[i];\\n                uint256 timeElapsed = block.timestamp - lastRewardTimestamp;\\n                uint256 tokenReward = timeElapsed * reward.tokenPerSec;\\n                reward.accTokenPerShare += toUint128((tokenReward * ACC_TOKEN_PRECISION) / lpSupply);\\n            }\\n\\n            lastRewardTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @notice Sets the distribution reward rate. This will also update the rewardInfo.\\n    /// @param _tokenPerSec The number of tokens to distribute per second\\n    function setRewardRate(uint256 _tokenId, uint96 _tokenPerSec) external onlyOperatorOrOwner {\\n        require(_tokenPerSec <= 10000e18, 'reward rate too high'); // in case of accTokenPerShare overflow\\n        _updateReward();\\n\\n        uint256 oldRate = rewardInfo[_tokenId].tokenPerSec;\\n        rewardInfo[_tokenId].tokenPerSec = _tokenPerSec;\\n\\n        emit RewardRateUpdated(address(rewardInfo[_tokenId].rewardToken), oldRate, _tokenPerSec);\\n    }\\n\\n    /// @notice Function called by MasterWombat whenever staker claims WOM harvest.\\n    /// @notice Allows staker to also receive a 2nd reward token.\\n    /// @dev Assume lpSupply and sumOfFactors isn't updated yet when this function is called\\n    /// @param _user Address of user\\n    /// @param _lpAmount The new amount of LP\\n    function onReward(address _user, uint256 _lpAmount)\\n        external\\n        override\\n        onlyMW\\n        nonReentrant\\n        returns (uint256[] memory rewards)\\n    {\\n        _updateReward();\\n\\n        uint256 length = rewardInfo.length;\\n        rewards = new uint256[](length);\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage reward = rewardInfo[i];\\n            UserInfo storage user = userInfo[i][_user];\\n            IERC20 rewardToken = reward.rewardToken;\\n\\n            if (user.rewardDebt > 0) {\\n                // rewardDebt > 0 indicates the user has activated the pool and we should distribute rewards\\n                uint256 pending = ((user.amount * uint256(reward.accTokenPerShare)) / ACC_TOKEN_PRECISION) +\\n                    user.unpaidRewards -\\n                    user.rewardDebt;\\n\\n                if (address(rewardToken) == address(0)) {\\n                    // is native token\\n                    uint256 tokenBalance = address(this).balance;\\n                    if (pending > tokenBalance) {\\n                        // Note: this line may fail if the receiver is a contract and refuse to receive BNB\\n                        (bool success, ) = _user.call{value: tokenBalance}('');\\n                        require(success, 'Transfer failed');\\n                        rewards[i] = tokenBalance;\\n                        user.unpaidRewards = pending - tokenBalance;\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}('');\\n                        require(success, 'Transfer failed');\\n                        rewards[i] = pending;\\n                        user.unpaidRewards = 0;\\n                    }\\n                } else {\\n                    // ERC20 token\\n                    uint256 tokenBalance = rewardToken.balanceOf(address(this));\\n                    if (pending > tokenBalance) {\\n                        rewardToken.safeTransfer(_user, tokenBalance);\\n                        rewards[i] = tokenBalance;\\n                        user.unpaidRewards = pending - tokenBalance;\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                        rewards[i] = pending;\\n                        user.unpaidRewards = 0;\\n                    }\\n                }\\n            }\\n\\n            user.amount = toUint128(_lpAmount);\\n            user.rewardDebt = toUint128((_lpAmount * reward.accTokenPerShare) / ACC_TOKEN_PRECISION);\\n            emit OnReward(address(rewardToken), _user, rewards[i]);\\n        }\\n    }\\n\\n    /// @notice returns reward length\\n    function rewardLength() external view returns (uint256) {\\n        return rewardInfo.length;\\n    }\\n\\n    /// @notice View function to see pending tokens\\n    /// @param _user Address of user.\\n    /// @return rewards reward for a given user.\\n    function pendingTokens(address _user) external view override returns (uint256[] memory rewards) {\\n        uint256 length = rewardInfo.length;\\n        rewards = new uint256[](length);\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory pool = rewardInfo[i];\\n            UserInfo storage user = userInfo[i][_user];\\n\\n            uint256 accTokenPerShare = pool.accTokenPerShare;\\n            uint256 lpSupply = lpToken.balanceOf(address(masterWombat));\\n\\n            if (block.timestamp > lastRewardTimestamp && lpSupply > 0) {\\n                uint256 timeElapsed = block.timestamp - lastRewardTimestamp;\\n                uint256 tokenReward = timeElapsed * pool.tokenPerSec;\\n                accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / lpSupply;\\n            }\\n\\n            rewards[i] =\\n                ((user.amount * uint256(accTokenPerShare)) / ACC_TOKEN_PRECISION) -\\n                user.rewardDebt +\\n                user.unpaidRewards;\\n        }\\n    }\\n\\n    /// @notice return an array of reward tokens\\n    function rewardTokens() external view override returns (IERC20[] memory tokens) {\\n        uint256 length = rewardInfo.length;\\n        tokens = new IERC20[](length);\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory pool = rewardInfo[i];\\n            tokens[i] = pool.rewardToken;\\n        }\\n    }\\n\\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\\n    /// withdrawal of remaining tokens.\\n    function emergencyWithdraw() external onlyOwner {\\n        uint256 length = rewardInfo.length;\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage pool = rewardInfo[i];\\n            if (address(pool.rewardToken) == address(0)) {\\n                // is native token\\n                (bool success, ) = msg.sender.call{value: address(this).balance}('');\\n                require(success, 'Transfer failed');\\n            } else {\\n                pool.rewardToken.safeTransfer(address(msg.sender), pool.rewardToken.balanceOf(address(this)));\\n            }\\n        }\\n    }\\n\\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\\n    /// @dev only to be called by owner\\n    function emergencyTokenWithdraw(address token) external onlyOwner {\\n        // send that balance back to owner\\n        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    /// @notice View function to see balances of reward token.\\n    function balances() external view returns (uint256[] memory balances_) {\\n        uint256 length = rewardInfo.length;\\n        balances_ = new uint256[](length);\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage pool = rewardInfo[i];\\n            if (address(pool.rewardToken) == address(0)) {\\n                // is native token\\n                balances_[i] = address(this).balance;\\n            } else {\\n                balances_[i] = pool.rewardToken.balanceOf(address(this));\\n            }\\n        }\\n    }\\n\\n    function toUint128(uint256 val) internal pure returns (uint128) {\\n        if (val > type(uint128).max) revert('uint128 overflow');\\n        return uint128(val);\\n    }\\n}\\n\",\"keccak256\":\"0x266738250be89130c0557713a143094bea385aa6cb139a053bbf4faf5e5741b5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c0346200038357601f620023db38819003918201601f19168301926001600160401b039290918385118386101762000388578160a0928492604097885283398101031262000383578051916001600160a01b0380841691908285036200038357602091620000708386016200039e565b9387860151608062000085606089016200039e565b9701516001600160601b038116969087900362000383577f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0988a938660009a8b548c60018060a01b031998338a8416178255519e8f918533941692a360018055169a8b3b158015906200037a575b156200031d57508683163b15620002c2573b1562000263574283106200025f5760a05260805260035587519160608301908111838210176200024b5788528682528382019085825288830193670de0b6b3a7640000855260045468010000000000000000811015620002375760018101806004558110156200022357600489528689209451935160a01b909216921691909117600191821b9092019182559151910180546001600160801b0319166001600160801b039290921691909117905584519283528201527f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a908390a2516120279081620003b48239608051818181610331015281816108c701526118a4015260a0518181816102aa015281816108ea01528181610c5a015261185a0152f35b634e487b7160e01b89526032600452602489fd5b634e487b7160e01b89526041600452602489fd5b634e487b7160e01b87526041600452602487fd5b8880fd5b8a5162461bcd60e51b815260048101889052603260248201527f636f6e7374727563746f723a204d6173746572576f6d626174206d7573742062604482015271194818481d985b1a590818dbdb9d1c9858dd60721b6064820152608490fd5b8b5162461bcd60e51b815260048101899052602e60248201527f636f6e7374727563746f723a204c5020746f6b656e206d75737420626520612060448201526d1d985b1a590818dbdb9d1c9858dd60921b6064820152608490fd5b62461bcd60e51b815260048101899052603260248201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604482015271194818481d985b1a590818dbdb9d1c9858dd60721b6064820152608490fd5b508b15620000f3565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003835756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630bc79363146101975780633bd61ba81461018e578063570ca735146101855780635fcbd2851461017c578063715018a6146101735780637bb98a681461016a57806381a00f83146101615780638da5cb5b1461015857806393f1a40b1461014f578063ad56882714610146578063b3ab15fb1461013d578063b95c574614610134578063c031a66f1461012b578063c2b18aa014610122578063c372328814610119578063db2e21bc14610110578063edc9d77214610107578063f2fde38b146100fe5763f8077fae0361000e576100f96114dc565b61000e565b506100f9611406565b506100f96111d9565b506100f96110cc565b506100f9610c26565b506100f9610b78565b506100f961087c565b506100f961085d565b506100f96107e9565b506100f9610727565b506100f96106a0565b506100f961064d565b506100f96105dd565b506100f961041a565b506100f9610355565b506100f9610303565b506100f96102ce565b506100f961027c565b506100f96101c0565b602435906bffffffffffffffffffffffff821682036101bb57565b600080fd5b50346101bb5760406003193601126101bb576101da6101a0565b73ffffffffffffffffffffffffffffffffffffffff8060005416331490811561026e575b501561021057610019906004356119d8565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f6f6e6c794f70657261746f724f724f776e6572000000000000000000000000006044820152fd5b9050600254163314386101fe565b50346101bb5760006003193601126101bb57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101bb5760006003193601126101bb57602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b50346101bb5760006003193601126101bb57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101bb576000806003193601126103dc5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916103ae3384146114fb565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b6020908160408183019282815285518094520193019160005b828110610406575050505090565b8351855293810193928101926001016103f8565b50346101bb576000806003193601126103dc5760049081549061043c82611b3b565b92815b838110610458576040518061045487826103df565b0390f35b8061049f61048661046b6104cc94610595565b505473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff81166104d15750476104c68288611b96565b526116ed565b61043f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230858201908152602092839183919082908190850103915afa918215610558575b869261052b575b50506104c68288611b96565b61054a9250803d10610551575b6105428183611660565b8101906116a1565b388061051f565b503d610538565b6105606116b0565b610518565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6004548110156105d0575b600460005260011b7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b6105d8610565565b6105a0565b50346101bb5760206003193601126101bb576004356004548110156101bb57610607606091610595565b506fffffffffffffffffffffffffffffffff60018254920154166040519173ffffffffffffffffffffffffffffffffffffffff8116835260a01c60208301526040820152f35b50346101bb5760006003193601126101bb57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff8116036101bb57565b50346101bb5760406003193601126101bb5760606106f86024356106c381610682565b600435600052600560205260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b60018154910154604051916fffffffffffffffffffffffffffffffff8116835260801c60208301526040820152f35b50346101bb5760206003193601126101bb5761001960043561074881610682565b73ffffffffffffffffffffffffffffffffffffffff9061076d826000541633146114fb565b16604051907f70a08231000000000000000000000000000000000000000000000000000000008252306004830152602082602481845afa9182156107dc575b6000926107bc575b503390611c89565b6107d591925060203d8111610551576105428183611660565b90386107b4565b6107e46116b0565b6107ac565b50346101bb5760206003193601126101bb5760043561080781610682565b73ffffffffffffffffffffffffffffffffffffffff9061082c826000541633146114fb565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060025416176002556000604051f35b50346101bb5760006003193601126101bb576020600454604051908152f35b50346101bb576020806003193601126101bb576004803561089c81610682565b8154916108a883611b3b565b93600090819373ffffffffffffffffffffffffffffffffffffffff94857f000000000000000000000000000000000000000000000000000000000000000016957f00000000000000000000000000000000000000000000000000000000000000001660035492834211925b89811061092857604051806104548d826103df565b808b6104c682610a828d6001610a798f8f8f9a8f9b8f9c8f9d8f610a889f849061099a610a219361097561096461095e8b610595565b50611f27565b996000526005602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b9b6040996109d26109bd8c8b01516fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b9a518095819482937f70a08231000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa958615610b1a575b95610afb575b5080610af2575b610a8d575b50505050610a6f610a648554926fffffffffffffffffffffffffffffffff8416611782565b64e8d4a51000900490565b9060801c90611727565b91015490611b8a565b92611b96565b610913565b610ad8610ae293610ad2610ac1610ae8989795610aad610add9642611727565b9301516bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690565b90611782565b61173e565b6117b3565b90611b8a565b388f8f8190610a3f565b50831515610a3a565b610b13919550833d8511610551576105428183611660565b9338610a33565b610b226116b0565b610a2d565b6020908160408183019282815285518094520193019160005b828110610b4e575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610b40565b50346101bb5760006003193601126101bb57600454610b9681611b14565b90610ba46040519283611660565b8082527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610bd182611b14565b0136602084013760005b818110610bf057604051806104548582610b27565b8073ffffffffffffffffffffffffffffffffffffffff610c1561095e610c2194610595565b51166104c68286611b96565b610bdb565b50346101bb5760406003193601126101bb57610c43600435610682565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361104857600260015414610fea576002600155610c97611811565b600454610ca381611b3b565b9060005b818110610cc75761045483610cbb60018055565b604051918291826103df565b80610cd4610e4292610595565b50610ddf610cf2600435610975856000526005602052604060002090565b610d9f610d9a610a64610d926109bd6001610d21895473ffffffffffffffffffffffffffffffffffffffff1690565b988d88548060801c610e47575b5050610d7b610d3e602435611f76565b89906fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff00000000000000000000000000000000825416179055565b01546fffffffffffffffffffffffffffffffff1690565b602435611782565b611f76565b6fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffff0000000000000000000000000000000083549260801b169116179055565b610de98286611b96565b517f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b52760405180610e3a73ffffffffffffffffffffffffffffffffffffffff8060043516961694829190602083019252565b0390a36116ed565b610ca7565b8c610ea18b610e9c87610e8d610a64610e756109bd848c01546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff8916611782565b92019460801c91855490611b8a565b611727565b8d73ffffffffffffffffffffffffffffffffffffffff811680610f305750504791828211600014610f0957610ef98391610eff9596610ef460008080604051886004355af1610eee611bb8565b50611c24565b611b96565b52611727565b90555b8d38610d2e565b610f29919250600094610ef4868080604051886004355af1610eee611bb8565b5255610f02565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291956020949290918590829060249082905afa948515610fdd575b600095610fbe575b505083831115610fa8578391610ef991610ef484610fa1989960043590611c89565b9055610f02565b829350610ef4610f299360009760043590611c89565b610fd5929550803d10610551576105428183611660565b923880610f7f565b610fe56116b0565b610f77565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f6f6e6c794d573a206f6e6c79204d6173746572576f6d6261742063616e20636160448201527f6c6c20746869732066756e6374696f6e000000000000000000000000000000006064820152fd5b50346101bb576000806003193601126103dc5773ffffffffffffffffffffffffffffffffffffffff6111028183541633146114fb565b6004805491835b8381106111165784604051f35b8061112661046b61114b93610595565b808416806111505750506111468680804760405190335af1610eee611bb8565b6116ed565b611109565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230878201908152611146936020939092918491839182908190850103915afa9283156111cc575b8a936111ad575b50503390611c89565b6111c4929350803d10610551576105428183611660565b9038806111a4565b6111d46116b0565b61119d565b50346101bb5760406003193601126101bb576004356111f781610682565b6111ff6101a0565b9073ffffffffffffffffffffffffffffffffffffffff611224816000541633146114fb565b61122c611811565b806040519261123a846115ff565b169283835260208301926bffffffffffffffffffffffff9081831685526040810194670de0b6b3a7640000865261128b600454680100000000000000008110156113f9575b60018101600455610595565b9290926113ca577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a9661135f61139f9560019461131a6113c59a6fffffffffffffffffffffffffffffffff965116889073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b51865473ffffffffffffffffffffffffffffffffffffffff16911660a01b7fffffffffffffffffffffffff000000000000000000000000000000000000000016178555565b51169101906fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff00000000000000000000000000000000825416179055565b60408051600081526bffffffffffffffffffffffff909216602083015290918291820190565b0390a2005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b6114016115cf565b61127f565b50346101bb5760206003193601126101bb5760043561142481610682565b73ffffffffffffffffffffffffffffffffffffffff611448816000541633146114fb565b8116156114585761001990611560565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346101bb5760006003193601126101bb576020600354604051908152f35b1561150257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761161b57604052565b6116236115cf565b604052565b6080810190811067ffffffffffffffff82111761161b57604052565b6040810190811067ffffffffffffffff82111761161b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761161b57604052565b908160209103126101bb575190565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461171b570190565b6117236116bd565b0190565b818110611732570390565b61173a6116bd565b0390565b64e8d4a5100090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611776570290565b61177e6116bd565b0290565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611776570290565b81156117bd570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b906fffffffffffffffffffffffffffffffff808093169116809203811161171b570190565b6004546040517f70a0823100000000000000000000000000000000000000000000000000000000815260208173ffffffffffffffffffffffffffffffffffffffff81806118a0837f0000000000000000000000000000000000000000000000000000000000000000166004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa9081156119cb575b6000916119ad575b5060039081544211806119a4575b6118ed57505050565b60005b838110611906575050505061190442600355565b565b8061114661191661199f93610595565b506119646001611942610d9a88610add610ad86119348d5442611727565b610ad2610ac18a5460a01c90565b92019161195f83546fffffffffffffffffffffffffffffffff1690565b6117ec565b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff00000000000000000000000000000000825416179055565b6118f0565b508015156118e4565b6119c5915060203d8111610551576105428183611660565b386118d6565b6119d36116b0565b6118ce565b906bffffffffffffffffffffffff81169169021e19e0c9bab24000008311611ab6577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a9173ffffffffffffffffffffffffffffffffffffffff611aa5604093611a3f611811565b611aa0611a4b82610595565b505460a01c94611a5a83610595565b509073ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffff000000000000000000000000000000000000000083549260a01b169116179055565b610595565b5054169382519182526020820152a2565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b60209067ffffffffffffffff8111611b2e575b60051b0190565b611b366115cf565b611b27565b90611b4582611b14565b611b526040519182611660565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611b808294611b14565b0190602036910137565b8119811161171b570190565b6020918151811015611bab575b60051b010190565b611bb3610565565b611ba3565b3d15611c1f573d9067ffffffffffffffff8211611c12575b60405191611c0660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184611660565b82523d6000602084013e565b611c1a6115cf565b611bd0565b606090565b15611c2b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b9160405191602093848401927fa9059cbb00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8093166024860152604485015260448452611ce784611628565b169060405192611cf684611644565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b15611d6757611d42939260009283809351925af1611d3c611bb8565b90611e68565b80519081611d4f57505050565b8261190493611d62938301019101611dc5565b611ddd565b606485604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b908160209103126101bb575180151581036101bb5790565b15611de457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b90919015611e74575090565b815115611e845750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b848310611f0e575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311611f01575b01168101030190fd5b6000858286010152611ef8565b8183018101518684016044015285935091820191611ec1565b90604051611f34816115ff565b60406fffffffffffffffffffffffffffffffff60018395805473ffffffffffffffffffffffffffffffffffffffff8116865260a01c6020860152015416910152565b6fffffffffffffffffffffffffffffffff90818111611f93571690565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fdfea2646970667358221220662c26d6c7e731bb733d1ffb7936f1d01f6f1b526f2a55d14d85f9681f680df664736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630bc79363146101975780633bd61ba81461018e578063570ca735146101855780635fcbd2851461017c578063715018a6146101735780637bb98a681461016a57806381a00f83146101615780638da5cb5b1461015857806393f1a40b1461014f578063ad56882714610146578063b3ab15fb1461013d578063b95c574614610134578063c031a66f1461012b578063c2b18aa014610122578063c372328814610119578063db2e21bc14610110578063edc9d77214610107578063f2fde38b146100fe5763f8077fae0361000e576100f96114dc565b61000e565b506100f9611406565b506100f96111d9565b506100f96110cc565b506100f9610c26565b506100f9610b78565b506100f961087c565b506100f961085d565b506100f96107e9565b506100f9610727565b506100f96106a0565b506100f961064d565b506100f96105dd565b506100f961041a565b506100f9610355565b506100f9610303565b506100f96102ce565b506100f961027c565b506100f96101c0565b602435906bffffffffffffffffffffffff821682036101bb57565b600080fd5b50346101bb5760406003193601126101bb576101da6101a0565b73ffffffffffffffffffffffffffffffffffffffff8060005416331490811561026e575b501561021057610019906004356119d8565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f6f6e6c794f70657261746f724f724f776e6572000000000000000000000000006044820152fd5b9050600254163314386101fe565b50346101bb5760006003193601126101bb57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101bb5760006003193601126101bb57602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b50346101bb5760006003193601126101bb57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101bb576000806003193601126103dc5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916103ae3384146114fb565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b6020908160408183019282815285518094520193019160005b828110610406575050505090565b8351855293810193928101926001016103f8565b50346101bb576000806003193601126103dc5760049081549061043c82611b3b565b92815b838110610458576040518061045487826103df565b0390f35b8061049f61048661046b6104cc94610595565b505473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff81166104d15750476104c68288611b96565b526116ed565b61043f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230858201908152602092839183919082908190850103915afa918215610558575b869261052b575b50506104c68288611b96565b61054a9250803d10610551575b6105428183611660565b8101906116a1565b388061051f565b503d610538565b6105606116b0565b610518565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6004548110156105d0575b600460005260011b7f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b6105d8610565565b6105a0565b50346101bb5760206003193601126101bb576004356004548110156101bb57610607606091610595565b506fffffffffffffffffffffffffffffffff60018254920154166040519173ffffffffffffffffffffffffffffffffffffffff8116835260a01c60208301526040820152f35b50346101bb5760006003193601126101bb57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff8116036101bb57565b50346101bb5760406003193601126101bb5760606106f86024356106c381610682565b600435600052600560205260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b60018154910154604051916fffffffffffffffffffffffffffffffff8116835260801c60208301526040820152f35b50346101bb5760206003193601126101bb5761001960043561074881610682565b73ffffffffffffffffffffffffffffffffffffffff9061076d826000541633146114fb565b16604051907f70a08231000000000000000000000000000000000000000000000000000000008252306004830152602082602481845afa9182156107dc575b6000926107bc575b503390611c89565b6107d591925060203d8111610551576105428183611660565b90386107b4565b6107e46116b0565b6107ac565b50346101bb5760206003193601126101bb5760043561080781610682565b73ffffffffffffffffffffffffffffffffffffffff9061082c826000541633146114fb565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060025416176002556000604051f35b50346101bb5760006003193601126101bb576020600454604051908152f35b50346101bb576020806003193601126101bb576004803561089c81610682565b8154916108a883611b3b565b93600090819373ffffffffffffffffffffffffffffffffffffffff94857f000000000000000000000000000000000000000000000000000000000000000016957f00000000000000000000000000000000000000000000000000000000000000001660035492834211925b89811061092857604051806104548d826103df565b808b6104c682610a828d6001610a798f8f8f9a8f9b8f9c8f9d8f610a889f849061099a610a219361097561096461095e8b610595565b50611f27565b996000526005602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b9b6040996109d26109bd8c8b01516fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b9a518095819482937f70a08231000000000000000000000000000000000000000000000000000000008452830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03915afa958615610b1a575b95610afb575b5080610af2575b610a8d575b50505050610a6f610a648554926fffffffffffffffffffffffffffffffff8416611782565b64e8d4a51000900490565b9060801c90611727565b91015490611b8a565b92611b96565b610913565b610ad8610ae293610ad2610ac1610ae8989795610aad610add9642611727565b9301516bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690565b90611782565b61173e565b6117b3565b90611b8a565b388f8f8190610a3f565b50831515610a3a565b610b13919550833d8511610551576105428183611660565b9338610a33565b610b226116b0565b610a2d565b6020908160408183019282815285518094520193019160005b828110610b4e575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610b40565b50346101bb5760006003193601126101bb57600454610b9681611b14565b90610ba46040519283611660565b8082527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610bd182611b14565b0136602084013760005b818110610bf057604051806104548582610b27565b8073ffffffffffffffffffffffffffffffffffffffff610c1561095e610c2194610595565b51166104c68286611b96565b610bdb565b50346101bb5760406003193601126101bb57610c43600435610682565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361104857600260015414610fea576002600155610c97611811565b600454610ca381611b3b565b9060005b818110610cc75761045483610cbb60018055565b604051918291826103df565b80610cd4610e4292610595565b50610ddf610cf2600435610975856000526005602052604060002090565b610d9f610d9a610a64610d926109bd6001610d21895473ffffffffffffffffffffffffffffffffffffffff1690565b988d88548060801c610e47575b5050610d7b610d3e602435611f76565b89906fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff00000000000000000000000000000000825416179055565b01546fffffffffffffffffffffffffffffffff1690565b602435611782565b611f76565b6fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffff0000000000000000000000000000000083549260801b169116179055565b610de98286611b96565b517f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b52760405180610e3a73ffffffffffffffffffffffffffffffffffffffff8060043516961694829190602083019252565b0390a36116ed565b610ca7565b8c610ea18b610e9c87610e8d610a64610e756109bd848c01546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff8916611782565b92019460801c91855490611b8a565b611727565b8d73ffffffffffffffffffffffffffffffffffffffff811680610f305750504791828211600014610f0957610ef98391610eff9596610ef460008080604051886004355af1610eee611bb8565b50611c24565b611b96565b52611727565b90555b8d38610d2e565b610f29919250600094610ef4868080604051886004355af1610eee611bb8565b5255610f02565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291956020949290918590829060249082905afa948515610fdd575b600095610fbe575b505083831115610fa8578391610ef991610ef484610fa1989960043590611c89565b9055610f02565b829350610ef4610f299360009760043590611c89565b610fd5929550803d10610551576105428183611660565b923880610f7f565b610fe56116b0565b610f77565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f6f6e6c794d573a206f6e6c79204d6173746572576f6d6261742063616e20636160448201527f6c6c20746869732066756e6374696f6e000000000000000000000000000000006064820152fd5b50346101bb576000806003193601126103dc5773ffffffffffffffffffffffffffffffffffffffff6111028183541633146114fb565b6004805491835b8381106111165784604051f35b8061112661046b61114b93610595565b808416806111505750506111468680804760405190335af1610eee611bb8565b6116ed565b611109565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230878201908152611146936020939092918491839182908190850103915afa9283156111cc575b8a936111ad575b50503390611c89565b6111c4929350803d10610551576105428183611660565b9038806111a4565b6111d46116b0565b61119d565b50346101bb5760406003193601126101bb576004356111f781610682565b6111ff6101a0565b9073ffffffffffffffffffffffffffffffffffffffff611224816000541633146114fb565b61122c611811565b806040519261123a846115ff565b169283835260208301926bffffffffffffffffffffffff9081831685526040810194670de0b6b3a7640000865261128b600454680100000000000000008110156113f9575b60018101600455610595565b9290926113ca577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a9661135f61139f9560019461131a6113c59a6fffffffffffffffffffffffffffffffff965116889073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b51865473ffffffffffffffffffffffffffffffffffffffff16911660a01b7fffffffffffffffffffffffff000000000000000000000000000000000000000016178555565b51169101906fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff00000000000000000000000000000000825416179055565b60408051600081526bffffffffffffffffffffffff909216602083015290918291820190565b0390a2005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b6114016115cf565b61127f565b50346101bb5760206003193601126101bb5760043561142481610682565b73ffffffffffffffffffffffffffffffffffffffff611448816000541633146114fb565b8116156114585761001990611560565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346101bb5760006003193601126101bb576020600354604051908152f35b1561150257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761161b57604052565b6116236115cf565b604052565b6080810190811067ffffffffffffffff82111761161b57604052565b6040810190811067ffffffffffffffff82111761161b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761161b57604052565b908160209103126101bb575190565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461171b570190565b6117236116bd565b0190565b818110611732570390565b61173a6116bd565b0390565b64e8d4a5100090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611776570290565b61177e6116bd565b0290565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611776570290565b81156117bd570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b906fffffffffffffffffffffffffffffffff808093169116809203811161171b570190565b6004546040517f70a0823100000000000000000000000000000000000000000000000000000000815260208173ffffffffffffffffffffffffffffffffffffffff81806118a0837f0000000000000000000000000000000000000000000000000000000000000000166004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa9081156119cb575b6000916119ad575b5060039081544211806119a4575b6118ed57505050565b60005b838110611906575050505061190442600355565b565b8061114661191661199f93610595565b506119646001611942610d9a88610add610ad86119348d5442611727565b610ad2610ac18a5460a01c90565b92019161195f83546fffffffffffffffffffffffffffffffff1690565b6117ec565b6fffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffff00000000000000000000000000000000825416179055565b6118f0565b508015156118e4565b6119c5915060203d8111610551576105428183611660565b386118d6565b6119d36116b0565b6118ce565b906bffffffffffffffffffffffff81169169021e19e0c9bab24000008311611ab6577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a9173ffffffffffffffffffffffffffffffffffffffff611aa5604093611a3f611811565b611aa0611a4b82610595565b505460a01c94611a5a83610595565b509073ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffff000000000000000000000000000000000000000083549260a01b169116179055565b610595565b5054169382519182526020820152a2565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b60209067ffffffffffffffff8111611b2e575b60051b0190565b611b366115cf565b611b27565b90611b4582611b14565b611b526040519182611660565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611b808294611b14565b0190602036910137565b8119811161171b570190565b6020918151811015611bab575b60051b010190565b611bb3610565565b611ba3565b3d15611c1f573d9067ffffffffffffffff8211611c12575b60405191611c0660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184611660565b82523d6000602084013e565b611c1a6115cf565b611bd0565b606090565b15611c2b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b9160405191602093848401927fa9059cbb00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8093166024860152604485015260448452611ce784611628565b169060405192611cf684611644565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b15611d6757611d42939260009283809351925af1611d3c611bb8565b90611e68565b80519081611d4f57505050565b8261190493611d62938301019101611dc5565b611ddd565b606485604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b908160209103126101bb575180151581036101bb5790565b15611de457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b90919015611e74575090565b815115611e845750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b848310611f0e575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311611f01575b01168101030190fd5b6000858286010152611ef8565b8183018101518684016044015285935091820191611ec1565b90604051611f34816115ff565b60406fffffffffffffffffffffffffffffffff60018395805473ffffffffffffffffffffffffffffffffffffffff8116865260a01c6020860152015416910152565b6fffffffffffffffffffffffffffffffff90818111611f93571690565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fdfea2646970667358221220662c26d6c7e731bb733d1ffb7936f1d01f6f1b526f2a55d14d85f9681f680df664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyTokenWithdraw(address)": {
        "details": "only to be called by owner"
      },
      "onReward(address,uint256)": {
        "details": "Assume lpSupply and sumOfFactors isn't updated yet when this function is called",
        "params": {
          "_lpAmount": "The new amount of LP",
          "_user": "Address of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingTokens(address)": {
        "params": {
          "_user": "Address of user."
        },
        "returns": {
          "rewards": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardRate(uint256,uint96)": {
        "params": {
          "_tokenPerSec": "The number of tokens to distribute per second"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "operator": {
        "details": "operator is able to set emission rate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balances()": {
        "notice": "View function to see balances of reward token."
      },
      "emergencyTokenWithdraw(address)": {
        "notice": "avoids loosing funds in case there is any tokens sent to this contract"
      },
      "emergencyWithdraw()": {
        "notice": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens."
      },
      "onReward(address,uint256)": {
        "notice": "Function called by MasterWombat whenever staker claims WOM harvest.Allows staker to also receive a 2nd reward token."
      },
      "operator()": {
        "notice": "address of the operator"
      },
      "pendingTokens(address)": {
        "notice": "View function to see pending tokens"
      },
      "rewardInfo(uint256)": {
        "notice": "Info of the rewardInfo."
      },
      "rewardLength()": {
        "notice": "returns reward length"
      },
      "rewardTokens()": {
        "notice": "return an array of reward tokens"
      },
      "setOperator(address)": {
        "notice": "Set operator address"
      },
      "setRewardRate(uint256,uint96)": {
        "notice": "Sets the distribution reward rate. This will also update the rewardInfo."
      },
      "userInfo(uint256,address)": {
        "notice": "tokenId => userId => UserInfo"
      }
    },
    "notice": "This is a sample contract to be used in the MasterWombat contract for partners to reward stakers with their native token alongside WOM. It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days. - This contract has no knowledge on the LP amount and MasterWombat is   responsible to pass the amount into this contract - Supports multiple reward tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 660,
        "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 767,
        "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17362,
        "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
        "label": "operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17364,
        "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 17369,
        "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
        "label": "rewardInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(RewardInfo)17359_storage)dyn_storage"
      },
      {
        "astId": 17377,
        "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)17351_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardInfo)17359_storage)dyn_storage": {
        "base": "t_struct(RewardInfo)17359_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiRewarderPerSec.RewardInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1420": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)17351_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiRewarderPerSec.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)17351_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)17351_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MultiRewarderPerSec.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)17351_storage)"
      },
      "t_struct(RewardInfo)17359_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSec.RewardInfo",
        "members": [
          {
            "astId": 17354,
            "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
            "label": "rewardToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1420"
          },
          {
            "astId": 17356,
            "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
            "label": "tokenPerSec",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 17358,
            "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)17351_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSec.UserInfo",
        "members": [
          {
            "astId": 17346,
            "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 17348,
            "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
            "label": "rewardDebt",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 17350,
            "contract": "contracts/wombat-governance/rewarders/MultiRewarderPerSec.sol:MultiRewarderPerSec",
            "label": "unpaidRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}