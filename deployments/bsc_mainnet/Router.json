{
  "address": "0x9e22Bdc702dA660A55b0DfEbCbEbe147f80C6e03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWNative",
          "name": "_wNative",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "addLiquidityNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "approveSpendingByPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "haircuts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "int256",
          "name": "amountIn",
          "type": "int256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "haircuts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityFromOtherAssetAsNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minimumamountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumamountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumamountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wNative",
      "outputs": [
        {
          "internalType": "contract IWNative",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf2aabc3ff8fb7b3d6fbbcd804c1797aaccd08296bee2267dd5935b6a6f5646a9",
  "receipt": {
    "to": null,
    "from": "0x8c6644415b3F3CD7FC0A453c5bE3d3306Fe0b2F9",
    "contractAddress": "0x9e22Bdc702dA660A55b0DfEbCbEbe147f80C6e03",
    "transactionIndex": 0,
    "gasUsed": "1809832",
    "logsBloom": "0x
    "blockHash": "0xe6799da9a265ef70371ee09bb5303693adca3971a7f8c4aa0dfbb9eaf8bd9b7c",
    "transactionHash": "0xf2aabc3ff8fb7b3d6fbbcd804c1797aaccd08296bee2267dd5935b6a6f5646a9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20774973,
        "transactionHash": "0xf2aabc3ff8fb7b3d6fbbcd804c1797aaccd08296bee2267dd5935b6a6f5646a9",
        "address": "0x9e22Bdc702dA660A55b0DfEbCbEbe147f80C6e03",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c6644415b3f3cd7fc0a453c5be3d3306fe0b2f9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe6799da9a265ef70371ee09bb5303693adca3971a7f8c4aa0dfbb9eaf8bd9b7c"
      }
    ],
    "blockNumber": 20774973,
    "cumulativeGasUsed": "1809832",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
  ],
  "solcInputHash": "34cdd204f3b508d5068dd4661cec53ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWNative\",\"name\":\"_wNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"addLiquidityNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"approveSpendingByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"haircuts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"int256\",\"name\":\"amountIn\",\"type\":\"int256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"haircuts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromOtherAssetAsNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNative\",\"outputs\":[{\"internalType\":\"contract IWNative\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Owner is allowed and required to approve token spending by pools via approveSpendingByPool function. With great thanks to the uniswap team for your contribution to the opensource community reference: https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol\",\"kind\":\"dev\",\"methods\":{\"approveSpendingByPool(address[],address)\":{\"details\":\"needs to be done after asset deployment for router to be able to support the tokens\",\"params\":{\"pool\":\"to be approved to spend\",\"tokens\":\"array of tokens to be approved\"}},\"getAmountIn(address[],address[],uint256)\":{\"params\":{\"amountOut\":\"The to amount\",\"poolPath\":\"The token pool path\",\"tokenPath\":\"The token swap path\"},\"returns\":{\"amountIn\":\"The potential final amount user would receive\"}},\"getAmountOut(address[],address[],int256)\":{\"params\":{\"amountIn\":\"The from amount\",\"poolPath\":\"The token pool path\",\"tokenPath\":\"The token swap path\"},\"returns\":{\"amountOut\":\"The potential final amount user would receive\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)\":{\"params\":{\"amountIn\":\"the amount in\",\"deadline\":\"the deadline to respect\",\"minimumamountOut\":\"the minimum amount to get for user\",\"poolPath\":\"An array of pool addresses. The pools where the pathTokens are contained in order.\",\"to\":\"the user to send the tokens to\",\"tokenPath\":\"The first element of the path is the input token, the last element is the output token.\"},\"returns\":{\"amountOut\":\"received by user\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"WombatRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveSpendingByPool(address[],address)\":{\"notice\":\"approve spending of router tokens by pool\"},\"getAmountIn(address[],address[],uint256)\":{\"notice\":\"Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage) Note: This function should be used as estimation only. The actual swap amount might be different due to precision error (the error is typically under 1e-6)\"},\"getAmountOut(address[],address[],int256)\":{\"notice\":\"Given an input asset amount and an array of token addresses, calculates the maximum output token amount (accounting for fees and slippage).\"},\"swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path\"}},\"notice\":\"Allows routing on different wombat pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/libraries/WombatRouter.sol\":\"WombatRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x204e0fb5201de1f4fced816e1044f3379efb229caf46d855a7927fbf823bcd89\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IWombatRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport './IPool.sol';\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath, // the first address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath, // the last address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable returns (uint256 liquidity);\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x095ba57d6fff4df84dbadca9600114bcb3cb7f29196ae32323d87c1147023152\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/WombatRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/IWombatRouter.sol';\\n\\ninterface IWNative {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\\n/**\\n * @title WombatRouter\\n * @notice Allows routing on different wombat pools\\n * @dev Owner is allowed and required to approve token spending by pools via approveSpendingByPool function.\\n * With great thanks to the uniswap team for your contribution to the opensource community\\n * reference: https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol\\n */\\ncontract WombatRouter is Ownable, IWombatRouter {\\n    using SafeERC20 for IERC20;\\n\\n    // WBNB (mainnet): 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\\n    // WBNB (testnet): 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\\n    IWNative public immutable wNative;\\n\\n    constructor(IWNative _wNative) {\\n        wNative = _wNative;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(wNative));\\n    }\\n\\n    /// @notice approve spending of router tokens by pool\\n    /// @param tokens array of tokens to be approved\\n    /// @param pool to be approved to spend\\n    /// @dev needs to be done after asset deployment for router to be able to support the tokens\\n    function approveSpendingByPool(address[] calldata tokens, address pool) external onlyOwner {\\n        for (uint256 i; i < tokens.length; ++i) {\\n            IERC20(tokens[i]).safeApprove(pool, 0);\\n            IERC20(tokens[i]).safeApprove(pool, type(uint256).max);\\n        }\\n    }\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable override returns (uint256 liquidity) {\\n        wNative.deposit{value: msg.value}();\\n        return pool.deposit(address(wNative), msg.value, minimumLiquidity, to, deadline, shouldStake);\\n    }\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amount) {\\n        address asset = pool.addressOfAsset(address(wNative));\\n        IERC20(asset).transferFrom(address(msg.sender), address(this), liquidity);\\n\\n        amount = pool.withdraw(address(wNative), liquidity, minimumAmount, address(this), deadline);\\n        wNative.withdraw(amount);\\n        _safeTransferNative(to, amount);\\n    }\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount) {\\n        address asset = pool.addressOfAsset(fromToken);\\n        IERC20(asset).transferFrom(address(msg.sender), address(this), liquidity);\\n\\n        amount = pool.withdrawFromOtherAsset(\\n            fromToken,\\n            address(wNative),\\n            liquidity,\\n            minimumAmount,\\n            address(this),\\n            deadline\\n        );\\n        wNative.withdraw(amount);\\n        _safeTransferNative(to, amount);\\n    }\\n\\n    /// @notice Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path\\n    /// @param tokenPath An array of token addresses. path.length must be >= 2.\\n    /// @param tokenPath The first element of the path is the input token, the last element is the output token.\\n    /// @param poolPath An array of pool addresses. The pools where the pathTokens are contained in order.\\n    /// @param amountIn the amount in\\n    /// @param minimumamountOut the minimum amount to get for user\\n    /// @param to the user to send the tokens to\\n    /// @param deadline the deadline to respect\\n    /// @return amountOut received by user\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amountOut) {\\n        require(deadline >= block.timestamp, 'expired');\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get from token from users\\n        IERC20(tokenPath[0]).safeTransferFrom(address(msg.sender), address(this), amountIn);\\n\\n        amountOut = _swap(tokenPath, poolPath, amountIn, to);\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n    }\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable override returns (uint256 amountOut) {\\n        require(tokenPath[0] == address(wNative), 'the first address should be wrapped token');\\n        require(deadline >= block.timestamp, 'expired');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get wrapped tokens\\n        wNative.deposit{value: msg.value}();\\n\\n        amountOut = _swap(tokenPath, poolPath, msg.value, to);\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n    }\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amountOut) {\\n        require(tokenPath[tokenPath.length - 1] == address(wNative), 'the last address should be wrapped token');\\n        require(deadline >= block.timestamp, 'expired');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get from token from users\\n        IERC20(tokenPath[0]).safeTransferFrom(address(msg.sender), address(this), amountIn);\\n\\n        amountOut = _swap(tokenPath, poolPath, amountIn, address(this));\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n\\n        wNative.withdraw(amountOut);\\n        _safeTransferNative(to, amountOut);\\n    }\\n\\n    /// @notice Private function to swap alone the token path\\n    /// @dev Assumes router has initial amountIn in balance.\\n    /// Assumes tokens being swapped have been approve via the approveSpendingByPool function\\n    /// @param tokenPath An array of token addresses. path.length must be >= 2.\\n    /// @param tokenPath The first element of the path is the input token, the last element is the output token.\\n    /// @param poolPath An array of pool addresses. The pools where the pathTokens are contained in order.\\n    /// @param amountIn the amount in\\n    /// @param to the user to send the tokens to\\n    /// @return amountOut received by user\\n    function _swap(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        address to\\n    ) internal returns (uint256 amountOut) {\\n        // next from amount, starts with amountIn in arg\\n        uint256 nextamountIn = amountIn;\\n\\n        // first n - 1 swaps\\n        for (uint256 i; i < poolPath.length - 1; ++i) {\\n            // make the swap with the correct arguments\\n            (amountOut, ) = IPool(poolPath[i]).swap(\\n                tokenPath[i],\\n                tokenPath[i + 1],\\n                nextamountIn,\\n                0, // minimum amount received is ensured on calling function\\n                address(this),\\n                type(uint256).max // deadline is ensured on calling function\\n            );\\n            nextamountIn = amountOut;\\n        }\\n\\n        // last swap\\n        uint256 i = poolPath.length - 1;\\n        (amountOut, ) = IPool(poolPath[i]).swap(\\n            tokenPath[i],\\n            tokenPath[i + 1],\\n            nextamountIn,\\n            0, // minimum amount received is ensured on calling function\\n            to,\\n            type(uint256).max // deadline is ensured on calling function\\n        );\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and an array of token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @param tokenPath The token swap path\\n     * @param poolPath The token pool path\\n     * @param amountIn The from amount\\n     * @return amountOut The potential final amount user would receive\\n     */\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view override returns (uint256 amountOut, uint256[] memory haircuts) {\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // next from amount, starts with amountIn in arg\\n        int256 nextamountIn = amountIn;\\n        haircuts = new uint256[](poolPath.length);\\n\\n        for (uint256 i; i < poolPath.length; ++i) {\\n            // make the swap with the correct arguments\\n            (amountOut, haircuts[i]) = IPool(poolPath[i]).quotePotentialSwap(\\n                tokenPath[i],\\n                tokenPath[i + 1],\\n                nextamountIn\\n            );\\n            nextamountIn = int256(amountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     * @param tokenPath The token swap path\\n     * @param poolPath The token pool path\\n     * @param amountOut The to amount\\n     * @return amountIn The potential final amount user would receive\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view override returns (uint256 amountIn, uint256[] memory haircuts) {\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // next from amount, starts with amountIn in arg\\n        int256 nextAmountOut = int256(amountOut);\\n        haircuts = new uint256[](poolPath.length);\\n\\n        for (uint256 i = poolPath.length; i > 0; --i) {\\n            (amountIn, haircuts[i - 1]) = IPool(poolPath[i - 1]).quoteAmountIn(\\n                tokenPath[i - 1],\\n                tokenPath[i],\\n                nextAmountOut\\n            );\\n            nextAmountOut = int256(amountIn);\\n        }\\n    }\\n\\n    function _safeTransferNative(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, '_safeTransferNative fails');\\n    }\\n}\\n\",\"keccak256\":\"0x0b2acdb1a5c674b7a36cd8044a8421c06728741d7a1ed95f75bdcc18fad4aa99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346100d157601f61206f38819003918201601f19168301916001600160401b038311848410176100d6578084926020946040528339810103126100d157516001600160a01b039081811681036100d1576000543360018060a01b0319821617600055604051923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600085a3608052611f8290816100ed82396080518181816102090152818161032a015281816105cc0152818161090601528181610b5201528181610fdc01526112db0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610023575b361561001957600080fd5b6100216112c4565b005b60003560e01c8063018ad001146101275780632d68efc91461011e5780633226288e146101155780636248fced1461010c578063715018a6146101035780637eeb1955146100fa57806385335cc0146100f15780638d8f82e6146100e85780638da5cb5b146100df578063b9e598c1146100d6578063d44107a4146100cd578063f048d48f146100c45763f2fde38b0361000e576100bf61114e565b61000e565b506100bf610f6b565b506100bf610eb4565b506100bf610d00565b506100bf610ccb565b506100bf610c0c565b506100bf610afe565b506100bf6107c4565b506100bf61073a565b506100bf610582565b506100bf610392565b506100bf6102fc565b506100bf610184565b9181601f840112156101615782359167ffffffffffffffff8311610161576020808501948460051b01011161016157565b600080fd5b73ffffffffffffffffffffffffffffffffffffffff81160361016157565b5060a06003193601126101615767ffffffffffffffff600435818111610161576101b2903690600401610130565b91602435908111610161576101cb903690600401610130565b9091606435916101da83610166565b6101ec6101e7868461137f565b6113b1565b9361023373ffffffffffffffffffffffffffffffffffffffff95867f0000000000000000000000000000000000000000000000000000000000000000169687911614611ad5565b610241426084351015611931565b61025461024d876119c7565b83146119d7565b843b15610161576102c795600460006102a997604051928380927fd0e30db000000000000000000000000000000000000000000000000000000000825234905af180156102e4575b6102cb575b503493611bfb565b6102b7604435821015611a22565b6040519081529081906020820190565b0390f35b806102d86102de926113eb565b806102f1565b386102a1565b6102ec611478565b61029c565b600091031261016157565b503461016157600060031936011261016157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9060609160408101918152602092816040858094015285518094520193019160005b82811061037e575050505090565b835185529381019392810192600101610370565b50346101615760606003193601126101615767ffffffffffffffff60048035828111610161576103c59036908301610130565b9260243590811161016157916103df849336908301610130565b90926000936103f1600287101561197c565b6104046103fd876119c7565b84146119d7565b6044359361041184611e40565b968492835b61042957604051806102c78b8b8361034e565b90919293949596506104f46104696104506104506101e7610449896119c7565b8b87611393565b73ffffffffffffffffffffffffffffffffffffffff1690565b976104806101e7610479886119c7565b868a611393565b9061048f6101e788878b611393565b9960409a8b938451958694859384937ffca8f3080000000000000000000000000000000000000000000000000000000085528c850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03915afa90811561056b575b6000988992610536575b505061051e610518866119c7565b8a611e8f565b526105298794611eb1565b9291908396959496610416565b61055a93995080919250903d10610564575b6105528183611428565b810190611be5565b969096898061050a565b503d610548565b610573611478565b610500565b8015150361016157565b5060a06003193601126101615760043561059b81610166565b6044356105a781610166565b6084356105b381610578565b73ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001693843b15610161576102c79460006020946106b9966040517fd0e30db0000000000000000000000000000000000000000000000000000000008152838160048134895af1801561072d575b61071a575b506040517f6281baef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff948516600482015234602480830191909152356044820152931660648085019190915235608484015293151560a483015290948593849291839060c4820190565b0393165af190811561070d575b6000916106df575b506040519081529081906020820190565b610700915060203d8111610706575b6106f88183611428565b810190611469565b386106ce565b503d6106ee565b610715611478565b6106c6565b806102d8610727926113eb565b3861063c565b610735611478565b610637565b5034610161576000806003193601126107c15780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161079333841461120a565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346101615760c06003193601126101615760006004356107e481610166565b6024356107f081610166565b61095f604435916084359261080484610166565b6040517fe9249cc700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526020968794908216929091908581602481875afa908115610a8d575b8a91610a60575b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101869052908690829060649082908e9087165af18015610a53575b610a26575b506040517f0f91f06f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201527f00000000000000000000000000000000000000000000000000000000000000009190911691821660248201526044810193909352606480359084015230608484015260a480359084015296919384928391829060c4820190565b03925af1928315610a19575b6000936109fa575b5050823b1561016157816102b7916102c794600060405180927f2e1a7d4d0000000000000000000000000000000000000000000000000000000082528183816109c489600483019190602083019252565b03925af180156109ed575b6109da575b50611ebf565b806102d86109e7926113eb565b386109d4565b6109f5611478565b6109cf565b610a11929350803d10610706576106f88183611428565b903880610973565b610a21611478565b61096b565b610a4590863d8811610a4c575b610a3d8183611428565b8101906116a6565b50386108c0565b503d610a33565b610a5b611478565b6108bb565b610a809150863d8811610a86575b610a788183611428565b81019061191c565b3861086a565b503d610a6e565b610a95611478565b610863565b60c06003198201126101615767ffffffffffffffff916004358381116101615782610ac791600401610130565b9390939260243591821161016157610ae191600401610130565b90916044359060643590608435610af781610166565b9060a43590565b503461016157610bbd610bb4610b1336610a9a565b9895610b84610b356101e7610b2e849c99959b98969c6119c7565b8489611393565b9a610b7c73ffffffffffffffffffffffffffffffffffffffff9c8d7f0000000000000000000000000000000000000000000000000000000000000000169d8e911614611b46565b421115611931565b610b906103fd826119c7565b610bad84610ba46104506101e7858a61137f565b30903390611a6d565b3094611bfb565b92831015611a22565b823b1561016157816102b7916102c794600060405180927f2e1a7d4d0000000000000000000000000000000000000000000000000000000082528183816109c489600483019190602083019252565b50346101615760406003193601126101615760043567ffffffffffffffff811161016157610c3e903690600401610130565b9060243590610c4c82610166565b73ffffffffffffffffffffffffffffffffffffffff91610c718360005416331461120a565b60005b848110610c7d57005b80610ca18386610c91610cc6958a89611393565b35610c9b81610166565b166114f6565b610cc18386610cb1848a89611393565b35610cbb81610166565b1661157a565b611333565b610c74565b503461016157600060031936011261016157602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461016157606060031936011261016157600467ffffffffffffffff813581811161016157610d339036908401610130565b9290916024359081116101615782610d4f859236908501610130565b9190600093610d61600282101561197c565b610d74610d6d826119c7565b85146119d7565b60443592610d8185611e40565b9686915b868310610d9b57604051806102c78b8b8361034e565b909192939495979650610e46610dbb6104506104506101e7878d8b611393565b96610dca6101e7868886611393565b90610de16101e7610dda88611bb7565b8987611393565b986040998a938451958694859384937f4fdd64e50000000000000000000000000000000000000000000000000000000085528b850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03915afa908115610ea7575b6000978892610e82575b5050610e688489611e8f565b52610e738693611333565b91909795969794939294610d85565b610e9d93985080919250903d10610564576105528183611428565b9590958980610e5c565b610eaf611478565b610e52565b5034610161576020610ee1610f49610f40610ece36610a9a565b9990969199959295949394421115611931565b610eee600283101561197c565b60018210610f5e575b610f06600019830185146119d7565b8115610f51575b610f3b858235610f1c81610166565b309073ffffffffffffffffffffffffffffffffffffffff339116611a6d565b611bfb565b91821015611a22565b604051908152f35b610f5961134f565b610f0d565b610f66611303565b610ef7565b50346101615760a060031936011261016157600435610f8981610166565b61102460243591600060643591610f9f83610166565b6040517fe9249cc700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830181905296602096879461095f949084169387928792908390829081906024820190565b0381895afa908115611141575b8491611124575b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101869052938492606492849291165af18015611117575b6110fa575b506040517f09a5fca300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89166004820152602481019190915260448035908201523060648201526084803590820152938492839190829060a4820190565b61111090853d8711610a4c57610a3d8183611428565b503861108a565b61111f611478565b611085565b61113b9150833d8511610a8657610a788183611428565b38611038565b611149611478565b611031565b50346101615760206003193601126101615760043561116c81610166565b73ffffffffffffffffffffffffffffffffffffffff6111908160005416331461120a565b8116156111a05761002190611255565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561121157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361016157565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001906000198114611343570190565b61134b611303565b0190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90156113885790565b61139061134f565b90565b91908110156113a4575b60051b0190565b6113ac61134f565b61139d565b3561139081610166565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116113ff57604052565b6114076113bb565b604052565b6040810190811067ffffffffffffffff8211176113ff57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176113ff57604052565b90816020910312610161575190565b506040513d6000823e3d90fd5b1561148c57565b608460405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152fd5b9061156b9173ffffffffffffffffffffffffffffffffffffffff604051927f095ea7b300000000000000000000000000000000000000000000000000000000602085015216602483015260006044830152604482526080820182811067ffffffffffffffff82111761156d575b60405261172c565b565b6115756113bb565b611563565b61164a9061167661156b936115f26040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015260208160448173ffffffffffffffffffffffffffffffffffffffff808816602483015289165afa908115611699575b60009161167b575b5015611485565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff909116602482015260001960448201529283906064820190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101845283611428565b61172c565b611693915060203d8111610706576106f88183611428565b386115eb565b6116a1611478565b6115e3565b90816020910312610161575161139081610578565b156116c257565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff1690604051906117508261140c565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b156117c757600082819282876117a29796519301915af161179c61180b565b90611877565b805190816117af57505050565b8261156b936117c29383010191016116a6565b6116bb565b6064846040519062461bcd60e51b82526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15611872573d9067ffffffffffffffff8211611865575b6040519161185960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184611428565b82523d6000602084013e565b61186d6113bb565b611823565b606090565b90919015611883575090565b8151156118935750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251928360248401526000915b848310611903575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116118f6575b01168101030190fd5b60008582860101526118ed565b81830181015186840160440152859350918201916118b6565b90816020910312610161575161139081610166565b1561193857565b606460405162461bcd60e51b815260206004820152600760248201527f65787069726564000000000000000000000000000000000000000000000000006044820152fd5b1561198357565b606460405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f6b656e207061746800000000000000000000000000006044820152fd5b6000199060018110611343570190565b156119de57565b606460405162461bcd60e51b815260206004820152601160248201527f696e76616c696420706f6f6c20706174680000000000000000000000000000006044820152fd5b15611a2957565b606460405162461bcd60e51b815260206004820152601160248201527f616d6f756e744f757420746f6f206c6f770000000000000000000000000000006044820152fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9283166024820152929091166044830152606482019290925261156b91611676826084810161164a565b15611adc57565b608460405162461bcd60e51b815260206004820152602960248201527f74686520666972737420616464726573732073686f756c64206265207772617060448201527f70656420746f6b656e00000000000000000000000000000000000000000000006064820152fd5b15611b4d57565b608460405162461bcd60e51b815260206004820152602860248201527f746865206c61737420616464726573732073686f756c6420626520777261707060448201527f656420746f6b656e0000000000000000000000000000000000000000000000006064820152fd5b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611343570190565b9190826040910312610161576020825192015190565b91956000949193915b611c0d836119c7565b861015611d24576000611cd7611cf392611c326104506104506101e78c8f8b90611393565b611c406101e78b8b8b611393565b90611c576101e7611c508d611bb7565b8c8c611393565b9260409586948551968795869485937f9908fc8b0000000000000000000000000000000000000000000000000000000085523092600486019094939160a0926000199460c084019773ffffffffffffffffffffffffffffffffffffffff938480921686521660208501526040840152600060608401521660808201520152565b03925af1918215611d17575b600092611cf9575b505095611333565b94611c04565b611d0f9250803d10610564576105528183611428565b503880611ceb565b611d1f611478565b611ce3565b9392604095506101e7611d7091611d526104506104506101e76000979d611d4a8a6119c7565b998a91611393565b95611d6a611d646101e7888486611393565b96611bb7565b91611393565b85517f9908fc8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015290831660248201526044810194909452600060648501529416608483015260001960a48301529092839160c49183915af1908115611e12575b600091611df6575090565b611e0e915060403d8111610564576105528183611428565b5090565b611e1a611478565b611deb565b60209067ffffffffffffffff8111611e385760051b0190565b6113ac6113bb565b90611e4a82611e1f565b611e576040519182611428565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611e858294611e1f565b0190602036910137565b6020918151811015611ea4575b60051b010190565b611eac61134f565b611e9c565b600019908015611343570190565b600080929181926040519183602084019380851067ffffffffffffffff861117611f3f575b84604052525af1611ef361180b565b5015611efb57565b606460405162461bcd60e51b815260206004820152601960248201527f5f736166655472616e736665724e6174697665206661696c73000000000000006044820152fd5b611f476113bb565b611ee456fea2646970667358221220cd8b8a4920b9ae5e1c3f548466fa652bdd2eff788f45c0e647858ddf786f107564736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361015610023575b361561001957600080fd5b6100216112c4565b005b60003560e01c8063018ad001146101275780632d68efc91461011e5780633226288e146101155780636248fced1461010c578063715018a6146101035780637eeb1955146100fa57806385335cc0146100f15780638d8f82e6146100e85780638da5cb5b146100df578063b9e598c1146100d6578063d44107a4146100cd578063f048d48f146100c45763f2fde38b0361000e576100bf61114e565b61000e565b506100bf610f6b565b506100bf610eb4565b506100bf610d00565b506100bf610ccb565b506100bf610c0c565b506100bf610afe565b506100bf6107c4565b506100bf61073a565b506100bf610582565b506100bf610392565b506100bf6102fc565b506100bf610184565b9181601f840112156101615782359167ffffffffffffffff8311610161576020808501948460051b01011161016157565b600080fd5b73ffffffffffffffffffffffffffffffffffffffff81160361016157565b5060a06003193601126101615767ffffffffffffffff600435818111610161576101b2903690600401610130565b91602435908111610161576101cb903690600401610130565b9091606435916101da83610166565b6101ec6101e7868461137f565b6113b1565b9361023373ffffffffffffffffffffffffffffffffffffffff95867f0000000000000000000000000000000000000000000000000000000000000000169687911614611ad5565b610241426084351015611931565b61025461024d876119c7565b83146119d7565b843b15610161576102c795600460006102a997604051928380927fd0e30db000000000000000000000000000000000000000000000000000000000825234905af180156102e4575b6102cb575b503493611bfb565b6102b7604435821015611a22565b6040519081529081906020820190565b0390f35b806102d86102de926113eb565b806102f1565b386102a1565b6102ec611478565b61029c565b600091031261016157565b503461016157600060031936011261016157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9060609160408101918152602092816040858094015285518094520193019160005b82811061037e575050505090565b835185529381019392810192600101610370565b50346101615760606003193601126101615767ffffffffffffffff60048035828111610161576103c59036908301610130565b9260243590811161016157916103df849336908301610130565b90926000936103f1600287101561197c565b6104046103fd876119c7565b84146119d7565b6044359361041184611e40565b968492835b61042957604051806102c78b8b8361034e565b90919293949596506104f46104696104506104506101e7610449896119c7565b8b87611393565b73ffffffffffffffffffffffffffffffffffffffff1690565b976104806101e7610479886119c7565b868a611393565b9061048f6101e788878b611393565b9960409a8b938451958694859384937ffca8f3080000000000000000000000000000000000000000000000000000000085528c850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03915afa90811561056b575b6000988992610536575b505061051e610518866119c7565b8a611e8f565b526105298794611eb1565b9291908396959496610416565b61055a93995080919250903d10610564575b6105528183611428565b810190611be5565b969096898061050a565b503d610548565b610573611478565b610500565b8015150361016157565b5060a06003193601126101615760043561059b81610166565b6044356105a781610166565b6084356105b381610578565b73ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001693843b15610161576102c79460006020946106b9966040517fd0e30db0000000000000000000000000000000000000000000000000000000008152838160048134895af1801561072d575b61071a575b506040517f6281baef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff948516600482015234602480830191909152356044820152931660648085019190915235608484015293151560a483015290948593849291839060c4820190565b0393165af190811561070d575b6000916106df575b506040519081529081906020820190565b610700915060203d8111610706575b6106f88183611428565b810190611469565b386106ce565b503d6106ee565b610715611478565b6106c6565b806102d8610727926113eb565b3861063c565b610735611478565b610637565b5034610161576000806003193601126107c15780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161079333841461120a565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346101615760c06003193601126101615760006004356107e481610166565b6024356107f081610166565b61095f604435916084359261080484610166565b6040517fe9249cc700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526020968794908216929091908581602481875afa908115610a8d575b8a91610a60575b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101869052908690829060649082908e9087165af18015610a53575b610a26575b506040517f0f91f06f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201527f00000000000000000000000000000000000000000000000000000000000000009190911691821660248201526044810193909352606480359084015230608484015260a480359084015296919384928391829060c4820190565b03925af1928315610a19575b6000936109fa575b5050823b1561016157816102b7916102c794600060405180927f2e1a7d4d0000000000000000000000000000000000000000000000000000000082528183816109c489600483019190602083019252565b03925af180156109ed575b6109da575b50611ebf565b806102d86109e7926113eb565b386109d4565b6109f5611478565b6109cf565b610a11929350803d10610706576106f88183611428565b903880610973565b610a21611478565b61096b565b610a4590863d8811610a4c575b610a3d8183611428565b8101906116a6565b50386108c0565b503d610a33565b610a5b611478565b6108bb565b610a809150863d8811610a86575b610a788183611428565b81019061191c565b3861086a565b503d610a6e565b610a95611478565b610863565b60c06003198201126101615767ffffffffffffffff916004358381116101615782610ac791600401610130565b9390939260243591821161016157610ae191600401610130565b90916044359060643590608435610af781610166565b9060a43590565b503461016157610bbd610bb4610b1336610a9a565b9895610b84610b356101e7610b2e849c99959b98969c6119c7565b8489611393565b9a610b7c73ffffffffffffffffffffffffffffffffffffffff9c8d7f0000000000000000000000000000000000000000000000000000000000000000169d8e911614611b46565b421115611931565b610b906103fd826119c7565b610bad84610ba46104506101e7858a61137f565b30903390611a6d565b3094611bfb565b92831015611a22565b823b1561016157816102b7916102c794600060405180927f2e1a7d4d0000000000000000000000000000000000000000000000000000000082528183816109c489600483019190602083019252565b50346101615760406003193601126101615760043567ffffffffffffffff811161016157610c3e903690600401610130565b9060243590610c4c82610166565b73ffffffffffffffffffffffffffffffffffffffff91610c718360005416331461120a565b60005b848110610c7d57005b80610ca18386610c91610cc6958a89611393565b35610c9b81610166565b166114f6565b610cc18386610cb1848a89611393565b35610cbb81610166565b1661157a565b611333565b610c74565b503461016157600060031936011261016157602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461016157606060031936011261016157600467ffffffffffffffff813581811161016157610d339036908401610130565b9290916024359081116101615782610d4f859236908501610130565b9190600093610d61600282101561197c565b610d74610d6d826119c7565b85146119d7565b60443592610d8185611e40565b9686915b868310610d9b57604051806102c78b8b8361034e565b909192939495979650610e46610dbb6104506104506101e7878d8b611393565b96610dca6101e7868886611393565b90610de16101e7610dda88611bb7565b8987611393565b986040998a938451958694859384937f4fdd64e50000000000000000000000000000000000000000000000000000000085528b850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b03915afa908115610ea7575b6000978892610e82575b5050610e688489611e8f565b52610e738693611333565b91909795969794939294610d85565b610e9d93985080919250903d10610564576105528183611428565b9590958980610e5c565b610eaf611478565b610e52565b5034610161576020610ee1610f49610f40610ece36610a9a565b9990969199959295949394421115611931565b610eee600283101561197c565b60018210610f5e575b610f06600019830185146119d7565b8115610f51575b610f3b858235610f1c81610166565b309073ffffffffffffffffffffffffffffffffffffffff339116611a6d565b611bfb565b91821015611a22565b604051908152f35b610f5961134f565b610f0d565b610f66611303565b610ef7565b50346101615760a060031936011261016157600435610f8981610166565b61102460243591600060643591610f9f83610166565b6040517fe9249cc700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830181905296602096879461095f949084169387928792908390829081906024820190565b0381895afa908115611141575b8491611124575b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101869052938492606492849291165af18015611117575b6110fa575b506040517f09a5fca300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89166004820152602481019190915260448035908201523060648201526084803590820152938492839190829060a4820190565b61111090853d8711610a4c57610a3d8183611428565b503861108a565b61111f611478565b611085565b61113b9150833d8511610a8657610a788183611428565b38611038565b611149611478565b611031565b50346101615760206003193601126101615760043561116c81610166565b73ffffffffffffffffffffffffffffffffffffffff6111908160005416331461120a565b8116156111a05761002190611255565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561121157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361016157565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001906000198114611343570190565b61134b611303565b0190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90156113885790565b61139061134f565b90565b91908110156113a4575b60051b0190565b6113ac61134f565b61139d565b3561139081610166565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116113ff57604052565b6114076113bb565b604052565b6040810190811067ffffffffffffffff8211176113ff57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176113ff57604052565b90816020910312610161575190565b506040513d6000823e3d90fd5b1561148c57565b608460405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152fd5b9061156b9173ffffffffffffffffffffffffffffffffffffffff604051927f095ea7b300000000000000000000000000000000000000000000000000000000602085015216602483015260006044830152604482526080820182811067ffffffffffffffff82111761156d575b60405261172c565b565b6115756113bb565b611563565b61164a9061167661156b936115f26040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015260208160448173ffffffffffffffffffffffffffffffffffffffff808816602483015289165afa908115611699575b60009161167b575b5015611485565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff909116602482015260001960448201529283906064820190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101845283611428565b61172c565b611693915060203d8111610706576106f88183611428565b386115eb565b6116a1611478565b6115e3565b90816020910312610161575161139081610578565b156116c257565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff1690604051906117508261140c565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b156117c757600082819282876117a29796519301915af161179c61180b565b90611877565b805190816117af57505050565b8261156b936117c29383010191016116a6565b6116bb565b6064846040519062461bcd60e51b82526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15611872573d9067ffffffffffffffff8211611865575b6040519161185960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184611428565b82523d6000602084013e565b61186d6113bb565b611823565b606090565b90919015611883575090565b8151156118935750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251928360248401526000915b848310611903575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116118f6575b01168101030190fd5b60008582860101526118ed565b81830181015186840160440152859350918201916118b6565b90816020910312610161575161139081610166565b1561193857565b606460405162461bcd60e51b815260206004820152600760248201527f65787069726564000000000000000000000000000000000000000000000000006044820152fd5b1561198357565b606460405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f6b656e207061746800000000000000000000000000006044820152fd5b6000199060018110611343570190565b156119de57565b606460405162461bcd60e51b815260206004820152601160248201527f696e76616c696420706f6f6c20706174680000000000000000000000000000006044820152fd5b15611a2957565b606460405162461bcd60e51b815260206004820152601160248201527f616d6f756e744f757420746f6f206c6f770000000000000000000000000000006044820152fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9283166024820152929091166044830152606482019290925261156b91611676826084810161164a565b15611adc57565b608460405162461bcd60e51b815260206004820152602960248201527f74686520666972737420616464726573732073686f756c64206265207772617060448201527f70656420746f6b656e00000000000000000000000000000000000000000000006064820152fd5b15611b4d57565b608460405162461bcd60e51b815260206004820152602860248201527f746865206c61737420616464726573732073686f756c6420626520777261707060448201527f656420746f6b656e0000000000000000000000000000000000000000000000006064820152fd5b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611343570190565b9190826040910312610161576020825192015190565b91956000949193915b611c0d836119c7565b861015611d24576000611cd7611cf392611c326104506104506101e78c8f8b90611393565b611c406101e78b8b8b611393565b90611c576101e7611c508d611bb7565b8c8c611393565b9260409586948551968795869485937f9908fc8b0000000000000000000000000000000000000000000000000000000085523092600486019094939160a0926000199460c084019773ffffffffffffffffffffffffffffffffffffffff938480921686521660208501526040840152600060608401521660808201520152565b03925af1918215611d17575b600092611cf9575b505095611333565b94611c04565b611d0f9250803d10610564576105528183611428565b503880611ceb565b611d1f611478565b611ce3565b9392604095506101e7611d7091611d526104506104506101e76000979d611d4a8a6119c7565b998a91611393565b95611d6a611d646101e7888486611393565b96611bb7565b91611393565b85517f9908fc8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015290831660248201526044810194909452600060648501529416608483015260001960a48301529092839160c49183915af1908115611e12575b600091611df6575090565b611e0e915060403d8111610564576105528183611428565b5090565b611e1a611478565b611deb565b60209067ffffffffffffffff8111611e385760051b0190565b6113ac6113bb565b90611e4a82611e1f565b611e576040519182611428565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611e858294611e1f565b0190602036910137565b6020918151811015611ea4575b60051b010190565b611eac61134f565b611e9c565b600019908015611343570190565b600080929181926040519183602084019380851067ffffffffffffffff861117611f3f575b84604052525af1611ef361180b565b5015611efb57565b606460405162461bcd60e51b815260206004820152601960248201527f5f736166655472616e736665724e6174697665206661696c73000000000000006044820152fd5b611f476113bb565b611ee456fea2646970667358221220cd8b8a4920b9ae5e1c3f548466fa652bdd2eff788f45c0e647858ddf786f107564736f6c634300080f0033",
  "devdoc": {
    "details": "Owner is allowed and required to approve token spending by pools via approveSpendingByPool function. With great thanks to the uniswap team for your contribution to the opensource community reference: https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol",
    "kind": "dev",
    "methods": {
      "approveSpendingByPool(address[],address)": {
        "details": "needs to be done after asset deployment for router to be able to support the tokens",
        "params": {
          "pool": "to be approved to spend",
          "tokens": "array of tokens to be approved"
        }
      },
      "getAmountIn(address[],address[],uint256)": {
        "params": {
          "amountOut": "The to amount",
          "poolPath": "The token pool path",
          "tokenPath": "The token swap path"
        },
        "returns": {
          "amountIn": "The potential final amount user would receive"
        }
      },
      "getAmountOut(address[],address[],int256)": {
        "params": {
          "amountIn": "The from amount",
          "poolPath": "The token pool path",
          "tokenPath": "The token swap path"
        },
        "returns": {
          "amountOut": "The potential final amount user would receive"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)": {
        "params": {
          "amountIn": "the amount in",
          "deadline": "the deadline to respect",
          "minimumamountOut": "the minimum amount to get for user",
          "poolPath": "An array of pool addresses. The pools where the pathTokens are contained in order.",
          "to": "the user to send the tokens to",
          "tokenPath": "The first element of the path is the input token, the last element is the output token."
        },
        "returns": {
          "amountOut": "received by user"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "WombatRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveSpendingByPool(address[],address)": {
        "notice": "approve spending of router tokens by pool"
      },
      "getAmountIn(address[],address[],uint256)": {
        "notice": "Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage) Note: This function should be used as estimation only. The actual swap amount might be different due to precision error (the error is typically under 1e-6)"
      },
      "getAmountOut(address[],address[],int256)": {
        "notice": "Given an input asset amount and an array of token addresses, calculates the maximum output token amount (accounting for fees and slippage)."
      },
      "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path"
      }
    },
    "notice": "Allows routing on different wombat pools",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 660,
        "contract": "contracts/wombat-core/libraries/WombatRouter.sol:WombatRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}