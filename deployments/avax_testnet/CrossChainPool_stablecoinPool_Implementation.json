{
  "address": "0x77A8ceEb769D0E95170cA57e3EaaE57992E9186E",
  "abi": [
    {
      "inputs": [],
      "name": "POOL__CREDIT_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL__REACH_MAXIMUM_BURNED_CREDIT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL__REACH_MAXIMUM_MINTED_CREDIT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_AMOUNT_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_COV_RATIO_LIMIT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_SAME_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trackingId",
          "type": "uint256"
        }
      ],
      "name": "MintCredit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetAmpFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpDividendRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retentionRatio",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetHaircutRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetMasterWombat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetMintFeeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trackingId",
          "type": "uint256"
        }
      ],
      "name": "SwapCreditForTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trackingId",
          "type": "uint256"
        }
      ],
      "name": "SwapTokensForCredit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferTipBucket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnpausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adaptor",
      "outputs": [
        {
          "internalType": "contract IAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addressOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ampFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "trackingId",
          "type": "uint256"
        }
      ],
      "name": "completeSwapCreditForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creditBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crossChainHaircut",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endCovRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantInUint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatioWithCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantInUint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDividendRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumNetBurnedCredit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumNetMintedCredit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "trackingId",
          "type": "uint256"
        }
      ],
      "name": "mintCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "pauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "toAmount",
          "type": "int256"
        }
      ],
      "name": "quoteAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "finalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromCreditAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapCreditForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapTokensForCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdaptor",
          "name": "_adaptor",
          "type": "address"
        }
      ],
      "name": "setAdaptorAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAmpFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "startCovRatio_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "endCovRatio_",
          "type": "uint128"
        }
      ],
      "name": "setCovRatioFeeParam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_crossChainHaircut",
          "type": "uint64"
        }
      ],
      "name": "setCrossChainHaircut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev_",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpDividendRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterWombat_",
          "type": "address"
        }
      ],
      "name": "setMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_maximumNetBurnedCredit",
          "type": "uint128"
        }
      ],
      "name": "setMaximumNetBurnedCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_maximumNetMintedCredit",
          "type": "uint128"
        }
      ],
      "name": "setMaximumNetMintedCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFeeThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setMintFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setSwapCreditForTokensEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setSwapTokensForCreditEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startCovRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "swapCreditForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "name": "swapCreditForTokensCrossChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trackingId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumCreditAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensCrossChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trackingId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tipBucketBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCreditBurned",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCreditMinted",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferTipBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unpauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffbc7dff306c8e03e0bf6c3c076a72e3c699b9f95a751cb2d8a9a34abae7bb48",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0x77A8ceEb769D0E95170cA57e3EaaE57992E9186E",
    "transactionIndex": 0,
    "gasUsed": "5066394",
    "logsBloom": "0x
    "blockHash": "0xc96e5b86f1c8e8f5ea8412249d97989c6ac20bb7b4fc9e95c9c6e87fab670423",
    "transactionHash": "0xffbc7dff306c8e03e0bf6c3c076a72e3c699b9f95a751cb2d8a9a34abae7bb48",
    "logs": [],
    "blockNumber": 19606851,
    "cumulativeGasUsed": "5066394",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "779ad77579ff7a951b6658068295ae41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"POOL__CREDIT_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL__REACH_MAXIMUM_BURNED_CREDIT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL__REACH_MAXIMUM_MINTED_CREDIT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_AMOUNT_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_COV_RATIO_LIMIT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_SAME_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trackingId\",\"type\":\"uint256\"}],\"name\":\"MintCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetAmpFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpDividendRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retentionRatio\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHaircutRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMasterWombat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMintFeeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trackingId\",\"type\":\"uint256\"}],\"name\":\"SwapCreditForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trackingId\",\"type\":\"uint256\"}],\"name\":\"SwapTokensForCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferTipBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adaptor\",\"outputs\":[{\"internalType\":\"contract IAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addressOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trackingId\",\"type\":\"uint256\"}],\"name\":\"completeSwapCreditForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainHaircut\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCovRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantInUint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatioWithCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantInUint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumNetBurnedCredit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumNetMintedCredit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trackingId\",\"type\":\"uint256\"}],\"name\":\"mintCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"toAmount\",\"type\":\"int256\"}],\"name\":\"quoteAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromCreditAmount\",\"type\":\"uint256\"}],\"name\":\"quoteSwapCreditForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"quoteSwapTokensForCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAdaptor\",\"name\":\"_adaptor\",\"type\":\"address\"}],\"name\":\"setAdaptorAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"}],\"name\":\"setAmpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"startCovRatio_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endCovRatio_\",\"type\":\"uint128\"}],\"name\":\"setCovRatioFeeParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_crossChainHaircut\",\"type\":\"uint64\"}],\"name\":\"setCrossChainHaircut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterWombat_\",\"type\":\"address\"}],\"name\":\"setMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_maximumNetBurnedCredit\",\"type\":\"uint128\"}],\"name\":\"setMaximumNetBurnedCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_maximumNetMintedCredit\",\"type\":\"uint128\"}],\"name\":\"setMaximumNetMintedCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeThreshold_\",\"type\":\"uint256\"}],\"name\":\"setMintFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapCreditForTokensEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapTokensForCreditEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCovRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapCreditForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"swapCreditForTokensCrossChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trackingId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCreditAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensCrossChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trackingId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tipBucketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCreditBurned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCreditMinted\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTipBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unpauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Refer to note of `swapTokensForTokensCrossChain` for procedure of a cross-chain swapTODO: write documents for protection mechanism and implement it Note: All variables are 18 decimals, except from that of parameters of external functions and underlying tokens\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PausedAsset(address,address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"SwapCreditForTokens(uint256,address,uint256,address,uint256)\":{\"details\":\"`trackingId` 0 means the swap is on the same chain. Otherwise it is a cross-chain swap with `trackingId`\"},\"SwapTokensForCredit(address,address,uint256,uint256,uint256)\":{\"details\":\"`trackingId` 0 means the swap is on the same chain. Otherwise a cross-chain swap with `trackingId` is followed\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"UnpausedAsset(address,address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"addressOfAsset(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"details\":\"Asset needs to be created and added to pool before any operation. This function assumes tax free token.\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"exchangeRate(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"xr\":\"The exchange rate of LP token\"}},\"mintFee(address)\":{\"params\":{\"token\":\"The address of the token to collect fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"pauseAsset(address)\":{\"details\":\"pause asset, restricting deposit and swap operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quoteAmountIn(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromToken\":\"The initial ERC20 token\",\"toAmount\":\"The given output amount\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"amountIn\":\"The input amount required\",\"haircut\":\"The haircut that would be applied\"}},\"quotePotentialDeposit(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"amount\":\"The amount to deposit\",\"token\":\"The token to deposit by user\"},\"returns\":{\"liquidity\":\"The potential liquidity user would receive\",\"reward\":\"reward\"}},\"quotePotentialSwap(address,address,int256)\":{\"details\":\"In reverse quote, the haircut is in the `fromAsset`\",\"params\":{\"fromAmount\":\"The given input amount\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"fee\":\"The fee that would be applied\"}},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"details\":\"take into account high cov ratio fee\"},\"removeAsset(address)\":{\"details\":\"Can only be called by owner\",\"params\":{\"token\":\"The address of token to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAmpFactor(uint256)\":{\"params\":{\"ampFactor_\":\"new pool's amplification factor\"}},\"setDev(address)\":{\"params\":{\"dev_\":\"new contract dev address\"}},\"setFeeTo(address)\":{\"params\":{\"feeTo_\":\"new fee beneficiary\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"details\":\"This function assumes tax free token.\",\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"swapTokensForTokensCrossChain(address,address,uint256,uint256,uint256,uint256,address,uint32)\":{\"details\":\"Steps: 1. Swap `fromToken` for credit; 2. Notify relayer to bridge credit to the `toChain`; 3. Relayer invoke `completeSwapCreditForTokens` to swap credit for `toToken` in the `toChain` Note: haircut returned here is just high cov ratio fee.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTipBucket(address,uint256,address)\":{\"details\":\"unit of amount should be in WAD\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"unpauseAsset(address)\":{\"details\":\"unpause asset, enabling deposit and swap operations\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity to be withdrawn (in fromToken decimal)\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"toAmount\":\"The total amount withdrawn\"}}},\"title\":\"Mega Pool\",\"version\":1},\"userdoc\":{\"errors\":{\"POOL__CREDIT_NOT_ENOUGH()\":[{\"notice\":\"Errors\"}]},\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"AssetRemoved(address,address)\":{\"notice\":\"An event thats emitted when asset is removed from Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"SwapCreditForTokens(uint256,address,uint256,address,uint256)\":{\"notice\":\"Event that is emitted when credit is swapped into token\"},\"SwapTokensForCredit(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event that is emitted when token is swapped into credit\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"adaptor()\":{\"notice\":\"Storage\"},\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"addressOfAsset(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"ampFactor()\":{\"notice\":\"Amplification factor\"},\"completeSwapCreditForTokens(address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap credit to tokens; should be called by the adaptor\"},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"dev()\":{\"notice\":\"Dev address\"},\"exchangeRate(address)\":{\"notice\":\"Returns the exchange rate of the LP token\"},\"fillPool(address,uint256)\":{\"notice\":\"Move fund from tip bucket to the pool to keep r* = 1 as error accumulates unit of amount should be in WAD\"},\"getTokens()\":{\"notice\":\"Return list of tokens in the pool\"},\"globalEquilCovRatioWithCredit()\":{\"notice\":\"Calculate the r* and invariant when all credits are settled\"},\"haircutRate()\":{\"notice\":\"Haircut rate\"},\"initialize(uint256,uint256)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpDividendRatio()\":{\"notice\":\"LP dividend ratio : the ratio of haircut that should distribute to LP\"},\"maximumNetMintedCredit()\":{\"notice\":\"the maximum allowed amount of net mint credit. `totalCreditMinted - totalCreditBurned` should be smaller than this value\"},\"mintCredit(uint256,address,uint256)\":{\"notice\":\"In case `completeSwapCreditForTokens` fails, adaptor should mint credit to the respective user\"},\"mintFee(address)\":{\"notice\":\"Send fee collected to the fee beneficiary\"},\"mintFeeThreshold()\":{\"notice\":\"The threshold to mint fee (unit: WAD)\"},\"quoteAmountIn(address,address,int256)\":{\"notice\":\"Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)\"},\"quotePotentialDeposit(address,uint256)\":{\"notice\":\"Quotes potential deposit from pool\"},\"quotePotentialSwap(address,address,int256)\":{\"notice\":\"Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage).\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"quoteSwapCreditForTokens(address,uint256)\":{\"notice\":\"Read-only functions\"},\"removeAsset(address)\":{\"notice\":\"Removes asset from asset struct\"},\"retentionRatio()\":{\"notice\":\"Retention ratio: the ratio of haircut that should stay in the pool\"},\"setAmpFactor(uint256)\":{\"notice\":\"Changes the pools amplification factor. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setFeeTo(address)\":{\"notice\":\"Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setMintFeeThreshold(uint256)\":{\"notice\":\"Set min fee to mint\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"swapCreditForTokens(address,uint256,uint256,address)\":{\"notice\":\"Swap credit for tokens (same chain)\"},\"swapCreditForTokensCrossChain(address,uint256,uint256,uint256,address,uint32)\":{\"notice\":\"Bridge credit and swap it for `toToken` in the `toChain` Nonce must be non-zero, otherwise wormhole will revert the message\"},\"swapTokensForTokensCrossChain(address,address,uint256,uint256,uint256,uint256,address,uint32)\":{\"notice\":\"Initiate a cross chain swap\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Enables withdrawing liquidity from an asset using LP from a different asset\"}},\"notice\":\"Mega Pool is able to handle cross-chain swaps in addition to ordinary swap within its own chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/MegaPool.sol\":\"MegaPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IAdaptor {\\n    /* Cross-chain functions that is used to initiate a cross-chain message, should be invoked by Pool */\\n\\n    function bridgeCreditAndSwapForTokens(\\n        address toToken,\\n        uint256 toChain,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint32 nonce\\n    ) external payable returns (uint256 trackingId);\\n}\\n\",\"keccak256\":\"0xc9707f1238f1bab2d6c629e204840f9b6e34c35f51ce292fbcdd3448cbc17a4a\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IAsset is IERC20 {\\r\\n    function underlyingToken() external view returns (address);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function cash() external view returns (uint120);\\r\\n\\r\\n    function liability() external view returns (uint120);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function underlyingTokenDecimals() external view returns (uint8);\\r\\n\\r\\n    function setPool(address pool_) external;\\r\\n\\r\\n    function underlyingTokenBalance() external view returns (uint256);\\r\\n\\r\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(address to, uint256 amount) external;\\r\\n\\r\\n    function addCash(uint256 amount) external;\\r\\n\\r\\n    function removeCash(uint256 amount) external;\\r\\n\\r\\n    function addLiability(uint256 amount) external;\\r\\n\\r\\n    function removeLiability(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x422c0f5af1e3ee4db0a7baa912f8ed064bf92efc3ed761071abf8d991fe7120c\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IMegaPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IMegaPool {\\n    function swapTokensForTokensCrossChain(\\n        address fromToken,\\n        address toToken,\\n        uint256 toChain,\\n        uint256 fromAmount,\\n        uint256 minimumCreditAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint32 nonce\\n    ) external payable returns (uint256 creditAmount, uint256 haircut, uint256 id);\\n\\n    function swapCreditForTokens(\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function swapCreditForTokensCrossChain(\\n        address toToken,\\n        uint256 toChain,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint32 nonce\\n    ) external payable returns (uint256 id);\\n\\n    /*\\n     * Permissioned Functions\\n     */\\n\\n    function completeSwapCreditForTokens(\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint256 trackingId\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function mintCredit(uint256 creditAmount, address receiver, uint256 trackingId) external;\\n}\\n\",\"keccak256\":\"0x1047709403e1c8ba123f77b2be6a51d2111fd4a80279138a6d532a485e1d9a4c\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x97f61115b32d97ee057cea0c3a7a28ab516927da9cb65d79cf77382f30bcfe8d\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10 ** 18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10 ** (18 - d);\\n        } else if (d > 18) {\\n            return (x / (10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * 10 ** (d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xd6cacca5817b3c8820f60e203c1485ef19ebe8c07dfdda7df9c870f3dbffaaf5\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10 ** 18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10 ** (18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10 ** (d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc36a2ddfd52a2a0b18987d1da24fa45bebe1dd0c9fa10e631895b4eab7b80e44\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../interfaces/IAsset.sol';\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV3\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n * Change log:\\n * - Move view functinos (quotes, high cov ratio fee) from the Pool contract to this contract\\n * - Add quote functions for cross chain swaps\\n */\\nlibrary CoreV3 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    int256 internal constant WAD_I = 10 ** 18;\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    error CORE_UNDERFLOW();\\n    error CORE_INVALID_VALUE();\\n    error CORE_INVALID_HIGH_COV_RATIO_FEE();\\n    error CORE_ZERO_LIQUIDITY();\\n    error CORE_CASH_NOT_ENOUGH();\\n    error CORE_COV_RATIO_LIMIT_EXCEEDED();\\n\\n    /*\\n     * Public view functions\\n     */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function quoteDepositLiquidityInEquil(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 ampFactor\\n    ) public view returns (uint256 lpTokenToMint, uint256 liabilityToMint, uint256 reward) {\\n        liabilityToMint = exactDepositLiquidityInEquilImpl(\\n            int256(amount),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToMint >= amount) {\\n            unchecked {\\n                reward = liabilityToMint - amount;\\n            }\\n        } else {\\n            // rounding error\\n            liabilityToMint = amount;\\n        }\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee\\n     */\\n    function quoteWithdrawAmount(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 ampFactor\\n    ) public view returns (uint256 amount, uint256 liabilityToBurn, uint256 fee) {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        if (liabilityToBurn == 0) revert CORE_ZERO_LIQUIDITY();\\n\\n        amount = withdrawalAmountInEquilImpl(\\n            -int256(liabilityToBurn),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToBurn >= amount) {\\n            fee = liabilityToBurn - amount;\\n        } else {\\n            // rounding error\\n            amount = liabilityToBurn;\\n        }\\n    }\\n\\n    function quoteWithdrawAmountFromOtherAsset(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 liquidity,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) public view returns (uint256 finalAmount, uint256 withdrewAmount) {\\n        // quote withdraw\\n        (withdrewAmount, , ) = quoteWithdrawAmount(fromAsset, liquidity, ampFactor);\\n\\n        // quote swap\\n        uint256 fromCash = fromAsset.cash() - withdrewAmount;\\n        uint256 fromLiability = fromAsset.liability() - liquidity;\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            withdrewAmount = (withdrewAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapQuoteFunc(\\n            int256(fromCash),\\n            int256(uint256(toAsset.cash())),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            int256(withdrewAmount),\\n            int256(ampFactor)\\n        );\\n\\n        // remove haircut\\n        finalAmount = idealToAmount - idealToAmount.wmul(haircutRate);\\n\\n        if (startCovRatio > 0 || endCovRatio > 0) {\\n            // charge high cov ratio fee\\n            uint256 fee = highCovRatioFee(\\n                fromCash,\\n                fromLiability,\\n                withdrewAmount,\\n                finalAmount,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n            unchecked {\\n                finalAmount -= fee;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function quoteSwap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate\\n    ) public view returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 fromCash = uint256(fromAsset.cash());\\n        uint256 fromLiability = uint256(fromAsset.liability());\\n        uint256 toCash = uint256(toAsset.cash());\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * int256(scaleFactor)) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapQuoteFunc(\\n            int256(fromCash),\\n            int256(toCash),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            int256(ampFactor)\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert CORE_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = (uint256(-fromAmount)).wmul(haircutRate);\\n        }\\n    }\\n\\n    function quoteSwapTokensForCredit(\\n        IAsset fromAsset,\\n        uint256 fromAmount,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) public view returns (uint256 creditAmount, uint256 haircut) {\\n        uint256 fromCash = fromAsset.cash();\\n        uint256 fromLiability = fromAsset.liability();\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * (scaleFactor)) / 1e18;\\n        }\\n\\n        creditAmount = swapToCreditQuote(int256(fromCash), int256(fromLiability), int256(fromAmount), int256(ampFactor))\\n            .toUint256();\\n\\n        uint256 fee = highCovRatioFee(\\n            fromAsset.cash(),\\n            fromAsset.liability(),\\n            fromAmount,\\n            creditAmount,\\n            startCovRatio,\\n            endCovRatio\\n        );\\n        if (fee > 0) {\\n            creditAmount -= fee;\\n            haircut += fee;\\n        }\\n    }\\n\\n    function quoteSwapCreditForTokens(\\n        uint256 fromAmount,\\n        IAsset toAsset,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate\\n    ) public view returns (uint256 actualToAmount, uint256 haircut) {\\n        uint256 toCash = toAsset.cash();\\n        uint256 toLiability = toAsset.liability();\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromAmount = (fromAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapFromCreditQuote(\\n            int256(toCash),\\n            int256(toLiability),\\n            int256(fromAmount),\\n            int256(ampFactor)\\n        ).toUint256();\\n        if (fromAmount > 0 && toCash < idealToAmount) {\\n            revert CORE_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = fromAmount.wmul(haircutRate);\\n        }\\n    }\\n\\n    function equilCovRatio(int256 D, int256 SL, int256 A) public pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    /*\\n     * Pure calculating functions\\n     */\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) public pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        if (Dy < 0) {\\n            quote = uint256(-Dy);\\n        } else {\\n            quote = uint256(Dy);\\n        }\\n    }\\n\\n    /**\\n     * @return v positive value indicates a reward and negative value indicates a fee\\n     */\\n    function depositRewardImpl(\\n        int256 D,\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 v) {\\n        if (L_i == 0) {\\n            // early return in case of div of 0\\n            return 0;\\n        }\\n        if (delta_i + SL == 0) {\\n            return L_i - A_i;\\n        }\\n\\n        int256 r_i_ = _targetedCovRatio(SL, delta_i, A_i, L_i, D, A);\\n        v = A_i + delta_i - (L_i + delta_i).wmul(r_i_);\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    function swapToCreditQuote(int256 Ax, int256 Lx, int256 Dx, int256 A) public pure returns (int256 quote) {\\n        int256 rx = Ax.wdiv(Lx);\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 x = rx_ - A.wdiv(rx_);\\n        int256 y = rx - A.wdiv(rx);\\n\\n        // return Lx.wmul(x - y);\\n        return (Lx * (x - y)) / (WAD_I + A);\\n    }\\n\\n    function swapFromCreditQuote(\\n        int256 Ax,\\n        int256 Lx,\\n        int256 delta_credit,\\n        int256 A\\n    ) public pure returns (int256 quote) {\\n        int256 rx = Ax.wdiv(Lx);\\n        // int256 b = delta_credit.wdiv(Lx) - rx + A.wdiv(rx); // flattened _coefficientFunc\\n        int256 b = (delta_credit * (WAD_I + A)) / Lx - rx + A.wdiv(rx); // flattened _coefficientFunc\\n        int256 rx_ = _solveQuad(b, A);\\n        int256 Dx = Ax - Lx.wmul(rx_);\\n\\n        return Dx;\\n    }\\n\\n    function highCovRatioFee(\\n        uint256 fromAssetCash,\\n        uint256 fromAssetLiability,\\n        uint256 fromAmount,\\n        uint256 quotedToAmount,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) public pure returns (uint256 fee) {\\n        uint256 finalFromAssetCovRatio = (fromAssetCash + fromAmount).wdiv(fromAssetLiability);\\n\\n        if (finalFromAssetCovRatio > startCovRatio) {\\n            // charge high cov ratio fee\\n            uint256 feeRatio = _highCovRatioFee(\\n                fromAssetCash.wdiv(fromAssetLiability),\\n                finalFromAssetCovRatio,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n\\n            if (feeRatio > WAD) revert CORE_INVALID_HIGH_COV_RATIO_FEE();\\n            fee = feeRatio.wmul(quotedToAmount);\\n        }\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(int256 Lx, int256 rx, int256 Ly, int256 ry, int256 A) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(int256 Lx, int256 Ly, int256 rx_, int256 D, int256 A) internal pure returns (int256) {\\n        return Lx.wmul(rx_ - A.wdiv(rx_)).wdiv(Ly) - D.wdiv(Ly);\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _newEquilCovRatio(int256 er, int256 SL, int256 delta_i) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(int256 er_, int256 A, int256 SL, int256 delta_i) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice Calculate the high cov ratio fee in the to-asset in a swap.\\n     * @dev When cov ratio is in the range [startCovRatio, endCovRatio], the marginal cov ratio is\\n     * (r - startCovRatio) / (endCovRatio - startCovRatio). Here we approximate the high cov ratio cut\\n     * by calculating the \\\"average\\\" fee.\\n     * Note: `finalCovRatio` should be greater than `initCovRatio`\\n     */\\n    function _highCovRatioFee(\\n        uint256 initCovRatio,\\n        uint256 finalCovRatio,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) internal pure returns (uint256 fee) {\\n        if (finalCovRatio > endCovRatio) {\\n            // invalid swap\\n            revert CORE_COV_RATIO_LIMIT_EXCEEDED();\\n        } else if (finalCovRatio <= startCovRatio || finalCovRatio <= initCovRatio) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // 1. Calculate the area of fee(r) = (r - startCovRatio) / (endCovRatio - startCovRatio)\\n            // when r increase from initCovRatio to finalCovRatio\\n            // 2. Then multiply it by (endCovRatio - startCovRatio) / (finalCovRatio - initCovRatio)\\n            // to get the average fee over the range\\n            uint256 a = initCovRatio <= startCovRatio\\n                ? 0\\n                : (initCovRatio - startCovRatio) * (initCovRatio - startCovRatio);\\n            uint256 b = (finalCovRatio - startCovRatio) * (finalCovRatio - startCovRatio);\\n            fee = ((b - a) / (finalCovRatio - initCovRatio) / 2).wdiv(endCovRatio - startCovRatio);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1df2cb3be73d807eff7c309c9c69d44538be8123715f8250b1815ad6cfca4f89\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/HighCovRatioFeePoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport './PoolV3.sol';\\n\\n/**\\n * @title HighCovRatioFeePoolV3\\n * @dev Pool with high cov ratio fee protection\\n * Change log:\\n * - V2: Add `gap` to prevent storage collision for future upgrades\\n * - V3: Contract size compression\\n */\\ncontract HighCovRatioFeePoolV3 is PoolV3 {\\n    using DSMath for uint256;\\n\\n    uint128 public startCovRatio; // 1.5\\n    uint128 public endCovRatio; // 1.8\\n\\n    uint256[50] private gap;\\n\\n    error WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public override {\\n        super.initialize(ampFactor_, haircutRate_);\\n        startCovRatio = 15e17;\\n        endCovRatio = 18e17;\\n    }\\n\\n    function setCovRatioFeeParam(uint128 startCovRatio_, uint128 endCovRatio_) external onlyOwner {\\n        if (startCovRatio_ < 1e18 || startCovRatio_ > endCovRatio_) revert WOMBAT_INVALID_VALUE();\\n\\n        startCovRatio = startCovRatio_;\\n        endCovRatio = endCovRatio_;\\n    }\\n\\n    /**\\n     * @dev Exact output swap (fromAmount < 0) should be only used by off-chain quoting function as it is a gas monster\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view override returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = super._quoteFrom(fromAsset, toAsset, fromAmount);\\n\\n        if (fromAmount >= 0) {\\n            uint256 highCovRatioFee = CoreV3.highCovRatioFee(\\n                fromAsset.cash(),\\n                fromAsset.liability(),\\n                uint256(fromAmount),\\n                actualToAmount,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n\\n            actualToAmount -= highCovRatioFee;\\n            unchecked {\\n                haircut += highCovRatioFee;\\n            }\\n        } else {\\n            // reverse quote\\n            uint256 toAssetCash = toAsset.cash();\\n            uint256 toAssetLiability = toAsset.liability();\\n            uint256 finalToAssetCovRatio = (toAssetCash + uint256(actualToAmount)).wdiv(toAssetLiability);\\n            if (finalToAssetCovRatio <= startCovRatio) {\\n                // happy path: no high cov ratio fee is charged\\n                return (actualToAmount, haircut);\\n            } else if (toAssetCash.wdiv(toAssetLiability) >= endCovRatio) {\\n                // the to-asset exceeds it's cov ratio limit, further swap to increase cov ratio is impossible\\n                revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n            }\\n\\n            // reverse quote: cov ratio of the to-asset exceed endCovRatio. direct reverse quote is not supported\\n            // we binary search for a upper bound\\n            actualToAmount = _findUpperBound(toAsset, fromAsset, uint256(-fromAmount));\\n            (, haircut) = _quoteFrom(toAsset, fromAsset, int256(actualToAmount));\\n        }\\n    }\\n\\n    /**\\n     * @notice Binary search to find the upper bound of `fromAmount` required to swap `fromAsset` to `toAmount` of `toAsset`\\n     * @dev This function should only used as off-chain view function as it is a gas monster\\n     */\\n    function _findUpperBound(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 toAmount\\n    ) internal view returns (uint256 upperBound) {\\n        uint8 decimals = fromAsset.underlyingTokenDecimals();\\n        uint256 toWadFactor = DSMath.toWad(1, decimals);\\n        // the search value uses the same number of digits as the token\\n        uint256 high = (uint256(fromAsset.liability()).wmul(endCovRatio) - fromAsset.cash()).fromWad(decimals);\\n        uint256 low = 1;\\n\\n        // verify `high` is a valid upper bound\\n        uint256 quote;\\n        (quote, ) = _quoteFrom(fromAsset, toAsset, int256(high * toWadFactor));\\n        if (quote < toAmount) revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n        // Note: we might limit the maximum number of rounds if the request is always rejected by the RPC server\\n        while (low < high) {\\n            unchecked {\\n                uint256 mid = (low + high) / 2;\\n                (quote, ) = _quoteFrom(fromAsset, toAsset, int256(mid * toWadFactor));\\n                if (quote >= toAmount) {\\n                    high = mid;\\n                } else {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n        return high * toWadFactor;\\n    }\\n\\n    /**\\n     * @dev take into account high cov ratio fee\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view override returns (uint256 finalAmount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        (finalAmount, withdrewAmount) = CoreV3.quoteWithdrawAmountFromOtherAsset(\\n            fromAsset,\\n            toAsset,\\n            liquidity,\\n            ampFactor,\\n            scaleFactor,\\n            haircutRate,\\n            startCovRatio,\\n            endCovRatio\\n        );\\n\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        finalAmount = finalAmount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n}\\n\",\"keccak256\":\"0x505afc0c2890649e4f1d86073296ef3658fe53be21c04c1d4bb74fbd66e3ff3a\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/MegaPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport './HighCovRatioFeePoolV3.sol';\\nimport '../interfaces/IAdaptor.sol';\\nimport '../interfaces/IMegaPool.sol';\\n\\n/**\\n * @title Mega Pool\\n * @notice Mega Pool is able to handle cross-chain swaps in addition to ordinary swap within its own chain\\n * @dev Refer to note of `swapTokensForTokensCrossChain` for procedure of a cross-chain swap\\n * @dev TODO: write documents for protection mechanism and implement it\\n * Note: All variables are 18 decimals, except from that of parameters of external functions and underlying tokens\\n */\\ncontract MegaPool is HighCovRatioFeePoolV3, IMegaPool {\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    /**\\n     * Storage\\n     */\\n\\n    IAdaptor public adaptor;\\n    bool internal swapCreditForTokensEnabled;\\n    bool internal swapTokensForCreditEnabled;\\n\\n    uint64 public crossChainHaircut;\\n\\n    uint128 public totalCreditMinted;\\n    uint128 public totalCreditBurned;\\n\\n    /// @notice the maximum allowed amount of net mint credit. `totalCreditMinted - totalCreditBurned` should be smaller than this value\\n    uint128 public maximumNetMintedCredit;\\n    uint128 public maximumNetBurnedCredit;\\n\\n    mapping(address => uint256) public creditBalance;\\n\\n    uint256[50] private _gap;\\n\\n    /**\\n     * Events\\n     */\\n\\n    /**\\n     * @notice Event that is emitted when token is swapped into credit\\n     * @dev `trackingId` 0 means the swap is on the same chain. Otherwise a cross-chain swap with `trackingId` is followed\\n     */\\n    event SwapTokensForCredit(\\n        address indexed sender,\\n        address indexed fromToken,\\n        uint256 fromAmount,\\n        uint256 creditAmount,\\n        uint256 indexed trackingId\\n    );\\n\\n    /**\\n     * @notice Event that is emitted when credit is swapped into token\\n     * @dev `trackingId` 0 means the swap is on the same chain. Otherwise it is a cross-chain swap with `trackingId`\\n     */\\n    event SwapCreditForTokens(\\n        uint256 creditAmount,\\n        address indexed toToken,\\n        uint256 toAmount,\\n        address indexed receiver,\\n        uint256 indexed trackingId\\n    );\\n\\n    event MintCredit(address indexed receiver, uint256 creditAmount, uint256 indexed trackingId);\\n\\n    /**\\n     * Errors\\n     */\\n\\n    error POOL__CREDIT_NOT_ENOUGH();\\n    error POOL__REACH_MAXIMUM_MINTED_CREDIT();\\n    error POOL__REACH_MAXIMUM_BURNED_CREDIT();\\n    error POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED();\\n    error POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED();\\n\\n    /**\\n     * External/public functions\\n     */\\n\\n    /**\\n     * @notice Initiate a cross chain swap\\n     * @dev Steps:\\n     * 1. Swap `fromToken` for credit;\\n     * 2. Notify relayer to bridge credit to the `toChain`;\\n     * 3. Relayer invoke `completeSwapCreditForTokens` to swap credit for `toToken` in the `toChain`\\n     * Note: haircut returned here is just high cov ratio fee.\\n     */\\n    function swapTokensForTokensCrossChain(\\n        address fromToken,\\n        address toToken,\\n        uint256 toChain, // wormhole chain ID\\n        uint256 fromAmount,\\n        uint256 minimumCreditAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint32 nonce\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256 creditAmount, uint256 haircut, uint256 trackingId)\\n    {\\n        // Assumption: the adaptor should check `toChain` and `toToken`\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        requireAssetNotPaused(fromToken);\\n        _checkAddress(receiver);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n\\n        (creditAmount, haircut) = _swapTokensForCredit(\\n            fromAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumCreditAmount\\n        );\\n\\n        // Wormhole: computeBudget + applicationBudget + wormholeFee should equal the msg.value\\n        trackingId = adaptor.bridgeCreditAndSwapForTokens{value: msg.value}(\\n            toToken,\\n            toChain,\\n            creditAmount,\\n            minimumToAmount,\\n            receiver,\\n            nonce\\n        );\\n\\n        emit SwapTokensForCredit(msg.sender, fromToken, fromAmount, creditAmount, trackingId);\\n    }\\n\\n    /**\\n     * @notice Swap credit for tokens (same chain)\\n     */\\n    function swapCreditForTokens(\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver\\n    ) external override nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _beforeSwapCreditForTokens(fromAmount, receiver);\\n        (actualToAmount, haircut) = _doSwapCreditForTokens(toToken, fromAmount, minimumToAmount, receiver, 0);\\n    }\\n\\n    /**\\n     * @notice Bridge credit and swap it for `toToken` in the `toChain`\\n     * Nonce must be non-zero, otherwise wormhole will revert the message\\n     */\\n    function swapCreditForTokensCrossChain(\\n        address toToken,\\n        uint256 toChain, // wormhole chain ID\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint32 nonce\\n    ) external payable override nonReentrant whenNotPaused returns (uint256 trackingId) {\\n        _beforeSwapCreditForTokens(fromAmount, receiver);\\n\\n        // Wormhole: computeBudget + applicationBudget + wormholeFee should equal the msg.value\\n        trackingId = adaptor.bridgeCreditAndSwapForTokens{value: msg.value}(\\n            toToken,\\n            toChain,\\n            fromAmount,\\n            minimumToAmount,\\n            receiver,\\n            nonce\\n        );\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    function _swapTokensForCredit(\\n        IAsset fromAsset,\\n        uint256 fromAmount,\\n        uint256 minimumCreditAmount\\n    ) internal returns (uint256 creditAmount, uint256 haircut) {\\n        // Assume credit has 18 decimals\\n        if (!swapTokensForCreditEnabled) revert POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED();\\n        // TODO: implement _quoteFactor for credit\\n        // uint256 quoteFactor = IRelativePriceProvider(address(fromAsset)).getRelativePrice();\\n        (creditAmount, haircut) = CoreV3.quoteSwapTokensForCredit(\\n            fromAsset,\\n            fromAmount,\\n            ampFactor,\\n            WAD,\\n            startCovRatio,\\n            endCovRatio\\n        );\\n\\n        _checkAmount(minimumCreditAmount, creditAmount);\\n\\n        creditBalance[feeTo] += haircut;\\n        fromAsset.addCash(fromAmount);\\n        totalCreditMinted += _to128(creditAmount + haircut);\\n\\n        // Check it doesn't exceed maximum out-going credits\\n        if (totalCreditMinted > maximumNetMintedCredit + totalCreditBurned) revert POOL__REACH_MAXIMUM_MINTED_CREDIT();\\n    }\\n\\n    function _beforeSwapCreditForTokens(uint256 fromAmount, address receiver) internal {\\n        _checkAddress(receiver);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        if (creditBalance[msg.sender] < fromAmount) revert POOL__CREDIT_NOT_ENOUGH();\\n        unchecked {\\n            creditBalance[msg.sender] -= fromAmount;\\n        }\\n    }\\n\\n    function _doSwapCreditForTokens(\\n        address toToken,\\n        uint256 fromCreditAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint256 trackingId\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        if (fromCreditAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset toAsset = _assetOf(toToken);\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n        (actualToAmount, haircut) = _swapCreditForTokens(toAsset, fromCreditAmount, minimumToAmount.toWad(toDecimal));\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        haircut = haircut.fromWad(toDecimal);\\n\\n        toAsset.transferUnderlyingToken(receiver, actualToAmount);\\n        totalCreditBurned += _to128(fromCreditAmount);\\n\\n        // Check it doesn't exceed maximum in-coming credits\\n        if (totalCreditBurned > maximumNetBurnedCredit + totalCreditMinted) revert POOL__REACH_MAXIMUM_BURNED_CREDIT();\\n\\n        emit SwapCreditForTokens(fromCreditAmount, toToken, actualToAmount, receiver, trackingId);\\n    }\\n\\n    function _swapCreditForTokens(\\n        IAsset toAsset,\\n        uint256 fromCreditAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        if (!swapCreditForTokensEnabled) revert POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED();\\n        // TODO: implement _quoteFactor for credit\\n        (actualToAmount, haircut) = CoreV3.quoteSwapCreditForTokens(\\n            (fromCreditAmount),\\n            toAsset,\\n            ampFactor,\\n            WAD,\\n            crossChainHaircut\\n        );\\n\\n        _checkAmount(minimumToAmount, actualToAmount);\\n        _feeCollected[toAsset] += haircut;\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        toAsset.removeCash(actualToAmount + haircut);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (DSMath.wdiv(toAsset.cash(), toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * Read-only functions\\n     */\\n\\n    function quoteSwapCreditForTokens(\\n        address toToken,\\n        uint256 fromCreditAmount\\n    ) external view returns (uint256 amount) {\\n        IAsset toAsset = _assetOf(toToken);\\n        if (!swapCreditForTokensEnabled) revert POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED();\\n        // TODO: implement _quoteFactor for credit\\n        (uint256 actualToAmount, ) = CoreV3.quoteSwapCreditForTokens(\\n            fromCreditAmount,\\n            toAsset,\\n            ampFactor,\\n            WAD,\\n            crossChainHaircut\\n        );\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n        amount = actualToAmount.fromWad(toDecimal);\\n\\n        // Check it doesn't exceed maximum in-coming credits\\n        if (totalCreditBurned + fromCreditAmount > maximumNetBurnedCredit + totalCreditMinted)\\n            revert POOL__REACH_MAXIMUM_BURNED_CREDIT();\\n    }\\n\\n    function quoteSwapTokensForCredit(\\n        address fromToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256 creditAmount, uint256 haircut) {\\n        IAsset fromAsset = _assetOf(fromToken);\\n\\n        // Assume credit has 18 decimals\\n        if (!swapTokensForCreditEnabled) revert POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED();\\n        // TODO: implement _quoteFactor for credit\\n        // uint256 quoteFactor = IRelativePriceProvider(address(fromAsset)).getRelativePrice();\\n        (creditAmount, haircut) = CoreV3.quoteSwapTokensForCredit(\\n            fromAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            ampFactor,\\n            WAD,\\n            startCovRatio,\\n            endCovRatio\\n        );\\n\\n        // Check it doesn't exceed maximum out-going credits\\n        if (totalCreditMinted + creditAmount + haircut > maximumNetMintedCredit + totalCreditBurned)\\n            revert POOL__REACH_MAXIMUM_MINTED_CREDIT();\\n    }\\n\\n    /**\\n     * @notice Calculate the r* and invariant when all credits are settled\\n     */\\n    function globalEquilCovRatioWithCredit() external view returns (uint256 equilCovRatio, uint256 invariantInUint) {\\n        int256 invariant;\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        // oustanding credit = totalCreditBurned - totalCreditMinted\\n        int256 creditOffset = (int256(uint256(totalCreditBurned)) - int256(uint256(totalCreditMinted))).wmul(\\n            int256(WAD + ampFactor)\\n        );\\n        invariant += creditOffset;\\n        equilCovRatio = uint256(CoreV3.equilCovRatio(invariant, SL, int256(ampFactor)));\\n        invariantInUint = uint256(invariant);\\n    }\\n\\n    function _to128(uint256 val) internal pure returns (uint128) {\\n        require(val <= type(uint128).max, 'uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    /**\\n     * Permisioneed functions\\n     */\\n\\n    /**\\n     * @notice Swap credit to tokens; should be called by the adaptor\\n     */\\n    function completeSwapCreditForTokens(\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint256 trackingId\\n    ) external override whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        require(msg.sender == address(adaptor));\\n        // Note: `_checkAddress(receiver)` could be skipped at it is called at the `fromChain`\\n        (actualToAmount, haircut) = _doSwapCreditForTokens(toToken, fromAmount, minimumToAmount, receiver, trackingId);\\n    }\\n\\n    /**\\n     * @notice In case `completeSwapCreditForTokens` fails, adaptor should mint credit to the respective user\\n     */\\n    function mintCredit(uint256 creditAmount, address receiver, uint256 trackingId) external override whenNotPaused {\\n        require(msg.sender == address(adaptor));\\n        creditBalance[receiver] += creditAmount;\\n        emit MintCredit(receiver, creditAmount, trackingId);\\n    }\\n\\n    function setSwapTokensForCreditEnabled(bool enable) external onlyOwner {\\n        swapTokensForCreditEnabled = enable;\\n    }\\n\\n    function setSwapCreditForTokensEnabled(bool enable) external onlyOwner {\\n        swapCreditForTokensEnabled = enable;\\n    }\\n\\n    function setMaximumNetMintedCredit(uint128 _maximumNetMintedCredit) external onlyOwner {\\n        maximumNetMintedCredit = _maximumNetMintedCredit;\\n    }\\n\\n    function setMaximumNetBurnedCredit(uint128 _maximumNetBurnedCredit) external onlyOwner {\\n        maximumNetBurnedCredit = _maximumNetBurnedCredit;\\n    }\\n\\n    function setAdaptorAddr(IAdaptor _adaptor) external onlyOwner {\\n        adaptor = _adaptor;\\n    }\\n\\n    function setCrossChainHaircut(uint64 _crossChainHaircut) external onlyOwner {\\n        require(_crossChainHaircut < 1e18);\\n        crossChainHaircut = _crossChainHaircut;\\n    }\\n}\\n\",\"keccak256\":\"0x892faea86d7b79c70b96b30a3a6dcf2f07713a37463e1c77e42d23d9c14a03b1\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PausableAssets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\n/**\\n * @title PausableAssets\\n * @notice Handles assets pause and unpause of Wombat protocol.\\n * @dev Allows pausing and unpausing of deposit and swap operations\\n */\\ncontract PausableAssets {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event PausedAsset(address asset, address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event UnpausedAsset(address asset, address account);\\n\\n    mapping(address => bool) private _pausedAssets;\\n\\n    error WOMBAT_ASSET_ALREADY_PAUSED();\\n    error WOMBAT_ASSET_NOT_PAUSED();\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function requireAssetNotPaused(address asset) internal view {\\n        if (_pausedAssets[asset]) revert WOMBAT_ASSET_ALREADY_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function requireAssetPaused(address asset) internal view {\\n        if (!_pausedAssets[asset]) revert WOMBAT_ASSET_NOT_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Triggers paused state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function _pauseAsset(address asset) internal {\\n        requireAssetNotPaused(asset);\\n        _pausedAssets[asset] = true;\\n        emit PausedAsset(asset, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function _unpauseAsset(address asset) internal {\\n        requireAssetPaused(asset);\\n        _pausedAssets[asset] = false;\\n        emit UnpausedAsset(asset, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe12faf6a6814fa9734798b98dc025a0e2b17c2a16a0de3d4e6a0a733ccbcd7a6\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './CoreV3.sol';\\nimport '../interfaces/IAsset.sol';\\nimport './PausableAssets.sol';\\nimport '../../wombat-governance/interfaces/IMasterWombat.sol';\\nimport '../interfaces/IPool.sol';\\n\\n/**\\n * @title Pool V3\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n * Note: All variables are 18 decimals, except from that of underlying tokens\\n * Change log:\\n * - V2: Add `gap` to prevent storage collision for future upgrades\\n * - V3: Contract size compression\\n */\\ncontract PoolV3 is\\n    Initializable,\\n    IPool,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PausableAssets\\n{\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    /// @notice Asset Map struct holds assets\\n    struct AssetMap {\\n        address[] keys;\\n        mapping(address => IAsset) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    int256 internal constant WAD_I = 10 ** 18;\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    /* Storage */\\n\\n    /// @notice Amplification factor\\n    uint256 public ampFactor;\\n\\n    /// @notice Haircut rate\\n    uint256 public haircutRate;\\n\\n    /// @notice Retention ratio: the ratio of haircut that should stay in the pool\\n    uint256 public retentionRatio;\\n\\n    /// @notice LP dividend ratio : the ratio of haircut that should distribute to LP\\n    uint256 public lpDividendRatio;\\n\\n    /// @notice The threshold to mint fee (unit: WAD)\\n    uint256 public mintFeeThreshold;\\n\\n    /// @notice Dev address\\n    address public dev;\\n\\n    address public feeTo;\\n\\n    address public masterWombat;\\n\\n    /// @notice Dividend collected by each asset (unit: WAD)\\n    mapping(IAsset => uint256) internal _feeCollected;\\n\\n    /// @notice A record of assets inside Pool\\n    AssetMap internal _assets;\\n\\n    // Slots reserved for future use\\n    uint128 internal _used1; // Remember to initialize before use.\\n    uint128 internal _used2; // Remember to initialize before use.\\n    uint256[49] private gap;\\n\\n    /* Events */\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when asset is removed from Pool\\n    event AssetRemoved(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    event SetDev(address addr);\\n    event SetMasterWombat(address addr);\\n    event SetFeeTo(address addr);\\n\\n    event SetMintFeeThreshold(uint256 value);\\n    event SetFee(uint256 lpDividendRatio, uint256 retentionRatio);\\n    event SetAmpFactor(uint256 value);\\n    event SetHaircutRate(uint256 value);\\n\\n    event FillPool(address token, uint256 amount);\\n    event TransferTipBucket(address token, uint256 amount, address to);\\n\\n    /* Errors */\\n\\n    error WOMBAT_FORBIDDEN();\\n    error WOMBAT_EXPIRED();\\n\\n    error WOMBAT_ASSET_NOT_EXISTS();\\n    error WOMBAT_ASSET_ALREADY_EXIST();\\n\\n    error WOMBAT_ZERO_ADDRESS();\\n    error WOMBAT_ZERO_AMOUNT();\\n    error WOMBAT_ZERO_LIQUIDITY();\\n    error WOMBAT_INVALID_VALUE();\\n    error WOMBAT_SAME_ADDRESS();\\n    error WOMBAT_AMOUNT_TOO_LOW();\\n    error WOMBAT_CASH_NOT_ENOUGH();\\n\\n    /* Pesudo modifiers to safe gas */\\n\\n    function _checkLiquidity(uint256 liquidity) internal pure {\\n        if (liquidity == 0) revert WOMBAT_ZERO_LIQUIDITY();\\n    }\\n\\n    function _checkAddress(address to) internal pure {\\n        if (to == address(0)) revert WOMBAT_ZERO_ADDRESS();\\n    }\\n\\n    function _checkSameAddress(address from, address to) internal pure {\\n        if (from == to) revert WOMBAT_SAME_ADDRESS();\\n    }\\n\\n    function _checkAmount(uint256 minAmt, uint256 amt) internal pure {\\n        if (minAmt > amt) revert WOMBAT_AMOUNT_TOO_LOW();\\n    }\\n\\n    function _ensure(uint256 deadline) internal view {\\n        if (deadline < block.timestamp) revert WOMBAT_EXPIRED();\\n    }\\n\\n    function _onlyDev() internal view {\\n        if (dev != msg.sender) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /* Construtor and setters */\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public virtual initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        ampFactor = ampFactor_;\\n        haircutRate = haircutRate_;\\n\\n        lpDividendRatio = WAD;\\n\\n        dev = msg.sender;\\n    }\\n\\n    /**\\n     * Permisioneed functions\\n     */\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner {\\n        _checkAddress(asset);\\n        _checkAddress(token);\\n\\n        if (_containsAsset(token)) revert WOMBAT_ASSET_ALREADY_EXIST();\\n        _assets.values[token] = IAsset(asset);\\n        _assets.indexOf[token] = _assets.keys.length;\\n        _assets.keys.push(token);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Removes asset from asset struct\\n     * @dev Can only be called by owner\\n     * @param token The address of token to remove\\n     */\\n    function removeAsset(address token) external onlyOwner {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n\\n        address asset = address(_getAsset(token));\\n        delete _assets.values[token];\\n\\n        uint256 index = _assets.indexOf[token];\\n        uint256 lastIndex = _assets.keys.length - 1;\\n        address lastKey = _assets.keys[lastIndex];\\n\\n        _assets.indexOf[lastKey] = index;\\n        delete _assets.indexOf[token];\\n\\n        _assets.keys[index] = lastKey;\\n        _assets.keys.pop();\\n\\n        emit AssetRemoved(token, asset);\\n    }\\n\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev_ new contract dev address\\n     */\\n    function setDev(address dev_) external onlyOwner {\\n        _checkAddress(dev_);\\n        dev = dev_;\\n        emit SetDev(dev_);\\n    }\\n\\n    function setMasterWombat(address masterWombat_) external onlyOwner {\\n        _checkAddress(masterWombat_);\\n        masterWombat = masterWombat_;\\n        emit SetMasterWombat(masterWombat_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools amplification factor. Can only be set by the contract owner.\\n     * @param ampFactor_ new pool's amplification factor\\n     */\\n    function setAmpFactor(uint256 ampFactor_) external onlyOwner {\\n        if (ampFactor_ > WAD) revert WOMBAT_INVALID_VALUE(); // ampFactor_ should not be set bigger than 1\\n        ampFactor = ampFactor_;\\n        emit SetAmpFactor(ampFactor_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        if (haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE(); // haircutRate_ should not be set bigger than 1\\n        haircutRate = haircutRate_;\\n        emit SetHaircutRate(haircutRate_);\\n    }\\n\\n    function setFee(uint256 lpDividendRatio_, uint256 retentionRatio_) external onlyOwner {\\n        unchecked {\\n            if (retentionRatio_ + lpDividendRatio_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        }\\n        _mintAllFees();\\n        retentionRatio = retentionRatio_;\\n        lpDividendRatio = lpDividendRatio_;\\n        emit SetFee(lpDividendRatio_, retentionRatio_);\\n    }\\n\\n    /**\\n     * @dev unit of amount should be in WAD\\n     */\\n    function transferTipBucket(address token, uint256 amount, address to) external onlyOwner {\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = tipBucketBalance(token);\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.transferUnderlyingToken(to, amount.fromWad(asset.underlyingTokenDecimals()));\\n        emit TransferTipBucket(token, amount, to);\\n    }\\n\\n    /**\\n     * @notice Changes the fee beneficiary. Can only be set by the contract owner.\\n     * This value cannot be set to 0 to avoid unsettled fee.\\n     * @param feeTo_ new fee beneficiary\\n     */\\n    function setFeeTo(address feeTo_) external onlyOwner {\\n        _checkAddress(feeTo_);\\n        feeTo = feeTo_;\\n        emit SetFeeTo(feeTo_);\\n    }\\n\\n    /**\\n     * @notice Set min fee to mint\\n     */\\n    function setMintFeeThreshold(uint256 mintFeeThreshold_) external onlyOwner {\\n        mintFeeThreshold = mintFeeThreshold_;\\n        emit SetMintFeeThreshold(mintFeeThreshold_);\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external {\\n        _onlyDev();\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external {\\n        _onlyDev();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev pause asset, restricting deposit and swap operations\\n     */\\n    function pauseAsset(address token) external {\\n        _onlyDev();\\n        _pauseAsset(token);\\n    }\\n\\n    /**\\n     * @dev unpause asset, enabling deposit and swap operations\\n     */\\n    function unpauseAsset(address token) external {\\n        _onlyDev();\\n        _unpauseAsset(token);\\n    }\\n\\n    /**\\n     * @notice Move fund from tip bucket to the pool to keep r* = 1 as error accumulates\\n     * unit of amount should be in WAD\\n     */\\n    function fillPool(address token, uint256 amount) external {\\n        _onlyDev();\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n            asset.cash() -\\n            _feeCollected[asset];\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.addCash(amount);\\n        emit FillPool(token, amount);\\n    }\\n\\n    /* Assets */\\n\\n    /**\\n     * @notice Return list of tokens in the pool\\n     */\\n    function getTokens() external view override returns (address[] memory) {\\n        return _assets.keys;\\n    }\\n\\n    /**\\n     * @notice get length of asset list\\n     * @return the size of the asset list\\n     */\\n    function _sizeOfAssetList() internal view returns (uint256) {\\n        return _assets.keys.length;\\n    }\\n\\n    /**\\n     * @notice Gets asset with token address key\\n     * @param key The address of token\\n     * @return the corresponding asset in state\\n     */\\n    function _getAsset(address key) internal view returns (IAsset) {\\n        return _assets.values[key];\\n    }\\n\\n    /**\\n     * @notice Gets key (address) at index\\n     * @param index the index\\n     * @return the key of index\\n     */\\n    function _getKeyAtIndex(uint256 index) internal view returns (address) {\\n        return _assets.keys[index];\\n    }\\n\\n    /**\\n     * @notice Looks if the asset is contained by the list\\n     * @param token The address of token to look for\\n     * @return bool true if the asset is in asset list, false otherwise\\n     */\\n    function _containsAsset(address token) internal view returns (bool) {\\n        return _assets.values[token] != IAsset(address(0));\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) internal view returns (IAsset) {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        return _assets.values[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function addressOfAsset(address token) external view override returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        // collect fee before deposit\\n        _mintFee(asset);\\n\\n        uint256 liabilityToMint;\\n        (liquidity, liabilityToMint, ) = CoreV3.quoteDepositLiquidityInEquil(asset, amount, ampFactor);\\n\\n        _checkLiquidity(liquidity);\\n        _checkAmount(minimumLiquidity, liquidity);\\n\\n        asset.addCash(amount);\\n        asset.addLiability(liabilityToMint);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation. This function assumes tax free token.\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external override nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        if (amount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(token);\\n\\n        IAsset asset = _assetOf(token);\\n        IERC20(token).safeTransferFrom(address(msg.sender), address(asset), amount);\\n\\n        if (!shouldStake) {\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, to);\\n        } else {\\n            _checkAddress(masterWombat);\\n            // deposit and stake on behalf of the user\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, address(this));\\n\\n            asset.approve(masterWombat, liquidity);\\n\\n            uint256 pid = IMasterWombat(masterWombat).getAssetPid(address(asset));\\n            IMasterWombat(masterWombat).depositFor(pid, liquidity, to);\\n        }\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential deposit from pool\\n     * @dev To be used by frontend\\n     * @param token The token to deposit by user\\n     * @param amount The amount to deposit\\n     * @return liquidity The potential liquidity user would receive\\n     * @return reward\\n     */\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view override returns (uint256 liquidity, uint256 reward) {\\n        IAsset asset = _assetOf(token);\\n        (liquidity, , reward) = CoreV3.quoteDepositLiquidityInEquil(\\n            asset,\\n            amount.toWad(asset.underlyingTokenDecimals()),\\n            ampFactor\\n        );\\n    }\\n\\n    /* Withdraw */\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @return amount The total amount withdrawn\\n     */\\n    function _withdraw(IAsset asset, uint256 liquidity, uint256 minimumAmount) internal returns (uint256 amount) {\\n        // collect fee before withdraw\\n        _mintFee(asset);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, ) = CoreV3.quoteWithdrawAmount(asset, liquidity, ampFactor);\\n        _checkAmount(minimumAmount, amount);\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount);\\n        asset.removeLiability(liabilityToBurn);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (asset.liability() > 0 && uint256(asset.cash()).wdiv(asset.liability()) < WAD / 100)\\n            revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        _checkAddress(to);\\n        _ensure(deadline);\\n\\n        IAsset asset = _assetOf(token);\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        amount = _withdraw(asset, liquidity, minimumAmount.toWad(decimals)).fromWad(decimals);\\n        asset.transferUnderlyingToken(to, amount);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Enables withdrawing liquidity from an asset using LP from a different asset\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity to be withdrawn (in fromToken decimal)\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return toAmount The total amount withdrawn\\n     */\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 toAmount) {\\n        _checkAddress(to);\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        // Withdraw and swap\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        IERC20(fromAsset).safeTransferFrom(address(msg.sender), address(fromAsset), liquidity);\\n        uint256 fromAmountInWad = _withdraw(fromAsset, liquidity, 0);\\n        (toAmount, ) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmountInWad,\\n            minimumAmount.toWad(toAsset.underlyingTokenDecimals())\\n        );\\n\\n        toAmount = toAmount.fromWad(toAsset.underlyingTokenDecimals());\\n        toAsset.transferUnderlyingToken(to, toAmount);\\n\\n        uint256 fromAmount = fromAmountInWad.fromWad(fromAsset.underlyingTokenDecimals());\\n        emit Withdraw(msg.sender, fromToken, fromAmount, liquidity, to);\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, toAmount, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return fee The fee that would be applied\\n     */\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view override returns (uint256 amount, uint256 fee) {\\n        _checkLiquidity(liquidity);\\n        IAsset asset = _assetOf(token);\\n        (amount, , fee) = CoreV3.quoteWithdrawAmount(asset, liquidity, ampFactor);\\n        amount = amount.fromWad(asset.underlyingTokenDecimals());\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from other asset from the pool\\n     * @dev To be used by frontend\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity (amount of the lp assets) to be withdrawn\\n     * @return finalAmount The potential amount user would receive\\n     * @return withdrewAmount The amount of the from-token that is withdrew\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual returns (uint256 finalAmount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        (finalAmount, withdrewAmount) = CoreV3.quoteWithdrawAmountFromOtherAsset(\\n            fromAsset,\\n            toAsset,\\n            liquidity,\\n            ampFactor,\\n            scaleFactor,\\n            haircutRate,\\n            0,\\n            0\\n        );\\n\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        finalAmount = finalAmount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Swap */\\n\\n    /**\\n     * @notice Return the scale factor that should applied on from-amounts in a swap given\\n     * the from-asset and the to-asset.\\n     * @dev not applicable to a plain pool\\n     */\\n    function _quoteFactor(\\n        IAsset, // fromAsset\\n        IAsset // toAsset\\n    ) internal view virtual returns (uint256) {\\n        // virtual function; do nothing\\n        return 1e18;\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view virtual returns (uint256 actualToAmount, uint256 haircut) {\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        return CoreV3.quoteSwap(fromAsset, toAsset, fromAmount, ampFactor, scaleFactor, haircutRate);\\n    }\\n\\n    /**\\n     * expect fromAmount and minimumToAmount to be in WAD\\n     */\\n    function _swap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = _quoteFrom(fromAsset, toAsset, int256(fromAmount));\\n        _checkAmount(minimumToAmount, actualToAmount);\\n\\n        unchecked {\\n            _feeCollected[toAsset] += haircut;\\n        }\\n\\n        fromAsset.addCash(fromAmount);\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        unchecked {\\n            toAsset.removeCash(actualToAmount + haircut);\\n        }\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (uint256(toAsset.cash()).wdiv(toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @dev This function assumes tax free token.\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n\\n        (actualToAmount, haircut) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumToAmount.toWad(toDecimal)\\n        );\\n\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        haircut = haircut.fromWad(toDecimal);\\n\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @dev In reverse quote, the haircut is in the `fromAsset`\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The given input amount\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) public view override returns (uint256 potentialOutcome, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        fromAmount = fromAmount.toWad(fromAsset.underlyingTokenDecimals());\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        potentialOutcome = potentialOutcome.fromWad(toAsset.underlyingTokenDecimals());\\n        if (fromAmount >= 0) {\\n            haircut = haircut.fromWad(toAsset.underlyingTokenDecimals());\\n        } else {\\n            haircut = haircut.fromWad(fromAsset.underlyingTokenDecimals());\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param toAmount The given output amount\\n     * @return amountIn The input amount required\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view override returns (uint256 amountIn, uint256 haircut) {\\n        return quotePotentialSwap(toToken, fromToken, -toAmount);\\n    }\\n\\n    /* Queries */\\n\\n    /**\\n     * @notice Returns the exchange rate of the LP token\\n     * @param token The address of the token\\n     * @return xr The exchange rate of LP token\\n     */\\n    function exchangeRate(address token) external view returns (uint256 xr) {\\n        IAsset asset = _assetOf(token);\\n        if (asset.totalSupply() == 0) return WAD;\\n        return xr = uint256(asset.liability()).wdiv(uint256(asset.totalSupply()));\\n    }\\n\\n    function globalEquilCovRatio() external view returns (uint256 equilCovRatio, uint256 invariantInUint) {\\n        int256 invariant;\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        equilCovRatio = uint256(CoreV3.equilCovRatio(invariant, SL, int256(ampFactor)));\\n        invariantInUint = uint256(invariant);\\n    }\\n\\n    function tipBucketBalance(address token) public view returns (uint256 balance) {\\n        IAsset asset = _assetOf(token);\\n        unchecked {\\n            return\\n                asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n                asset.cash() -\\n                _feeCollected[asset];\\n        }\\n    }\\n\\n    /* Utils */\\n\\n    function _globalInvariantFunc() internal view virtual returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += L_i;\\n            D += L_i.wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to send fee collected to the fee beneficiary\\n     * @param asset The address of the asset to collect fee\\n     */\\n    function _mintFee(IAsset asset) internal {\\n        uint256 feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0 || feeCollected < mintFeeThreshold) {\\n            // early return\\n            return;\\n        }\\n        {\\n            // dividend to veWOM\\n            uint256 dividend = feeCollected.wmul(WAD - lpDividendRatio - retentionRatio);\\n\\n            if (dividend > 0) {\\n                asset.transferUnderlyingToken(feeTo, dividend.fromWad(asset.underlyingTokenDecimals()));\\n            }\\n        }\\n        {\\n            // dividend to LP\\n            uint256 lpDividend = feeCollected.wmul(lpDividendRatio);\\n            if (lpDividend > 0) {\\n                // exact deposit to maintain r* = 1\\n                // increase the value of the LP token, i.e. assetsPerShare\\n                (, uint256 liabilityToMint, ) = CoreV3.quoteDepositLiquidityInEquil(asset, lpDividend, ampFactor);\\n                asset.addLiability(liabilityToMint);\\n                asset.addCash(lpDividend);\\n            }\\n        }\\n\\n        _feeCollected[asset] = 0;\\n    }\\n\\n    function _mintAllFees() internal {\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send fee collected to the fee beneficiary\\n     * @param token The address of the token to collect fee\\n     */\\n    function mintFee(address token) external {\\n        _mintFee(_assetOf(token));\\n    }\\n}\\n\",\"keccak256\":\"0x670857a5cfda1b14f9600620af4fa7f9a6abe44b52bf9f32046f8ef0322743e4\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(\\n        uint256 _pid,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(\\n        uint256 _pid\\n    ) external view returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(\\n        uint256[] memory _pids\\n    ) external returns (uint256 transfered, uint256[] memory rewards, uint256[] memory additionalRewards);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x374ee1072672236959e8ec928ce63690ec3bcc18edcadfffce165a38dd7082ed\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001757615acd90816200001d8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c8062b0af4d14613d89578063017b829214613d6b578063017e7e5814613d4457806306a22c9014613c365780630705999d14613bc3578063070f81d9146139d057806307a237c51461396157806309a5fca3146134fd57806309f1fd3e146134b95780630aa42de0146134975780630f91f06f14612f225780633753b14a14612e9a5780633bd61ba814612e735780633f4ba83a14612dd65780634a5e42b114612c745780634a6fee0e14612bf15780634ba2adfc14612bcf5780634d31a07014612ba75780634fdd64e514612b9357806352f7c98814612ad857806353a284d014612a525780635c975abb14612a2f5780635cfe092e14612a1157806361858e23146129225780636281baef146125d157806362fad13b1461251b5780636922d5ca146124fd578063715018a6146124a157806374cbbdb91461247f5780637f809d291461232e578063815bfd29146123105780638456cb59146122b5578063873e73c314611f275780638a2dfe0914611e6b5780638da5cb5b14611e445780638de66a6814611cce5780638e4b4d601461189a578063907448ed1461176557806391cca3db1461173e57806393aeea02146115ef5780639908fc8b146113af5780639abacb41146112e95780639e4416b71461128b5780639ee08e32146111f5578063a4275ceb14611026578063aa6ca80814610f60578063bb0a8ad214610f34578063c2cd9b2b14610f0c578063cf1ba03a14610ebd578063d043c56514610e6f578063d0dd0e5614610e51578063d114444d146109dd578063d30ffeda146109b9578063d477f05f14610946578063da48999714610802578063dc3b7c8b146107d6578063e4a3011614610623578063e9249cc7146105f3578063f2fde38b1461054f578063f46901ed146104dc578063f57e84d514610454578063f89830e5146103e6578063f8b49e72146103b9578063fb7f5cc214610391578063fc8b9c0614610358578063fca8f308146103275763fffd5980146102fd57600080fd5b3461032457806003193601126103245760206001600160801b0361013d5416604051908152f35b80fd5b503461032457604061034c61034661033e36613ec0565b929092614cc2565b9161523b565b82519182526020820152f35b50346103245760203660031901126103245760406020916001600160a01b0361037f613de9565b16815261013e83522054604051908152f35b503461032457806003193601126103245760206001600160801b036101085416604051908152f35b5034610324576020366003190112610324576103e36103de6103d9613de9565b614899565b61584e565b80f35b503461032457602036600319011261032457610400613e2b565b610408613f0b565b61013b907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b16911617905580f35b503461032457602036600319011261032457600435610471613f0b565b670de0b6b3a764000081116104b2576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a180f35b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b5034610324576020366003190112610324577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206001600160a01b03610521613de9565b610529613f0b565b61053281614711565b16806001600160a01b031960d054161760d055604051908152a180f35b503461032457602036600319011261032457610569613de9565b610571613f0b565b6001600160a01b03811615610589576103e390613f63565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346103245760203660031901126103245760206001600160a01b0361061a6103d9613de9565b16604051908152f35b50346103245761063236613ef5565b9082549160ff8360081c1615918280936107c9575b80156107b2575b156107485760ff1984811660011786559383610737575b5061067f60ff865460081c1661067a816147ba565b6147ba565b61068833613f63565b8454936106a860ff8660081c1661069e816147ba565b60016065556147ba565b6097541660975560ca5560cb55670de0b6b3a764000060cd55336001600160a01b031960cf54161760cf556106ff575b506101087718fae27693b40000000000000000000014d1120d7b1600008282541617905580f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1386106d8565b61ffff191661010117855538610665565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b15801561064e5750600160ff85161461064e565b50600160ff851610610647565b50346103245760203660031901126103245760206107fa6107f5613de9565b6153f6565b604051908152f35b50346103245760403660031901126103245761081c613de9565b610824613dff565b61082c613f0b565b61083581614711565b61083e82614711565b610861826001600160a01b0380911660005260d460205260406000205416151590565b61091c576001600160a01b03809116911680835260d460205260408320826001600160a01b031982541617905560d35460d560205280604085205568010000000000000000811015610908576108df6108c182600185940160d35561482b565b819391549060031b916001600160a01b03809116831b921b19161790565b90557f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188380a380f35b602484634e487b7160e01b81526041600452fd5b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b5034610324576020366003190112610324577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206001600160a01b0361098b613de9565b610993613f0b565b61099c81614711565b16806001600160a01b031960cf54161760cf55604051908152a180f35b50346103245760203660031901126103245760206107fa6109d8613de9565b615554565b50610100366003190112610324576109f3613de9565b906109fc613dff565b906001600160a01b0360c4351660c43503610d225763ffffffff60e4351660e43503610d2257610a2a614151565b610a32614101565b60643515610e2757610a4383614696565b610a4e60c435614711565b610a5783614899565b91610a786064356001600160a01b038516336001600160a01b0388166141a6565b6040516339420b4560e11b81526020816004816001600160a01b0388165afa908115610e1c5790610ab3918491610ded575b50606435614473565b9060ff61013b5460a81c1615610dc35760ca546101085460408051637b33fce760e01b81526001600160a01b0388166004820152602481018690526044810193909352670de0b6b3a764000060648401526001600160801b038216608484015260809190911c60a48301529094908560c48173788fAA8ae18d3906eE93674D24331d2b4f0477225af4928315610d7d5784958594610d8c575b50610b5986608435614789565b6001600160a01b0360d05416855261013e60205260408520610b7c8582546144ad565b90556001600160a01b0382163b15610d88576001600160a01b03916024869283604051958694859362b64f3d60e51b85526004850152165af18015610d7d57908491610d65575b5050610bd7610bd283866144ad565b61463e565b61013c846001600160801b03610c2081610bf58554968288166144ba565b1693846fffffffffffffffffffffffffffffffff198716178091558261013d54169060801c906144ba565b1692161711610d3b5761013b54604051633a0cd16d60e11b81526001600160a01b039283166004820152604480356024830152810186905260a48035606483015260c480358516608484015260e43563ffffffff1691830191909152909260209284929183913491165af1928315610d2f5792610cf3575b50816060946001600160a01b0360405191606435835286602084015216907f8900881feb21943c006d040b3a8510f7780104f915ac29f448cdaf220007887f60403392a4600160655560405192835260208301526040820152f35b9391506020843d602011610d27575b81610d0f60209383613fd5565b81010312610d2257606093519193610c98565b600080fd5b3d9150610d02565b604051903d90823e3d90fd5b60046040517f8c68dbbe000000000000000000000000000000000000000000000000000000008152fd5b610d6e90613fab565b610d79578238610bc3565b8280fd5b6040513d86823e3d90fd5b8480fd5b909350610db291955060403d604011610dbc575b610daa8183613fd5565b810190613ff7565b9490949238610b4c565b503d610da0565b60046040517f7a44a0f5000000000000000000000000000000000000000000000000000000008152fd5b610e0f915060203d602011610e15575b610e078183613fd5565b81019061400d565b38610aaa565b503d610dfd565b6040513d85823e3d90fd5b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b5034610324578060031936011261032457602060cb54604051908152f35b5034610324576020366003190112610324577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b7066020600435610eaf613f0b565b8060ce55604051908152a180f35b503461032457602036600319011261032457610ed7613dd3565b610edf613f0b565b61013d906001600160801b036fffffffffffffffffffffffffffffffff1983549260801b16911617905580f35b503461032457806003193601126103245760206001600160a01b0361013b5416604051908152f35b5034610324578060031936011261032457602067ffffffffffffffff61013b5460b01c16604051908152f35b5034610324578060031936011261032457604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b8181106110095750505084610fc2910385613fd5565b60405193838594850191818652518092526040850193925b828110610fe957505050500390f35b83516001600160a01b031685528695509381019392810192600101610fda565b82546001600160a01b031684529286019260019283019201610fac565b503461032457606036600319011261032457611040613de9565b611048613dff565b9061106c6110666044359261105c846146e0565b6103d9858261474b565b92614899565b9060ca5460cb546101085491604051957fb94f2f9a0000000000000000000000000000000000000000000000000000000087526001600160a01b0380911695866004890152169384602488015260448701526064860152670de0b6b3a7640000608486015260a48501526001600160801b03811660c485015260801c60e48401526040836101048173788fAA8ae18d3906eE93674D24331d2b4f0477225af4928315610d7d57849085946111d1575b5060405193846339420b4560e11b9485825281600460209889935afa80156111c65786926111509289926111ae575b506140a4565b9360046040518095819382525afa9182156111a3579061117992916040969261118457506140a4565b918351928352820152f35b61119c919250853d8711610e1557610e078183613fd5565b903861114a565b6040513d87823e3d90fd5b61119c919250843d8611610e1557610e078183613fd5565b6040513d89823e3d90fd5b90506111ed91935060403d604011610dbc57610daa8183613fd5565b92903861111b565b50346103245760203660031901126103245760043567ffffffffffffffff8116808203610d7957670de0b6b3a76400009061122e613f0b565b10156112875761013b907fffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffff7dffffffffffffffff0000000000000000000000000000000000000000000083549260b01b16911617905580f35b5080fd5b5034610324576020366003190112610324576004356112a8613f0b565b670de0b6b3a764000081116104b2576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a180f35b503461032457602036600319011261032457611303613de9565b61130b614885565b6001600160a01b03811680835260c960205260ff6040842054161561138557825260c960209081526040808420805460ff1916905580516001600160a01b03909316835233918301919091527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c9190819081015b0390a180f35b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b5034610324576113be36613e77565b6113cd95919395949294614151565b6113d5614101565b6113df838361474b565b8515610e27576113f7906113f285614711565b6148de565b61140081614696565b61140981614899565b9261141383614899565b95604051956339420b4560e11b8088526020886004816001600160a01b038d165afa9788156115a3576000986115ce575b506001600160a01b038716966040519182526020826004818b5afa9283156115a3576114a261149b6114a8938c938e6114958661148f6114b99b8d9b6000916115af575b508b614473565b93614473565b92614b0d565b9b906140a4565b996140a4565b96336001600160a01b0387166141a6565b6001600160a01b0387163b15610d225760006040518098639e79eaa560e01b825281836001600160a01b03826115098d8a60048401602090939291936001600160a01b0360408201951681520152565b0393165af19182156115a357611580876001600160a01b039360409a7f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d196611594575b508a519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a3600160655582519182526020820152f35b61159d90613fab565b8b61154c565b6040513d6000823e3d90fd5b6115c8915060203d602011610e1557610e078183613fd5565b38611488565b6115e891985060203d602011610e1557610e078183613fd5565b9689611444565b503461032457606036600319011261032457611609613de9565b602435906044356001600160a01b0380821691828103610d225761162b613f0b565b61163484614899565b9061163e85615554565b86116104b25782879216906040516339420b4560e11b8152602081600481865afa8015610d7d57611677918591611720575b50886140a4565b823b1561171c57604051639e79eaa560e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af18015611711576116f7575b50927f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda692856060936040519316835260208301526040820152a180f35b6117049094939294613fab565b610d8857909184386116ba565b6040513d84823e3d90fd5b8380fd5b611738915060203d8111610e1557610e078183613fd5565b38611670565b503461032457806003193601126103245760206001600160a01b0360cf5416604051908152f35b50346103245760403660031901126103245761177f613de9565b6117cd6060611794602435936103d9856146e0565b60ca546040516302bd8cf160e61b81526001600160a01b0383166004820152602481019590955260448501529291829081906064820190565b038173788fAA8ae18d3906eE93674D24331d2b4f0477225af4908115610e1c578390849261185a575b5060206001600160a01b0392936004604051809581936339420b4560e11b8352165afa918215610d7d579061183492916040959261184157506140a4565b9082519182526020820152f35b61119c91925060203d8111610e1557610e078183613fd5565b6001600160a01b039250602091506118889060603d8111611893575b6118808183613fd5565b810190614910565b9350909190506117f6565b503d611876565b5034610324576118a936613e3a565b91939094926118b6614101565b61013b54936001600160a01b0385163303610324575060008115610e27576118dd83614899565b94604051966339420b4560e11b88526020886004816001600160a01b038b165afa978815610e1c578398611ca9575b508761191791614473565b9660ff8260a01c1615611c7f5760ca54604080516367146f2960e01b8152600481018790526001600160a01b038a1660248201526044810192909252670de0b6b3a7640000606483015260b09390931c67ffffffffffffffff166084820152918260a48173788fAA8ae18d3906eE93674D24331d2b4f0477225af4978815610e1c5783928499611c56575b50826119ad91614789565b6001600160a01b038716835260d2602052604083206119cd8982546144ad565b90556119d988836144ad565b6001600160a01b0388163b1561171c57604051906313f3df3160e31b825260048201528381602481836001600160a01b038d165af18015610d7d57611c43575b5060405163961be39160e01b81526020816004816001600160a01b038c165afa908115610d7d578491611c24575b5060405163705727b560e01b81526020816004816001600160a01b038d165afa9081156111a35791611a9691662386f26fc10000938791611bf5575b506001600160781b038091169116614559565b10611be457611aa881611aae936140a4565b976140a4565b946001600160a01b0381163b1561128757604051639e79eaa560e01b81526001600160a01b0389811660048301526024820189905290918391839160449183918591165af1801561171157611bd0575b5050611b098161463e565b61013c90611b526fffffffffffffffffffffffffffffffff19611b318454938460801c6144ba565b60801b166001600160801b0380931690811780945561013d5460801c6144ba565b169060801c11611ba6577f9d7031d6c62aaf1dd8765c9c971388930abacb85982fbff0e4278551a6bffecb60406001600160a01b03808299835195865289602087015216941692a482519182526020820152f35b60046040517f6553dda6000000000000000000000000000000000000000000000000000000008152fd5b611bda8291613fab565b6103245780611afe565b60046040516316fde3bd60e21b8152fd5b611c17915060203d602011611c1d575b611c0f8183613fd5565b81019061453a565b38611a83565b503d611c05565b611c3d915060203d602011611c1d57611c0f8183613fd5565b38611a47565b611c4f90939193613fab565b9138611a19565b611c759199506119ad935060403d604011610dbc57610daa8183613fd5565b98909250826119a2565b60046040517f764c0c06000000000000000000000000000000000000000000000000000000008152fd5b611917919850611cc79060203d602011610e1557610e078183613fd5565b979061190c565b503461032457604036600319011261032457611ceb6103d9613de9565b9060ff61013b5460a81c1615610dc3576040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156117115790611d36918391611e26575b50602435614473565b60ca546101085460408051637b33fce760e01b81526001600160a01b0396909616600487015260248601939093526044850191909152670de0b6b3a764000060648501526001600160801b03808216608486015260809190911c60a4850152908360c48173788fAA8ae18d3906eE93674D24331d2b4f0477225af4928315611711578293611e03575b5061013c5490611dee611ddd85611dd8868587166144ad565b6144ad565b928261013d54169060801c906144ba565b1610610d3b5760409182519182526020820152f35b909250611e1f915060403d604011610dbc57610daa8183613fd5565b9138611dbf565b611e3e915060203d8111610e1557610e078183613fd5565b38611d2d565b503461032457806003193601126103245760206001600160a01b0360335416604051908152f35b5034610324578060031936011261032457611ebd906020611e8a61569b565b60ca5460405163d7454c5360e01b8152600481018490526024810192909252604482015293909190849081906064820190565b038173788fAA8ae18d3906eE93674D24331d2b4f0477225af4918215610d2f5791611ef3575b6040809350519182526020820152f35b90506020823d8211611f1f575b81611f0d60209383613fd5565b81010312610d22576040915190611ee3565b3d9150611f00565b503461032457608036600319011261032457611f41613de9565b60243590611f4d613e15565b91611f56614151565b611f5e614101565b611f6883826144d5565b60008115610e2757611f7983614899565b906001600160a01b039384831693604051956339420b4560e11b875260209485886004818a5afa9788156111a3578598612296575b50611fbb88604435614473565b9761013b5460ff8160a01c1615611c7f5760ca54604080516367146f2960e01b8152600481018890526001600160a01b0390951660248601526044850191909152670de0b6b3a7640000606485015260b09190911c67ffffffffffffffff166084840152828060a48101038173788fAA8ae18d3906eE93674D24331d2b4f0477225af498891561228b578692879a612262575b508261205991614789565b87865260d287526040862061206f8a82546144ad565b905561207b89836144ad565b883b1561225e57604051906313f3df3160e31b825260048201528681602481838d5af180156111c65761224b575b5060405163961be39160e01b815287816004818c5afa9081156111c657879161222e575b5060405163705727b560e01b815288816004818d5afa908115612223579161211191662386f26fc10000938a9161220657506001600160781b038091169116614559565b10611be45761212381612129936140a4565b986140a4565b95803b15610d8857604051639e79eaa560e01b81526001600160a01b038a166004820152602481018990529085908290604490829084905af180156111a3579085916121f2575b505061217b8261463e565b61013c906121a36fffffffffffffffffffffffffffffffff19611b318454938460801c6144ba565b169060801c11611ba6576040817f9d7031d6c62aaf1dd8765c9c971388930abacb85982fbff0e4278551a6bffecb92829a83519586528a8987015216941692a460016065558351928352820152f35b6121fb90613fab565b61171c578389612170565b61221d91508b3d8d11611c1d57611c0f8183613fd5565b8e611a83565b6040513d8a823e3d90fd5b6122459150883d8a11611c1d57611c0f8183613fd5565b8b6120cd565b61225790969196613fab565b948a6120a9565b8680fd5b612281919a50612059935060403d604011610dbc57610daa8183613fd5565b999092508261204e565b6040513d88823e3d90fd5b6122ae919850863d8811610e1557610e078183613fd5565b9689611fae565b50346103245780600319360112610324576122ce614885565b6122d6614101565b600160ff1960975416176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b5034610324578060031936011261032457602060cd54604051908152f35b503461032457604036600319011261032457612348613de9565b61235460243591614899565b61013b549060ff8260a01c1615611c7f5760ca54604080516367146f2960e01b8152600481018690526001600160a01b03841660248201526044810192909252670de0b6b3a7640000606483015260b09390931c67ffffffffffffffff166084820152918260a48173788fAA8ae18d3906eE93674D24331d2b4f0477225af4908115610d7d576001600160a01b0392859261245a575b506020906004604051809581936339420b4560e11b8352165afa918215610d7d5761241b93949261184157506140a4565b9061242d61013c54918260801c6144ad565b9061244961013d5460801c6001600160801b03809316906144ba565b1610611ba657602090604051908152f35b60209192506124779060403d604011610dbc57610daa8183613fd5565b5091906123ea565b503461032457806003193601126103245760206101085460801c604051908152f35b50346103245780600319360112610324576124ba613f0b565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610324578060031936011261032457602060cc54604051908152f35b503461032457806003193601126103245761253461569b565b61255161013c939293546001600160801b0381169060801c61458a565b9260ca5493670de0b6b3a764000090858201908183116125bd5792611ebd969261258861258361258f94602097614600565b6145a3565b05906145c7565b92604051958692839263d7454c5360e01b845286600485016040919493926060820195825260208201520152565b602486634e487b7160e01b81526011600452fd5b50346103245760c0366003190112610324576125eb613de9565b602435604435916125fa613e15565b9260a43590811591821503610d2257612611614151565b612619614101565b8315610e275761262885614711565b6126336084356148de565b61263c83614696565b61264583614899565b6001600160a01b039283821690612660878333888a166141a6565b15612724576020600491604051928380926339420b4560e11b82525afa90811561222357926126c7926126c189937ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b979660209c91612707575b5089614473565b9061492b565b945b6126f78660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b0390a36001606555604051908152f35b61271e91508c3d8111610e1557610e078183613fd5565b386126ba565b906127378460d199949895995416614711565b604051966339420b4560e11b88526020978881600481875afa9081156111a35761277593929161276e91879161290b575089614473565b309261492b565b60d1546040517f095ea7b30000000000000000000000000000000000000000000000000000000081529089166001600160a01b0316600482015260248101829052909690818160448187875af18015610d7d576128de575b508760d1541691604051907faf929a8000000000000000000000000000000000000000000000000000000000825260048201528181602481865afa918215610d7d5784926128b0575b5050813b15610d795782916064839260405194859384927f90210d7e00000000000000000000000000000000000000000000000000000000845260048401528b60248401528c891660448401525af180156117115761289c575b50506020947ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b916126c9565b6128a68291613fab565b6103245780612870565b90809250813d83116128d7575b6128c78183613fd5565b81010312610d2257513880612816565b503d6128bd565b6128fd90823d8411612904575b6128f58183613fd5565b810190614349565b50386127cd565b503d6128eb565b61271e91508b3d8d11610e1557610e078183613fd5565b50346103245760403660031901126103245761293f6103d9613de9565b906040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156117115760609161297c918491611e265750602435614473565b60ca5460405163f6ae404f60e01b81526001600160a01b03959095166004860152602485019190915260448401528260648173788fAA8ae18d3906eE93674D24331d2b4f0477225af48015612a045760409282916129e2575b5082519182526020820152f35b90506129fc915060603d8111611893576118808183613fd5565b9050386129d5565b50604051903d90823e3d90fd5b5034610324578060031936011261032457602060ce54604051908152f35b5034610324578060031936011261032457602060ff609754166040519015158152f35b503461032457606036600319011261032457600435612a6f613dff565b612a77614101565b6001600160a01b03908161013b5416330361171c571680835261013e60205260408320612aa58382546144ad565b90556040519182527f3273470b4a94285bb523353bdeb5ec3109c1be68c2ac15a7873d39452b9ed32a602060443593a380f35b503461032457612ae736613ef5565b90612af0613f0b565b670de0b6b3a7640000818301116104b257825b60d354811015612b575780612b4d6103de6001600160a01b03612b28612b529561482b565b90549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b61568c565b612b03565b506040907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5928060cc558160cd5582519182526020820152a180f35b503461032457604061034c61034636613ec0565b503461032457806003193601126103245760206001600160801b0361013c5416604051908152f35b5034610324578060031936011261032457602061013c5460801c604051908152f35b503461032457604036600319011261032457612c0b613dd3565b6024356001600160801b0380821692838303610d2257612c29613f0b565b1691670de0b6b3a76400008310908115612c6a575b506104b25761010891836fffffffffffffffffffffffffffffffff1984549360801b1692161717905580f35b9050821138612c3e565b503461032457602036600319011261032457612c8e613de9565b612c96613f0b565b612cb9816001600160a01b0380911660005260d460205260406000205416151590565b15612dac576001600160a01b038091169081835260d4602052604083208054906001600160a01b03198216905560d5602052604084205460d3549060001991828101908111612d98576108c185612d12612d379361482b565b90549060031b1c169283895260d56020528060408a205587895288604081205561482b565b905560d3548015612d845701612d4c8161482b565b8482549160031b1b1916905560d35516907f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8380a380f35b602486634e487b7160e01b81526031600452fd5b602487634e487b7160e01b81526011600452fd5b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b5034610324578060031936011261032457612def614885565b60975460ff811615612e2f5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461032457806003193601126103245760206001600160a01b0360d15416604051908152f35b5034610324576020366003190112610324577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e61137f612ed8613de9565b612ee0614885565b612ee981614696565b6001600160a01b031680845260c960209081526040808620805460ff191660011790558051928352339183019190915290918291820190565b503461032457612fe3612f6b612f3736613e77565b612f479793959496919297614151565b612f4f614101565b612f5883614711565b612f61866146e0565b6113f2878661474b565b612f7483614696565b612f7d83614899565b94612f8781614899565b96612f9d866001600160a01b03891633816141a6565b6000612fa88861584e565b606060ca54604051809781926302bd8cf160e61b83528b8d600485016040919493926001600160a01b03606083019616825260208201520152565b038173788fAA8ae18d3906eE93674D24331d2b4f0477225af4908115610d2f5780958192613473575b506001600160a01b0389163b1561032457604051632770a7eb60e21b81526001600160a01b038a1660048201819052602482018a905282908290604490829084905af1801561171157613464575b50906001600160a01b0389163b15611287576040516313f3df3160e31b8152600481018790528281602481836001600160a01b038f165af18015610e1c57908391613450575b50506001600160a01b0389163b156112875760405163d8b8785360e01b815260048101919091528181602481836001600160a01b038e165af180156117115790829161343c575b505060405163705727b560e01b81526020816004816001600160a01b038d165afa90811561171157906001600160781b0391839161341d575b501615159081613359575b50611be4576040516339420b4560e11b81526020816004816001600160a01b038d165afa80156115a3576131739261316b92600092613338575b50614473565b848989614b0d565b50604051906339420b4560e11b82526020826004816001600160a01b038d165afa9081156115a3576131ac9260009261331757506140a4565b956001600160a01b0388163b15610d2257604051639e79eaa560e01b81526001600160a01b0384811660048301526024820189905290986000918a9160449183918591165af19081156115a3576001600160a01b0398602092613308575b506004604051809a81936339420b4560e11b8352165afa9283156115a3576132667f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d1946001600160a01b039260209a6000926132e957506140a4565b921680957ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9604051806132b63394888b846040919493926001600160a01b03606083019616825260208201520152565b0390a3604080516001600160a01b03958616815294909116602085015283015260608201849052339180608081016126f7565b6133019192508b3d8d11610e1557610e078183613fd5565b908b61114a565b61331190613fab565b8961320a565b61333191925060203d602011610e1557610e078183613fd5565b908a61114a565b61335291925060203d602011610e1557610e078183613fd5565b908b613165565b60405163961be39160e01b815291506020826004816001600160a01b038d165afa918215612a045781926133fc575b5060405163705727b560e01b81526020816004816001600160a01b038e165afa918215610d2f576001600160781b036133d693662386f26fc1000095938293916133dd575b50169116614559565b108961312b565b6133f6915060203d602011611c1d57611c0f8183613fd5565b8e6133cd565b61341691925060203d602011611c1d57611c0f8183613fd5565b908a613388565b613436915060203d602011611c1d57611c0f8183613fd5565b8b613120565b61344590613fab565b61032457808a6130e7565b61345990613fab565b61128757818b6130a0565b61346d90613fab565b8a61305a565b90955061348e915060603d8111611893576118808183613fd5565b5090948a61300c565b5034610324578060031936011261032457602061013d5460801c604051908152f35b5034610324576020366003190112610324576004356001600160a01b038116809103611287576134e7613f0b565b61013b906001600160a01b031982541617905580f35b50346103245761353961350f36613e3a565b61351f9692959196949394614151565b613527614101565b613530856146e0565b6113f287614711565b61354282614899565b93613558846001600160a01b03871633816141a6565b604051906339420b4560e11b82526020826004816001600160a01b038a165afa918215610e1c57906135de9291849261393c575b508161359791614473565b6135a08761584e565b60ca546060600091604051809681926302bd8cf160e61b83528b8d600485016040919493926001600160a01b03606083019616825260208201520152565b038173788fAA8ae18d3906eE93674D24331d2b4f0477225af4918215612a045781948293613913575b508461361291614789565b6001600160a01b0388163b1561032457604051632770a7eb60e21b81526001600160a01b038916600482018190526024820189905282908290604490829084905af1801561171157613904575b50906001600160a01b0388163b15611287576040516313f3df3160e31b8152600481018590528281602481836001600160a01b038e165af18015610e1c579083916138f0575b50506001600160a01b0388163b15611287576040519063d8b8785360e01b825260048201528181602481836001600160a01b038d165af18015611711579082916138dc575b505060405163705727b560e01b908181526020816004816001600160a01b038d165afa908115610e1c57906001600160781b039184916138bd575b5016151591826137ff575b5050611be45761373f916140a4565b936001600160a01b0381163b1561128757604051639e79eaa560e01b81526001600160a01b0387811660048301526024820187905290918391839160449183918591165af18015611711576137eb575b50507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad96001600160a01b036020956126f76040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b6137f58291613fab565b610324578061378f565b60405163961be39160e01b81529250906020836004816001600160a01b038d165afa92831561171157829361389c575b506040519081526020816004816001600160a01b038d165afa918215610d2f576001600160781b0361387593662386f26fc10000959382939161387d5750169116614559565b103880613730565b613896915060203d602011611c1d57611c0f8183613fd5565b386133cd565b6138b691935060203d602011611c1d57611c0f8183613fd5565b913861382f565b6138d6915060203d602011611c1d57611c0f8183613fd5565b38613725565b6138e590613fab565b6103245780386136ea565b6138f990613fab565b6112875781386136a5565b61390d90613fab565b3861365f565b613612955061393191935060603d8111611893576118808183613fd5565b509094509184613607565b61359791925061395a9060203d602011610e1557610e078183613fd5565b919061358c565b50346103245760203660031901126103245761397b613e2b565b613983613f0b565b61013b907fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff75ff000000000000000000000000000000000000000000835492151560a81b16911617905580f35b5034610324576040366003190112610324576139ea613de9565b906024356139f6614885565b6001600160a01b03613a0784614899565b16604051632672469960e21b81526020908181600481865afa9081156111a3578591613b96575b50604051906339420b4560e11b82528282600481875afa91821561228b5790613a5e92918792613b775750614473565b60405163961be39160e01b81528281600481875afa90811561228b57613aad93926001600160781b0360d293613a9d938a91613b5a575b501690614878565b9184875252604085205490614878565b82116104b257803b15610d795782809160246040518094819362b64f3d60e51b83528760048401525af18015610e1c57613b29575b50604080516001600160a01b039094168452602084019190915290917f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff137918190810161137f565b91613b547f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff13793613fab565b91613ae2565b613b719150863d8811611c1d57611c0f8183613fd5565b38613a95565b613b8f919250843d8611610e1557610e078183613fd5565b9038613165565b90508181813d8311613bbc575b613bad8183613fd5565b81010312610d88575138613a2e565b503d613ba3565b5034610324576020366003190112610324577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d60206001600160a01b03613c08613de9565b613c10613f0b565b613c1981614711565b16806001600160a01b031960d154161760d155604051908152a180f35b5060c036600319011261032457613c4b613de9565b6001600160a01b036084356044358282168203610d885760a4359363ffffffff85168503613d4057602093613c7e614151565b613c86614101565b613c9084846144d5565b61013b54604051633a0cd16d60e11b81526001600160a01b03938416600482015260248035908201526044810194909452606480359085015293909116608483015263ffffffff9490941660a482015292839160c49183913491165af1908115611711578291613d0b575b6020826001606555604051908152f35b90506020813d8211613d38575b81613d2560209383613fd5565b8101031261128757602091505138613cfb565b3d9150613d18565b8580fd5b503461032457806003193601126103245760206001600160a01b0360d05416604051908152f35b5034610324578060031936011261032457602060ca54604051908152f35b503461032457602036600319011261032457613da3613dd3565b613dab613f0b565b6001600160801b0361013d91166fffffffffffffffffffffffffffffffff1982541617905580f35b600435906001600160801b0382168203610d2257565b600435906001600160a01b0382168203610d2257565b602435906001600160a01b0382168203610d2257565b606435906001600160a01b0382168203610d2257565b600435908115158203610d2257565b60a0906003190112610d22576001600160a01b03906004358281168103610d22579160243591604435916064359081168103610d22579060843590565b60c0906003190112610d22576001600160a01b036004358181168103610d2257916024358281168103610d22579160443591606435916084359081168103610d22579060a43590565b6060906003190112610d22576001600160a01b03906004358281168103610d2257916024359081168103610d22579060443590565b6040906003190112610d22576004359060243590565b6001600160a01b03603354163303613f1f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b67ffffffffffffffff8111613fbf57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117613fbf57604052565b9190826040910312610d22576020825192015190565b90816020910312610d22575160ff81168103610d225790565b60ff6011199116019060ff821161403957565b634e487b7160e01b600052601160045260246000fd5b60ff166012039060ff821161403957565b60ff16604d811161403957600a0a90565b8181029291811591840414171561403957565b811561408e570490565b634e487b7160e01b600052601260045260246000fd5b9060ff811660128110156140d15750906140c86140c36140ce9361404f565b614060565b90614084565b90565b6012106140dc575090565b906140ec6140c36140ce93614026565b90614071565b90816020910312610d22575190565b60ff6097541661410d57565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b600260655414614162576002606555565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b93929190604051602093848201927f23b872dd0000000000000000000000000000000000000000000000000000000084526001600160a01b039485809216602485015216604483015260648201526064815260a081019267ffffffffffffffff9682851088861117613fbf57169060e0810184811088821117613fbf576040528484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152600080938192519082855af1903d15614338573d968711614324576142959495966040519061428788601f19601f8401160183613fd5565b81528093873d92013e614361565b805190816142a257505050565b82806142b2938301019101614349565b156142ba5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b602483634e487b7160e01b81526041600452fd5b915061429593949550606091614361565b90816020910312610d2257518015158103610d225790565b919290156143c25750815115614375575090565b3b1561437e5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156143d55750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061441b575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506143f8565b60ff8116601281101561444e57506140c36140ce9161404f565b60121061445b5750600190565b6140c361446791614026565b801561408e5760010490565b9060ff811660128110156144925750906140ec6140c36140ce9361404f565b60121061449d575090565b906140c86140c36140ce93614026565b9190820180921161403957565b9190916001600160801b038080941691160191821161403957565b906144df90614711565b8015610e27573360005261013e80602052816040600020541061451057336000526020526040600020908154039055565b60046040517fdb52be33000000000000000000000000000000000000000000000000000000008152fd5b90816020910312610d2257516001600160781b0381168103610d225790565b90670de0b6b3a764000091828102928184041490151715614039576145856140ce928260011c906144ad565b614084565b8181039291600013801582851316918412161761403957565b906706f05b59d3b20000916000838201938412911290801582169115161761403957565b9190916000838201938412911290801582169115161761403957565b90670de0b6b3a76400009182810292818405149015171561403957565b818102929160008212600160ff1b82141661403957818405149015171561403957565b811561408e57600160ff1b8114600019831416614039570590565b6001600160801b0390818111614652571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b6001600160a01b031660005260c960205260ff604060002054166146b657565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b156146e757565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03161561472157565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b0390811691161461475f57565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b1161479057565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b156147c157565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60d3548110156148625760d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b634e487b7160e01b600052603260045260246000fd5b9190820391821161403957565b6001600160a01b0360cf54163303611be457565b6148bc816001600160a01b0380911660005260d460205260406000205416151590565b15612dac576001600160a01b0380911660005260d46020526040600020541690565b42116148e657565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b90816060910312610d22578051916040602083015192015190565b9193929061497d9061493c8461584e565b60ca5492600094606060409586518096819263f6ae404f60e01b83528786600485016040919493926001600160a01b03606083019616825260208201520152565b038173788fAA8ae18d3906eE93674D24331d2b4f0477225af4908115614ab85786948792614adf575b506001600160a01b03906149c486809b6149bf826146e0565b614789565b1692833b1561225e5785519062b64f3d60e51b82526004820152868160248183885af18015614ad557614ac2575b50823b15613d405784519063283c3d8160e21b82526004820152858160248183875af18015614ab857908691614aa4575b5050813b15610d885783517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019290925290919083908390604490829084905af1908115614a9b5750614a8a575050565b614a948291613fab565b6103245750565b513d84823e3d90fd5b614aad90613fab565b610d88578438614a23565b85513d88823e3d90fd5b614ace90969196613fab565b94386149f2565b86513d89823e3d90fd5b6001600160a01b039550614b0291925060603d8111611893576118808183613fd5565b5094909491906149a6565b90929391614b1c818584614cd3565b90948195614b2b818099614789565b6000926001600160a01b038093169485855260209360d285526040978887208481540190551690813b15613d40578591602483928a51948593849262b64f3d60e51b845260048401525af18015614cb857614ca5575b50843b1561171c578551916313f3df3160e31b8352016004820152828160248183885af18015614c8757908391614c91575b505083519263961be39160e01b84528184600481845afa938415614c87578394614c61575b50908060049286519384809263705727b560e01b82525afa928315614c565791614c219391662386f26fc10000959392614c39575b50506001600160781b038091169116614559565b10614c295750565b600490516316fde3bd60e21b8152fd5b614c4f9250803d10611c1d57611c0f8183613fd5565b3880614c0d565b8551903d90823e3d90fd5b8291945091614c7e600493823d8411611c1d57611c0f8183613fd5565b94919250614bd8565b85513d85823e3d90fd5b614c9a90613fab565b611287578138614bb3565b614cb190949194613fab565b9238614b81565b87513d87823e3d90fd5b600160ff1b81146140395760000390565b929192614ce1848383615185565b949091858360009586851215600014614e7d575050506001600160a01b03166040519163961be39160e01b83526020918284600481845afa938415614e2f578694614e57575b5090826004926040519384809263705727b560e01b82525afa8015614e2f57859484938892614e34575b50610108546040517f2f6599bb0000000000000000000000000000000000000000000000000000000081526001600160781b039283166004820152929091166024830152604482019290925260648101949094526001600160801b038116608485015260801c60a4840152828060c481015b038173788fAA8ae18d3906eE93674D24331d2b4f0477225af4938415614e2f5793614dfa575b505081614df591614878565b920190565b614df59293509081614e2092903d10614e28575b614e188183613fd5565b8101906140f2565b919038614de9565b503d614e0e565b6115a3565b614dc3919250614e5090853d8711611c1d57611c0f8183613fd5565b9190614d51565b600492919450614e748491823d8411611c1d57611c0f8183613fd5565b94919250614d27565b6001600160a01b039196929850809493955016906040519063961be39160e01b825260208083600481875afa928315614e2f578293614fa4575b50806004916001600160781b03809516956040519384809263705727b560e01b82525afa928315614e2f5792614f87575b505016614efe81614ef988856144ad565b614559565b6101085492906001600160801b03841610614f1d575050505050509190565b9091939550614f2e92949750614559565b9060801c1115614f5d57614f44614f4b91614cc2565b8483614fc6565b90614f5891938491614cd3565b905090565b60046040517f6158a9f8000000000000000000000000000000000000000000000000000000008152fd5b614f9d9250803d10611c1d57611c0f8183613fd5565b3880614ee8565b819350614fbf906004923d8611611c1d57611c0f8183613fd5565b9290614eb7565b6040516339420b4560e11b81529193926020926001600160a01b038316908481600481855afa908115614e2f5760009161513e575b5061500581614434565b946040519263705727b560e01b84528184600481845afa8015614e2f57600494600091615121575b508261505e61504e6150426101085460801c90565b6001600160801b031690565b6001600160781b0380941661515b565b926040519687809263961be39160e01b82525afa8015614e2f576150969561509194600092615104575b50501690614878565b6140a4565b9160019586836150b06150a98888614071565b8486614cd3565b5010614f5d579291905b8484106150d057505050506140ce929350614071565b90919293808501881c9088856150e98985028688614cd3565b50106150fb575050935b9291906150ba565b909550016150f3565b61511a9250803d10611c1d57611c0f8183613fd5565b3880615088565b6151389150833d8511611c1d57611c0f8183613fd5565b3861502d565b6151559150853d8711610e1557610e078183613fd5565b38614ffb565b9061516591614071565b6706f05b59d3b20000810180911161403957670de0b6b3a7640000900490565b90929160ca549060cb5492604051957fe02a44c60000000000000000000000000000000000000000000000000000000087526001600160a01b03809216600488015216602486015260448501526064840152670de0b6b3a7640000608484015260a483015260408260c48173788fAA8ae18d3906eE93674D24331d2b4f0477225af49182156115a357600090819361521c57509190565b905061523791925060403d8111610dbc57610daa8183613fd5565b9091565b92909192615249838261474b565b8315610e275761106661525b91614899565b916001600160a01b03938482166040958651926339420b4560e11b908185526020958686600481885afa9586156153a55789966152ac936152a492600092615386575b506153b0565b988991614cd3565b9092819516938951938385528785600481895afa94851561537b5788956000926152dc92849261536357506140a4565b9912615337575050600488518094819382525afa92831561532c576140ce9495965060009361530d575b50506140a4565b615324929350803d10610e1557610e078183613fd5565b903880615306565b86513d6000823e3d90fd5b93509350600488518094819382525afa92831561532c576140ce9495965060009361530d5750506140a4565b61119c919250883d8a11610e1557610e078183613fd5565b8b513d6000823e3d90fd5b61539e9192508a3d8c11610e1557610e078183613fd5565b903861529e565b8a513d6000823e3d90fd5b9060ff811660128110156153d55750906153cf6140c36140ce9361404f565b90614600565b6012106153e0575090565b906153f06140c36140ce93614026565b90614623565b6154076001600160a01b0391614899565b1660408051917f18160ddd00000000000000000000000000000000000000000000000000000000928381526020908181600481865afa90811561550c57600091615527575b50156155175782519363705727b560e01b85528185600481865afa94851561550c576000956154eb575b508190600485518095819382525afa9283156154e157506000926154a9575b50506001600160781b036140ce9216614559565b81819392933d83116154da575b6154c08183613fd5565b810103126103245750516001600160781b036140ce615495565b503d6154b6565b513d6000823e3d90fd5b8291955061550590823d8411611c1d57611c0f8183613fd5565b9490615476565b84513d6000823e3d90fd5b50505050670de0b6b3a764000090565b908282813d831161554d575b61553d8183613fd5565b810103126103245750513861544c565b503d615533565b6155656001600160a01b0391614899565b166040805190632672469960e21b82526020918281600481875afa90811561568157600091615654575b508151906339420b4560e11b82528382600481885afa91821561563157906155bf929160009261563c5750614473565b9181519363961be39160e01b85528185600481845afa94851561563157600095615602575b506001600160781b03929160d2916000525260002054921690030390565b60d2919550916156276001600160781b039493823d8411611c1d57611c0f8183613fd5565b95915091926155e4565b83513d6000823e3d90fd5b613b8f919250853d8711610e1557610e078183613fd5565b908382813d831161567a575b61566a8183613fd5565b810103126103245750513861558f565b503d615660565b82513d6000823e3d90fd5b60001981146140395760010190565b6000906000908160ca5490809160d354905b8184106156ba5750505050565b909192956156fb6156ca8861482b565b91906001600160a01b03928391549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b16604080519163961be39160e01b8352602060049181858481845afa948515615844578995615823575b50819084519384809263705727b560e01b82525afa92831561581a575087926157fd575b50506001600160781b038091169182156157f05716615767906145e3565b9681806002998a8205615779916145c7565b9061578391614623565b91829161578f916145c7565b98615799866145e3565b9082056157a5916145c7565b906157af91614623565b6157b89161458a565b6157c191614600565b6157ca906145a3565b670de0b6b3a764000090056157de916145c7565b956157e89061568c565b9291906156ad565b505050956157e89061568c565b6158139250803d10611c1d57611c0f8183613fd5565b3880615749565b513d89823e3d90fd5b8291955061583d90823d8411611c1d57611c0f8183613fd5565b9490615725565b84513d8b823e3d90fd5b6000906001600160a01b03908181169081845260d2602052604092838520549081158015615a8c575b615a845760cd54670de0b6b3a7640000908103908111612d98576158a16158a79160cc5490614878565b8361515b565b90816159ea575b505060cd546158bc9161515b565b90816158d1575b5050825260d2602052812055565b60ca54845163f6ae404f60e01b81526001600160a01b0392909216600483015260248201839052604482015260608160648173788fAA8ae18d3906eE93674D24331d2b4f0477225af49081156159bf5785916159c9575b50823b15610d885783519063283c3d8160e21b82526004820152848160248183875af180156159bf579085916159ab575b5050813b1561171c5782519062b64f3d60e51b82526004820152838160248183865af1801561599e57908491156158c35761599390613fab565b610d795782386158c3565b50505051903d90823e3d90fd5b6159b490613fab565b61171c578338615959565b84513d87823e3d90fd5b6159e1915060603d8111611893576118808183613fd5565b50905038615928565b60d05416908551906339420b4560e11b8252602082600481895afa918215615a7a5790615a1e9291899261184157506140a4565b90843b1561225e578551639e79eaa560e01b81526001600160a01b039190911660048201526024810191909152858160448183885af18015614ab857615a65575b806158ae565b94615a736158bc9296613fab565b9490615a5f565b87513d8a823e3d90fd5b505050505050565b5060ce54821061587756fea26469706673582212208c1e139891f7f346bb23942a39d0ec3a487870cc777410503d2ba0f3b7f6efcc64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c8062b0af4d14613d89578063017b829214613d6b578063017e7e5814613d4457806306a22c9014613c365780630705999d14613bc3578063070f81d9146139d057806307a237c51461396157806309a5fca3146134fd57806309f1fd3e146134b95780630aa42de0146134975780630f91f06f14612f225780633753b14a14612e9a5780633bd61ba814612e735780633f4ba83a14612dd65780634a5e42b114612c745780634a6fee0e14612bf15780634ba2adfc14612bcf5780634d31a07014612ba75780634fdd64e514612b9357806352f7c98814612ad857806353a284d014612a525780635c975abb14612a2f5780635cfe092e14612a1157806361858e23146129225780636281baef146125d157806362fad13b1461251b5780636922d5ca146124fd578063715018a6146124a157806374cbbdb91461247f5780637f809d291461232e578063815bfd29146123105780638456cb59146122b5578063873e73c314611f275780638a2dfe0914611e6b5780638da5cb5b14611e445780638de66a6814611cce5780638e4b4d601461189a578063907448ed1461176557806391cca3db1461173e57806393aeea02146115ef5780639908fc8b146113af5780639abacb41146112e95780639e4416b71461128b5780639ee08e32146111f5578063a4275ceb14611026578063aa6ca80814610f60578063bb0a8ad214610f34578063c2cd9b2b14610f0c578063cf1ba03a14610ebd578063d043c56514610e6f578063d0dd0e5614610e51578063d114444d146109dd578063d30ffeda146109b9578063d477f05f14610946578063da48999714610802578063dc3b7c8b146107d6578063e4a3011614610623578063e9249cc7146105f3578063f2fde38b1461054f578063f46901ed146104dc578063f57e84d514610454578063f89830e5146103e6578063f8b49e72146103b9578063fb7f5cc214610391578063fc8b9c0614610358578063fca8f308146103275763fffd5980146102fd57600080fd5b3461032457806003193601126103245760206001600160801b0361013d5416604051908152f35b80fd5b503461032457604061034c61034661033e36613ec0565b929092614cc2565b9161523b565b82519182526020820152f35b50346103245760203660031901126103245760406020916001600160a01b0361037f613de9565b16815261013e83522054604051908152f35b503461032457806003193601126103245760206001600160801b036101085416604051908152f35b5034610324576020366003190112610324576103e36103de6103d9613de9565b614899565b61584e565b80f35b503461032457602036600319011261032457610400613e2b565b610408613f0b565b61013b907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b16911617905580f35b503461032457602036600319011261032457600435610471613f0b565b670de0b6b3a764000081116104b2576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a180f35b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b5034610324576020366003190112610324577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206001600160a01b03610521613de9565b610529613f0b565b61053281614711565b16806001600160a01b031960d054161760d055604051908152a180f35b503461032457602036600319011261032457610569613de9565b610571613f0b565b6001600160a01b03811615610589576103e390613f63565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346103245760203660031901126103245760206001600160a01b0361061a6103d9613de9565b16604051908152f35b50346103245761063236613ef5565b9082549160ff8360081c1615918280936107c9575b80156107b2575b156107485760ff1984811660011786559383610737575b5061067f60ff865460081c1661067a816147ba565b6147ba565b61068833613f63565b8454936106a860ff8660081c1661069e816147ba565b60016065556147ba565b6097541660975560ca5560cb55670de0b6b3a764000060cd55336001600160a01b031960cf54161760cf556106ff575b506101087718fae27693b40000000000000000000014d1120d7b1600008282541617905580f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1386106d8565b61ffff191661010117855538610665565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b15801561064e5750600160ff85161461064e565b50600160ff851610610647565b50346103245760203660031901126103245760206107fa6107f5613de9565b6153f6565b604051908152f35b50346103245760403660031901126103245761081c613de9565b610824613dff565b61082c613f0b565b61083581614711565b61083e82614711565b610861826001600160a01b0380911660005260d460205260406000205416151590565b61091c576001600160a01b03809116911680835260d460205260408320826001600160a01b031982541617905560d35460d560205280604085205568010000000000000000811015610908576108df6108c182600185940160d35561482b565b819391549060031b916001600160a01b03809116831b921b19161790565b90557f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188380a380f35b602484634e487b7160e01b81526041600452fd5b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b5034610324576020366003190112610324577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206001600160a01b0361098b613de9565b610993613f0b565b61099c81614711565b16806001600160a01b031960cf54161760cf55604051908152a180f35b50346103245760203660031901126103245760206107fa6109d8613de9565b615554565b50610100366003190112610324576109f3613de9565b906109fc613dff565b906001600160a01b0360c4351660c43503610d225763ffffffff60e4351660e43503610d2257610a2a614151565b610a32614101565b60643515610e2757610a4383614696565b610a4e60c435614711565b610a5783614899565b91610a786064356001600160a01b038516336001600160a01b0388166141a6565b6040516339420b4560e11b81526020816004816001600160a01b0388165afa908115610e1c5790610ab3918491610ded575b50606435614473565b9060ff61013b5460a81c1615610dc35760ca546101085460408051637b33fce760e01b81526001600160a01b0388166004820152602481018690526044810193909352670de0b6b3a764000060648401526001600160801b038216608484015260809190911c60a48301529094908560c48173__$64c1823877363665b8c9607be5e0799ede$__5af4928315610d7d5784958594610d8c575b50610b5986608435614789565b6001600160a01b0360d05416855261013e60205260408520610b7c8582546144ad565b90556001600160a01b0382163b15610d88576001600160a01b03916024869283604051958694859362b64f3d60e51b85526004850152165af18015610d7d57908491610d65575b5050610bd7610bd283866144ad565b61463e565b61013c846001600160801b03610c2081610bf58554968288166144ba565b1693846fffffffffffffffffffffffffffffffff198716178091558261013d54169060801c906144ba565b1692161711610d3b5761013b54604051633a0cd16d60e11b81526001600160a01b039283166004820152604480356024830152810186905260a48035606483015260c480358516608484015260e43563ffffffff1691830191909152909260209284929183913491165af1928315610d2f5792610cf3575b50816060946001600160a01b0360405191606435835286602084015216907f8900881feb21943c006d040b3a8510f7780104f915ac29f448cdaf220007887f60403392a4600160655560405192835260208301526040820152f35b9391506020843d602011610d27575b81610d0f60209383613fd5565b81010312610d2257606093519193610c98565b600080fd5b3d9150610d02565b604051903d90823e3d90fd5b60046040517f8c68dbbe000000000000000000000000000000000000000000000000000000008152fd5b610d6e90613fab565b610d79578238610bc3565b8280fd5b6040513d86823e3d90fd5b8480fd5b909350610db291955060403d604011610dbc575b610daa8183613fd5565b810190613ff7565b9490949238610b4c565b503d610da0565b60046040517f7a44a0f5000000000000000000000000000000000000000000000000000000008152fd5b610e0f915060203d602011610e15575b610e078183613fd5565b81019061400d565b38610aaa565b503d610dfd565b6040513d85823e3d90fd5b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b5034610324578060031936011261032457602060cb54604051908152f35b5034610324576020366003190112610324577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b7066020600435610eaf613f0b565b8060ce55604051908152a180f35b503461032457602036600319011261032457610ed7613dd3565b610edf613f0b565b61013d906001600160801b036fffffffffffffffffffffffffffffffff1983549260801b16911617905580f35b503461032457806003193601126103245760206001600160a01b0361013b5416604051908152f35b5034610324578060031936011261032457602067ffffffffffffffff61013b5460b01c16604051908152f35b5034610324578060031936011261032457604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b8181106110095750505084610fc2910385613fd5565b60405193838594850191818652518092526040850193925b828110610fe957505050500390f35b83516001600160a01b031685528695509381019392810192600101610fda565b82546001600160a01b031684529286019260019283019201610fac565b503461032457606036600319011261032457611040613de9565b611048613dff565b9061106c6110666044359261105c846146e0565b6103d9858261474b565b92614899565b9060ca5460cb546101085491604051957fb94f2f9a0000000000000000000000000000000000000000000000000000000087526001600160a01b0380911695866004890152169384602488015260448701526064860152670de0b6b3a7640000608486015260a48501526001600160801b03811660c485015260801c60e48401526040836101048173__$64c1823877363665b8c9607be5e0799ede$__5af4928315610d7d57849085946111d1575b5060405193846339420b4560e11b9485825281600460209889935afa80156111c65786926111509289926111ae575b506140a4565b9360046040518095819382525afa9182156111a3579061117992916040969261118457506140a4565b918351928352820152f35b61119c919250853d8711610e1557610e078183613fd5565b903861114a565b6040513d87823e3d90fd5b61119c919250843d8611610e1557610e078183613fd5565b6040513d89823e3d90fd5b90506111ed91935060403d604011610dbc57610daa8183613fd5565b92903861111b565b50346103245760203660031901126103245760043567ffffffffffffffff8116808203610d7957670de0b6b3a76400009061122e613f0b565b10156112875761013b907fffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffff7dffffffffffffffff0000000000000000000000000000000000000000000083549260b01b16911617905580f35b5080fd5b5034610324576020366003190112610324576004356112a8613f0b565b670de0b6b3a764000081116104b2576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a180f35b503461032457602036600319011261032457611303613de9565b61130b614885565b6001600160a01b03811680835260c960205260ff6040842054161561138557825260c960209081526040808420805460ff1916905580516001600160a01b03909316835233918301919091527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c9190819081015b0390a180f35b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b5034610324576113be36613e77565b6113cd95919395949294614151565b6113d5614101565b6113df838361474b565b8515610e27576113f7906113f285614711565b6148de565b61140081614696565b61140981614899565b9261141383614899565b95604051956339420b4560e11b8088526020886004816001600160a01b038d165afa9788156115a3576000986115ce575b506001600160a01b038716966040519182526020826004818b5afa9283156115a3576114a261149b6114a8938c938e6114958661148f6114b99b8d9b6000916115af575b508b614473565b93614473565b92614b0d565b9b906140a4565b996140a4565b96336001600160a01b0387166141a6565b6001600160a01b0387163b15610d225760006040518098639e79eaa560e01b825281836001600160a01b03826115098d8a60048401602090939291936001600160a01b0360408201951681520152565b0393165af19182156115a357611580876001600160a01b039360409a7f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d196611594575b508a519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a3600160655582519182526020820152f35b61159d90613fab565b8b61154c565b6040513d6000823e3d90fd5b6115c8915060203d602011610e1557610e078183613fd5565b38611488565b6115e891985060203d602011610e1557610e078183613fd5565b9689611444565b503461032457606036600319011261032457611609613de9565b602435906044356001600160a01b0380821691828103610d225761162b613f0b565b61163484614899565b9061163e85615554565b86116104b25782879216906040516339420b4560e11b8152602081600481865afa8015610d7d57611677918591611720575b50886140a4565b823b1561171c57604051639e79eaa560e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af18015611711576116f7575b50927f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda692856060936040519316835260208301526040820152a180f35b6117049094939294613fab565b610d8857909184386116ba565b6040513d84823e3d90fd5b8380fd5b611738915060203d8111610e1557610e078183613fd5565b38611670565b503461032457806003193601126103245760206001600160a01b0360cf5416604051908152f35b50346103245760403660031901126103245761177f613de9565b6117cd6060611794602435936103d9856146e0565b60ca546040516302bd8cf160e61b81526001600160a01b0383166004820152602481019590955260448501529291829081906064820190565b038173__$64c1823877363665b8c9607be5e0799ede$__5af4908115610e1c578390849261185a575b5060206001600160a01b0392936004604051809581936339420b4560e11b8352165afa918215610d7d579061183492916040959261184157506140a4565b9082519182526020820152f35b61119c91925060203d8111610e1557610e078183613fd5565b6001600160a01b039250602091506118889060603d8111611893575b6118808183613fd5565b810190614910565b9350909190506117f6565b503d611876565b5034610324576118a936613e3a565b91939094926118b6614101565b61013b54936001600160a01b0385163303610324575060008115610e27576118dd83614899565b94604051966339420b4560e11b88526020886004816001600160a01b038b165afa978815610e1c578398611ca9575b508761191791614473565b9660ff8260a01c1615611c7f5760ca54604080516367146f2960e01b8152600481018790526001600160a01b038a1660248201526044810192909252670de0b6b3a7640000606483015260b09390931c67ffffffffffffffff166084820152918260a48173__$64c1823877363665b8c9607be5e0799ede$__5af4978815610e1c5783928499611c56575b50826119ad91614789565b6001600160a01b038716835260d2602052604083206119cd8982546144ad565b90556119d988836144ad565b6001600160a01b0388163b1561171c57604051906313f3df3160e31b825260048201528381602481836001600160a01b038d165af18015610d7d57611c43575b5060405163961be39160e01b81526020816004816001600160a01b038c165afa908115610d7d578491611c24575b5060405163705727b560e01b81526020816004816001600160a01b038d165afa9081156111a35791611a9691662386f26fc10000938791611bf5575b506001600160781b038091169116614559565b10611be457611aa881611aae936140a4565b976140a4565b946001600160a01b0381163b1561128757604051639e79eaa560e01b81526001600160a01b0389811660048301526024820189905290918391839160449183918591165af1801561171157611bd0575b5050611b098161463e565b61013c90611b526fffffffffffffffffffffffffffffffff19611b318454938460801c6144ba565b60801b166001600160801b0380931690811780945561013d5460801c6144ba565b169060801c11611ba6577f9d7031d6c62aaf1dd8765c9c971388930abacb85982fbff0e4278551a6bffecb60406001600160a01b03808299835195865289602087015216941692a482519182526020820152f35b60046040517f6553dda6000000000000000000000000000000000000000000000000000000008152fd5b611bda8291613fab565b6103245780611afe565b60046040516316fde3bd60e21b8152fd5b611c17915060203d602011611c1d575b611c0f8183613fd5565b81019061453a565b38611a83565b503d611c05565b611c3d915060203d602011611c1d57611c0f8183613fd5565b38611a47565b611c4f90939193613fab565b9138611a19565b611c759199506119ad935060403d604011610dbc57610daa8183613fd5565b98909250826119a2565b60046040517f764c0c06000000000000000000000000000000000000000000000000000000008152fd5b611917919850611cc79060203d602011610e1557610e078183613fd5565b979061190c565b503461032457604036600319011261032457611ceb6103d9613de9565b9060ff61013b5460a81c1615610dc3576040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156117115790611d36918391611e26575b50602435614473565b60ca546101085460408051637b33fce760e01b81526001600160a01b0396909616600487015260248601939093526044850191909152670de0b6b3a764000060648501526001600160801b03808216608486015260809190911c60a4850152908360c48173__$64c1823877363665b8c9607be5e0799ede$__5af4928315611711578293611e03575b5061013c5490611dee611ddd85611dd8868587166144ad565b6144ad565b928261013d54169060801c906144ba565b1610610d3b5760409182519182526020820152f35b909250611e1f915060403d604011610dbc57610daa8183613fd5565b9138611dbf565b611e3e915060203d8111610e1557610e078183613fd5565b38611d2d565b503461032457806003193601126103245760206001600160a01b0360335416604051908152f35b5034610324578060031936011261032457611ebd906020611e8a61569b565b60ca5460405163d7454c5360e01b8152600481018490526024810192909252604482015293909190849081906064820190565b038173__$64c1823877363665b8c9607be5e0799ede$__5af4918215610d2f5791611ef3575b6040809350519182526020820152f35b90506020823d8211611f1f575b81611f0d60209383613fd5565b81010312610d22576040915190611ee3565b3d9150611f00565b503461032457608036600319011261032457611f41613de9565b60243590611f4d613e15565b91611f56614151565b611f5e614101565b611f6883826144d5565b60008115610e2757611f7983614899565b906001600160a01b039384831693604051956339420b4560e11b875260209485886004818a5afa9788156111a3578598612296575b50611fbb88604435614473565b9761013b5460ff8160a01c1615611c7f5760ca54604080516367146f2960e01b8152600481018890526001600160a01b0390951660248601526044850191909152670de0b6b3a7640000606485015260b09190911c67ffffffffffffffff166084840152828060a48101038173__$64c1823877363665b8c9607be5e0799ede$__5af498891561228b578692879a612262575b508261205991614789565b87865260d287526040862061206f8a82546144ad565b905561207b89836144ad565b883b1561225e57604051906313f3df3160e31b825260048201528681602481838d5af180156111c65761224b575b5060405163961be39160e01b815287816004818c5afa9081156111c657879161222e575b5060405163705727b560e01b815288816004818d5afa908115612223579161211191662386f26fc10000938a9161220657506001600160781b038091169116614559565b10611be45761212381612129936140a4565b986140a4565b95803b15610d8857604051639e79eaa560e01b81526001600160a01b038a166004820152602481018990529085908290604490829084905af180156111a3579085916121f2575b505061217b8261463e565b61013c906121a36fffffffffffffffffffffffffffffffff19611b318454938460801c6144ba565b169060801c11611ba6576040817f9d7031d6c62aaf1dd8765c9c971388930abacb85982fbff0e4278551a6bffecb92829a83519586528a8987015216941692a460016065558351928352820152f35b6121fb90613fab565b61171c578389612170565b61221d91508b3d8d11611c1d57611c0f8183613fd5565b8e611a83565b6040513d8a823e3d90fd5b6122459150883d8a11611c1d57611c0f8183613fd5565b8b6120cd565b61225790969196613fab565b948a6120a9565b8680fd5b612281919a50612059935060403d604011610dbc57610daa8183613fd5565b999092508261204e565b6040513d88823e3d90fd5b6122ae919850863d8811610e1557610e078183613fd5565b9689611fae565b50346103245780600319360112610324576122ce614885565b6122d6614101565b600160ff1960975416176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b5034610324578060031936011261032457602060cd54604051908152f35b503461032457604036600319011261032457612348613de9565b61235460243591614899565b61013b549060ff8260a01c1615611c7f5760ca54604080516367146f2960e01b8152600481018690526001600160a01b03841660248201526044810192909252670de0b6b3a7640000606483015260b09390931c67ffffffffffffffff166084820152918260a48173__$64c1823877363665b8c9607be5e0799ede$__5af4908115610d7d576001600160a01b0392859261245a575b506020906004604051809581936339420b4560e11b8352165afa918215610d7d5761241b93949261184157506140a4565b9061242d61013c54918260801c6144ad565b9061244961013d5460801c6001600160801b03809316906144ba565b1610611ba657602090604051908152f35b60209192506124779060403d604011610dbc57610daa8183613fd5565b5091906123ea565b503461032457806003193601126103245760206101085460801c604051908152f35b50346103245780600319360112610324576124ba613f0b565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610324578060031936011261032457602060cc54604051908152f35b503461032457806003193601126103245761253461569b565b61255161013c939293546001600160801b0381169060801c61458a565b9260ca5493670de0b6b3a764000090858201908183116125bd5792611ebd969261258861258361258f94602097614600565b6145a3565b05906145c7565b92604051958692839263d7454c5360e01b845286600485016040919493926060820195825260208201520152565b602486634e487b7160e01b81526011600452fd5b50346103245760c0366003190112610324576125eb613de9565b602435604435916125fa613e15565b9260a43590811591821503610d2257612611614151565b612619614101565b8315610e275761262885614711565b6126336084356148de565b61263c83614696565b61264583614899565b6001600160a01b039283821690612660878333888a166141a6565b15612724576020600491604051928380926339420b4560e11b82525afa90811561222357926126c7926126c189937ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b979660209c91612707575b5089614473565b9061492b565b945b6126f78660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b0390a36001606555604051908152f35b61271e91508c3d8111610e1557610e078183613fd5565b386126ba565b906127378460d199949895995416614711565b604051966339420b4560e11b88526020978881600481875afa9081156111a35761277593929161276e91879161290b575089614473565b309261492b565b60d1546040517f095ea7b30000000000000000000000000000000000000000000000000000000081529089166001600160a01b0316600482015260248101829052909690818160448187875af18015610d7d576128de575b508760d1541691604051907faf929a8000000000000000000000000000000000000000000000000000000000825260048201528181602481865afa918215610d7d5784926128b0575b5050813b15610d795782916064839260405194859384927f90210d7e00000000000000000000000000000000000000000000000000000000845260048401528b60248401528c891660448401525af180156117115761289c575b50506020947ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b916126c9565b6128a68291613fab565b6103245780612870565b90809250813d83116128d7575b6128c78183613fd5565b81010312610d2257513880612816565b503d6128bd565b6128fd90823d8411612904575b6128f58183613fd5565b810190614349565b50386127cd565b503d6128eb565b61271e91508b3d8d11610e1557610e078183613fd5565b50346103245760403660031901126103245761293f6103d9613de9565b906040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156117115760609161297c918491611e265750602435614473565b60ca5460405163f6ae404f60e01b81526001600160a01b03959095166004860152602485019190915260448401528260648173__$64c1823877363665b8c9607be5e0799ede$__5af48015612a045760409282916129e2575b5082519182526020820152f35b90506129fc915060603d8111611893576118808183613fd5565b9050386129d5565b50604051903d90823e3d90fd5b5034610324578060031936011261032457602060ce54604051908152f35b5034610324578060031936011261032457602060ff609754166040519015158152f35b503461032457606036600319011261032457600435612a6f613dff565b612a77614101565b6001600160a01b03908161013b5416330361171c571680835261013e60205260408320612aa58382546144ad565b90556040519182527f3273470b4a94285bb523353bdeb5ec3109c1be68c2ac15a7873d39452b9ed32a602060443593a380f35b503461032457612ae736613ef5565b90612af0613f0b565b670de0b6b3a7640000818301116104b257825b60d354811015612b575780612b4d6103de6001600160a01b03612b28612b529561482b565b90549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b61568c565b612b03565b506040907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5928060cc558160cd5582519182526020820152a180f35b503461032457604061034c61034636613ec0565b503461032457806003193601126103245760206001600160801b0361013c5416604051908152f35b5034610324578060031936011261032457602061013c5460801c604051908152f35b503461032457604036600319011261032457612c0b613dd3565b6024356001600160801b0380821692838303610d2257612c29613f0b565b1691670de0b6b3a76400008310908115612c6a575b506104b25761010891836fffffffffffffffffffffffffffffffff1984549360801b1692161717905580f35b9050821138612c3e565b503461032457602036600319011261032457612c8e613de9565b612c96613f0b565b612cb9816001600160a01b0380911660005260d460205260406000205416151590565b15612dac576001600160a01b038091169081835260d4602052604083208054906001600160a01b03198216905560d5602052604084205460d3549060001991828101908111612d98576108c185612d12612d379361482b565b90549060031b1c169283895260d56020528060408a205587895288604081205561482b565b905560d3548015612d845701612d4c8161482b565b8482549160031b1b1916905560d35516907f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8380a380f35b602486634e487b7160e01b81526031600452fd5b602487634e487b7160e01b81526011600452fd5b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b5034610324578060031936011261032457612def614885565b60975460ff811615612e2f5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461032457806003193601126103245760206001600160a01b0360d15416604051908152f35b5034610324576020366003190112610324577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e61137f612ed8613de9565b612ee0614885565b612ee981614696565b6001600160a01b031680845260c960209081526040808620805460ff191660011790558051928352339183019190915290918291820190565b503461032457612fe3612f6b612f3736613e77565b612f479793959496919297614151565b612f4f614101565b612f5883614711565b612f61866146e0565b6113f2878661474b565b612f7483614696565b612f7d83614899565b94612f8781614899565b96612f9d866001600160a01b03891633816141a6565b6000612fa88861584e565b606060ca54604051809781926302bd8cf160e61b83528b8d600485016040919493926001600160a01b03606083019616825260208201520152565b038173__$64c1823877363665b8c9607be5e0799ede$__5af4908115610d2f5780958192613473575b506001600160a01b0389163b1561032457604051632770a7eb60e21b81526001600160a01b038a1660048201819052602482018a905282908290604490829084905af1801561171157613464575b50906001600160a01b0389163b15611287576040516313f3df3160e31b8152600481018790528281602481836001600160a01b038f165af18015610e1c57908391613450575b50506001600160a01b0389163b156112875760405163d8b8785360e01b815260048101919091528181602481836001600160a01b038e165af180156117115790829161343c575b505060405163705727b560e01b81526020816004816001600160a01b038d165afa90811561171157906001600160781b0391839161341d575b501615159081613359575b50611be4576040516339420b4560e11b81526020816004816001600160a01b038d165afa80156115a3576131739261316b92600092613338575b50614473565b848989614b0d565b50604051906339420b4560e11b82526020826004816001600160a01b038d165afa9081156115a3576131ac9260009261331757506140a4565b956001600160a01b0388163b15610d2257604051639e79eaa560e01b81526001600160a01b0384811660048301526024820189905290986000918a9160449183918591165af19081156115a3576001600160a01b0398602092613308575b506004604051809a81936339420b4560e11b8352165afa9283156115a3576132667f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d1946001600160a01b039260209a6000926132e957506140a4565b921680957ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9604051806132b63394888b846040919493926001600160a01b03606083019616825260208201520152565b0390a3604080516001600160a01b03958616815294909116602085015283015260608201849052339180608081016126f7565b6133019192508b3d8d11610e1557610e078183613fd5565b908b61114a565b61331190613fab565b8961320a565b61333191925060203d602011610e1557610e078183613fd5565b908a61114a565b61335291925060203d602011610e1557610e078183613fd5565b908b613165565b60405163961be39160e01b815291506020826004816001600160a01b038d165afa918215612a045781926133fc575b5060405163705727b560e01b81526020816004816001600160a01b038e165afa918215610d2f576001600160781b036133d693662386f26fc1000095938293916133dd575b50169116614559565b108961312b565b6133f6915060203d602011611c1d57611c0f8183613fd5565b8e6133cd565b61341691925060203d602011611c1d57611c0f8183613fd5565b908a613388565b613436915060203d602011611c1d57611c0f8183613fd5565b8b613120565b61344590613fab565b61032457808a6130e7565b61345990613fab565b61128757818b6130a0565b61346d90613fab565b8a61305a565b90955061348e915060603d8111611893576118808183613fd5565b5090948a61300c565b5034610324578060031936011261032457602061013d5460801c604051908152f35b5034610324576020366003190112610324576004356001600160a01b038116809103611287576134e7613f0b565b61013b906001600160a01b031982541617905580f35b50346103245761353961350f36613e3a565b61351f9692959196949394614151565b613527614101565b613530856146e0565b6113f287614711565b61354282614899565b93613558846001600160a01b03871633816141a6565b604051906339420b4560e11b82526020826004816001600160a01b038a165afa918215610e1c57906135de9291849261393c575b508161359791614473565b6135a08761584e565b60ca546060600091604051809681926302bd8cf160e61b83528b8d600485016040919493926001600160a01b03606083019616825260208201520152565b038173__$64c1823877363665b8c9607be5e0799ede$$64c1823877363665b8c9607be5e0799ede$__5af4908115614ab85786948792614adf575b506001600160a01b03906149c486809b6149bf826146e0565b614789565b1692833b1561225e5785519062b64f3d60e51b82526004820152868160248183885af18015614ad557614ac2575b50823b15613d405784519063283c3d8160e21b82526004820152858160248183875af18015614ab857908691614aa4575b5050813b15610d885783517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019290925290919083908390604490829084905af1908115614a9b5750614a8a575050565b614a948291613fab565b6103245750565b513d84823e3d90fd5b614aad90613fab565b610d88578438614a23565b85513d88823e3d90fd5b614ace90969196613fab565b94386149f2565b86513d89823e3d90fd5b6001600160a01b039550614b0291925060603d8111611893576118808183613fd5565b5094909491906149a6565b90929391614b1c818584614cd3565b90948195614b2b818099614789565b6000926001600160a01b038093169485855260209360d285526040978887208481540190551690813b15613d40578591602483928a51948593849262b64f3d60e51b845260048401525af18015614cb857614ca5575b50843b1561171c578551916313f3df3160e31b8352016004820152828160248183885af18015614c8757908391614c91575b505083519263961be39160e01b84528184600481845afa938415614c87578394614c61575b50908060049286519384809263705727b560e01b82525afa928315614c565791614c219391662386f26fc10000959392614c39575b50506001600160781b038091169116614559565b10614c295750565b600490516316fde3bd60e21b8152fd5b614c4f9250803d10611c1d57611c0f8183613fd5565b3880614c0d565b8551903d90823e3d90fd5b8291945091614c7e600493823d8411611c1d57611c0f8183613fd5565b94919250614bd8565b85513d85823e3d90fd5b614c9a90613fab565b611287578138614bb3565b614cb190949194613fab565b9238614b81565b87513d87823e3d90fd5b600160ff1b81146140395760000390565b929192614ce1848383615185565b949091858360009586851215600014614e7d575050506001600160a01b03166040519163961be39160e01b83526020918284600481845afa938415614e2f578694614e57575b5090826004926040519384809263705727b560e01b82525afa8015614e2f57859484938892614e34575b50610108546040517f2f6599bb0000000000000000000000000000000000000000000000000000000081526001600160781b039283166004820152929091166024830152604482019290925260648101949094526001600160801b038116608485015260801c60a4840152828060c481015b038173__$64c1823877363665b8c9607be5e0799ede$__5af4938415614e2f5793614dfa575b505081614df591614878565b920190565b614df59293509081614e2092903d10614e28575b614e188183613fd5565b8101906140f2565b919038614de9565b503d614e0e565b6115a3565b614dc3919250614e5090853d8711611c1d57611c0f8183613fd5565b9190614d51565b600492919450614e748491823d8411611c1d57611c0f8183613fd5565b94919250614d27565b6001600160a01b039196929850809493955016906040519063961be39160e01b825260208083600481875afa928315614e2f578293614fa4575b50806004916001600160781b03809516956040519384809263705727b560e01b82525afa928315614e2f5792614f87575b505016614efe81614ef988856144ad565b614559565b6101085492906001600160801b03841610614f1d575050505050509190565b9091939550614f2e92949750614559565b9060801c1115614f5d57614f44614f4b91614cc2565b8483614fc6565b90614f5891938491614cd3565b905090565b60046040517f6158a9f8000000000000000000000000000000000000000000000000000000008152fd5b614f9d9250803d10611c1d57611c0f8183613fd5565b3880614ee8565b819350614fbf906004923d8611611c1d57611c0f8183613fd5565b9290614eb7565b6040516339420b4560e11b81529193926020926001600160a01b038316908481600481855afa908115614e2f5760009161513e575b5061500581614434565b946040519263705727b560e01b84528184600481845afa8015614e2f57600494600091615121575b508261505e61504e6150426101085460801c90565b6001600160801b031690565b6001600160781b0380941661515b565b926040519687809263961be39160e01b82525afa8015614e2f576150969561509194600092615104575b50501690614878565b6140a4565b9160019586836150b06150a98888614071565b8486614cd3565b5010614f5d579291905b8484106150d057505050506140ce929350614071565b90919293808501881c9088856150e98985028688614cd3565b50106150fb575050935b9291906150ba565b909550016150f3565b61511a9250803d10611c1d57611c0f8183613fd5565b3880615088565b6151389150833d8511611c1d57611c0f8183613fd5565b3861502d565b6151559150853d8711610e1557610e078183613fd5565b38614ffb565b9061516591614071565b6706f05b59d3b20000810180911161403957670de0b6b3a7640000900490565b90929160ca549060cb5492604051957fe02a44c60000000000000000000000000000000000000000000000000000000087526001600160a01b03809216600488015216602486015260448501526064840152670de0b6b3a7640000608484015260a483015260408260c48173__$64c1823877363665b8c9607be5e0799ede$__5af49182156115a357600090819361521c57509190565b905061523791925060403d8111610dbc57610daa8183613fd5565b9091565b92909192615249838261474b565b8315610e275761106661525b91614899565b916001600160a01b03938482166040958651926339420b4560e11b908185526020958686600481885afa9586156153a55789966152ac936152a492600092615386575b506153b0565b988991614cd3565b9092819516938951938385528785600481895afa94851561537b5788956000926152dc92849261536357506140a4565b9912615337575050600488518094819382525afa92831561532c576140ce9495965060009361530d575b50506140a4565b615324929350803d10610e1557610e078183613fd5565b903880615306565b86513d6000823e3d90fd5b93509350600488518094819382525afa92831561532c576140ce9495965060009361530d5750506140a4565b61119c919250883d8a11610e1557610e078183613fd5565b8b513d6000823e3d90fd5b61539e9192508a3d8c11610e1557610e078183613fd5565b903861529e565b8a513d6000823e3d90fd5b9060ff811660128110156153d55750906153cf6140c36140ce9361404f565b90614600565b6012106153e0575090565b906153f06140c36140ce93614026565b90614623565b6154076001600160a01b0391614899565b1660408051917f18160ddd00000000000000000000000000000000000000000000000000000000928381526020908181600481865afa90811561550c57600091615527575b50156155175782519363705727b560e01b85528185600481865afa94851561550c576000956154eb575b508190600485518095819382525afa9283156154e157506000926154a9575b50506001600160781b036140ce9216614559565b81819392933d83116154da575b6154c08183613fd5565b810103126103245750516001600160781b036140ce615495565b503d6154b6565b513d6000823e3d90fd5b8291955061550590823d8411611c1d57611c0f8183613fd5565b9490615476565b84513d6000823e3d90fd5b50505050670de0b6b3a764000090565b908282813d831161554d575b61553d8183613fd5565b810103126103245750513861544c565b503d615533565b6155656001600160a01b0391614899565b166040805190632672469960e21b82526020918281600481875afa90811561568157600091615654575b508151906339420b4560e11b82528382600481885afa91821561563157906155bf929160009261563c5750614473565b9181519363961be39160e01b85528185600481845afa94851561563157600095615602575b506001600160781b03929160d2916000525260002054921690030390565b60d2919550916156276001600160781b039493823d8411611c1d57611c0f8183613fd5565b95915091926155e4565b83513d6000823e3d90fd5b613b8f919250853d8711610e1557610e078183613fd5565b908382813d831161567a575b61566a8183613fd5565b810103126103245750513861558f565b503d615660565b82513d6000823e3d90fd5b60001981146140395760010190565b6000906000908160ca5490809160d354905b8184106156ba5750505050565b909192956156fb6156ca8861482b565b91906001600160a01b03928391549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b16604080519163961be39160e01b8352602060049181858481845afa948515615844578995615823575b50819084519384809263705727b560e01b82525afa92831561581a575087926157fd575b50506001600160781b038091169182156157f05716615767906145e3565b9681806002998a8205615779916145c7565b9061578391614623565b91829161578f916145c7565b98615799866145e3565b9082056157a5916145c7565b906157af91614623565b6157b89161458a565b6157c191614600565b6157ca906145a3565b670de0b6b3a764000090056157de916145c7565b956157e89061568c565b9291906156ad565b505050956157e89061568c565b6158139250803d10611c1d57611c0f8183613fd5565b3880615749565b513d89823e3d90fd5b8291955061583d90823d8411611c1d57611c0f8183613fd5565b9490615725565b84513d8b823e3d90fd5b6000906001600160a01b03908181169081845260d2602052604092838520549081158015615a8c575b615a845760cd54670de0b6b3a7640000908103908111612d98576158a16158a79160cc5490614878565b8361515b565b90816159ea575b505060cd546158bc9161515b565b90816158d1575b5050825260d2602052812055565b60ca54845163f6ae404f60e01b81526001600160a01b0392909216600483015260248201839052604482015260608160648173__$64c1823877363665b8c9607be5e0799ede$__5af49081156159bf5785916159c9575b50823b15610d885783519063283c3d8160e21b82526004820152848160248183875af180156159bf579085916159ab575b5050813b1561171c5782519062b64f3d60e51b82526004820152838160248183865af1801561599e57908491156158c35761599390613fab565b610d795782386158c3565b50505051903d90823e3d90fd5b6159b490613fab565b61171c578338615959565b84513d87823e3d90fd5b6159e1915060603d8111611893576118808183613fd5565b50905038615928565b60d05416908551906339420b4560e11b8252602082600481895afa918215615a7a5790615a1e9291899261184157506140a4565b90843b1561225e578551639e79eaa560e01b81526001600160a01b039190911660048201526024810191909152858160448183885af18015614ab857615a65575b806158ae565b94615a736158bc9296613fab565b9490615a5f565b87513d8a823e3d90fd5b505050505050565b5060ce54821061587756fea26469706673582212208c1e139891f7f346bb23942a39d0ec3a487870cc777410503d2ba0f3b7f6efcc64736f6c63430008120033",
  "libraries": {
    "CoreV3": "0x788fAA8ae18d3906eE93674D24331d2b4f047722"
  },
  "devdoc": {
    "details": "Refer to note of `swapTokensForTokensCrossChain` for procedure of a cross-chain swapTODO: write documents for protection mechanism and implement it Note: All variables are 18 decimals, except from that of parameters of external functions and underlying tokens",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PausedAsset(address,address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "SwapCreditForTokens(uint256,address,uint256,address,uint256)": {
        "details": "`trackingId` 0 means the swap is on the same chain. Otherwise it is a cross-chain swap with `trackingId`"
      },
      "SwapTokensForCredit(address,address,uint256,uint256,uint256)": {
        "details": "`trackingId` 0 means the swap is on the same chain. Otherwise a cross-chain swap with `trackingId` is followed"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "UnpausedAsset(address,address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "addressOfAsset(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "details": "Asset needs to be created and added to pool before any operation. This function assumes tax free token.",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "exchangeRate(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "xr": "The exchange rate of LP token"
        }
      },
      "mintFee(address)": {
        "params": {
          "token": "The address of the token to collect fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "pauseAsset(address)": {
        "details": "pause asset, restricting deposit and swap operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quoteAmountIn(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromToken": "The initial ERC20 token",
          "toAmount": "The given output amount",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "amountIn": "The input amount required",
          "haircut": "The haircut that would be applied"
        }
      },
      "quotePotentialDeposit(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "amount": "The amount to deposit",
          "token": "The token to deposit by user"
        },
        "returns": {
          "liquidity": "The potential liquidity user would receive",
          "reward": "reward"
        }
      },
      "quotePotentialSwap(address,address,int256)": {
        "details": "In reverse quote, the haircut is in the `fromAsset`",
        "params": {
          "fromAmount": "The given input amount",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "fee": "The fee that would be applied"
        }
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "details": "take into account high cov ratio fee"
      },
      "removeAsset(address)": {
        "details": "Can only be called by owner",
        "params": {
          "token": "The address of token to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAmpFactor(uint256)": {
        "params": {
          "ampFactor_": "new pool's amplification factor"
        }
      },
      "setDev(address)": {
        "params": {
          "dev_": "new contract dev address"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "feeTo_": "new fee beneficiary"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "details": "This function assumes tax free token.",
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "swapTokensForTokensCrossChain(address,address,uint256,uint256,uint256,uint256,address,uint32)": {
        "details": "Steps: 1. Swap `fromToken` for credit; 2. Notify relayer to bridge credit to the `toChain`; 3. Relayer invoke `completeSwapCreditForTokens` to swap credit for `toToken` in the `toChain` Note: haircut returned here is just high cov ratio fee."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTipBucket(address,uint256,address)": {
        "details": "unit of amount should be in WAD"
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "unpauseAsset(address)": {
        "details": "unpause asset, enabling deposit and swap operations"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity to be withdrawn (in fromToken decimal)",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "toAmount": "The total amount withdrawn"
        }
      }
    },
    "title": "Mega Pool",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "POOL__CREDIT_NOT_ENOUGH()": [
        {
          "notice": "Errors"
        }
      ]
    },
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "AssetRemoved(address,address)": {
        "notice": "An event thats emitted when asset is removed from Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "SwapCreditForTokens(uint256,address,uint256,address,uint256)": {
        "notice": "Event that is emitted when credit is swapped into token"
      },
      "SwapTokensForCredit(address,address,uint256,uint256,uint256)": {
        "notice": "Event that is emitted when token is swapped into credit"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "adaptor()": {
        "notice": "Storage"
      },
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "addressOfAsset(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "ampFactor()": {
        "notice": "Amplification factor"
      },
      "completeSwapCreditForTokens(address,uint256,uint256,address,uint256)": {
        "notice": "Swap credit to tokens; should be called by the adaptor"
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "dev()": {
        "notice": "Dev address"
      },
      "exchangeRate(address)": {
        "notice": "Returns the exchange rate of the LP token"
      },
      "fillPool(address,uint256)": {
        "notice": "Move fund from tip bucket to the pool to keep r* = 1 as error accumulates unit of amount should be in WAD"
      },
      "getTokens()": {
        "notice": "Return list of tokens in the pool"
      },
      "globalEquilCovRatioWithCredit()": {
        "notice": "Calculate the r* and invariant when all credits are settled"
      },
      "haircutRate()": {
        "notice": "Haircut rate"
      },
      "initialize(uint256,uint256)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpDividendRatio()": {
        "notice": "LP dividend ratio : the ratio of haircut that should distribute to LP"
      },
      "maximumNetMintedCredit()": {
        "notice": "the maximum allowed amount of net mint credit. `totalCreditMinted - totalCreditBurned` should be smaller than this value"
      },
      "mintCredit(uint256,address,uint256)": {
        "notice": "In case `completeSwapCreditForTokens` fails, adaptor should mint credit to the respective user"
      },
      "mintFee(address)": {
        "notice": "Send fee collected to the fee beneficiary"
      },
      "mintFeeThreshold()": {
        "notice": "The threshold to mint fee (unit: WAD)"
      },
      "quoteAmountIn(address,address,int256)": {
        "notice": "Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)"
      },
      "quotePotentialDeposit(address,uint256)": {
        "notice": "Quotes potential deposit from pool"
      },
      "quotePotentialSwap(address,address,int256)": {
        "notice": "Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage)."
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "quoteSwapCreditForTokens(address,uint256)": {
        "notice": "Read-only functions"
      },
      "removeAsset(address)": {
        "notice": "Removes asset from asset struct"
      },
      "retentionRatio()": {
        "notice": "Retention ratio: the ratio of haircut that should stay in the pool"
      },
      "setAmpFactor(uint256)": {
        "notice": "Changes the pools amplification factor. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setFeeTo(address)": {
        "notice": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setMintFeeThreshold(uint256)": {
        "notice": "Set min fee to mint"
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "swapCreditForTokens(address,uint256,uint256,address)": {
        "notice": "Swap credit for tokens (same chain)"
      },
      "swapCreditForTokensCrossChain(address,uint256,uint256,uint256,address,uint32)": {
        "notice": "Bridge credit and swap it for `toToken` in the `toChain` Nonce must be non-zero, otherwise wormhole will revert the message"
      },
      "swapTokensForTokensCrossChain(address,address,uint256,uint256,uint256,uint256,address,uint32)": {
        "notice": "Initiate a cross chain swap"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "notice": "Enables withdrawing liquidity from an asset using LP from a different asset"
      }
    },
    "notice": "Mega Pool is able to handle cross-chain swaps in addition to ordinary swap within its own chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 825,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 441,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14999,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_pausedAssets",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20646,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "ampFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 20649,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "haircutRate",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 20652,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "retentionRatio",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 20655,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "lpDividendRatio",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 20658,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "mintFeeThreshold",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 20661,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "dev",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 20663,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "feeTo",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 20665,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "masterWombat",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 20671,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_feeCollected",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_contract(IAsset)6620,t_uint256)"
      },
      {
        "astId": 20675,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_assets",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(AssetMap)20633_storage"
      },
      {
        "astId": 20677,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_used1",
        "offset": 0,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 20679,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_used2",
        "offset": 16,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 20683,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "gap",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13649,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "startCovRatio",
        "offset": 0,
        "slot": "264",
        "type": "t_uint128"
      },
      {
        "astId": 13651,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "endCovRatio",
        "offset": 16,
        "slot": "264",
        "type": "t_uint128"
      },
      {
        "astId": 13655,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "gap",
        "offset": 0,
        "slot": "265",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14073,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "adaptor",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IAdaptor)6531"
      },
      {
        "astId": 14075,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "swapCreditForTokensEnabled",
        "offset": 20,
        "slot": "315",
        "type": "t_bool"
      },
      {
        "astId": 14077,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "swapTokensForCreditEnabled",
        "offset": 21,
        "slot": "315",
        "type": "t_bool"
      },
      {
        "astId": 14079,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "crossChainHaircut",
        "offset": 22,
        "slot": "315",
        "type": "t_uint64"
      },
      {
        "astId": 14081,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "totalCreditMinted",
        "offset": 0,
        "slot": "316",
        "type": "t_uint128"
      },
      {
        "astId": 14083,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "totalCreditBurned",
        "offset": 16,
        "slot": "316",
        "type": "t_uint128"
      },
      {
        "astId": 14086,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "maximumNetMintedCredit",
        "offset": 0,
        "slot": "317",
        "type": "t_uint128"
      },
      {
        "astId": 14088,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "maximumNetBurnedCredit",
        "offset": 16,
        "slot": "317",
        "type": "t_uint128"
      },
      {
        "astId": 14092,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "creditBalance",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14096,
        "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
        "label": "_gap",
        "offset": 0,
        "slot": "319",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAdaptor)6531": {
        "encoding": "inplace",
        "label": "contract IAdaptor",
        "numberOfBytes": "20"
      },
      "t_contract(IAsset)6620": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IAsset)6620)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IAsset)",
        "numberOfBytes": "32",
        "value": "t_contract(IAsset)6620"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IAsset)6620,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAsset)6620",
        "label": "mapping(contract IAsset => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetMap)20633_storage": {
        "encoding": "inplace",
        "label": "struct PoolV3.AssetMap",
        "members": [
          {
            "astId": 20623,
            "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 20628,
            "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_contract(IAsset)6620)"
          },
          {
            "astId": 20632,
            "contract": "contracts/wombat-core/pool/MegaPool.sol:MegaPool",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}