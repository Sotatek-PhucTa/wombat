{
  "address": "0xc7F34a37056C04688AD2A4F9312e9467647be593",
  "abi": [
    {
      "inputs": [],
      "name": "CORE_UNDERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_AMOUNT_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INTERPOOL_SWAP_NOT_SUPPORTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_SAME_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnpausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAD_I",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ampFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "assetOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDividendRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "pauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "key",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAmpFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev_",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpDividendRatio_",
          "type": "uint256"
        }
      ],
      "name": "setLpDividendRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFeeThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setMintFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setRetentionRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tipBucketBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "unpauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x181935b3d6689d8eb851fb01c1d7a62a89b8d040e2c17b55e714b3f4f5ffe216",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0xc7F34a37056C04688AD2A4F9312e9467647be593",
    "transactionIndex": 1,
    "gasUsed": "4390529",
    "logsBloom": "0x
    "blockHash": "0xad968578fe43b6cf7444d2e45aecef6d3f7b13c7ab0bafc60be3a4bf434e7c67",
    "transactionHash": "0x181935b3d6689d8eb851fb01c1d7a62a89b8d040e2c17b55e714b3f4f5ffe216",
    "logs": [],
    "blockNumber": 17152949,
    "cumulativeGasUsed": "4411529",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "049a0ee0f91226b9ce82376caea11def",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CORE_UNDERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_AMOUNT_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INTERPOOL_SWAP_NOT_SUPPORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_SAME_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD_I\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"assetOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"pauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"}],\"name\":\"setAmpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendRatio_\",\"type\":\"uint256\"}],\"name\":\"setLpDividendRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeThreshold_\",\"type\":\"uint256\"}],\"name\":\"setMintFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setRetentionRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tipBucketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"unpauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The main entry-point of Wombat protocol Note: All variables are 18 decimals, except from that of underlying tokens\",\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"assetOf(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,address,uint256)\":{\"details\":\"Asset needs to be created and added to pool before any operation\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"exchangeRate(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"exchangeRate\":\"exchangeRate\"}},\"mintFee(address)\":{\"params\":{\"token\":\"The address of the token to collect fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"pauseAsset(address)\":{\"details\":\"pause asset, restricting deposit and swap operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quotePotentialDeposit(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"amount\":\"The amount to deposit\",\"token\":\"The token to deposit by user\"},\"returns\":{\"liquidity\":\"The potential liquidity user would receive\",\"reward\":\"reward\"}},\"quotePotentialSwap(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromAmount\":\"The amount to quote\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"fee\":\"The fee that would be applied\"}},\"removeAsset(address)\":{\"details\":\"Can only be called by owner\",\"params\":{\"key\":\"The address of token to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAmpFactor(uint256)\":{\"params\":{\"ampFactor_\":\"new pool's amplification factor\"}},\"setDev(address)\":{\"params\":{\"dev_\":\"new contract dev address\"}},\"setFeeTo(address)\":{\"params\":{\"feeTo_\":\"new fee beneficiary\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"setRetentionRatio(uint256)\":{\"params\":{\"retentionRatio_\":\"new pool's retentionRatio\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"unpauseAsset(address)\":{\"details\":\"unpause asset, enabling deposit and swap operations\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"details\":\"Also, coverage ratio of toAsset must be higher than 1 after withdrawal for this to be accepted\",\"params\":{\"deadline\":\"The deadline to be respected\",\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity to be withdrawn (in fromToken decimal)\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"toAmount\":\"The total amount withdrawn\"}}},\"title\":\"Pool\",\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"AssetRemoved(address,address)\":{\"notice\":\"An event thats emitted when asset is removed from Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"ampFactor()\":{\"notice\":\"Amplification factor\"},\"assetOf(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"deposit(address,uint256,address,uint256)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"dev()\":{\"notice\":\"Dev address\"},\"exchangeRate(address)\":{\"notice\":\"Returns the exchange rate of the LP token\"},\"haircutRate()\":{\"notice\":\"Haircut rate\"},\"initialize(uint256,uint256)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpDividendRatio()\":{\"notice\":\"LP dividend ratio : the ratio of haircut that should distribute to LP\"},\"mintFee(address)\":{\"notice\":\"Send fee collected to the fee beneficiary\"},\"mintFeeThreshold()\":{\"notice\":\"The threshold to mint fee (unit: WAD)\"},\"quotePotentialDeposit(address,uint256)\":{\"notice\":\"Quotes potential deposit from pool\"},\"quotePotentialSwap(address,address,int256)\":{\"notice\":\"Quotes potential outcome of a swap given current state, taking in account slippage and haircut\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"removeAsset(address)\":{\"notice\":\"Removes asset from asset struct\"},\"retentionRatio()\":{\"notice\":\"Retention ratio: the ratio of haircut that should stay in the pool\"},\"setAmpFactor(uint256)\":{\"notice\":\"Changes the pools amplification factor. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setFeeTo(address)\":{\"notice\":\"Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setMintFeeThreshold(uint256)\":{\"notice\":\"Set min fee to mint\"},\"setRetentionRatio(uint256)\":{\"notice\":\"Changes the pools retentionRatio. Can only be set by the contract owner.\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Enables withdrawing liquidity from an asset using LP from a different asset\"}},\"notice\":\"Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/Pool.sol\":\"Pool\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2090a1bdc5dae67d61035fb105459b0f20ebd1188f8ed38b95fb6495589cc9f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x57e153cdc803037ecf68a916c6d7eb38d7e4ddbc7ceb6e37c0bee45a5aef9709\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view virtual returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x7bc4646bdf9a2ddaedf41f750d683c38aa74f2cadb4277c5962430c9be6ecf83\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10**(18 - d);\\n        } else if (d > 18) {\\n            return (x / (10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * 10**(d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0x51417e72256ca0707b00b7668f04bdab6709e75e5535090d5076279d5ee84e20\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity 0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10**18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10**(18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10**(d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x16bc25a0054eff8b96d18130be57e1462b0c8efb31d457acccb90aa4fbf8a33e\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV2\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n */\\ncontract CoreV2 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n    int256 public constant WAD_I = 10**18;\\n    uint256 public constant WAD = 10**18;\\n\\n    error CORE_UNDERFLOW();\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function _swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) internal pure returns (uint256 quote) {\\n        int256 D = _invariantFunc(Lx, Ax.wdiv(Lx), Ly, Ay.wdiv(Ly), A);\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = _coefficientFunc(Lx, Ly, rx_, D, A);\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        if (Dy < 0) {\\n            quote = uint256(-Dy);\\n        } else {\\n            quote = uint256(Dy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        int256 sqrtResult = ((b * b) + (c * 4 * WAD_I)).sqrt();\\n        return (sqrtResult - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(\\n        int256 Lx,\\n        int256 rx,\\n        int256 Ly,\\n        int256 ry,\\n        int256 A\\n    ) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(\\n        int256 Lx,\\n        int256 Ly,\\n        int256 rx_,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256) {\\n        return Lx.wmul(rx_ - A.wdiv(rx_)).wdiv(Ly) - D.wdiv(Ly);\\n    }\\n\\n    /**\\n     * @return v positive value indicates a reward and negative value indicates a fee\\n     */\\n    function depositRewardImpl(\\n        int256 D,\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 v) {\\n        if (L_i == 0) {\\n            // early return in case of div of 0\\n            return 0;\\n        }\\n        if (delta_i + SL == 0) {\\n            return L_i - A_i;\\n        }\\n\\n        int256 r_i_ = _targetedCovRatio(SL, delta_i, A_i, L_i, D, A);\\n        v = A_i + delta_i - (L_i + delta_i).wmul(r_i_);\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt();\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + (l).sqrt()).wdiv(A) / 2;\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = _equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _equilCovRatio(\\n        int256 D,\\n        int256 SL,\\n        int256 A\\n    ) internal pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    function _newEquilCovRatio(\\n        int256 er,\\n        int256 SL,\\n        int256 delta_i\\n    ) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(\\n        int256 er_,\\n        int256 A,\\n        int256 SL,\\n        int256 delta_i\\n    ) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice TODO (if any) from Yellow Paper (Haircut).\\n     * @dev Applies haircut rate to amount\\n     * @param amount The amount that will receive the discount\\n     * @param rate The rate to be applied\\n     * @return The result of operation.\\n     */\\n    function _haircut(uint256 amount, uint256 rate) internal pure returns (uint256) {\\n        return amount.wmul(rate);\\n    }\\n}\\n\",\"keccak256\":\"0xb6b8d1da577430669a25208d5e93da732b0d440d7b3e94b226f6314c740f1aeb\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PausableAssets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.5;\\n\\n/**\\n * @title PausableAssets\\n * @notice Handles assets pause and unpause of Wombat protocol.\\n * @dev Allows pausing and unpausing of deposit and swap operations\\n */\\ncontract PausableAssets {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event PausedAsset(address asset, address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event UnpausedAsset(address asset, address account);\\n\\n    mapping(address => bool) private _pausedAssets;\\n\\n    error WOMBAT_ASSET_ALREADY_PAUSED();\\n    error WOMBAT_ASSET_NOT_PAUSED();\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function requireAssetNotPaused(address asset) internal {\\n        if (_pausedAssets[asset]) revert WOMBAT_ASSET_ALREADY_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function requireAssetPaused(address asset) internal {\\n        if (!_pausedAssets[asset]) revert WOMBAT_ASSET_NOT_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Triggers paused state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function _pauseAsset(address asset) internal {\\n        requireAssetNotPaused(asset);\\n        _pausedAssets[asset] = true;\\n        emit PausedAsset(asset, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function _unpauseAsset(address asset) internal {\\n        requireAssetPaused(asset);\\n        _pausedAssets[asset] = false;\\n        emit UnpausedAsset(asset, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x59dc5c30f6e91772cec3d42de09eeeb45e3d6e0d3d05dc68cdd321b3ceb78471\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './CoreV2.sol';\\nimport '../interfaces/IAsset.sol';\\nimport './PausableAssets.sol';\\n\\n/**\\n * @title Pool\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n * Note: All variables are 18 decimals, except from that of underlying tokens\\n */\\ncontract Pool is\\n    Initializable,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PausableAssets,\\n    CoreV2\\n{\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    /// @notice Asset Map struct holds assets\\n    struct AssetMap {\\n        address[] keys;\\n        mapping(address => IAsset) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    /* Storage */\\n\\n    /// @notice Amplification factor\\n    uint256 public ampFactor;\\n\\n    /// @notice Haircut rate\\n    uint256 public haircutRate;\\n\\n    /// @notice Retention ratio: the ratio of haircut that should stay in the pool\\n    uint256 public retentionRatio;\\n\\n    /// @notice LP dividend ratio : the ratio of haircut that should distribute to LP\\n    uint256 public lpDividendRatio;\\n\\n    /// @notice The threshold to mint fee (unit: WAD)\\n    uint256 public mintFeeThreshold;\\n\\n    /// @notice Dev address\\n    address public dev;\\n\\n    address public feeTo;\\n\\n    /// @notice Dividend collected by each asset (unit: WAD)\\n    mapping(IAsset => uint256) private _feeCollected;\\n\\n    /// @notice A record of assets inside Pool\\n    AssetMap private _assets;\\n\\n    /* Events */\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when asset is removed from Pool\\n    event AssetRemoved(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    /* Errors */\\n\\n    error WOMBAT_FORBIDDEN();\\n    error WOMBAT_EXPIRED();\\n\\n    error WOMBAT_ASSET_NOT_EXISTS();\\n    error WOMBAT_ASSET_ALREADY_EXIST();\\n\\n    error WOMBAT_ZERO_ADDRESS();\\n    error WOMBAT_ZERO_AMOUNT();\\n    error WOMBAT_ZERO_LIQUIDITY();\\n    error WOMBAT_INVALID_VALUE();\\n    error WOMBAT_SAME_ADDRESS();\\n    error WOMBAT_AMOUNT_TOO_LOW();\\n    error WOMBAT_CASH_NOT_ENOUGH();\\n    error WOMBAT_INTERPOOL_SWAP_NOT_SUPPORTED();\\n\\n    /* Pesudo modifiers to safe gas */\\n\\n    function _checkLiquidity(uint256 liquidity) private view {\\n        if (liquidity == 0) revert WOMBAT_ZERO_LIQUIDITY();\\n    }\\n\\n    function _checkAddress(address to) private view {\\n        if (to == address(0)) revert WOMBAT_ZERO_ADDRESS();\\n    }\\n\\n    function _checkSameAddress(address from, address to) private view {\\n        if (from == to) revert WOMBAT_SAME_ADDRESS();\\n    }\\n\\n    function _checkAmount(uint256 minAmt, uint256 amt) private view {\\n        if (minAmt > amt) revert WOMBAT_AMOUNT_TOO_LOW();\\n    }\\n\\n    function _checkAccount(address from, address to) private view {\\n        if (from != to) revert WOMBAT_INTERPOOL_SWAP_NOT_SUPPORTED();\\n    }\\n\\n    function _ensure(uint256 deadline) private view {\\n        if (deadline < block.timestamp) revert WOMBAT_EXPIRED();\\n    }\\n\\n    function _onlyDev() private view {\\n        if (dev != msg.sender) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /* Construtor and setters */\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) external initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        ampFactor = ampFactor_;\\n        haircutRate = haircutRate_;\\n\\n        lpDividendRatio = WAD;\\n\\n        dev = msg.sender;\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external nonReentrant {\\n        _onlyDev();\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external nonReentrant {\\n        _onlyDev();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev pause asset, restricting deposit and swap operations\\n     */\\n    function pauseAsset(address asset) external nonReentrant {\\n        _onlyDev();\\n        _pauseAsset(asset);\\n    }\\n\\n    /**\\n     * @dev unpause asset, enabling deposit and swap operations\\n     */\\n    function unpauseAsset(address asset) external nonReentrant {\\n        _onlyDev();\\n        _unpauseAsset(asset);\\n    }\\n\\n    // Setters //\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev_ new contract dev address\\n     */\\n    function setDev(address dev_) external onlyOwner {\\n        _checkAddress(dev_);\\n        dev = dev_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools amplification factor. Can only be set by the contract owner.\\n     * @param ampFactor_ new pool's amplification factor\\n     */\\n    function setAmpFactor(uint256 ampFactor_) external onlyOwner {\\n        if (ampFactor_ > WAD) revert WOMBAT_INVALID_VALUE(); // ampFactor_ should not be set bigger than 1\\n        ampFactor = ampFactor_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        if (haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE(); // haircutRate_ should not be set bigger than 1\\n        haircutRate = haircutRate_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools retentionRatio. Can only be set by the contract owner.\\n     * @param retentionRatio_ new pool's retentionRatio\\n     */\\n    function setRetentionRatio(uint256 retentionRatio_) external onlyOwner {\\n        if (retentionRatio_ + lpDividendRatio > WAD) revert WOMBAT_INVALID_VALUE();\\n        mintAllFee();\\n        retentionRatio = retentionRatio_;\\n    }\\n\\n    function setLpDividendRatio(uint256 lpDividendRatio_) external onlyOwner {\\n        if (retentionRatio + lpDividendRatio_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        mintAllFee();\\n        lpDividendRatio = lpDividendRatio_;\\n    }\\n\\n    /**\\n     * @notice Changes the fee beneficiary. Can only be set by the contract owner.\\n     * This value cannot be set to 0 to avoid unsettled fee.\\n     * @param feeTo_ new fee beneficiary\\n     */\\n    function setFeeTo(address feeTo_) external onlyOwner {\\n        if (feeTo_ == address(0)) revert WOMBAT_INVALID_VALUE();\\n        feeTo = feeTo_;\\n    }\\n\\n    /**\\n     * @notice Set min fee to mint\\n     */\\n    function setMintFeeThreshold(uint256 mintFeeThreshold_) external onlyOwner {\\n        mintFeeThreshold = mintFeeThreshold_;\\n    }\\n\\n    /* Assets */\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner nonReentrant {\\n        _checkAddress(asset);\\n        _checkAddress(token);\\n\\n        if (_containsAsset(token)) revert WOMBAT_ASSET_ALREADY_EXIST();\\n        _assets.values[token] = IAsset(asset);\\n        _assets.indexOf[token] = _assets.keys.length;\\n        _assets.keys.push(token);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Removes asset from asset struct\\n     * @dev Can only be called by owner\\n     * @param key The address of token to remove\\n     */\\n    function removeAsset(address key) external onlyOwner {\\n        if (!_containsAsset(key)) revert WOMBAT_ASSET_NOT_EXISTS();\\n\\n        address asset = address(_getAsset(key));\\n        delete _assets.values[key];\\n\\n        uint256 index = _assets.indexOf[key];\\n        uint256 lastIndex = _assets.keys.length - 1;\\n        address lastKey = _assets.keys[lastIndex];\\n\\n        _assets.indexOf[lastKey] = index;\\n        delete _assets.indexOf[key];\\n\\n        _assets.keys[index] = lastKey;\\n        _assets.keys.pop();\\n\\n        emit AssetRemoved(key, asset);\\n    }\\n\\n    /**\\n     * @notice get length of asset list\\n     * @return the size of the asset list\\n     */\\n    function _sizeOfAssetList() private view returns (uint256) {\\n        return _assets.keys.length;\\n    }\\n\\n    /**\\n     * @notice Gets asset with token address key\\n     * @param key The address of token\\n     * @return the corresponding asset in state\\n     */\\n    function _getAsset(address key) private view returns (IAsset) {\\n        return _assets.values[key];\\n    }\\n\\n    /**\\n     * @notice Gets key (address) at index\\n     * @param index the index\\n     * @return the key of index\\n     */\\n    function _getKeyAtIndex(uint256 index) private view returns (address) {\\n        return _assets.keys[index];\\n    }\\n\\n    /**\\n     * @notice Looks if the asset is contained by the list\\n     * @param token The address of token to look for\\n     * @return bool true if the asset is in asset list, false otherwise\\n     */\\n    function _containsAsset(address token) private view returns (bool) {\\n        return _assets.values[token] != IAsset(address(0));\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) private view returns (IAsset) {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        return _assets.values[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function assetOf(address token) external view returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function _exactDepositToInEquil(IAsset asset, uint256 amount)\\n        internal\\n        view\\n        returns (\\n            uint256 lpTokenToMint,\\n            uint256 liabilityToMint,\\n            uint256 reward\\n        )\\n    {\\n        liabilityToMint = exactDepositLiquidityInEquilImpl(\\n            int256(amount),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        reward = liabilityToMint - amount;\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        IAsset asset,\\n        uint256 amount,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        // collect fee before deposit\\n        _mintFee(asset);\\n\\n        uint256 liabilityToMint;\\n        (liquidity, liabilityToMint, ) = _exactDepositToInEquil(asset, amount);\\n\\n        _checkLiquidity(liquidity);\\n\\n        asset.addCash(amount);\\n        asset.addLiability(liabilityToMint);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        address to,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        if (amount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(token);\\n\\n        IAsset asset = _assetOf(token);\\n        IERC20(token).safeTransferFrom(address(msg.sender), address(asset), amount);\\n        liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), to);\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential deposit from pool\\n     * @dev To be used by frontend\\n     * @param token The token to deposit by user\\n     * @param amount The amount to deposit\\n     * @return liquidity The potential liquidity user would receive\\n     * @return reward\\n     */\\n    function quotePotentialDeposit(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256 liquidity, uint256 reward)\\n    {\\n        IAsset asset = _assetOf(token);\\n        (liquidity, , reward) = _exactDepositToInEquil(asset, amount.toWad(asset.underlyingTokenDecimals()));\\n    }\\n\\n    /* Withdraw */\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee\\n     */\\n    function _withdrawFrom(IAsset asset, uint256 liquidity)\\n        private\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 liabilityToBurn,\\n            uint256 fee\\n        )\\n    {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        _checkLiquidity(liabilityToBurn);\\n\\n        amount = withdrawalAmountInEquilImpl(\\n            -int256(liabilityToBurn),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        fee = liabilityToBurn - amount;\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @return amount The total amount withdrawn\\n     */\\n    function _withdraw(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 minimumAmount\\n    ) private returns (uint256 amount) {\\n        // collect fee before withdraw\\n        _mintFee(asset);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, ) = _withdrawFrom(asset, liquidity);\\n        _checkAmount(minimumAmount, amount);\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount);\\n        asset.removeLiability(liabilityToBurn);\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        _checkAddress(to);\\n        _ensure(deadline);\\n\\n        IAsset asset = _assetOf(token);\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n        amount = _withdraw(asset, liquidity, minimumAmount).fromWad(asset.underlyingTokenDecimals());\\n        asset.transferUnderlyingToken(to, amount);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Enables withdrawing liquidity from an asset using LP from a different asset\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity to be withdrawn (in fromToken decimal)\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @dev Also, coverage ratio of toAsset must be higher than 1 after withdrawal for this to be accepted\\n     * @return toAmount The total amount withdrawn\\n     */\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256 toAmount) {\\n        _checkAddress(to);\\n        _checkLiquidity(liquidity);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        // Withdraw and swap\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        IERC20(fromAsset).safeTransferFrom(address(msg.sender), address(fromAsset), liquidity);\\n        uint256 fromAmountInWad = _withdraw(fromAsset, liquidity, 0);\\n        (toAmount, ) = _swap(fromAsset, toAsset, fromAmountInWad, minimumAmount, to);\\n\\n        toAmount = toAmount.fromWad(toAsset.underlyingTokenDecimals());\\n        toAsset.transferUnderlyingToken(to, toAmount);\\n\\n        emit Withdraw(msg.sender, toToken, toAmount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return fee The fee that would be applied\\n     */\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (uint256 amount, uint256 fee)\\n    {\\n        _checkLiquidity(liquidity);\\n        IAsset asset = _assetOf(token);\\n        (amount, , fee) = _withdrawFrom(asset, liquidity);\\n        amount = amount.fromWad(asset.underlyingTokenDecimals());\\n    }\\n\\n    /* Swap */\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) private view returns (uint256 actualToAmount, uint256 haircut) {\\n        uint256 idealToAmount;\\n        uint256 toCash = toAsset.cash();\\n        {\\n            uint256 Lx = fromAsset.liability();\\n            uint256 Ly = toAsset.liability();\\n\\n            // in case div of 0\\n            _checkLiquidity(Lx);\\n            _checkLiquidity(Ly);\\n\\n            idealToAmount = _swapQuoteFunc(\\n                int256(uint256(fromAsset.cash())),\\n                int256(toCash),\\n                int256(Lx),\\n                int256(Ly),\\n                fromAmount,\\n                int256(ampFactor)\\n            );\\n        }\\n\\n        if (toCash < idealToAmount) revert WOMBAT_CASH_NOT_ENOUGH();\\n\\n        haircut = idealToAmount.wmul(haircutRate);\\n        // exact output swap quote has added haircut already\\n        if (fromAmount > 0) {\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            actualToAmount = idealToAmount;\\n        }\\n    }\\n\\n    /**\\n     * expect fromAmount and minimumToAmount to be in WAD\\n     */\\n    function _swap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = _quoteFrom(fromAsset, toAsset, int256(fromAmount));\\n        _checkAmount(minimumToAmount, actualToAmount);\\n\\n        _feeCollected[toAsset] += haircut;\\n\\n        fromAsset.addCash(fromAmount);\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        toAsset.removeCash(actualToAmount + haircut);\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        {\\n            uint8 fromDecimal = fromAsset.underlyingTokenDecimals();\\n            uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n\\n            (actualToAmount, haircut) = _swap(\\n                fromAsset,\\n                toAsset,\\n                fromAmount.toWad(fromDecimal),\\n                minimumToAmount.toWad(toDecimal),\\n                to\\n            );\\n\\n            actualToAmount = actualToAmount.fromWad(toDecimal);\\n            haircut = haircut.fromWad(toDecimal);\\n        }\\n\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential outcome of a swap given current state, taking in account slippage and haircut\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        // exact output swap quote adds haircut\\n        if (fromAmount < 0) {\\n            uint256 haircut = uint256(-fromAmount).wmul(haircutRate);\\n            fromAmount -= int256(haircut);\\n        }\\n\\n        fromAmount = fromAmount.toWad(fromAsset.underlyingTokenDecimals());\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        potentialOutcome = potentialOutcome.fromWad(toAsset.underlyingTokenDecimals());\\n        haircut = haircut.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Queries */\\n\\n    /**\\n     * @notice Returns the exchange rate of the LP token\\n     * @param token The address of the token\\n     * @return exchangeRate\\n     */\\n    function exchangeRate(address token) external view returns (uint256 exchangeRate) {\\n        IAsset asset = _assetOf(token);\\n        if (asset.totalSupply() == 0) return WAD;\\n        return exchangeRate = uint256(asset.liability()).wdiv(uint256(asset.totalSupply()));\\n    }\\n\\n    function globalEquilCovRatio() external view returns (uint256 equilCovRatio, uint256 invariant) {\\n        uint256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        equilCovRatio = uint256(_equilCovRatio(int256(invariant), int256(SL), int256(ampFactor)));\\n    }\\n\\n    function tipBucketBalance(address token) external view returns (uint256 balance) {\\n        IAsset asset = _assetOf(token);\\n        return\\n            asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) - asset.cash() - _feeCollected[asset];\\n    }\\n\\n    /* Utils */\\n\\n    function _globalInvariantFunc() internal view returns (uint256 D, uint256 SL) {\\n        uint256 A = ampFactor;\\n\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            uint256 A_i = asset.cash();\\n            uint256 L_i = asset.liability();\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            uint256 r_i = A_i.wdiv(L_i);\\n            SL += L_i;\\n            D += L_i.wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to send fee collected to the fee beneficiary\\n     * @param asset The address of the asset to collect fee\\n     */\\n    function _mintFee(IAsset asset) private {\\n        uint256 feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0 || feeCollected < mintFeeThreshold) {\\n            // early return\\n            return;\\n        }\\n        {\\n            // dividend to veWOM\\n            uint256 dividend = feeCollected.wmul(WAD - lpDividendRatio - retentionRatio);\\n\\n            if (dividend > 0) {\\n                asset.transferUnderlyingToken(feeTo, dividend.fromWad(asset.underlyingTokenDecimals()));\\n            }\\n        }\\n        {\\n            // dividend to LP\\n            uint256 lpDividend = feeCollected.wmul(lpDividendRatio);\\n            if (lpDividend > 0) {\\n                // exact deposit to maintain r* = 1\\n                // increase the value of the LP token, i.e. assetsPerShare\\n                (, uint256 liabilityToMint, ) = _exactDepositToInEquil(asset, lpDividend);\\n                asset.addLiability(liabilityToMint);\\n                asset.addCash(lpDividend);\\n            }\\n        }\\n\\n        _feeCollected[asset] = 0;\\n    }\\n\\n    function mintAllFee() internal {\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send fee collected to the fee beneficiary\\n     * @param token The address of the token to collect fee\\n     */\\n    function mintFee(address token) external {\\n        _mintFee(_assetOf(token));\\n    }\\n}\\n\",\"keccak256\":\"0xb49974a12aee75d98232f4fc8c01ba06560f416a6bae18b0a6daab810249e5b3\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614e9c806100206000396000f3fe6080604052600436106102c65760003560e01c80638456cb5911610179578063d0dd0e56116100d6578063dc3b7c8b1161008a578063f46901ed11610064578063f46901ed14610746578063f57e84d514610766578063f8b49e721461078657600080fd5b8063dc3b7c8b146106e6578063e4a3011614610706578063f2fde38b1461072657600080fd5b8063d477f05f116100bb578063d477f05f14610686578063d765f145146106a6578063da489997146106c657600080fd5b8063d0dd0e561461064f578063d30ffeda1461066657600080fd5b806391cca3db1161012d5780639abacb41116101125780639abacb41146105ef5780639e4416b71461060f578063d043c5651461062f57600080fd5b806391cca3db146105ae5780639908fc8b146105cf57600080fd5b80638da5cb5b1161015e5780638da5cb5b14610550578063907448ed1461056e57806390d250741461058e57600080fd5b80638456cb59146105265780638a2dfe091461053b57600080fd5b80634f1ef286116102275780636922d5ca116101db578063715018a6116101c0578063715018a6146104da57806371f96211146104ef578063815bfd291461050f57600080fd5b80636922d5ca146104c35780636a1460241461032e57600080fd5b80635c975abb1161020c5780635c975abb146104695780635cfe092e1461048c57806361858e23146104a357600080fd5b80634f1ef286146104215780634fdd64e51461043457600080fd5b80633659cfe61161027e5780633f4ba83a116102635780633f4ba83a146103cc57806344db964a146103e15780634a5e42b11461040157600080fd5b80633659cfe61461038a5780633753b14a146103ac57600080fd5b806308bdd265116102af57806308bdd2651461032e57806309a5fca31461034a5780630f91f06f1461036a57600080fd5b8063017b8292146102cb578063017e7e58146102f5575b600080fd5b3480156102d757600080fd5b506102e261012e5481565b6040519081526020015b60405180910390f35b34801561030157600080fd5b5061013454610316906001600160a01b031681565b6040516001600160a01b0390911681526020016102ec565b34801561033a57600080fd5b506102e2670de0b6b3a764000081565b34801561035657600080fd5b506102e2610365366004614948565b6107a6565b34801561037657600080fd5b506102e26103853660046147b9565b6109d3565b34801561039657600080fd5b506103aa6103a536600461472f565b610c2c565b005b3480156103b857600080fd5b506103aa6103c736600461472f565b610c53565b3480156103d857600080fd5b506103aa610cc4565b3480156103ed57600080fd5b506103aa6103fc3660046149e1565b610d33565b34801561040d57600080fd5b506103aa61041c36600461472f565b610dc0565b6103aa61042f366004614818565b610f96565b34801561044057600080fd5b5061045461044f36600461477d565b610faf565b604080519283526020830191909152016102ec565b34801561047557600080fd5b5060fb5460ff1660405190151581526020016102ec565b34801561049857600080fd5b506102e26101325481565b3480156104af57600080fd5b506104546104be3660046148da565b61117b565b3480156104cf57600080fd5b506102e26101305481565b3480156104e657600080fd5b506103aa61121d565b3480156104fb57600080fd5b5061031661050a36600461472f565b611271565b34801561051b57600080fd5b506102e26101315481565b34801561053257600080fd5b506103aa611282565b34801561054757600080fd5b506104546112ea565b34801561055c57600080fd5b506097546001600160a01b0316610316565b34801561057a57600080fd5b506104546105893660046148da565b611314565b34801561059a57600080fd5b506102e26105a9366004614904565b611387565b3480156105ba57600080fd5b5061013354610316906001600160a01b031681565b3480156105db57600080fd5b506104546105ea3660046147b9565b611568565b3480156105fb57600080fd5b506103aa61060a36600461472f565b611873565b34801561061b57600080fd5b506103aa61062a3660046149e1565b6118dc565b34801561063b57600080fd5b506103aa61064a3660046149e1565b611953565b34801561065b57600080fd5b506102e261012f5481565b34801561067257600080fd5b506102e261068136600461472f565b6119a1565b34801561069257600080fd5b506103aa6106a136600461472f565b611b56565b3480156106b257600080fd5b506103aa6106c13660046149e1565b611bca565b3480156106d257600080fd5b506103aa6106e136600461474a565b611c57565b3480156106f257600080fd5b506102e261070136600461472f565b611e05565b34801561071257600080fd5b506103aa610721366004614a13565b611f8c565b34801561073257600080fd5b506103aa61074136600461472f565b61208d565b34801561075257600080fd5b506103aa61076136600461472f565b61215a565b34801561077257600080fd5b506103aa6107813660046149e1565b6121ec565b34801561079257600080fd5b506103aa6107a136600461472f565b612263565b6000600260c95414156108005760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260c95560fb5460ff161561084b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b61085485612274565b61085d836122ab565b610866826122eb565b600061087187612325565b90506108886001600160a01b038216338389612380565b61090d816001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190614a35565b61090783898961240e565b9061259e565b604051639e79eaa560e01b81526001600160a01b0386811660048301526024820183905291935090821690639e79eaa590604401600060405180830381600087803b15801561095b57600080fd5b505af115801561096f573d6000803e3d6000fd5b5050604080516001600160a01b038b81168252602082018790529181018a905290871692503391507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad99060600160405180910390a350600160c95595945050505050565b6000600260c9541415610a285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c95560fb5460ff1615610a735760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b610a7c836122ab565b610a8585612274565b610a8e826122eb565b610a9787612606565b6000610aa288612325565b90506000610aaf88612325565b9050610ac66001600160a01b03831633848a612380565b6000610ad48389600061240e565b9050610ae38383838a8a61265a565b5080945050610b63826001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190614a35565b859061259e565b604051639e79eaa560e01b81526001600160a01b0388811660048301526024820183905291955090831690639e79eaa590604401600060405180830381600087803b158015610bb157600080fd5b505af1158015610bc5573d6000803e3d6000fd5b5050604080516001600160a01b038d81168252602082018990529181018c905290891692503391507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad99060600160405180910390a35050600160c955509695505050505050565b610c3581612773565b610c50816040518060200160405280600081525060006127bb565b50565b600260c9541415610ca65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c955610cb361297f565b610cbc816129c4565b50600160c955565b600260c9541415610d175760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c955610d2461297f565b610d2c612a2e565b600160c955565b6097546001600160a01b03163314610d7b5760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b670de0b6b3a76400006101315482610d939190614ae6565b1115610db2576040516312b019e160e01b815260040160405180910390fd5b610dba612aca565b61013055565b6097546001600160a01b03163314610e085760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b6001600160a01b038082166000908152610137602052604090205416610e4157604051633b2c013560e21b815260040160405180910390fd5b6001600160a01b0381811660009081526101376020908152604080832080546001600160a01b031981169091556101389092528220546101365491909316929190610e8e90600190614d13565b905060006101366000018281548110610ea957610ea9614df3565b60009182526020808320909101546001600160a01b03908116808452610138909252604080842087905590881683528220919091556101368054919250829185908110610ef857610ef8614df3565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055610136805480610f3357610f33614ddd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b0386811692908816917f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea9190a35050505050565b610f9f82612773565b610fab828260016127bb565b5050565b600080610fbc8585612b23565b82610fda5760405163b483c10f60e01b815260040160405180910390fd5b6000610fe586612325565b90506000610ff286612325565b9050600085121561102657600061101661012f548761101090614d94565b90612b6f565b90506110228187614cd4565b9550505b6110a1826001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561106257600080fd5b505afa158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a9190614a35565b8690612ba3565b94506110ae828287612bfd565b80945081955050506110f2816001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2457600080fd5b935061116f816001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111689190614a35565b849061259e565b92505050935093915050565b600080600061118985612325565b905061120f8161120a836001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112039190614a35565b8790612e8e565b612ebe565b919791965090945050505050565b6097546001600160a01b031633146112655760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b61126f60006130f5565b565b600061127c82612325565b92915050565b600260c95414156112d55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c9556112e261297f565b610d2c613147565b60008060006112f76131c2565b809250819350505061130d828261012e54613352565b9250509091565b60008061132083612274565b600061132b85612325565b9050611337818561337d565b9050809350819450505061137d816001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113057600080fd5b9250509250929050565b6000600260c95414156113dc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c95560fb5460ff16156114275760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b836114455760405163b483c10f60e01b815260040160405180910390fd5b61144e836122ab565b611457826122eb565b61146085612606565b600061146b86612325565b90506114826001600160a01b038716338388612380565b61150781611501836001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114c257600080fd5b505afa1580156114d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fa9190614a35565b8890612e8e565b866135ae565b604080516001600160a01b0389811682526020820189905291810183905291935085169033907ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b9060600160405180910390a350600160c955949350505050565b600080600260c95414156115be5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c95560fb5460ff16156116095760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b6116138888612b23565b856116315760405163b483c10f60e01b815260040160405180910390fd5b61163a846122ab565b611643836122eb565b61164c88612606565b600061165789612325565b9050600061166489612325565b90506000826001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a157600080fd5b505afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d99190614a35565b90506000826001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171657600080fd5b505afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e9190614a35565b905061176f848461175f8d86612e8e565b6117698d86612e8e565b8c61265a565b909650945061177e868261259e565b955061178a858261259e565b94506117a49150506001600160a01b038b1633848b612380565b604051639e79eaa560e01b81526001600160a01b03878116600483015260248201869052821690639e79eaa590604401600060405180830381600087803b1580156117ee57600080fd5b505af1158015611802573d6000803e3d6000fd5b5050604080516001600160a01b038e811682528d811660208301529181018c90526060810188905290891692503391507f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d19060800160405180910390a35050600160c9559097909650945050505050565b600260c95414156118c65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c9556118d361297f565b610cbc816136d5565b6097546001600160a01b031633146119245760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b670de0b6b3a764000081111561194d576040516312b019e160e01b815260040160405180910390fd5b61012e55565b6097546001600160a01b0316331461199b5760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b61013255565b6000806119ad83612325565b90506101356000826001600160a01b03166001600160a01b0316815260200190815260200160002054816001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0f57600080fd5b505afa158015611a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4791906149b8565b6001600160781b0316611b3b836001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190614a35565b846001600160a01b03166399c91a646040518163ffffffff1660e01b815260040160206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3591906149fa565b90612e8e565b611b459190614d13565b611b4f9190614d13565b9392505050565b6097546001600160a01b03163314611b9e5760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b611ba7816122ab565b61013380546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b03163314611c125760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b670de0b6b3a76400008161013054611c2a9190614ae6565b1115611c49576040516312b019e160e01b815260040160405180910390fd5b611c51612aca565b61013155565b6097546001600160a01b03163314611c9f5760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b600260c9541415611cf25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c955611d00816122ab565b611d09826122ab565b6001600160a01b03808316600090815261013760205260409020541615611d5c576040517f8991c4c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0380831660008181526101376020908152604080832080549587166001600160a01b03199687168117909155610136805461013890945282852084905560018401815584527f39da2db355130acf428d669fbf1c14faa9d51399a25b793fc254bbbde66f02e29092018054909516841790945592517f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909189190a35050600160c955565b600080611e1183612325565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4c57600080fd5b505afa158015611e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8491906149fa565b611e985750670de0b6b3a764000092915050565b611b4f816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed457600080fd5b505afa158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c91906149fa565b826001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4557600080fd5b505afa158015611f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7d91906149b8565b6001600160781b031690613735565b600054610100900460ff1680611fa5575060005460ff16155b6120085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff1615801561202a576000805461ffff19166101011790555b612032613755565b61203a613817565b6120426138c8565b61204a61397f565b61012e83905561012f829055670de0b6b3a76400006101315561013380546001600160a01b031916331790558015612088576000805461ff00191690555b505050565b6097546001600160a01b031633146120d55760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b6001600160a01b0381166121515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107f7565b610c50816130f5565b6097546001600160a01b031633146121a25760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b6001600160a01b0381166121c9576040516312b019e160e01b815260040160405180910390fd5b61013480546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146122345760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b670de0b6b3a764000081111561225d576040516312b019e160e01b815260040160405180910390fd5b61012f55565b610c5061226f82612325565b613a3b565b80610c50576040517f3f3835e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116610c50576040517f0bd3e3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42811015610c50576040517f549b633500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038082166000908152610137602052604081205490911661236057604051633b2c013560e21b815260040160405180910390fd5b506001600160a01b03908116600090815261013760205260409020541690565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612408908590613c7c565b50505050565b600061241984613a3b565b6000612425858561337d565b5090925090506124358383613d61565b6040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b038616600482018190526024820186905290639dc29fac90604401600060405180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b50506040517f9f9ef988000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0388169250639f9ef9889150602401600060405180830381600087803b15801561250a57600080fd5b505af115801561251e573d6000803e3d6000fd5b50506040517fd8b87853000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b038816925063d8b8785391506024015b600060405180830381600087803b15801561257e57600080fd5b505af1158015612592573d6000803e3d6000fd5b50505050509392505050565b600060128260ff1610156125d3576125b7826012614d2a565b6125c290600a614b83565b6125cc9084614b2c565b905061127c565b60128260ff1611156125ff576125ea601283614d2a565b6125f590600a614b83565b6125cc9084614cb5565b5090919050565b6001600160a01b038116600090815261012d602052604090205460ff1615610c50576040517f8654830a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080612668878787612bfd565b90925090506126778483613d61565b6001600160a01b03861660009081526101356020526040812080548392906126a0908490614ae6565b909155505060405162b64f3d60e51b8152600481018690526001600160a01b038816906316c9e7a090602401600060405180830381600087803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b50505050856001600160a01b0316639f9ef98882846127199190614ae6565b6040518263ffffffff1660e01b815260040161273791815260200190565b600060405180830381600087803b15801561275157600080fd5b505af1158015612765573d6000803e3d6000fd5b505050509550959350505050565b6097546001600160a01b03163314610c505760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b60006127ee7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b90506127f984613d9b565b6000835111806128065750815b15612817576128158484613e50565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661297857805460ff191660011781556040516001600160a01b03831660248201526128c490869060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe600000000000000000000000000000000000000000000000000000000179052613e50565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b0383811691161461296f5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f757274686572207570677261646573000000000000000000000000000000000060648201526084016107f7565b61297885613f49565b5050505050565b610133546001600160a01b0316331461126f576040517f5bf78ef400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6129cd81612606565b6001600160a01b038116600081815261012d6020908152604091829020805460ff19166001179055815192835233908301527fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e91015b60405180910390a150565b60fb5460ff16612a805760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107f7565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005b61013654811015610c50576000612b05612ae683613f89565b6001600160a01b03908116600090815261013760205260409020541690565b9050612b1081613a3b565b5080612b1b81614d79565b915050612acd565b806001600160a01b0316826001600160a01b03161415610fab576040517feeb7911f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000670de0b6b3a7640000612b85600282614b2c565b612b8f8486614cb5565b612b999190614ae6565b611b4f9190614b2c565b600060128260ff161015612bd157612bbc826012614d2a565b612bc790600a614b83565b6125cc9084614c2e565b60128260ff1611156125ff57612be8601283614d2a565b612bf390600a614b83565b6125cc9084614afe565b600080600080856001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3c57600080fd5b505afa158015612c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7491906149b8565b6001600160781b031690506000876001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612cba57600080fd5b505afa158015612cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf291906149b8565b6001600160781b031690506000876001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3857600080fd5b505afa158015612d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7091906149b8565b6001600160781b03169050612d8482612274565b612d8d81612274565b612e17896001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc957600080fd5b505afa158015612ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0191906149b8565b6001600160781b03168484848b61012e54613fbd565b9350505081811015612e55576040517f9a6114b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012f54612e64908390612b6f565b92506000851315612e8057612e798383614d13565b9350612e84565b8193505b5050935093915050565b600060128260ff161015612ea7576125ea826012614d2a565b60128260ff1611156125ff576125b7601283614d2a565b6000806000612fcc612fc785876001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0357600080fd5b505afa158015612f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3b91906149b8565b6001600160781b0316886001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7d57600080fd5b505afa158015612f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb591906149b8565b6001600160781b031661012e5461405d565b6141d3565b9150612fd88483614d13565b90506000856001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561301557600080fd5b505afa158015613029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304d91906149b8565b6001600160781b0316905080156130e95780866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561309857600080fd5b505afa1580156130ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d091906149fa565b6130da9085614cb5565b6130e49190614b2c565b6130eb565b825b9350509250925092565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60fb5460ff161561318d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612aad3390565b61012e546000908190815b6101365481101561334c5760006131e6612ae683613f89565b90506000816001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b15801561322357600080fd5b505afa158015613237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325b91906149b8565b6001600160781b031690506000826001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156132a157600080fd5b505afa1580156132b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d991906149b8565b6001600160781b03169050806132f15750505061333a565b60006132fd8383613735565b90506133098288614ae6565b96506133296133188783613735565b6133229083614d13565b8390612b6f565b6133339089614ae6565b9750505050505b8061334481614d79565b9150506131cd565b50509091565b60008061335f8585614229565b61336890614d94565b9050613374818461425d565b95945050505050565b6000806000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133bb57600080fd5b505afa1580156133cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f391906149fa565b84866001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561342d57600080fd5b505afa158015613441573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346591906149b8565b6001600160781b03166134789190614cb5565b6134829190614b2c565b915061348d82612274565b613599612fc761349c84614d94565b876001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b1580156134d557600080fd5b505afa1580156134e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350d91906149b8565b6001600160781b0316886001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561354f57600080fd5b505afa158015613563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358791906149b8565b6001600160781b031661012e546142b2565b92506135a58383614d13565b90509250925092565b60006135b984613a3b565b60006135c58585612ebe565b5090925090506135d482612274565b60405162b64f3d60e51b8152600481018590526001600160a01b038616906316c9e7a090602401600060405180830381600087803b15801561361557600080fd5b505af1158015613629573d6000803e3d6000fd5b505060405163283c3d8160e21b8152600481018490526001600160a01b038816925063a0f0f6049150602401600060405180830381600087803b15801561366f57600080fd5b505af1158015613683573d6000803e3d6000fd5b50506040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201869052881692506340c10f199150604401612564565b6136de81614360565b6001600160a01b038116600081815261012d6020908152604091829020805460ff19169055815192835233908301527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c9101612a23565b600081613743600282614b2c565b612b8f670de0b6b3a764000086614cb5565b600054610100900460ff168061376e575060005460ff16155b6137d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff161580156137f3576000805461ffff19166101011790555b6137fb613817565b6138036143b3565b8015610c50576000805461ff001916905550565b600054610100900460ff1680613830575060005460ff16155b6138935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff16158015613803576000805461ffff19166101011790558015610c50576000805461ff001916905550565b600054610100900460ff16806138e1575060005460ff16155b6139445760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff16158015613966576000805461ffff19166101011790555b600160c9558015610c50576000805461ff001916905550565b600054610100900460ff1680613998575060005460ff16155b6139fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff16158015613a1d576000805461ffff19166101011790555b60fb805460ff191690558015610c50576000805461ff001916905550565b6001600160a01b03811660009081526101356020526040902054801580613a6457506101325481105b15613a6d575050565b6000613a976101305461013154670de0b6b3a7640000613a8d9190614d13565b6133229190614d13565b90508015613b7857826001600160a01b0316639e79eaa561013460009054906101000a90046001600160a01b0316613b01866001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2457600080fd5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613b5f57600080fd5b505af1158015613b73573d6000803e3d6000fd5b505050505b506000613b916101315483612b6f90919063ffffffff16565b90508015613c5f576000613ba58483612ebe565b5060405163283c3d8160e21b8152600481018290529092506001600160a01b038616915063a0f0f60490602401600060405180830381600087803b158015613bec57600080fd5b505af1158015613c00573d6000803e3d6000fd5b505060405162b64f3d60e51b8152600481018590526001600160a01b03871692506316c9e7a09150602401600060405180830381600087803b158015613c4557600080fd5b505af1158015613c59573d6000803e3d6000fd5b50505050505b50506001600160a01b031660009081526101356020526040812055565b6000613cd1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661445a9092919063ffffffff16565b8051909150156120885780806020019051810190613cef9190614996565b6120885760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107f7565b80821115610fab576040517ff512a72000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b803b613e0f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016107f7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b613ec65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016107f7565b600080846001600160a01b031684604051613ee19190614a58565b600060405180830381855af49150503d8060008114613f1c576040519150601f19603f3d011682016040523d82523d6000602084013e613f21565b606091505b50915091506133748282604051806060016040528060278152602001614e4060279139614469565b613f5281613d9b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60006101366000018281548110613fa257613fa2614df3565b6000918252602090912001546001600160a01b031692915050565b600080613fdf86613fce8a82614229565b87613fd98b82614229565b876144a2565b90506000613ff787613ff1878c614aa7565b90614229565b905060006140088888848689614507565b90506000614016828761425d565b905060008a6140258a84614549565b61402f9190614cd4565b9050600081121561404a5761404381614d94565b955061404e565b8095505b50505050509695505050505050565b60008261406b5750836141cb565b60006140778686614aa7565b12156140af576040517fae03266000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006140bb8585614229565b905060006140c98688614aa7565b905060006140d78587614549565b6140e2906002614c2e565b6140fe6140f787670de0b6b3a7640000614cd4565b8490614549565b6141089190614aa7565b905060006141208761411a8882614549565b90614549565b61412a8480614549565b614153866141388b8b614c2e565b6141429190614afe565b61414c908c614cd4565b8690614549565b61415d9190614cd4565b6141679190614aa7565b9050600081614177886004614c2e565b6141819190614c2e565b61418b8480614c2e565b6141959190614cd4565b905060026141b9886141a684614569565b6141af87614d94565b613ff19190614aa7565b6141c39190614afe565b955050505050505b949350505050565b6000808212156142255760405162461bcd60e51b815260206004820152601660248201527f76616c7565206d75737420626520706f7369746976650000000000000000000060448201526064016107f7565b5090565b600081614237600282614afe565b614249670de0b6b3a764000086614c2e565b6142539190614aa7565b611b4f9190614afe565b60008061429a670de0b6b3a7640000614277856004614c2e565b6142819190614c2e565b61428b8680614c2e565b6142959190614aa7565b614569565b905060026142a88583614cd4565b6141cb9190614afe565b6000806142bf8685614aa7565b905060006142cd8686614229565b905060006142ef6142de8684614229565b6142e89084614cd4565b8790614549565b90506000600261431161430a88670de0b6b3a7640000614cd4565b8b90614549565b61431b9084614aa7565b6143259190614afe565b9050600061434a6143406143398780614c2e565b8990614549565b61428b8480614c2e565b6143549083614aa7565b90506141c3818a614cd4565b6001600160a01b038116600090815261012d602052604090205460ff16610c50576040517f855b737300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054610100900460ff16806143cc575060005460ff16155b61442f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff16158015614451576000805461ffff19166101011790555b613803336130f5565b60606141cb84846000856145d9565b60608315614478575081611b4f565b8251156144885782518084602001fd5b8160405162461bcd60e51b81526004016107f79190614a74565b6000806144af8585614549565b6144b98888614549565b6144c39190614aa7565b905060006144ef6144d48787614229565b6144de8a8a614229565b6144e89190614aa7565b8590614549565b90506144fb8183614cd4565b98975050505050505050565b60006145138386614229565b61453586613ff16145248689614229565b61452e9089614cd4565b8a90614549565b61453f9190614cd4565b9695505050505050565b6000670de0b6b3a764000061455f600282614afe565b6142498486614c2e565b600060038213156145ca5750806000614583600283614afe565b61458e906001614aa7565b90505b818112156145c4579050806002816145a98186614afe565b6145b39190614aa7565b6145bd9190614afe565b9050614591565b50919050565b81156145d4575060015b919050565b6060824710156146515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107f7565b843b61469f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107f7565b600080866001600160a01b031685876040516146bb9190614a58565b60006040518083038185875af1925050503d80600081146146f8576040519150601f19603f3d011682016040523d82523d6000602084013e6146fd565b606091505b509150915061470d828286614469565b979650505050505050565b80356001600160a01b03811681146145d457600080fd5b60006020828403121561474157600080fd5b611b4f82614718565b6000806040838503121561475d57600080fd5b61476683614718565b915061477460208401614718565b90509250929050565b60008060006060848603121561479257600080fd5b61479b84614718565b92506147a960208501614718565b9150604084013590509250925092565b60008060008060008060c087890312156147d257600080fd5b6147db87614718565b95506147e960208801614718565b9450604087013593506060870135925061480560808801614718565b915060a087013590509295509295509295565b6000806040838503121561482b57600080fd5b61483483614718565b9150602083013567ffffffffffffffff8082111561485157600080fd5b818501915085601f83011261486557600080fd5b81358181111561487757614877614e09565b604051601f8201601f19908116603f0116810190838211818310171561489f5761489f614e09565b816040528281528860208487010111156148b857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156148ed57600080fd5b6148f683614718565b946020939093013593505050565b6000806000806080858703121561491a57600080fd5b61492385614718565b93506020850135925061493860408601614718565b9396929550929360600135925050565b600080600080600060a0868803121561496057600080fd5b61496986614718565b9450602086013593506040860135925061498560608701614718565b949793965091946080013592915050565b6000602082840312156149a857600080fd5b81518015158114611b4f57600080fd5b6000602082840312156149ca57600080fd5b81516001600160781b0381168114611b4f57600080fd5b6000602082840312156149f357600080fd5b5035919050565b600060208284031215614a0c57600080fd5b5051919050565b60008060408385031215614a2657600080fd5b50508035926020909101359150565b600060208284031215614a4757600080fd5b815160ff81168114611b4f57600080fd5b60008251614a6a818460208701614d4d565b9190910192915050565b6020815260008251806020840152614a93816040850160208701614d4d565b601f01601f19169190910160400192915050565b6000808212826001600160ff1b0303841381151615614ac857614ac8614db1565b82600160ff1b038412811615614ae057614ae0614db1565b50500190565b60008219821115614af957614af9614db1565b500190565b600082614b0d57614b0d614dc7565b600160ff1b821460001984141615614b2757614b27614db1565b500590565b600082614b3b57614b3b614dc7565b500490565b600181815b80851115614b7b578160001904821115614b6157614b61614db1565b80851615614b6e57918102915b93841c9390800290614b45565b509250929050565b6000611b4f60ff841683600082614b9c5750600161127c565b81614ba95750600061127c565b8160018114614bbf5760028114614bc957614be5565b600191505061127c565b60ff841115614bda57614bda614db1565b50506001821b61127c565b5060208310610133831016604e8410600b8410161715614c08575081810a61127c565b614c128383614b40565b8060001904821115614c2657614c26614db1565b029392505050565b60006001600160ff1b03600084136000841385830485118282161615614c5657614c56614db1565b600160ff1b6000871286820588128184161615614c7557614c75614db1565b60008712925087820587128484161615614c9157614c91614db1565b87850587128184161615614ca757614ca7614db1565b505050929093029392505050565b6000816000190483118215151615614ccf57614ccf614db1565b500290565b600080831283600160ff1b01831281151615614cf257614cf2614db1565b836001600160ff1b03018313811615614d0d57614d0d614db1565b50500390565b600082821015614d2557614d25614db1565b500390565b600060ff821660ff841680821015614d4457614d44614db1565b90039392505050565b60005b83811015614d68578181015183820152602001614d50565b838111156124085750506000910152565b6000600019821415614d8d57614d8d614db1565b5060010190565b6000600160ff1b821415614daa57614daa614db1565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206b64e1133c0fd01cbfb41f9ebbbcf3d6137a84a9f7d9e0f7930ce044e134ee4664736f6c63430008050033",
  "deployedBytecode": "0x6080604052600436106102c65760003560e01c80638456cb5911610179578063d0dd0e56116100d6578063dc3b7c8b1161008a578063f46901ed11610064578063f46901ed14610746578063f57e84d514610766578063f8b49e721461078657600080fd5b8063dc3b7c8b146106e6578063e4a3011614610706578063f2fde38b1461072657600080fd5b8063d477f05f116100bb578063d477f05f14610686578063d765f145146106a6578063da489997146106c657600080fd5b8063d0dd0e561461064f578063d30ffeda1461066657600080fd5b806391cca3db1161012d5780639abacb41116101125780639abacb41146105ef5780639e4416b71461060f578063d043c5651461062f57600080fd5b806391cca3db146105ae5780639908fc8b146105cf57600080fd5b80638da5cb5b1161015e5780638da5cb5b14610550578063907448ed1461056e57806390d250741461058e57600080fd5b80638456cb59146105265780638a2dfe091461053b57600080fd5b80634f1ef286116102275780636922d5ca116101db578063715018a6116101c0578063715018a6146104da57806371f96211146104ef578063815bfd291461050f57600080fd5b80636922d5ca146104c35780636a1460241461032e57600080fd5b80635c975abb1161020c5780635c975abb146104695780635cfe092e1461048c57806361858e23146104a357600080fd5b80634f1ef286146104215780634fdd64e51461043457600080fd5b80633659cfe61161027e5780633f4ba83a116102635780633f4ba83a146103cc57806344db964a146103e15780634a5e42b11461040157600080fd5b80633659cfe61461038a5780633753b14a146103ac57600080fd5b806308bdd265116102af57806308bdd2651461032e57806309a5fca31461034a5780630f91f06f1461036a57600080fd5b8063017b8292146102cb578063017e7e58146102f5575b600080fd5b3480156102d757600080fd5b506102e261012e5481565b6040519081526020015b60405180910390f35b34801561030157600080fd5b5061013454610316906001600160a01b031681565b6040516001600160a01b0390911681526020016102ec565b34801561033a57600080fd5b506102e2670de0b6b3a764000081565b34801561035657600080fd5b506102e2610365366004614948565b6107a6565b34801561037657600080fd5b506102e26103853660046147b9565b6109d3565b34801561039657600080fd5b506103aa6103a536600461472f565b610c2c565b005b3480156103b857600080fd5b506103aa6103c736600461472f565b610c53565b3480156103d857600080fd5b506103aa610cc4565b3480156103ed57600080fd5b506103aa6103fc3660046149e1565b610d33565b34801561040d57600080fd5b506103aa61041c36600461472f565b610dc0565b6103aa61042f366004614818565b610f96565b34801561044057600080fd5b5061045461044f36600461477d565b610faf565b604080519283526020830191909152016102ec565b34801561047557600080fd5b5060fb5460ff1660405190151581526020016102ec565b34801561049857600080fd5b506102e26101325481565b3480156104af57600080fd5b506104546104be3660046148da565b61117b565b3480156104cf57600080fd5b506102e26101305481565b3480156104e657600080fd5b506103aa61121d565b3480156104fb57600080fd5b5061031661050a36600461472f565b611271565b34801561051b57600080fd5b506102e26101315481565b34801561053257600080fd5b506103aa611282565b34801561054757600080fd5b506104546112ea565b34801561055c57600080fd5b506097546001600160a01b0316610316565b34801561057a57600080fd5b506104546105893660046148da565b611314565b34801561059a57600080fd5b506102e26105a9366004614904565b611387565b3480156105ba57600080fd5b5061013354610316906001600160a01b031681565b3480156105db57600080fd5b506104546105ea3660046147b9565b611568565b3480156105fb57600080fd5b506103aa61060a36600461472f565b611873565b34801561061b57600080fd5b506103aa61062a3660046149e1565b6118dc565b34801561063b57600080fd5b506103aa61064a3660046149e1565b611953565b34801561065b57600080fd5b506102e261012f5481565b34801561067257600080fd5b506102e261068136600461472f565b6119a1565b34801561069257600080fd5b506103aa6106a136600461472f565b611b56565b3480156106b257600080fd5b506103aa6106c13660046149e1565b611bca565b3480156106d257600080fd5b506103aa6106e136600461474a565b611c57565b3480156106f257600080fd5b506102e261070136600461472f565b611e05565b34801561071257600080fd5b506103aa610721366004614a13565b611f8c565b34801561073257600080fd5b506103aa61074136600461472f565b61208d565b34801561075257600080fd5b506103aa61076136600461472f565b61215a565b34801561077257600080fd5b506103aa6107813660046149e1565b6121ec565b34801561079257600080fd5b506103aa6107a136600461472f565b612263565b6000600260c95414156108005760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260c95560fb5460ff161561084b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b61085485612274565b61085d836122ab565b610866826122eb565b600061087187612325565b90506108886001600160a01b038216338389612380565b61090d816001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190614a35565b61090783898961240e565b9061259e565b604051639e79eaa560e01b81526001600160a01b0386811660048301526024820183905291935090821690639e79eaa590604401600060405180830381600087803b15801561095b57600080fd5b505af115801561096f573d6000803e3d6000fd5b5050604080516001600160a01b038b81168252602082018790529181018a905290871692503391507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad99060600160405180910390a350600160c95595945050505050565b6000600260c9541415610a285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c95560fb5460ff1615610a735760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b610a7c836122ab565b610a8585612274565b610a8e826122eb565b610a9787612606565b6000610aa288612325565b90506000610aaf88612325565b9050610ac66001600160a01b03831633848a612380565b6000610ad48389600061240e565b9050610ae38383838a8a61265a565b5080945050610b63826001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2457600080fd5b505afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190614a35565b859061259e565b604051639e79eaa560e01b81526001600160a01b0388811660048301526024820183905291955090831690639e79eaa590604401600060405180830381600087803b158015610bb157600080fd5b505af1158015610bc5573d6000803e3d6000fd5b5050604080516001600160a01b038d81168252602082018990529181018c905290891692503391507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad99060600160405180910390a35050600160c955509695505050505050565b610c3581612773565b610c50816040518060200160405280600081525060006127bb565b50565b600260c9541415610ca65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c955610cb361297f565b610cbc816129c4565b50600160c955565b600260c9541415610d175760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c955610d2461297f565b610d2c612a2e565b600160c955565b6097546001600160a01b03163314610d7b5760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b670de0b6b3a76400006101315482610d939190614ae6565b1115610db2576040516312b019e160e01b815260040160405180910390fd5b610dba612aca565b61013055565b6097546001600160a01b03163314610e085760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b6001600160a01b038082166000908152610137602052604090205416610e4157604051633b2c013560e21b815260040160405180910390fd5b6001600160a01b0381811660009081526101376020908152604080832080546001600160a01b031981169091556101389092528220546101365491909316929190610e8e90600190614d13565b905060006101366000018281548110610ea957610ea9614df3565b60009182526020808320909101546001600160a01b03908116808452610138909252604080842087905590881683528220919091556101368054919250829185908110610ef857610ef8614df3565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055610136805480610f3357610f33614ddd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b0386811692908816917f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea9190a35050505050565b610f9f82612773565b610fab828260016127bb565b5050565b600080610fbc8585612b23565b82610fda5760405163b483c10f60e01b815260040160405180910390fd5b6000610fe586612325565b90506000610ff286612325565b9050600085121561102657600061101661012f548761101090614d94565b90612b6f565b90506110228187614cd4565b9550505b6110a1826001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561106257600080fd5b505afa158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a9190614a35565b8690612ba3565b94506110ae828287612bfd565b80945081955050506110f2816001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2457600080fd5b935061116f816001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111689190614a35565b849061259e565b92505050935093915050565b600080600061118985612325565b905061120f8161120a836001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112039190614a35565b8790612e8e565b612ebe565b919791965090945050505050565b6097546001600160a01b031633146112655760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b61126f60006130f5565b565b600061127c82612325565b92915050565b600260c95414156112d55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c9556112e261297f565b610d2c613147565b60008060006112f76131c2565b809250819350505061130d828261012e54613352565b9250509091565b60008061132083612274565b600061132b85612325565b9050611337818561337d565b9050809350819450505061137d816001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113057600080fd5b9250509250929050565b6000600260c95414156113dc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c95560fb5460ff16156114275760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b836114455760405163b483c10f60e01b815260040160405180910390fd5b61144e836122ab565b611457826122eb565b61146085612606565b600061146b86612325565b90506114826001600160a01b038716338388612380565b61150781611501836001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114c257600080fd5b505afa1580156114d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fa9190614a35565b8890612e8e565b866135ae565b604080516001600160a01b0389811682526020820189905291810183905291935085169033907ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b9060600160405180910390a350600160c955949350505050565b600080600260c95414156115be5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c95560fb5460ff16156116095760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b6116138888612b23565b856116315760405163b483c10f60e01b815260040160405180910390fd5b61163a846122ab565b611643836122eb565b61164c88612606565b600061165789612325565b9050600061166489612325565b90506000826001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a157600080fd5b505afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d99190614a35565b90506000826001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171657600080fd5b505afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e9190614a35565b905061176f848461175f8d86612e8e565b6117698d86612e8e565b8c61265a565b909650945061177e868261259e565b955061178a858261259e565b94506117a49150506001600160a01b038b1633848b612380565b604051639e79eaa560e01b81526001600160a01b03878116600483015260248201869052821690639e79eaa590604401600060405180830381600087803b1580156117ee57600080fd5b505af1158015611802573d6000803e3d6000fd5b5050604080516001600160a01b038e811682528d811660208301529181018c90526060810188905290891692503391507f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d19060800160405180910390a35050600160c9559097909650945050505050565b600260c95414156118c65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c9556118d361297f565b610cbc816136d5565b6097546001600160a01b031633146119245760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b670de0b6b3a764000081111561194d576040516312b019e160e01b815260040160405180910390fd5b61012e55565b6097546001600160a01b0316331461199b5760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b61013255565b6000806119ad83612325565b90506101356000826001600160a01b03166001600160a01b0316815260200190815260200160002054816001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0f57600080fd5b505afa158015611a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4791906149b8565b6001600160781b0316611b3b836001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190614a35565b846001600160a01b03166399c91a646040518163ffffffff1660e01b815260040160206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3591906149fa565b90612e8e565b611b459190614d13565b611b4f9190614d13565b9392505050565b6097546001600160a01b03163314611b9e5760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b611ba7816122ab565b61013380546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b03163314611c125760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b670de0b6b3a76400008161013054611c2a9190614ae6565b1115611c49576040516312b019e160e01b815260040160405180910390fd5b611c51612aca565b61013155565b6097546001600160a01b03163314611c9f5760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b600260c9541415611cf25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f7565b600260c955611d00816122ab565b611d09826122ab565b6001600160a01b03808316600090815261013760205260409020541615611d5c576040517f8991c4c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0380831660008181526101376020908152604080832080549587166001600160a01b03199687168117909155610136805461013890945282852084905560018401815584527f39da2db355130acf428d669fbf1c14faa9d51399a25b793fc254bbbde66f02e29092018054909516841790945592517f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909189190a35050600160c955565b600080611e1183612325565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4c57600080fd5b505afa158015611e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8491906149fa565b611e985750670de0b6b3a764000092915050565b611b4f816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed457600080fd5b505afa158015611ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0c91906149fa565b826001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4557600080fd5b505afa158015611f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7d91906149b8565b6001600160781b031690613735565b600054610100900460ff1680611fa5575060005460ff16155b6120085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff1615801561202a576000805461ffff19166101011790555b612032613755565b61203a613817565b6120426138c8565b61204a61397f565b61012e83905561012f829055670de0b6b3a76400006101315561013380546001600160a01b031916331790558015612088576000805461ff00191690555b505050565b6097546001600160a01b031633146120d55760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b6001600160a01b0381166121515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107f7565b610c50816130f5565b6097546001600160a01b031633146121a25760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b6001600160a01b0381166121c9576040516312b019e160e01b815260040160405180910390fd5b61013480546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146122345760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b670de0b6b3a764000081111561225d576040516312b019e160e01b815260040160405180910390fd5b61012f55565b610c5061226f82612325565b613a3b565b80610c50576040517f3f3835e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116610c50576040517f0bd3e3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42811015610c50576040517f549b633500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038082166000908152610137602052604081205490911661236057604051633b2c013560e21b815260040160405180910390fd5b506001600160a01b03908116600090815261013760205260409020541690565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612408908590613c7c565b50505050565b600061241984613a3b565b6000612425858561337d565b5090925090506124358383613d61565b6040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b038616600482018190526024820186905290639dc29fac90604401600060405180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b50506040517f9f9ef988000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0388169250639f9ef9889150602401600060405180830381600087803b15801561250a57600080fd5b505af115801561251e573d6000803e3d6000fd5b50506040517fd8b87853000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b038816925063d8b8785391506024015b600060405180830381600087803b15801561257e57600080fd5b505af1158015612592573d6000803e3d6000fd5b50505050509392505050565b600060128260ff1610156125d3576125b7826012614d2a565b6125c290600a614b83565b6125cc9084614b2c565b905061127c565b60128260ff1611156125ff576125ea601283614d2a565b6125f590600a614b83565b6125cc9084614cb5565b5090919050565b6001600160a01b038116600090815261012d602052604090205460ff1615610c50576040517f8654830a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080612668878787612bfd565b90925090506126778483613d61565b6001600160a01b03861660009081526101356020526040812080548392906126a0908490614ae6565b909155505060405162b64f3d60e51b8152600481018690526001600160a01b038816906316c9e7a090602401600060405180830381600087803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b50505050856001600160a01b0316639f9ef98882846127199190614ae6565b6040518263ffffffff1660e01b815260040161273791815260200190565b600060405180830381600087803b15801561275157600080fd5b505af1158015612765573d6000803e3d6000fd5b505050509550959350505050565b6097546001600160a01b03163314610c505760405162461bcd60e51b81526020600482018190526024820152600080516020614e2083398151915260448201526064016107f7565b60006127ee7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b90506127f984613d9b565b6000835111806128065750815b15612817576128158484613e50565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661297857805460ff191660011781556040516001600160a01b03831660248201526128c490869060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe600000000000000000000000000000000000000000000000000000000179052613e50565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b0383811691161461296f5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f757274686572207570677261646573000000000000000000000000000000000060648201526084016107f7565b61297885613f49565b5050505050565b610133546001600160a01b0316331461126f576040517f5bf78ef400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6129cd81612606565b6001600160a01b038116600081815261012d6020908152604091829020805460ff19166001179055815192835233908301527fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e91015b60405180910390a150565b60fb5460ff16612a805760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107f7565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005b61013654811015610c50576000612b05612ae683613f89565b6001600160a01b03908116600090815261013760205260409020541690565b9050612b1081613a3b565b5080612b1b81614d79565b915050612acd565b806001600160a01b0316826001600160a01b03161415610fab576040517feeb7911f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000670de0b6b3a7640000612b85600282614b2c565b612b8f8486614cb5565b612b999190614ae6565b611b4f9190614b2c565b600060128260ff161015612bd157612bbc826012614d2a565b612bc790600a614b83565b6125cc9084614c2e565b60128260ff1611156125ff57612be8601283614d2a565b612bf390600a614b83565b6125cc9084614afe565b600080600080856001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3c57600080fd5b505afa158015612c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7491906149b8565b6001600160781b031690506000876001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612cba57600080fd5b505afa158015612cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf291906149b8565b6001600160781b031690506000876001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3857600080fd5b505afa158015612d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7091906149b8565b6001600160781b03169050612d8482612274565b612d8d81612274565b612e17896001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612dc957600080fd5b505afa158015612ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0191906149b8565b6001600160781b03168484848b61012e54613fbd565b9350505081811015612e55576040517f9a6114b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012f54612e64908390612b6f565b92506000851315612e8057612e798383614d13565b9350612e84565b8193505b5050935093915050565b600060128260ff161015612ea7576125ea826012614d2a565b60128260ff1611156125ff576125b7601283614d2a565b6000806000612fcc612fc785876001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612f0357600080fd5b505afa158015612f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3b91906149b8565b6001600160781b0316886001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7d57600080fd5b505afa158015612f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb591906149b8565b6001600160781b031661012e5461405d565b6141d3565b9150612fd88483614d13565b90506000856001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561301557600080fd5b505afa158015613029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304d91906149b8565b6001600160781b0316905080156130e95780866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561309857600080fd5b505afa1580156130ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d091906149fa565b6130da9085614cb5565b6130e49190614b2c565b6130eb565b825b9350509250925092565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60fb5460ff161561318d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107f7565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612aad3390565b61012e546000908190815b6101365481101561334c5760006131e6612ae683613f89565b90506000816001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b15801561322357600080fd5b505afa158015613237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325b91906149b8565b6001600160781b031690506000826001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156132a157600080fd5b505afa1580156132b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d991906149b8565b6001600160781b03169050806132f15750505061333a565b60006132fd8383613735565b90506133098288614ae6565b96506133296133188783613735565b6133229083614d13565b8390612b6f565b6133339089614ae6565b9750505050505b8061334481614d79565b9150506131cd565b50509091565b60008061335f8585614229565b61336890614d94565b9050613374818461425d565b95945050505050565b6000806000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133bb57600080fd5b505afa1580156133cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f391906149fa565b84866001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561342d57600080fd5b505afa158015613441573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346591906149b8565b6001600160781b03166134789190614cb5565b6134829190614b2c565b915061348d82612274565b613599612fc761349c84614d94565b876001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b1580156134d557600080fd5b505afa1580156134e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350d91906149b8565b6001600160781b0316886001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561354f57600080fd5b505afa158015613563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358791906149b8565b6001600160781b031661012e546142b2565b92506135a58383614d13565b90509250925092565b60006135b984613a3b565b60006135c58585612ebe565b5090925090506135d482612274565b60405162b64f3d60e51b8152600481018590526001600160a01b038616906316c9e7a090602401600060405180830381600087803b15801561361557600080fd5b505af1158015613629573d6000803e3d6000fd5b505060405163283c3d8160e21b8152600481018490526001600160a01b038816925063a0f0f6049150602401600060405180830381600087803b15801561366f57600080fd5b505af1158015613683573d6000803e3d6000fd5b50506040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201869052881692506340c10f199150604401612564565b6136de81614360565b6001600160a01b038116600081815261012d6020908152604091829020805460ff19169055815192835233908301527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c9101612a23565b600081613743600282614b2c565b612b8f670de0b6b3a764000086614cb5565b600054610100900460ff168061376e575060005460ff16155b6137d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff161580156137f3576000805461ffff19166101011790555b6137fb613817565b6138036143b3565b8015610c50576000805461ff001916905550565b600054610100900460ff1680613830575060005460ff16155b6138935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff16158015613803576000805461ffff19166101011790558015610c50576000805461ff001916905550565b600054610100900460ff16806138e1575060005460ff16155b6139445760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff16158015613966576000805461ffff19166101011790555b600160c9558015610c50576000805461ff001916905550565b600054610100900460ff1680613998575060005460ff16155b6139fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff16158015613a1d576000805461ffff19166101011790555b60fb805460ff191690558015610c50576000805461ff001916905550565b6001600160a01b03811660009081526101356020526040902054801580613a6457506101325481105b15613a6d575050565b6000613a976101305461013154670de0b6b3a7640000613a8d9190614d13565b6133229190614d13565b90508015613b7857826001600160a01b0316639e79eaa561013460009054906101000a90046001600160a01b0316613b01866001600160a01b0316637284168a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2457600080fd5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613b5f57600080fd5b505af1158015613b73573d6000803e3d6000fd5b505050505b506000613b916101315483612b6f90919063ffffffff16565b90508015613c5f576000613ba58483612ebe565b5060405163283c3d8160e21b8152600481018290529092506001600160a01b038616915063a0f0f60490602401600060405180830381600087803b158015613bec57600080fd5b505af1158015613c00573d6000803e3d6000fd5b505060405162b64f3d60e51b8152600481018590526001600160a01b03871692506316c9e7a09150602401600060405180830381600087803b158015613c4557600080fd5b505af1158015613c59573d6000803e3d6000fd5b50505050505b50506001600160a01b031660009081526101356020526040812055565b6000613cd1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661445a9092919063ffffffff16565b8051909150156120885780806020019051810190613cef9190614996565b6120885760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107f7565b80821115610fab576040517ff512a72000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b803b613e0f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016107f7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b613ec65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016107f7565b600080846001600160a01b031684604051613ee19190614a58565b600060405180830381855af49150503d8060008114613f1c576040519150601f19603f3d011682016040523d82523d6000602084013e613f21565b606091505b50915091506133748282604051806060016040528060278152602001614e4060279139614469565b613f5281613d9b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60006101366000018281548110613fa257613fa2614df3565b6000918252602090912001546001600160a01b031692915050565b600080613fdf86613fce8a82614229565b87613fd98b82614229565b876144a2565b90506000613ff787613ff1878c614aa7565b90614229565b905060006140088888848689614507565b90506000614016828761425d565b905060008a6140258a84614549565b61402f9190614cd4565b9050600081121561404a5761404381614d94565b955061404e565b8095505b50505050509695505050505050565b60008261406b5750836141cb565b60006140778686614aa7565b12156140af576040517fae03266000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006140bb8585614229565b905060006140c98688614aa7565b905060006140d78587614549565b6140e2906002614c2e565b6140fe6140f787670de0b6b3a7640000614cd4565b8490614549565b6141089190614aa7565b905060006141208761411a8882614549565b90614549565b61412a8480614549565b614153866141388b8b614c2e565b6141429190614afe565b61414c908c614cd4565b8690614549565b61415d9190614cd4565b6141679190614aa7565b9050600081614177886004614c2e565b6141819190614c2e565b61418b8480614c2e565b6141959190614cd4565b905060026141b9886141a684614569565b6141af87614d94565b613ff19190614aa7565b6141c39190614afe565b955050505050505b949350505050565b6000808212156142255760405162461bcd60e51b815260206004820152601660248201527f76616c7565206d75737420626520706f7369746976650000000000000000000060448201526064016107f7565b5090565b600081614237600282614afe565b614249670de0b6b3a764000086614c2e565b6142539190614aa7565b611b4f9190614afe565b60008061429a670de0b6b3a7640000614277856004614c2e565b6142819190614c2e565b61428b8680614c2e565b6142959190614aa7565b614569565b905060026142a88583614cd4565b6141cb9190614afe565b6000806142bf8685614aa7565b905060006142cd8686614229565b905060006142ef6142de8684614229565b6142e89084614cd4565b8790614549565b90506000600261431161430a88670de0b6b3a7640000614cd4565b8b90614549565b61431b9084614aa7565b6143259190614afe565b9050600061434a6143406143398780614c2e565b8990614549565b61428b8480614c2e565b6143549083614aa7565b90506141c3818a614cd4565b6001600160a01b038116600090815261012d602052604090205460ff16610c50576040517f855b737300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054610100900460ff16806143cc575060005460ff16155b61442f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107f7565b600054610100900460ff16158015614451576000805461ffff19166101011790555b613803336130f5565b60606141cb84846000856145d9565b60608315614478575081611b4f565b8251156144885782518084602001fd5b8160405162461bcd60e51b81526004016107f79190614a74565b6000806144af8585614549565b6144b98888614549565b6144c39190614aa7565b905060006144ef6144d48787614229565b6144de8a8a614229565b6144e89190614aa7565b8590614549565b90506144fb8183614cd4565b98975050505050505050565b60006145138386614229565b61453586613ff16145248689614229565b61452e9089614cd4565b8a90614549565b61453f9190614cd4565b9695505050505050565b6000670de0b6b3a764000061455f600282614afe565b6142498486614c2e565b600060038213156145ca5750806000614583600283614afe565b61458e906001614aa7565b90505b818112156145c4579050806002816145a98186614afe565b6145b39190614aa7565b6145bd9190614afe565b9050614591565b50919050565b81156145d4575060015b919050565b6060824710156146515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107f7565b843b61469f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107f7565b600080866001600160a01b031685876040516146bb9190614a58565b60006040518083038185875af1925050503d80600081146146f8576040519150601f19603f3d011682016040523d82523d6000602084013e6146fd565b606091505b509150915061470d828286614469565b979650505050505050565b80356001600160a01b03811681146145d457600080fd5b60006020828403121561474157600080fd5b611b4f82614718565b6000806040838503121561475d57600080fd5b61476683614718565b915061477460208401614718565b90509250929050565b60008060006060848603121561479257600080fd5b61479b84614718565b92506147a960208501614718565b9150604084013590509250925092565b60008060008060008060c087890312156147d257600080fd5b6147db87614718565b95506147e960208801614718565b9450604087013593506060870135925061480560808801614718565b915060a087013590509295509295509295565b6000806040838503121561482b57600080fd5b61483483614718565b9150602083013567ffffffffffffffff8082111561485157600080fd5b818501915085601f83011261486557600080fd5b81358181111561487757614877614e09565b604051601f8201601f19908116603f0116810190838211818310171561489f5761489f614e09565b816040528281528860208487010111156148b857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156148ed57600080fd5b6148f683614718565b946020939093013593505050565b6000806000806080858703121561491a57600080fd5b61492385614718565b93506020850135925061493860408601614718565b9396929550929360600135925050565b600080600080600060a0868803121561496057600080fd5b61496986614718565b9450602086013593506040860135925061498560608701614718565b949793965091946080013592915050565b6000602082840312156149a857600080fd5b81518015158114611b4f57600080fd5b6000602082840312156149ca57600080fd5b81516001600160781b0381168114611b4f57600080fd5b6000602082840312156149f357600080fd5b5035919050565b600060208284031215614a0c57600080fd5b5051919050565b60008060408385031215614a2657600080fd5b50508035926020909101359150565b600060208284031215614a4757600080fd5b815160ff81168114611b4f57600080fd5b60008251614a6a818460208701614d4d565b9190910192915050565b6020815260008251806020840152614a93816040850160208701614d4d565b601f01601f19169190910160400192915050565b6000808212826001600160ff1b0303841381151615614ac857614ac8614db1565b82600160ff1b038412811615614ae057614ae0614db1565b50500190565b60008219821115614af957614af9614db1565b500190565b600082614b0d57614b0d614dc7565b600160ff1b821460001984141615614b2757614b27614db1565b500590565b600082614b3b57614b3b614dc7565b500490565b600181815b80851115614b7b578160001904821115614b6157614b61614db1565b80851615614b6e57918102915b93841c9390800290614b45565b509250929050565b6000611b4f60ff841683600082614b9c5750600161127c565b81614ba95750600061127c565b8160018114614bbf5760028114614bc957614be5565b600191505061127c565b60ff841115614bda57614bda614db1565b50506001821b61127c565b5060208310610133831016604e8410600b8410161715614c08575081810a61127c565b614c128383614b40565b8060001904821115614c2657614c26614db1565b029392505050565b60006001600160ff1b03600084136000841385830485118282161615614c5657614c56614db1565b600160ff1b6000871286820588128184161615614c7557614c75614db1565b60008712925087820587128484161615614c9157614c91614db1565b87850587128184161615614ca757614ca7614db1565b505050929093029392505050565b6000816000190483118215151615614ccf57614ccf614db1565b500290565b600080831283600160ff1b01831281151615614cf257614cf2614db1565b836001600160ff1b03018313811615614d0d57614d0d614db1565b50500390565b600082821015614d2557614d25614db1565b500390565b600060ff821660ff841680821015614d4457614d44614db1565b90039392505050565b60005b83811015614d68578181015183820152602001614d50565b838111156124085750506000910152565b6000600019821415614d8d57614d8d614db1565b5060010190565b6000600160ff1b821415614daa57614daa614db1565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206b64e1133c0fd01cbfb41f9ebbbcf3d6137a84a9f7d9e0f7930ce044e134ee4664736f6c63430008050033",
  "devdoc": {
    "details": "The main entry-point of Wombat protocol Note: All variables are 18 decimals, except from that of underlying tokens",
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "assetOf(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,address,uint256)": {
        "details": "Asset needs to be created and added to pool before any operation",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "exchangeRate(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "exchangeRate": "exchangeRate"
        }
      },
      "mintFee(address)": {
        "params": {
          "token": "The address of the token to collect fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "pauseAsset(address)": {
        "details": "pause asset, restricting deposit and swap operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quotePotentialDeposit(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "amount": "The amount to deposit",
          "token": "The token to deposit by user"
        },
        "returns": {
          "liquidity": "The potential liquidity user would receive",
          "reward": "reward"
        }
      },
      "quotePotentialSwap(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromAmount": "The amount to quote",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "fee": "The fee that would be applied"
        }
      },
      "removeAsset(address)": {
        "details": "Can only be called by owner",
        "params": {
          "key": "The address of token to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAmpFactor(uint256)": {
        "params": {
          "ampFactor_": "new pool's amplification factor"
        }
      },
      "setDev(address)": {
        "params": {
          "dev_": "new contract dev address"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "feeTo_": "new fee beneficiary"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "setRetentionRatio(uint256)": {
        "params": {
          "retentionRatio_": "new pool's retentionRatio"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "unpauseAsset(address)": {
        "details": "unpause asset, enabling deposit and swap operations"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "details": "Also, coverage ratio of toAsset must be higher than 1 after withdrawal for this to be accepted",
        "params": {
          "deadline": "The deadline to be respected",
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity to be withdrawn (in fromToken decimal)",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "toAmount": "The total amount withdrawn"
        }
      }
    },
    "title": "Pool",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "AssetRemoved(address,address)": {
        "notice": "An event thats emitted when asset is removed from Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "ampFactor()": {
        "notice": "Amplification factor"
      },
      "assetOf(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "deposit(address,uint256,address,uint256)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "dev()": {
        "notice": "Dev address"
      },
      "exchangeRate(address)": {
        "notice": "Returns the exchange rate of the LP token"
      },
      "haircutRate()": {
        "notice": "Haircut rate"
      },
      "initialize(uint256,uint256)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpDividendRatio()": {
        "notice": "LP dividend ratio : the ratio of haircut that should distribute to LP"
      },
      "mintFee(address)": {
        "notice": "Send fee collected to the fee beneficiary"
      },
      "mintFeeThreshold()": {
        "notice": "The threshold to mint fee (unit: WAD)"
      },
      "quotePotentialDeposit(address,uint256)": {
        "notice": "Quotes potential deposit from pool"
      },
      "quotePotentialSwap(address,address,int256)": {
        "notice": "Quotes potential outcome of a swap given current state, taking in account slippage and haircut"
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "removeAsset(address)": {
        "notice": "Removes asset from asset struct"
      },
      "retentionRatio()": {
        "notice": "Retention ratio: the ratio of haircut that should stay in the pool"
      },
      "setAmpFactor(uint256)": {
        "notice": "Changes the pools amplification factor. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setFeeTo(address)": {
        "notice": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setMintFeeThreshold(uint256)": {
        "notice": "Set min fee to mint"
      },
      "setRetentionRatio(uint256)": {
        "notice": "Changes the pools retentionRatio. Can only be set by the contract owner."
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "notice": "Enables withdrawing liquidity from an asset using LP from a different asset"
      }
    },
    "notice": "Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 567,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 570,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 550,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 683,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1141,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 811,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 854,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 705,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 796,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7002,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_pausedAssets",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7135,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "ampFactor",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 7138,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "haircutRate",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 7141,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "retentionRatio",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 7144,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "lpDividendRatio",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 7147,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "mintFeeThreshold",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 7150,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "dev",
        "offset": 0,
        "slot": "307",
        "type": "t_address"
      },
      {
        "astId": 7152,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "feeTo",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      },
      {
        "astId": 7158,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_feeCollected",
        "offset": 0,
        "slot": "309",
        "type": "t_mapping(t_contract(IAsset)5900,t_uint256)"
      },
      {
        "astId": 7162,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_assets",
        "offset": 0,
        "slot": "310",
        "type": "t_struct(AssetMap)7132_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAsset)5900": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IAsset)5900)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IAsset)",
        "numberOfBytes": "32",
        "value": "t_contract(IAsset)5900"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IAsset)5900,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAsset)5900",
        "label": "mapping(contract IAsset => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetMap)7132_storage": {
        "encoding": "inplace",
        "label": "struct Pool.AssetMap",
        "members": [
          {
            "astId": 7122,
            "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7127,
            "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_contract(IAsset)5900)"
          },
          {
            "astId": 7131,
            "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}