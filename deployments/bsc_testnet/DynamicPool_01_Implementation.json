{
  "address": "0xA0cAFB078aCe08a6B8C1efA1F47cCc615C879F7c",
  "abi": [
    {
      "inputs": [],
      "name": "CORE_UNDERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_AMOUNT_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_SAME_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetAmpFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpDividendRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retentionRatio",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetHaircutRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetMasterWombat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetMintFeeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferTipBucket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnpausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addressOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ampFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantInUint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDividendRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "pauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "toAmount",
          "type": "int256"
        }
      ],
      "name": "quoteAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAmpFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev_",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpDividendRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterWombat_",
          "type": "address"
        }
      ],
      "name": "setMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFeeThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setMintFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tipBucketBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferTipBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unpauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x942dd8c97bc8c91a7d093a5fa4507a9d07044fa6d228b967d9e3fcdd7f332314",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0xA0cAFB078aCe08a6B8C1efA1F47cCc615C879F7c",
    "transactionIndex": 0,
    "gasUsed": "4801199",
    "logsBloom": "0x
    "blockHash": "0xe80e3a7002635f7033123fb29c738f3287bb88703e84bc6b0634a8f5b0082018",
    "transactionHash": "0x942dd8c97bc8c91a7d093a5fa4507a9d07044fa6d228b967d9e3fcdd7f332314",
    "logs": [],
    "blockNumber": 21647505,
    "cumulativeGasUsed": "4801199",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3f11f1b01ef900a6c9411388c74edaf2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CORE_UNDERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_AMOUNT_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_SAME_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetAmpFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpDividendRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retentionRatio\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHaircutRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMasterWombat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMintFeeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferTipBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addressOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantInUint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"toAmount\",\"type\":\"int256\"}],\"name\":\"quoteAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"}],\"name\":\"setAmpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterWombat_\",\"type\":\"address\"}],\"name\":\"setMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeThreshold_\",\"type\":\"uint256\"}],\"name\":\"setMintFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tipBucketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTipBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unpauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Supports dynamic assets. Assume r* to be close to 1. Be aware that r* changes when the relative price of the asset updates\",\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"addressOfAsset(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"details\":\"Asset needs to be created and added to pool before any operation. This function assumes tax free token.\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"exchangeRate(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"xr\":\"The exchange rate of LP token\"}},\"mintFee(address)\":{\"params\":{\"token\":\"The address of the token to collect fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"pauseAsset(address)\":{\"details\":\"pause asset, restricting deposit and swap operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quoteAmountIn(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromToken\":\"The initial ERC20 token\",\"toAmount\":\"The given output amount\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"amountIn\":\"The input amount required\",\"haircut\":\"The haircut that would be applied\"}},\"quotePotentialDeposit(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"amount\":\"The amount to deposit\",\"token\":\"The token to deposit by user\"},\"returns\":{\"liquidity\":\"The potential liquidity user would receive\",\"reward\":\"reward\"}},\"quotePotentialSwap(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromAmount\":\"The given input amount\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"fee\":\"The fee that would be applied\"}},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity (amount of the lp assets) to be withdrawn\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"withdrewAmount\":\"The amount of the from-token that is withdrew\"}},\"removeAsset(address)\":{\"details\":\"Can only be called by owner\",\"params\":{\"token\":\"The address of token to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAmpFactor(uint256)\":{\"params\":{\"ampFactor_\":\"new pool's amplification factor\"}},\"setDev(address)\":{\"params\":{\"dev_\":\"new contract dev address\"}},\"setFeeTo(address)\":{\"params\":{\"feeTo_\":\"new fee beneficiary\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"details\":\"This function assumes tax free token.\",\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"unpauseAsset(address)\":{\"details\":\"unpause asset, enabling deposit and swap operations\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity to be withdrawn (in fromToken decimal)\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"toAmount\":\"The total amount withdrawn\"}}},\"title\":\"Dynamic Pool\",\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"AssetRemoved(address,address)\":{\"notice\":\"An event thats emitted when asset is removed from Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"addressOfAsset(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"ampFactor()\":{\"notice\":\"Amplification factor\"},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"dev()\":{\"notice\":\"Dev address\"},\"exchangeRate(address)\":{\"notice\":\"Returns the exchange rate of the LP token\"},\"getTokens()\":{\"notice\":\"Return list of tokens in the pool\"},\"haircutRate()\":{\"notice\":\"Haircut rate\"},\"initialize(uint256,uint256)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpDividendRatio()\":{\"notice\":\"LP dividend ratio : the ratio of haircut that should distribute to LP\"},\"mintFee(address)\":{\"notice\":\"Send fee collected to the fee beneficiary\"},\"mintFeeThreshold()\":{\"notice\":\"The threshold to mint fee (unit: WAD)\"},\"quoteAmountIn(address,address,int256)\":{\"notice\":\"Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)\"},\"quotePotentialDeposit(address,uint256)\":{\"notice\":\"Quotes potential deposit from pool\"},\"quotePotentialSwap(address,address,int256)\":{\"notice\":\"Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage).\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"notice\":\"Quotes potential withdrawal from other asset from the pool\"},\"removeAsset(address)\":{\"notice\":\"Removes asset from asset struct\"},\"retentionRatio()\":{\"notice\":\"Retention ratio: the ratio of haircut that should stay in the pool\"},\"setAmpFactor(uint256)\":{\"notice\":\"Changes the pools amplification factor. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setFeeTo(address)\":{\"notice\":\"Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setMintFeeThreshold(uint256)\":{\"notice\":\"Set min fee to mint\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Enables withdrawing liquidity from an asset using LP from a different asset\"}},\"notice\":\"Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/DynamicPool.sol\":\"DynamicPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc4fad3a1df63344db686f3764208f5e62592346ec3bc5a7fcb161f9d1b1e59b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf2611a58f79def15405a1144303fbdcdbac177d3a2b291baec538fc4d04a5c09\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x204e0fb5201de1f4fced816e1044f3379efb229caf46d855a7927fbf823bcd89\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IRelativePriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IRelativePriceProvider {\\n    /**\\n     * @notice get the relative price in WAD\\n     */\\n    function getRelativePrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe3e9082f4cbd2e9ee69930cee61838aa7a0e25dfa47ab1df54126187df756f60\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10**(18 - d);\\n        } else if (d > 18) {\\n            return (x / (10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * 10**(d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xf1ea82815cfaf6646386567a515dbe20763438ce18ccc2e7d165242d75646503\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10**18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10**(18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10**(d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x779eb90c3ebaa99535702d097e2108e09116a242a8ad00b7bdf86411386e13d4\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV2\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n */\\ncontract CoreV2 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n    int256 internal constant WAD_I = 10**18;\\n    uint256 internal constant WAD = 10**18;\\n\\n    error CORE_UNDERFLOW();\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function _swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) internal pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        if (Dy < 0) {\\n            quote = uint256(-Dy);\\n        } else {\\n            quote = uint256(Dy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(\\n        int256 Lx,\\n        int256 rx,\\n        int256 Ly,\\n        int256 ry,\\n        int256 A\\n    ) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(\\n        int256 Lx,\\n        int256 Ly,\\n        int256 rx_,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256) {\\n        return Lx.wmul(rx_ - A.wdiv(rx_)).wdiv(Ly) - D.wdiv(Ly);\\n    }\\n\\n    /**\\n     * @return v positive value indicates a reward and negative value indicates a fee\\n     */\\n    function depositRewardImpl(\\n        int256 D,\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 v) {\\n        if (L_i == 0) {\\n            // early return in case of div of 0\\n            return 0;\\n        }\\n        if (delta_i + SL == 0) {\\n            return L_i - A_i;\\n        }\\n\\n        int256 r_i_ = _targetedCovRatio(SL, delta_i, A_i, L_i, D, A);\\n        v = A_i + delta_i - (L_i + delta_i).wmul(r_i_);\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = _equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _equilCovRatio(\\n        int256 D,\\n        int256 SL,\\n        int256 A\\n    ) internal pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    function _newEquilCovRatio(\\n        int256 er,\\n        int256 SL,\\n        int256 delta_i\\n    ) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(\\n        int256 er_,\\n        int256 A,\\n        int256 SL,\\n        int256 delta_i\\n    ) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice TODO (if any) from Yellow Paper (Haircut).\\n     * @dev Applies haircut rate to amount\\n     * @param amount The amount that will receive the discount\\n     * @param rate The rate to be applied\\n     * @return The result of operation.\\n     */\\n    function _haircut(uint256 amount, uint256 rate) internal pure returns (uint256) {\\n        return amount.wmul(rate);\\n    }\\n}\\n\",\"keccak256\":\"0xc5d08951cf3c33d7e7604db9bc43ae488e0bbacd85e8be1bb253b185bddcf662\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/DynamicPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../interfaces/IRelativePriceProvider.sol';\\nimport './Pool.sol';\\n\\n/**\\n * @title Dynamic Pool\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev Supports dynamic assets. Assume r* to be close to 1.\\n * Be aware that r* changes when the relative price of the asset updates\\n */\\ncontract DynamicPool is Pool {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /**\\n     * @notice multiply / divide the cash, liability and amount of a swap by relative price\\n     * Invariant: D = Sum of P_i * L_i * (r_i - A / r_i)\\n     */\\n    function _quoteFactor(IAsset fromAsset, IAsset toAsset) internal view override returns (uint256) {\\n        uint256 fromAssetRelativePrice = IRelativePriceProvider(address(fromAsset)).getRelativePrice();\\n        // theoretically we should multiply toCash, toLiability and idealToAmount by toAssetRelativePrice\\n        // however we simplify the calculation by dividing \\\"from amounts\\\" by toAssetRelativePrice\\n        uint256 toAssetRelativePrice = IRelativePriceProvider(address(toAsset)).getRelativePrice();\\n\\n        return (1e18 * fromAssetRelativePrice) / toAssetRelativePrice;\\n    }\\n\\n    /**\\n     * @dev Invariant: D = Sum of P_i * L_i * (r_i - A / r_i)\\n     */\\n    function _globalInvariantFunc() internal view override returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n            int256 P_i = int256(uint256(IRelativePriceProvider(address(asset)).getRelativePrice()));\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += P_i.wmul(L_i);\\n            D += P_i.wmul(L_i).wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd710ecf503ecad6080652b8acd6ef8ed982401908cb562bb243189de073b6ae\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PausableAssets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\n/**\\n * @title PausableAssets\\n * @notice Handles assets pause and unpause of Wombat protocol.\\n * @dev Allows pausing and unpausing of deposit and swap operations\\n */\\ncontract PausableAssets {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event PausedAsset(address asset, address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event UnpausedAsset(address asset, address account);\\n\\n    mapping(address => bool) private _pausedAssets;\\n\\n    error WOMBAT_ASSET_ALREADY_PAUSED();\\n    error WOMBAT_ASSET_NOT_PAUSED();\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function requireAssetNotPaused(address asset) internal view {\\n        if (_pausedAssets[asset]) revert WOMBAT_ASSET_ALREADY_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function requireAssetPaused(address asset) internal view {\\n        if (!_pausedAssets[asset]) revert WOMBAT_ASSET_NOT_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Triggers paused state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function _pauseAsset(address asset) internal {\\n        requireAssetNotPaused(asset);\\n        _pausedAssets[asset] = true;\\n        emit PausedAsset(asset, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function _unpauseAsset(address asset) internal {\\n        requireAssetPaused(asset);\\n        _pausedAssets[asset] = false;\\n        emit UnpausedAsset(asset, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe12faf6a6814fa9734798b98dc025a0e2b17c2a16a0de3d4e6a0a733ccbcd7a6\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './CoreV2.sol';\\nimport '../interfaces/IAsset.sol';\\nimport './PausableAssets.sol';\\nimport '../../wombat-governance/interfaces/IMasterWombat.sol';\\nimport '../interfaces/IPool.sol';\\n\\n/**\\n * @title Pool\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n * Note: All variables are 18 decimals, except from that of underlying tokens\\n */\\ncontract Pool is\\n    Initializable,\\n    IPool,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PausableAssets,\\n    CoreV2\\n{\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    /// @notice Asset Map struct holds assets\\n    struct AssetMap {\\n        address[] keys;\\n        mapping(address => IAsset) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    /* Storage */\\n\\n    /// @notice Amplification factor\\n    uint256 public ampFactor;\\n\\n    /// @notice Haircut rate\\n    uint256 public haircutRate;\\n\\n    /// @notice Retention ratio: the ratio of haircut that should stay in the pool\\n    uint256 public retentionRatio;\\n\\n    /// @notice LP dividend ratio : the ratio of haircut that should distribute to LP\\n    uint256 public lpDividendRatio;\\n\\n    /// @notice The threshold to mint fee (unit: WAD)\\n    uint256 public mintFeeThreshold;\\n\\n    /// @notice Dev address\\n    address public dev;\\n\\n    address public feeTo;\\n\\n    address public masterWombat;\\n\\n    /// @notice Dividend collected by each asset (unit: WAD)\\n    mapping(IAsset => uint256) internal _feeCollected;\\n\\n    /// @notice A record of assets inside Pool\\n    AssetMap internal _assets;\\n\\n    /* Events */\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when asset is removed from Pool\\n    event AssetRemoved(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    event SetDev(address addr);\\n    event SetMasterWombat(address addr);\\n    event SetFeeTo(address addr);\\n\\n    event SetMintFeeThreshold(uint256 value);\\n    event SetFee(uint256 lpDividendRatio, uint256 retentionRatio);\\n    event SetAmpFactor(uint256 value);\\n    event SetHaircutRate(uint256 value);\\n\\n    event FillPool(address token, uint256 amount);\\n    event TransferTipBucket(address token, uint256 amount, address to);\\n\\n    /* Errors */\\n\\n    error WOMBAT_FORBIDDEN();\\n    error WOMBAT_EXPIRED();\\n\\n    error WOMBAT_ASSET_NOT_EXISTS();\\n    error WOMBAT_ASSET_ALREADY_EXIST();\\n\\n    error WOMBAT_ZERO_ADDRESS();\\n    error WOMBAT_ZERO_AMOUNT();\\n    error WOMBAT_ZERO_LIQUIDITY();\\n    error WOMBAT_INVALID_VALUE();\\n    error WOMBAT_SAME_ADDRESS();\\n    error WOMBAT_AMOUNT_TOO_LOW();\\n    error WOMBAT_CASH_NOT_ENOUGH();\\n\\n    /* Pesudo modifiers to safe gas */\\n\\n    function _checkLiquidity(uint256 liquidity) internal pure {\\n        if (liquidity == 0) revert WOMBAT_ZERO_LIQUIDITY();\\n    }\\n\\n    function _checkAddress(address to) internal pure {\\n        if (to == address(0)) revert WOMBAT_ZERO_ADDRESS();\\n    }\\n\\n    function _checkSameAddress(address from, address to) internal pure {\\n        if (from == to) revert WOMBAT_SAME_ADDRESS();\\n    }\\n\\n    function _checkAmount(uint256 minAmt, uint256 amt) internal pure {\\n        if (minAmt > amt) revert WOMBAT_AMOUNT_TOO_LOW();\\n    }\\n\\n    function _ensure(uint256 deadline) internal view {\\n        if (deadline < block.timestamp) revert WOMBAT_EXPIRED();\\n    }\\n\\n    function _onlyDev() internal view {\\n        if (dev != msg.sender) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /* Construtor and setters */\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public virtual initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        ampFactor = ampFactor_;\\n        haircutRate = haircutRate_;\\n\\n        lpDividendRatio = WAD;\\n\\n        dev = msg.sender;\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external nonReentrant {\\n        _onlyDev();\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external nonReentrant {\\n        _onlyDev();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev pause asset, restricting deposit and swap operations\\n     */\\n    function pauseAsset(address token) external nonReentrant {\\n        _onlyDev();\\n        _pauseAsset(token);\\n    }\\n\\n    /**\\n     * @dev unpause asset, enabling deposit and swap operations\\n     */\\n    function unpauseAsset(address token) external nonReentrant {\\n        _onlyDev();\\n        _unpauseAsset(token);\\n    }\\n\\n    // Setters //\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev_ new contract dev address\\n     */\\n    function setDev(address dev_) external onlyOwner {\\n        _checkAddress(dev_);\\n        dev = dev_;\\n        emit SetDev(dev_);\\n    }\\n\\n    function setMasterWombat(address masterWombat_) external onlyOwner {\\n        _checkAddress(masterWombat_);\\n        masterWombat = masterWombat_;\\n        emit SetMasterWombat(masterWombat_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools amplification factor. Can only be set by the contract owner.\\n     * @param ampFactor_ new pool's amplification factor\\n     */\\n    function setAmpFactor(uint256 ampFactor_) external onlyOwner {\\n        if (ampFactor_ > WAD) revert WOMBAT_INVALID_VALUE(); // ampFactor_ should not be set bigger than 1\\n        ampFactor = ampFactor_;\\n        emit SetAmpFactor(ampFactor_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        if (haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE(); // haircutRate_ should not be set bigger than 1\\n        haircutRate = haircutRate_;\\n        emit SetHaircutRate(haircutRate_);\\n    }\\n\\n    function setFee(uint256 lpDividendRatio_, uint256 retentionRatio_) external onlyOwner {\\n        if (retentionRatio_ + lpDividendRatio_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        mintAllFee();\\n        retentionRatio = retentionRatio_;\\n        lpDividendRatio = lpDividendRatio_;\\n        emit SetFee(lpDividendRatio_, retentionRatio_);\\n    }\\n\\n    /**\\n     * @notice Changes the fee beneficiary. Can only be set by the contract owner.\\n     * This value cannot be set to 0 to avoid unsettled fee.\\n     * @param feeTo_ new fee beneficiary\\n     */\\n    function setFeeTo(address feeTo_) external onlyOwner {\\n        _checkAddress(feeTo_);\\n        feeTo = feeTo_;\\n        emit SetFeeTo(feeTo_);\\n    }\\n\\n    /**\\n     * @notice Set min fee to mint\\n     */\\n    function setMintFeeThreshold(uint256 mintFeeThreshold_) external onlyOwner {\\n        mintFeeThreshold = mintFeeThreshold_;\\n        emit SetMintFeeThreshold(mintFeeThreshold_);\\n    }\\n\\n    /* Assets */\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner nonReentrant {\\n        _checkAddress(asset);\\n        _checkAddress(token);\\n\\n        if (_containsAsset(token)) revert WOMBAT_ASSET_ALREADY_EXIST();\\n        _assets.values[token] = IAsset(asset);\\n        _assets.indexOf[token] = _assets.keys.length;\\n        _assets.keys.push(token);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Removes asset from asset struct\\n     * @dev Can only be called by owner\\n     * @param token The address of token to remove\\n     */\\n    function removeAsset(address token) external onlyOwner {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n\\n        address asset = address(_getAsset(token));\\n        delete _assets.values[token];\\n\\n        uint256 index = _assets.indexOf[token];\\n        uint256 lastIndex = _assets.keys.length - 1;\\n        address lastKey = _assets.keys[lastIndex];\\n\\n        _assets.indexOf[lastKey] = index;\\n        delete _assets.indexOf[token];\\n\\n        _assets.keys[index] = lastKey;\\n        _assets.keys.pop();\\n\\n        emit AssetRemoved(token, asset);\\n    }\\n\\n    /**\\n     * @notice Return list of tokens in the pool\\n     */\\n    function getTokens() external view override returns (address[] memory) {\\n        return _assets.keys;\\n    }\\n\\n    /**\\n     * @notice get length of asset list\\n     * @return the size of the asset list\\n     */\\n    function _sizeOfAssetList() internal view returns (uint256) {\\n        return _assets.keys.length;\\n    }\\n\\n    /**\\n     * @notice Gets asset with token address key\\n     * @param key The address of token\\n     * @return the corresponding asset in state\\n     */\\n    function _getAsset(address key) internal view returns (IAsset) {\\n        return _assets.values[key];\\n    }\\n\\n    /**\\n     * @notice Gets key (address) at index\\n     * @param index the index\\n     * @return the key of index\\n     */\\n    function _getKeyAtIndex(uint256 index) internal view returns (address) {\\n        return _assets.keys[index];\\n    }\\n\\n    /**\\n     * @notice Looks if the asset is contained by the list\\n     * @param token The address of token to look for\\n     * @return bool true if the asset is in asset list, false otherwise\\n     */\\n    function _containsAsset(address token) internal view returns (bool) {\\n        return _assets.values[token] != IAsset(address(0));\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) internal view returns (IAsset) {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        return _assets.values[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function addressOfAsset(address token) external view override returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function _exactDepositToInEquil(IAsset asset, uint256 amount)\\n        internal\\n        view\\n        returns (\\n            uint256 lpTokenToMint,\\n            uint256 liabilityToMint,\\n            uint256 reward\\n        )\\n    {\\n        liabilityToMint = exactDepositLiquidityInEquilImpl(\\n            int256(amount),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToMint >= amount) {\\n            reward = liabilityToMint - amount;\\n        } else {\\n            // rounding error\\n            liabilityToMint = amount;\\n        }\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        // collect fee before deposit\\n        _mintFee(asset);\\n\\n        uint256 liabilityToMint;\\n        (liquidity, liabilityToMint, ) = _exactDepositToInEquil(asset, amount);\\n\\n        _checkLiquidity(liquidity);\\n        _checkAmount(minimumLiquidity, liquidity);\\n\\n        asset.addCash(amount);\\n        asset.addLiability(liabilityToMint);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation. This function assumes tax free token.\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external override nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        if (amount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(token);\\n\\n        IAsset asset = _assetOf(token);\\n        IERC20(token).safeTransferFrom(address(msg.sender), address(asset), amount);\\n\\n        if (!shouldStake) {\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, to);\\n        } else {\\n            _checkAddress(masterWombat);\\n            // deposit and stake on behalf of the user\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, address(this));\\n\\n            asset.approve(masterWombat, liquidity);\\n\\n            uint256 pid = IMasterWombat(masterWombat).getAssetPid(address(asset));\\n            IMasterWombat(masterWombat).depositFor(pid, liquidity, to);\\n        }\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential deposit from pool\\n     * @dev To be used by frontend\\n     * @param token The token to deposit by user\\n     * @param amount The amount to deposit\\n     * @return liquidity The potential liquidity user would receive\\n     * @return reward\\n     */\\n    function quotePotentialDeposit(address token, uint256 amount)\\n        external\\n        view\\n        override\\n        returns (uint256 liquidity, uint256 reward)\\n    {\\n        IAsset asset = _assetOf(token);\\n        (liquidity, , reward) = _exactDepositToInEquil(asset, amount.toWad(asset.underlyingTokenDecimals()));\\n    }\\n\\n    /* Withdraw */\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee\\n     */\\n    function _withdrawFrom(IAsset asset, uint256 liquidity)\\n        internal\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 liabilityToBurn,\\n            uint256 fee\\n        )\\n    {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        _checkLiquidity(liabilityToBurn);\\n\\n        amount = withdrawalAmountInEquilImpl(\\n            -int256(liabilityToBurn),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToBurn >= amount) {\\n            fee = liabilityToBurn - amount;\\n        } else {\\n            // rounding error\\n            amount = liabilityToBurn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @return amount The total amount withdrawn\\n     */\\n    function _withdraw(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 minimumAmount\\n    ) internal returns (uint256 amount) {\\n        // collect fee before withdraw\\n        _mintFee(asset);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, ) = _withdrawFrom(asset, liquidity);\\n        _checkAmount(minimumAmount, amount);\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount);\\n        asset.removeLiability(liabilityToBurn);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (asset.liability() > 0 && uint256(asset.cash()).wdiv(asset.liability()) < WAD / 100)\\n            revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        _checkAddress(to);\\n        _ensure(deadline);\\n\\n        IAsset asset = _assetOf(token);\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        amount = _withdraw(asset, liquidity, minimumAmount.toWad(decimals)).fromWad(decimals);\\n        asset.transferUnderlyingToken(to, amount);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Enables withdrawing liquidity from an asset using LP from a different asset\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity to be withdrawn (in fromToken decimal)\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return toAmount The total amount withdrawn\\n     */\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 toAmount) {\\n        _checkAddress(to);\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        // Withdraw and swap\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        IERC20(fromAsset).safeTransferFrom(address(msg.sender), address(fromAsset), liquidity);\\n        uint256 fromAmountInWad = _withdraw(fromAsset, liquidity, 0);\\n        (toAmount, ) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmountInWad,\\n            minimumAmount.toWad(toAsset.underlyingTokenDecimals())\\n        );\\n\\n        toAmount = toAmount.fromWad(toAsset.underlyingTokenDecimals());\\n        toAsset.transferUnderlyingToken(to, toAmount);\\n\\n        emit Withdraw(msg.sender, toToken, toAmount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return fee The fee that would be applied\\n     */\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        override\\n        returns (uint256 amount, uint256 fee)\\n    {\\n        _checkLiquidity(liquidity);\\n        IAsset asset = _assetOf(token);\\n        (amount, , fee) = _withdrawFrom(asset, liquidity);\\n        amount = amount.fromWad(asset.underlyingTokenDecimals());\\n    }\\n\\n    function _quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) internal view returns (uint256 amount, uint256 withdrewAmount) {\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        // quote withdraw\\n        (withdrewAmount, , ) = _withdrawFrom(fromAsset, liquidity);\\n\\n        // quote swap\\n        uint256 fromCash = uint256(fromAsset.cash()) - withdrewAmount;\\n        uint256 fromLiability = uint256(fromAsset.liability()) - liquidity;\\n\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            withdrewAmount = (withdrewAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = _swapQuoteFunc(\\n            int256(fromCash),\\n            int256(uint256(toAsset.cash())),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            int256(withdrewAmount),\\n            int256(ampFactor)\\n        );\\n        // remove haircut\\n        amount = idealToAmount - idealToAmount.wmul(haircutRate);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from other asset from the pool\\n     * @dev To be used by frontend\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity (amount of the lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return withdrewAmount The amount of the from-token that is withdrew\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual returns (uint256 amount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        (amount, withdrewAmount) = _quotePotentialWithdrawFromOtherAsset(fromToken, toToken, liquidity);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        amount = amount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Swap */\\n\\n    /**\\n     * @notice Return the scale factor that should applied on from-amounts in a swap given\\n     * the from-asset and the to-asset.\\n     * @dev not applicable to a plain pool\\n     */\\n    function _quoteFactor(\\n        IAsset, // fromAsset\\n        IAsset // toAsset\\n    ) internal view virtual returns (uint256) {\\n        // virtual function; do nothing\\n        return 1e18;\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view virtual returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 fromCash = uint256(fromAsset.cash());\\n        uint256 fromLiability = uint256(fromAsset.liability());\\n        uint256 toCash = uint256(toAsset.cash());\\n\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * int256(scaleFactor)) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = _swapQuoteFunc(\\n            int256(fromCash),\\n            int256(toCash),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            int256(ampFactor)\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert WOMBAT_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = (uint256(-fromAmount)).wmul(haircutRate);\\n        }\\n    }\\n\\n    /**\\n     * expect fromAmount and minimumToAmount to be in WAD\\n     */\\n    function _swap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = _quoteFrom(fromAsset, toAsset, int256(fromAmount));\\n        _checkAmount(minimumToAmount, actualToAmount);\\n\\n        _feeCollected[toAsset] += haircut;\\n\\n        fromAsset.addCash(fromAmount);\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        toAsset.removeCash(actualToAmount + haircut);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (uint256(toAsset.cash()).wdiv(toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @dev This function assumes tax free token.\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n\\n        (actualToAmount, haircut) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumToAmount.toWad(toDecimal)\\n        );\\n\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        haircut = haircut.fromWad(toDecimal);\\n\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The given input amount\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) public view override returns (uint256 potentialOutcome, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        fromAmount = fromAmount.toWad(fromAsset.underlyingTokenDecimals());\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        potentialOutcome = potentialOutcome.fromWad(toAsset.underlyingTokenDecimals());\\n        haircut = haircut.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param toAmount The given output amount\\n     * @return amountIn The input amount required\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view override returns (uint256 amountIn, uint256 haircut) {\\n        return quotePotentialSwap(toToken, fromToken, -toAmount);\\n    }\\n\\n    /* Queries */\\n\\n    /**\\n     * @notice Returns the exchange rate of the LP token\\n     * @param token The address of the token\\n     * @return xr The exchange rate of LP token\\n     */\\n    function exchangeRate(address token) external view returns (uint256 xr) {\\n        IAsset asset = _assetOf(token);\\n        if (asset.totalSupply() == 0) return WAD;\\n        return xr = uint256(asset.liability()).wdiv(uint256(asset.totalSupply()));\\n    }\\n\\n    function globalEquilCovRatio() external view returns (uint256 equilCovRatio, uint256 invariantInUint) {\\n        int256 invariant;\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        equilCovRatio = uint256(_equilCovRatio(invariant, SL, int256(ampFactor)));\\n        invariantInUint = uint256(invariant);\\n    }\\n\\n    function tipBucketBalance(address token) public view returns (uint256 balance) {\\n        IAsset asset = _assetOf(token);\\n        return\\n            asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) - asset.cash() - _feeCollected[asset];\\n    }\\n\\n    /* Utils */\\n\\n    // this function is used to move fund from tip bucket to the pool to keep r* = 1 as error accumulates\\n    // unit of amount should be in WAD\\n    function fillPool(address token, uint256 amount) external {\\n        _onlyDev();\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n            asset.cash() -\\n            _feeCollected[asset];\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.addCash(amount);\\n        emit FillPool(token, amount);\\n    }\\n\\n    // unit of amount should be in WAD\\n    function transferTipBucket(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOwner {\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = tipBucketBalance(token);\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.transferUnderlyingToken(to, amount.fromWad(asset.underlyingTokenDecimals()));\\n        emit TransferTipBucket(token, amount, to);\\n    }\\n\\n    function _globalInvariantFunc() internal view virtual returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += L_i;\\n            D += L_i.wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to send fee collected to the fee beneficiary\\n     * @param asset The address of the asset to collect fee\\n     */\\n    function _mintFee(IAsset asset) internal {\\n        uint256 feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0 || feeCollected < mintFeeThreshold) {\\n            // early return\\n            return;\\n        }\\n        {\\n            // dividend to veWOM\\n            uint256 dividend = feeCollected.wmul(WAD - lpDividendRatio - retentionRatio);\\n\\n            if (dividend > 0) {\\n                asset.transferUnderlyingToken(feeTo, dividend.fromWad(asset.underlyingTokenDecimals()));\\n            }\\n        }\\n        {\\n            // dividend to LP\\n            uint256 lpDividend = feeCollected.wmul(lpDividendRatio);\\n            if (lpDividend > 0) {\\n                // exact deposit to maintain r* = 1\\n                // increase the value of the LP token, i.e. assetsPerShare\\n                (, uint256 liabilityToMint, ) = _exactDepositToInEquil(asset, lpDividend);\\n                asset.addLiability(liabilityToMint);\\n                asset.addCash(lpDividend);\\n            }\\n        }\\n\\n        _feeCollected[asset] = 0;\\n    }\\n\\n    function mintAllFee() internal {\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send fee collected to the fee beneficiary\\n     * @param token The address of the token to collect fee\\n     */\\n    function mintFee(address token) external {\\n        _mintFee(_assetOf(token));\\n    }\\n}\\n\",\"keccak256\":\"0x9f0a8bf22ac8801d2eb6ca4a1302754b60e0f46952a59ba60d37efa635677106\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256 transfered,\\n            uint256[] memory rewards,\\n            uint256[] memory additionalRewards\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x4ed8f1f02ce578468e115e03a4f3671d13a273cad6e373a45a18af6041096444\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608080604052346100175761567590816200001d8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c8063017b82921461036f578063017e7e58146103665780630705999d1461035d578063070f81d91461035457806309a5fca31461034b5780630f91f06f146103425780633753b14a146103395780633bd61ba8146103305780633f4ba83a146103275780634a5e42b11461031e5780634fdd64e51461031557806352f7c9881461030c5780635c975abb146103035780635cfe092e146102fa57806361858e23146102f15780636281baef146102e85780636922d5ca146102df578063715018a6146102d6578063815bfd29146102cd5780638456cb59146102c45780638a2dfe09146102bb5780638da5cb5b146102b2578063907448ed146102a957806391cca3db146102a057806393aeea02146102975780639908fc8b1461028e5780639abacb41146102855780639e4416b71461027c578063a4275ceb14610273578063aa6ca8081461026a578063d043c56514610261578063d0dd0e5614610258578063d30ffeda1461024f578063d477f05f14610246578063da4899971461023d578063dc3b7c8b14610234578063e4a301161461022b578063e9249cc714610222578063f2fde38b14610219578063f46901ed14610210578063f57e84d514610207578063f8b49e72146101fe5763fca8f308146101f657600080fd5b61000e612675565b5061000e612655565b5061000e6125ea565b5061000e612558565b5061000e612493565b5061000e612463565b5061000e612317565b5061000e6122f3565b5061000e6121ad565b5061000e61211b565b5061000e6120ef565b5061000e6120d0565b5061000e612075565b5061000e611fad565b5061000e611eca565b5061000e611e5f565b5061000e611d82565b5061000e611b29565b5061000e6119a7565b5061000e61197f565b5061000e6118e0565b5061000e6118b8565b5061000e611658565b5061000e6115df565b5061000e6115c0565b5061000e611541565b5061000e611522565b5061000e61110a565b5061000e611060565b5061000e611041565b5061000e61101d565b5061000e610f15565b5061000e610eeb565b5061000e610cb9565b5061000e610be4565b5061000e610bbc565b5061000e610b16565b5061000e6109c1565b5061000e61077f565b5061000e6104b4565b5061000e610422565b5061000e6103a2565b5061000e610383565b600091031261000e57565b503461000e57600060031936011261000e57602060ca54604051908152f35b503461000e57600060031936011261000e5760206001600160a01b0360d05416604051908152f35b600435906001600160a01b038216820361000e57565b606435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602060031936011261000e577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d602061045f6103ca565b6001600160a01b039061047782603354163314612692565b610480816129c0565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d154161760d155604051908152a1005b503461000e5760408060031936011261000e576104cf6103ca565b906024356104db612938565b6104e483612cfb565b906105e16001600160a01b038316926105da6105c086517f99c91a640000000000000000000000000000000000000000000000000000000081526effffffffffffffffffffffffffffff6105796004838a818360209788935afa908115610772575b600091610745575b50848b8d51938480926339420b4560e11b82525afa918215610738575b600092610709575b5061315b565b9189517f961be39100000000000000000000000000000000000000000000000000000000815281816004818d5afa9182156106fc575b6000926106cf575b50501690612bb0565b916001600160a01b031660005260d2602052604060002090565b5490612bb0565b81116106a657813b1561000e576000937f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379285855180927f16c9e7a000000000000000000000000000000000000000000000000000000000825281838161065089600483019190602083019252565b03925af18015610699575b610680575b5083516001600160a01b039190911681526020810191909152604090a151f35b8061068d61069392612c61565b80610378565b38610660565b6106a1612d59565b61065b565b600483517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b6106ee9250803d106106f5575b6106e68183612cba565b8101906133d2565b38806105b7565b503d6106dc565b610704612d59565b6105af565b61072a919250853d8711610731575b6107228183612cba565b810190612d40565b9038610573565b503d610718565b610740612d59565b61056b565b6107659150853d871161076b575b61075d8183612cba565b810190612d7e565b3861054e565b503d610753565b61077a612d59565b610546565b503461000e5760a060031936011261000e576107996103ca565b602435906107a56103e0565b916107b56002606554141561286e565b60026065556107c960ff60975416156128d3565b6107d281613370565b6107db836129c0565b6107e66084356131a7565b6107ef82612cfb565b916001600160a01b03926108508482169161080c85843381612d8d565b604051906339420b4560e11b8252602082600481875afa91821561096b575b600092610947575b5061084b90866108458460443561315b565b9161409b565b613d43565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101869052610923967ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9939091906000908290604490829084905af1801561093a575b610927575b506109066040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b0390a36109136001606555565b6040519081529081906020820190565b0390f35b8061068d61093492612c61565b386108d7565b610942612d59565b6108d2565b61084b9192506109649060203d8111610731576107228183612cba565b9190610833565b610973612d59565b61082b565b60031960c091011261000e576001600160a01b03600435818116810361000e5791602435828116810361000e57916044359160643591608435908116810361000e579060a43590565b503461000e57610a2f610a216109d636610978565b6109ec600260659995979498939954141561286e565b6002606555610a0060ff60975416156128d3565b610a09886129c0565b610a1286613370565b610a1c8584614474565b6131a7565b610a2a81612976565b612cfb565b610850610a3b83612cfb565b6001600160a01b0395610a52868886163381612d8d565b610a9e610a5f8786613d79565b948884169560405194610a98866339420b4560e11b968782528a82600460209b8c935afa918215610b09575b600092610af1575061315b565b926149f4565b50906040519081528281600481885afa928315610ae4575b600093610ac5575b5050613d43565b610adc929350803d10610731576107228183612cba565b903880610abe565b610aec612d59565b610ab6565b61072a919250893d8b11610731576107228183612cba565b610b11612d59565b610a8b565b503461000e57602060031936011261000e577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e610bb2610b546103ca565b610b636002606554141561286e565b6002606555610b70612938565b610b7981612976565b6001600160a01b0316600081815260c96020908152604091829020805460ff191660011790558151928352339083015290918291820190565b0390a16001606555005b503461000e57600060031936011261000e5760206001600160a01b0360d15416604051908152f35b503461000e57600060031936011261000e57610c056002606554141561286e565b6002606555610c12612938565b60975460ff811615610c5b5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1610c596001606555565b005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461000e57602060031936011261000e57610cd36103ca565b6001600160a01b03610cea81603354163314612692565b610d14610d10836001600160a01b0380911660005260d460205260406000205416151590565b1590565b610e8c5781610d57610d4b610d3e6000956001600160a01b031660005260d4602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b91610da0610d78836001600160a01b031660005260d4602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b610e56610dc0836001600160a01b031660005260d5602052604060002090565b54610e31610ded610dda610dd560d354612b80565b612aa2565b90546001600160a01b039160031b1c1690565b9180610e0c846001600160a01b031660005260d5602052604060002090565b5587610e2b876001600160a01b031660005260d5602052604060002090565b55612aa2565b90919082549060031b916001600160a01b039283811b93849216901b16911916179055565b610e5e612bbb565b80604051931691167f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8484a3f35b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b600319606091011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e57610f03610efd36610eb6565b91614f7e565b60408051928352602083019190915290f35b503461000e57604060031936011261000e57600435602435610f436001600160a01b03603354163314612692565b670de0b6b3a7640000610f568383612a2a565b11610ff35760005b60d354811015610fa75780610f9d610f98610f7b610fa294615254565b6001600160a01b0380911660005260d46020526040600020541690565b6153d2565b615244565b610f5e565b507f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5918160cc558060cd55610fee6040519283928360209093929193604081019481520152565b0390a1005b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b503461000e57600060031936011261000e57602060ff609754166040519015158152f35b503461000e57600060031936011261000e57602060ce54604051908152f35b503461000e57604060031936011261000e576110c1611080610a2a6103ca565b6110bb6040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156110f3575b6000916110d5575b5060243561315b565b906133f9565b604080519384526020840191909152919050f35b6110ed915060203d8111610731576107228183612cba565b386110b2565b6110fb612d59565b6110aa565b8015150361000e57565b503461000e5760c060031936011261000e576111246103ca565b604435906024356111336103e0565b9160a4359361114185611100565b6111506002606554141561286e565b600260655561116460ff60975416156128d3565b60009483156114f857611176856129c0565b6111816084356131a7565b61118a83612976565b61119383612cfb565b906001600160a01b0396878316916111af8784338c8a16612d8d565b6112725750857ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b9361092398936112116004602061121796604051928380926339420b4560e11b82525afa908115611265575b600091611247575b508961315b565b906131d9565b945b6109068660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b61125f915060203d8111610731576107228183612cba565b3861120a565b61126d612d59565b611202565b96916112cb919361129361128e60d1546001600160a01b031690565b6129c0565b6112c4604051996339420b4560e11b8b5260209a8b816004818b5afa9182156114eb575b916114ce575b508861315b565b30926131d9565b9461132d87876112e360d1546001600160a01b031690565b60405193849283927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401602090939291936001600160a01b0360408201951681520152565b03816000885af180156114c1575b611494575b506113a08761135d610d4b610d4b60d1546001600160a01b031690565b6040517faf929a800000000000000000000000000000000000000000000000000000000081526001600160a01b0390961660048701529491829081906024820190565b0381875afa978815611487575b600098611468575b5050823b1561000e576040517f90210d7e0000000000000000000000000000000000000000000000000000000081526004810197909752602487018690526001600160a01b0381166044880152610923967ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b936000908290606490829084905af1801561145b575b611448575b50611219565b8061068d61145592612c61565b38611442565b611463612d59565b61143d565b61147f929850803d1061076b5761075d8183612cba565b9538806113b5565b61148f612d59565b6113ad565b6114b390883d8a116114ba575b6114ab8183612cba565b810190612d66565b5038611340565b503d6114a1565b6114c9612d59565b61133b565b6114e591508b3d8d11610731576107228183612cba565b386112bd565b6114f3612d59565b6112b7565b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b503461000e57600060031936011261000e57602060cc54604051908152f35b503461000e576000806003193601126115bd576033547fffffffffffffffffffffffff00000000000000000000000000000000000000006001600160a01b0382169161158e338414612692565b1660335581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600060031936011261000e57602060cd54604051908152f35b503461000e57600060031936011261000e576116006002606554141561286e565b600260655561160d612938565b600160ff1960975461162260ff8216156128d3565b16176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a16001606555005b503461000e576000806003193601126115bd57808060ca54918060d354905b8183106116ab578561169a866116956116908885613c62565b613a9e565b614840565b604080519182526020820192909252f35b9091946116bd610d4b610f7b88615254565b9360409081517f961be39100000000000000000000000000000000000000000000000000000000815260209660049188818481855afa9081156118ab575b879161188e575b50888551927f705727b500000000000000000000000000000000000000000000000000000000845281848681845afa938415611881575b8994611859575b506001600160a01b039293946effffffffffffffffffffffffffffff8096169751809481937f2fa3a0d2000000000000000000000000000000000000000000000000000000008352165afa98891561184c575b879961182d575b5050831561181e57611805846117f36117e1826117ed6118179a986117c98f989b61180b9a6118119d16613c62565b976117e66117e1670de0b6b3a7640000988993613998565b613677565b05906136ee565b9c613998565b05916117ff818c613c62565b906137c1565b90613c81565b906136ee565b95615244565b9190611677565b50509450509461181790615244565b611844929950803d1061076b5761075d8183612cba565b96388061179a565b611854612d59565b611793565b6001600160a01b0393945061187a90833d85116106f5576106e68183612cba565b9392611740565b611889612d59565b611739565b6118a59150893d8b116106f5576106e68183612cba565b38611702565b6118b3612d59565b6116fb565b503461000e57600060031936011261000e5760206001600160a01b0360335416604051908152f35b503461000e57604060031936011261000e57602061169a6001600160a01b036119076103ca565b61192161191a60243592610a2a84613370565b918261415b565b95919290506004604051809581936339420b4560e11b8352165afa918215611972575b600092611952575b50613d43565b61196b91925060203d8111610731576107228183612cba565b903861194c565b61197a612d59565b611944565b503461000e57600060031936011261000e5760206001600160a01b0360cf5416604051908152f35b503461000e57606060031936011261000e576119c16103ca565b6024356119cc6103f6565b916001600160a01b036119e481603354163314612692565b6119ed82612cfb565b6119f6836152a1565b8411610ff35716611a2d6040516339420b4560e11b8152602081600481865afa908115611b1c575b600091611afe575b5084613d43565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101959095527f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda694610fee926000908290604490829084905af18015611af1575b611ade575b50604051938493849193929060409160608401956001600160a01b038093168552602085015216910152565b8061068d611aeb92612c61565b38611ab2565b611af9612d59565b611aad565b611b16915060203d8111610731576107228183612cba565b38611a26565b611b24612d59565b611a1e565b503461000e57611b3836610978565b611b4c60026065979496959754141561286e565b6002606555611b6060ff60975416156128d3565b611b6a8484614474565b85156114f857611b7d90610a1c836129c0565b611b8682612976565b611b8f82612cfb565b94611b9984612cfb565b916001600160a01b039182841693604051976339420b4560e11b808a528a60208b6004818b5afa9a8b15611d75575b60009b611d4e575b5084928b92888493169d8e916040518093819282525a92600491602094fa92831597610a98611c2f97611c1c611c2997611c2297611c399d611d41575b600091611d22575b508b61315b565b9361315b565b9c90613d43565b9a613d43565b9933868916612d8d565b833b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602481018890527f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d194611cf592899290916000908290604490829084905af18015611d15575b611d02575b506040519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a361169a6001606555565b8061068d611d0f92612c61565b38611cc0565b611d1d612d59565b611cbb565b611d3b915060203d602011610731576107228183612cba565b38611c15565b611d49612d59565b611c0d565b87929b5092611d6c869460203d602011610731576107228183612cba565b9b925092611bd0565b611d7d612d59565b611bc8565b503461000e57602060031936011261000e57611d9c6103ca565b611dab6002606554141561286e565b6002606555611db8612938565b6001600160a01b0381168060005260c960205260ff6040600020541615611e3557600090815260c96020908152604091829020805460ff1916905581516001600160a01b0393909316835233908301527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c91a1610c596001606555565b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e57600435611e8a6001600160a01b03603354163314612692565b670de0b6b3a76400008111610ff3576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a1005b503461000e57606060031936011261000e57611ee46103ca565b61169a611f1e611ef261040c565b92611f24611f16604435611f0581613370565b611f0f8785614474565b86846144b2565b939092612cfb565b94612cfb565b93604051926339420b4560e11b958685526004611f656020968794858285816001600160a01b03809b165afa918215611fa0575b600092611f885750613d43565b9760405194859384928352165afa928315610ae457600093610ac5575050613d43565b61196b919250863d8811610731576107228183612cba565b611fa8612d59565b611f58565b503461000e576000806003193601126115bd57604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b8181106120585750505084612011910385612cba565b60405193838594850191818652518092526040850193925b82811061203857505050500390f35b83516001600160a01b031685528695509381019392810192600101612029565b82546001600160a01b031684529286019260019283019201611ffb565b503461000e57602060031936011261000e577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b70660206004356120c36001600160a01b03603354163314612692565b8060ce55604051908152a1005b503461000e57600060031936011261000e57602060cb54604051908152f35b503461000e57602060031936011261000e57602061211361210e6103ca565b6152a1565b604051908152f35b503461000e57602060031936011261000e577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206121586103ca565b6001600160a01b039061217082603354163314612692565b612179816129c0565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55604051908152a1005b503461000e57604060031936011261000e576121c76103ca565b6121cf61040c565b906001600160a01b036121e781603354163314612692565b6121f66002606554141561286e565b6002606555612204836129c0565b61220d826129c0565b612230826001600160a01b0380911660005260d460205260406000205416151590565b6122c95761229581600094169183169283855260d46020526122838360408720906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60d35460d56020526040862055612ae7565b604051917f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188484a36122c76001606555565bf35b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e5760206121136123126103ca565b6150d2565b503461000e57604060031936011261000e5760005460ff8160081c16908160001461245a5750303b155b156123d657158061238e575b61235b602435600435612759565b61236157005b610c597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b6123bf6101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b6123d1600160ff196000541617600055565b61234d565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b60ff1615612341565b503461000e57602060031936011261000e5760206001600160a01b0361248a610a2a6103ca565b16604051908152f35b503461000e57602060031936011261000e576124ad6103ca565b6001600160a01b036124c481603354163314612692565b8116156124d457610c59906126f7565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e57602060031936011261000e577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206125956103ca565b6001600160a01b03906125ad82603354163314612692565b6125b6816129c0565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d054161760d055604051908152a1005b503461000e57602060031936011261000e576004356126156001600160a01b03603354163314612692565b670de0b6b3a76400008111610ff3576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a1005b503461000e57602060031936011261000e57610c59610f98610a2a6103ca565b503461000e57610f03610efd61268a36610eb6565b929092613a9e565b1561269957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b61277360ff60005460081c1661276e816127e3565b6127e3565b61277c336126f7565b61279b60ff60005460081c16612791816127e3565b60016065556127e3565b60ff196097541660975560ca5560cb55670de0b6b3a764000060cd55337fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55565b156127ea57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b1561287557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b156128da57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001600160a01b0360cf5416330361294c57565b60046040517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b031660005260c960205260ff6040600020541661299657565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b0316156129d057565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81198111612a36570190565b612a3e6129fa565b0190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60d354811015612ada575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b612ae2612a72565b612aad565b6001600160a01b0360d35468010000000000000000811015612b73575b600181018060d355811015612b66575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b612b6e612a72565b612b14565b612b7b612a42565b612b04565b6000199060018110612a36570190565b670de0b6b3a7640000818110612ba4570390565b612bac6129fa565b0390565b818110612ba4570390565b60d3548015612c32577f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a560001982019180831015612c25575b60d3600052017fffffffffffffffffffffffff0000000000000000000000000000000000000000815416905560d355565b612c2d612a72565b612bf4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b67ffffffffffffffff8111612c7557604052565b612c7d612a42565b604052565b60a0810190811067ffffffffffffffff821117612c7557604052565b6040810190811067ffffffffffffffff821117612c7557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117612c7557604052565b612d1e816001600160a01b0380911660005260d460205260406000205416151590565b15610e8c576001600160a01b0380911660005260d46020526040600020541690565b9081602091031261000e575160ff8116810361000e5790565b506040513d6000823e3d90fd5b9081602091031261000e5751612d7b81611100565b90565b9081602091031261000e575190565b600091612e45949383926040519560208701937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248a0152166044880152606487015260648652612ded86612c82565b16908260405195612dfd87612c9e565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152612e33843b1515612ef7565b51925af1612e3f612f5c565b90612fc8565b805180612e50575050565b81602080612e6593612e6a9501019101612d66565b612e6c565b565b15612e7357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b15612efe57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15612fc3573d9067ffffffffffffffff8211612fb6575b60405191612faa60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184612cba565b82523d6000602084013e565b612fbe612a42565b612f74565b606090565b90919015612fd4575090565b815115612fe45750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b84831061306e575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311613061575b01168101030190fd5b6000858286010152613058565b8183018101518684016044015285935091820191613021565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee911660128110612a36570190565b60ff16806012106130ca575b60120390565b6130d26129fa565b6130c4565b60ff16604d81116130e9575b600a0a90565b6130f16129fa565b6130e3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8115613130570490565b6131386130f6565b0490565b806000190482118115151661314f570290565b6131576129fa565b0290565b9060ff8116601281101561318557509061317f61317a612d7b936130b8565b6130d7565b9061313c565b601210613190575090565b61317a61319c91613087565b908115613130570490565b42116131af57565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b939192936131e6816153d2565b6001600160a01b036131f883836133f9565b5091909261321084809861320b82613370565b6133a1565b1690813b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600093848160248183875af18015613363575b613350575b50813b1561334c576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810191909152838160248183865af1801561333f575b61332c575b50803b15613328576040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b039690961660048701526024860191909152929391928290604490829084905af1801561331b575b61330e5750565b8061068d612e6a92612c61565b613323612d59565b613307565b8280fd5b8061068d61333992612c61565b386132aa565b613347612d59565b6132a5565b8380fd5b8061068d61335d92612c61565b3861325f565b61336b612d59565b61325a565b1561337757565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b116133a857565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b9081602091031261000e57516effffffffffffffffffffffffffffff8116810361000e5790565b906001600160a01b0360009216604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481865afa938415613601575b6000946135e2575b50604051907f705727b500000000000000000000000000000000000000000000000000000000948583528383600481885afa9283156135d5575b6000936135ae575b506134b26134b79160ca54906effffffffffffffffffffffffffffff80809716911685613ad9565b61360e565b958187106135a557506134ca9086612bb0565b935b6040519081528281600481875afa908115613598575b60009161357b575b5016906000826134fc57505050508192565b6004826135499361354e96604051938480927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa92831561356e575b92613551575b50508561313c565b613126565b92565b6135679250803d1061076b5761075d8183612cba565b3880613541565b613576612d59565b61353b565b6135929150833d85116106f5576106e68183612cba565b386134ea565b6135a0612d59565b6134e2565b949550946134cc565b6134b79193506135cd6134b291863d88116106f5576106e68183612cba565b93915061348a565b6135dd612d59565b613482565b6135fa919450823d84116106f5576106e68183612cba565b9238613448565b613609612d59565b613440565b600081126136195790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b60008112906706f05b59d3b2000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166136e1575b817f800000000000000000000000000000000000000000000000000000000000000003831216612a36570190565b6136e96129fa565b6136b3565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166136e157817f800000000000000000000000000000000000000000000000000000000000000003831216612a36570190565b670de0b6b3a76400006000821280157f800000000000000000000000000000000000000000000000000000000000000084018312166137b4575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612ba4570390565b6137bc6129fa565b613786565b60008212827f80000000000000000000000000000000000000000000000000000000000000000182128115166137b457827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612ba4570390565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600211600083131616613895575b60017fc0000000000000000000000000000000000000000000000000000000000000008212600083121616613888575b60011b90565b6138906129fa565b613882565b61389d6129fa565b613852565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616613918575b60017fe000000000000000000000000000000000000000000000000000000000000000821260008312161661390b575b60021b90565b6139136129fa565b613905565b6139206129fa565b6138d5565b670de0b6b3a76400009060017809392ee8e921d5d073aff322e62439fcf32d7f344649470f90821160008313161661398b575b60017ffffffffffffffff6c6d11716de2a2f8c500cdd19dbc6030cd280cbb9b6b8f070821260008312161661314f570290565b6139936129fa565b613958565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818104851183851616613a40575b60008212927f800000000000000000000000000000000000000000000000000000000000000094848787058512911616613a33575b82600087129505861290851616613a26575b05831291161661314f570290565b613a2e6129fa565b613a18565b613a3b6129fa565b613a06565b613a486129fa565b6139d1565b8115613a91575b60001982147f8000000000000000000000000000000000000000000000000000000000000000821416613a85570590565b613a8d6129fa565b0590565b613a996130f6565b613a54565b7f80000000000000000000000000000000000000000000000000000000000000008114613acc575b60000390565b613ad46129fa565b613ac6565b90918015613c5b576000613aed83856136ee565b12613c3157829181613afe84613925565b60028205613b0b916136ee565b90613b1591613a4d565b93613b1f916136ee565b670de0b6b3a7640000809381613b348861374c565b613b3e9085613998565b613b4790613677565b0582613b53868a613998565b613b5c90613677565b05613b669061381f565b613b6f916136ee565b95613b7a8589613998565b90613b8491613a4d565b613b8d916137c1565b613b979083613c81565b9180613ba291613998565b613bab90613677565b05613bb5916137c1565b91613bc08286613998565b613bc990613677565b0590613bd491613c81565b613bdd916136ee565b613be78280613998565b90613bf1846138a2565b90613bfb91613998565b613c04916137c1565b613c0d82613a9e565b91613c1791613c97565b613c20916136ee565b90613c2a91613c62565b6002900590565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5091505090565b90613c7c613c72612d7b93613925565b60028305906136ee565b613a4d565b6117e1670de0b6b3a764000092613a8d92613998565b919060006003841315613d3457506000811380613d2a575b15613cf357915b613ccc613c2a84613cc78185613a4d565b6136ee565b905b838203613cd9575050565b909250613ced613c2a84613cc78185613a4d565b90613cce565b6000811280613d18575b15613d1157613d0b90613a9e565b91613cb6565b5081613cb6565b5082613d2382613a9e565b1315613cfd565b5082811315613caf565b929050613d3d57565b60019150565b9060ff81166012811015613d5e575061317a61319c916130b8565b601210613d69575090565b9061317f61317a612d7b93613087565b9190613d84836153d2565b613d8e818461415b565b5090936001600160a01b031684813b1561000e576040928351917f9dc29fac000000000000000000000000000000000000000000000000000000008352600092838180613df660049a898c8401602090939291936001600160a01b0360408201951681520152565b038183895af1801561408e575b61407b575b50833b156133285784517f9f9ef98800000000000000000000000000000000000000000000000000000000815286810191825290839082908190602001038183885af1801561406e575b61405b575b50823b156140575783517fd8b8785300000000000000000000000000000000000000000000000000000000815285810191825290829082908190602001038183875af1801561404a575b614037575b5082517f705727b5000000000000000000000000000000000000000000000000000000009081815260209081818881885afa90811561402a575b849161400d575b506effffffffffffffffffffffffffffff80911615159384613f38575b505050509050613f12575050565b517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b613faa9450662386f26fc10000958751937f961be39100000000000000000000000000000000000000000000000000000000855280858b81855afa948515614000575b8395613fdf575b50808495968b8b518095819382525afa928315613fd2575b92613fb5575b5050169116614126565b108038808080613f04565b613fcb9250803d106106f5576106e68183612cba565b3880613fa0565b613fda612d59565b613f9a565b849550613ff98291823d84116106f5576106e68183612cba565b9550613f82565b614008612d59565b613f7b565b6140249150823d84116106f5576106e68183612cba565b38613ee7565b614032612d59565b613ee0565b8061068d61404492612c61565b38613ea6565b614052612d59565b613ea1565b5080fd5b8061068d61406892612c61565b38613e57565b614076612d59565b613e52565b8061068d61408892612c61565b38613e08565b614096612d59565b613e03565b6001600160a01b03909392936140b0816153d2565b6140ba838261415b565b509290916140c98380986133a1565b1690813b1561000e576040928351917f9dc29fac000000000000000000000000000000000000000000000000000000008352600092838180613df660049a898c8401602090939291936001600160a01b0360408201951681520152565b61312690670de0b6b3a7640000816000190481118215151661414e575b8360011c9102612a2a565b6141566129fa565b614143565b916001600160a01b036000931691604051927f705727b500000000000000000000000000000000000000000000000000000000908185526020928386600481855afa958615614370575b60009661433b575b509161429d939161421b6141d66134b2956effffffffffffffffffffffffffffff809a1661313c565b604051907f18160ddd0000000000000000000000000000000000000000000000000000000082528582600481875afa91821561432e575b60009261430f575b50613126565b9661422588613370565b61422e88613a9e565b9184604051947f961be3910000000000000000000000000000000000000000000000000000000086528186600481865afa958615614302575b6000966142e3575b5060046040518094819382525afa9485156142d6575b6000956142b7575b50508060ca54941692169061437d565b928383106142b05750612d7b8383612bb0565b9092508192565b6142ce929550803d106106f5576106e68183612cba565b92388061428d565b6142de612d59565b614285565b6142fb919650823d84116106f5576106e68183612cba565b943861426f565b61430a612d59565b614267565b614327919250863d881161076b5761075d8183612cba565b9038614215565b614336612d59565b61420d565b6134b2939196509161421b6141d6614363879561429d983d88116106f5576106e68183612cba565b98939550505091936141ad565b614378612d59565b6141a5565b92909261438a81846136ee565b908361439586613925565b600282056143a2916136ee565b906143ac91613a4d565b80946143b785613925565b90670de0b6b3a7640000968088949360028695056143d4916136ee565b906143de91613a4d565b6143e7916137c1565b6143f091613998565b6143f990613677565b05916144048561374c565b61440d91613998565b61441690613677565b05614420916136ee565b600290059283926144318480613998565b928061443c91613998565b61444591613998565b61444e90613677565b05614458916136ee565b9061446291613c97565b61446b916136ee565b612d7b916137c1565b6001600160a01b0390811691161461448857565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b6144be6144c491612cfb565b91612cfb565b6144ce838361415b565b50509182936001600160a01b03808316604051917f961be39100000000000000000000000000000000000000000000000000000000958684526020978885600481875afa948515614716575b6000956146f7575b5061459682614590614546846effffffffffffffffffffffffffffff809a16612bb0565b98888d60405181816004817f705727b5000000000000000000000000000000000000000000000000000000009e8f82525afa9182156146ea575b6000926146cd575b505016612bb0565b986148e2565b670de0b6b3a76400008103614673575b505092879592614618988a9693614606999616916040519687528187600481865afa968715614666575b600097614647575b5060046040518094819382525afa96871561463a575b60009761461b575b50508060ca549616931690614778565b61461260cb5482614723565b90612bb0565b91565b614632929750803d106106f5576106e68183612cba565b9438806145f6565b614642612d59565b6145ee565b61465f919750823d84116106f5576106e68183612cba565b95386145d8565b61466e612d59565b6145d0565b8997939a50986146bc6146a28b6146b66146a2826146189f6146069f9c999d6146b0916146a2919d9a9d61313c565b670de0b6b3a7640000900490565b9961313c565b9761313c565b9a93969295985098819497506145a6565b6146e39250803d106106f5576106e68183612cba565b388f614588565b6146f2612d59565b614580565b61470f919550893d8b116106f5576106e68183612cba565b9338614522565b61471e612d59565b61451a565b61473f670de0b6b3a7640000926706f05b59d3b200009261313c565b7ffffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4dffff811161476b57010490565b6147736129fa565b010490565b92919493909385158015614838575b613c3157611695846117ff8561481b81613c7c8c6147f96148116148269f8f6148219f61480c6118059f8f85670de0b6b3a76400006147ff6117e1614806948f6147f99061180b8c613c7c6147f2613c7c9f9e613c729f6147eb613c7c91836136ee565b9c80613998565b9380613998565b90613998565b05906137c1565b9d6136ee565b613925565b6117ff818c613c62565b92613c62565b6137c1565b6000811215612d7b57612d7b90613a9e565b508215614787565b80614821613a8d926148c360029561180b61485b8480613998565b9160017f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82116000831316166148d5575b60017fe00000000000000000000000000000000000000000000000000000000000000082126000831216166148c8575b881b613925565b613c97565b6148d06129fa565b6148bc565b6148dd6129fa565b61488c565b90612d7b91604051907f2fa3a0d200000000000000000000000000000000000000000000000000000000808352602093849182856004816001600160a01b038098165afa9485156149e7575b6000956149c5575b5060049060405194859384928352165afa9283156149b8575b600093614999575b50507812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21811160011661498c575b670de0b6b3a764000002613126565b6149946129fa565b61497d565b6149b0929350803d1061076b5761075d8183612cba565b903880614957565b6149c0612d59565b61494f565b60049195506149e090843d861161076b5761075d8183612cba565b9490614936565b6149ef612d59565b61492e565b92939190614a03828286614c42565b8093919395614a138580996133a1565b614a30846001600160a01b031660005260d2602052604060002090565b614a3b838254612a2a565b90556001600160a01b0380911693843b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600094614aa7949086908290602490829084905af18015614c35575b614c22575b501693612a2a565b823b15614057576040517f9f9ef9880000000000000000000000000000000000000000000000000000000081526004810191909152662386f26fc1000092614b9e929091818160248183875af18015614c15575b614c02575b50604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481845afa938415614bf5575b8394614bcf575b509080600492604051938480927f705727b50000000000000000000000000000000000000000000000000000000082525afa928315614bc2575b92614ba5575b50506effffffffffffffffffffffffffffff8091169116614126565b1061294c57565b614bbb9250803d106106f5576106e68183612cba565b3880614b82565b614bca612d59565b614b7c565b8291945091614bec600493823d84116106f5576106e68183612cba565b94919250614b42565b614bfd612d59565b614b3b565b8061068d614c0f92612c61565b38614b00565b614c1d612d59565b614afb565b8061068d614c2f92612c61565b38614a9f565b614c3d612d59565b614a9a565b91906000808312614f62575b6001600160a01b03918285169460409182519384847f961be391000000000000000000000000000000000000000000000000000000009384835260209889848d60049b8c915afa938415614f55575b8594614f36575b508b614d276effffffffffffffffffffffffffffff80961693868d8d818c848d8c51848187817f705727b5000000000000000000000000000000000000000000000000000000009e8f82525afa918215614f29575b91614f0c575b50169886169a519283918252818c5afa918215614eff575b8b92614ee2575b505016996148e2565b670de0b6b3a76400008103614e9e575b50918b918b614d6995948c8c518097819382525afa938415614e91575b8794614e72575b50888660ca54951692614778565b988289139788958b9087614e68575b50508515614de6575b5050505050614dc057505015614da85750614618614da160cb5483614723565b8092612bb0565b9190614db7612d7b9193613a9e565b60cb5490614723565b517f9a6114b7000000000000000000000000000000000000000000000000000000008152fd5b9091928094955089129485614e05575b50505050503880808080614d81565b8192939495508787518095819382525afa938415614e5b575b93614e3c575b5050614e2f86613a9e565b9116103880808080614df6565b614e53929350803d106106f5576106e68183612cba565b903880614e24565b614e63612d59565b614e1e565b1095508a38614d78565b614e8a9194508c8d3d106106f5576106e68183612cba565b9238614d5b565b614e99612d59565b614d54565b9b614ed7614ec98e8e9f6146a2816146b66146a2614ec394614d699d9c9b9a9b61313c565b93613998565b670de0b6b3a7640000900590565b9c5091909293614d37565b614ef89250803d106106f5576106e68183612cba565b388f614d1e565b614f07612d59565b614d17565b614f239150843d86116106f5576106e68183612cba565b38614cff565b614f31612d59565b614cf9565b614f4e9194508a3d8c116106f5576106e68183612cba565b9238614ca4565b614f5d612d59565b614c9d565b91614f7890614f7260cb5461374c565b90613c62565b91614c4e565b92919092614f8c8482614474565b81156114f857612d7b91614fab614fa5614fef93612cfb565b95612cfb565b60405161501e614ff56339420b4560e11b988984528460209788956001600160a01b039887826004818d89165afa918215615085575b600092615066575b50615092565b91614c42565b9490931692604051908982528382600481885afa918215615059575b6000926150415750613d43565b9660046040518094819382525afa928315610ae457600093610ac5575050613d43565b61196b919250843d8611610731576107228183612cba565b615061612d59565b615011565b61507e919250883d8a11610731576107228183612cba565b9038614fe9565b61508d612d59565b614fe1565b9060ff811660128110156150b15750906147f961317a612d7b936130b8565b6012106150bc575090565b906150cc61317a612d7b93613087565b90613a4d565b610d4b6150de91612cfb565b6040517f18160ddd000000000000000000000000000000000000000000000000000000008082526020918281600481875afa908115615237575b60009161521a575b501561520b57612d7b9282604051927f705727b50000000000000000000000000000000000000000000000000000000084528184600481865afa9384156151fe575b6000946151df575b5060046040518094819382525afa9283156151d2575b6000936151a0575b50506effffffffffffffffffffffffffffff16614126565b6effffffffffffffffffffffffffffff92935090816151ca92903d1061076b5761075d8183612cba565b919038615188565b6151da612d59565b615180565b6151f7919450823d84116106f5576106e68183612cba565b923861516a565b615206612d59565b615162565b505050670de0b6b3a764000090565b6152319150833d851161076b5761075d8183612cba565b38615120565b61523f612d59565b615118565b6001906000198114612a36570190565b6001600160a01b039060d354811015615294575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a601541690565b61529c612a72565b615268565b6152ad612d7b91612cfb565b6105da6105c06001600160a01b0383166effffffffffffffffffffffffffffff61533f60046040517f99c91a640000000000000000000000000000000000000000000000000000000081526020928184818582958a5afa9081156153c5575b6000916153a8575b50604051906339420b4560e11b8252838286818b5afa91821561539b575b600092615383575061315b565b94604051928380927f961be3910000000000000000000000000000000000000000000000000000000082525afa9182156106fc576000926106cf5750501690612bb0565b61072a919250843d8611610731576107228183612cba565b6153a3612d59565b615332565b6153bf9150833d851161076b5761075d8183612cba565b38615314565b6153cd612d59565b61530c565b6153ef816001600160a01b031660005260d2602052604060002090565b5480158015615634575b6156305761541d61541761540e60cd54612b90565b60cc5490612bb0565b82614723565b9081615559575b615432915060cd5490614723565b80615456575b506001600160a01b0316600090815260d26020526040812055565b55565b61546081836133f9565b50916001600160a01b0384169150813b1561000e576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810193909352600092838160248183875af1801561554c575b615539575b50813b15613328576040517f16c9e7a000000000000000000000000000000000000000000000000000000000815260048101919091526000936154539390928290602490829084905af1801561552c575b615519575b509150615438565b8061068d61552692612c61565b38615511565b615534612d59565b61550c565b8061068d61554692612c61565b386154bb565b615554612d59565b6154b6565b6001600160a01b0383166155a461557860d0546001600160a01b031690565b93604051906339420b4560e11b8252602082600481875afa918215611972576000926119525750613d43565b92813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019390935261543292906000908290604490829084905af18015615623575b615610575b50615424565b8061068d61561d92612c61565b3861560a565b61562b612d59565b615605565b5050565b5060ce5481106153f956fea2646970667358221220cfeb001e5e905005253ffadb5bc51861faa2a4974e88c72401f75d307f0d5adb64736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063017b82921461036f578063017e7e58146103665780630705999d1461035d578063070f81d91461035457806309a5fca31461034b5780630f91f06f146103425780633753b14a146103395780633bd61ba8146103305780633f4ba83a146103275780634a5e42b11461031e5780634fdd64e51461031557806352f7c9881461030c5780635c975abb146103035780635cfe092e146102fa57806361858e23146102f15780636281baef146102e85780636922d5ca146102df578063715018a6146102d6578063815bfd29146102cd5780638456cb59146102c45780638a2dfe09146102bb5780638da5cb5b146102b2578063907448ed146102a957806391cca3db146102a057806393aeea02146102975780639908fc8b1461028e5780639abacb41146102855780639e4416b71461027c578063a4275ceb14610273578063aa6ca8081461026a578063d043c56514610261578063d0dd0e5614610258578063d30ffeda1461024f578063d477f05f14610246578063da4899971461023d578063dc3b7c8b14610234578063e4a301161461022b578063e9249cc714610222578063f2fde38b14610219578063f46901ed14610210578063f57e84d514610207578063f8b49e72146101fe5763fca8f308146101f657600080fd5b61000e612675565b5061000e612655565b5061000e6125ea565b5061000e612558565b5061000e612493565b5061000e612463565b5061000e612317565b5061000e6122f3565b5061000e6121ad565b5061000e61211b565b5061000e6120ef565b5061000e6120d0565b5061000e612075565b5061000e611fad565b5061000e611eca565b5061000e611e5f565b5061000e611d82565b5061000e611b29565b5061000e6119a7565b5061000e61197f565b5061000e6118e0565b5061000e6118b8565b5061000e611658565b5061000e6115df565b5061000e6115c0565b5061000e611541565b5061000e611522565b5061000e61110a565b5061000e611060565b5061000e611041565b5061000e61101d565b5061000e610f15565b5061000e610eeb565b5061000e610cb9565b5061000e610be4565b5061000e610bbc565b5061000e610b16565b5061000e6109c1565b5061000e61077f565b5061000e6104b4565b5061000e610422565b5061000e6103a2565b5061000e610383565b600091031261000e57565b503461000e57600060031936011261000e57602060ca54604051908152f35b503461000e57600060031936011261000e5760206001600160a01b0360d05416604051908152f35b600435906001600160a01b038216820361000e57565b606435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602060031936011261000e577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d602061045f6103ca565b6001600160a01b039061047782603354163314612692565b610480816129c0565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d154161760d155604051908152a1005b503461000e5760408060031936011261000e576104cf6103ca565b906024356104db612938565b6104e483612cfb565b906105e16001600160a01b038316926105da6105c086517f99c91a640000000000000000000000000000000000000000000000000000000081526effffffffffffffffffffffffffffff6105796004838a818360209788935afa908115610772575b600091610745575b50848b8d51938480926339420b4560e11b82525afa918215610738575b600092610709575b5061315b565b9189517f961be39100000000000000000000000000000000000000000000000000000000815281816004818d5afa9182156106fc575b6000926106cf575b50501690612bb0565b916001600160a01b031660005260d2602052604060002090565b5490612bb0565b81116106a657813b1561000e576000937f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379285855180927f16c9e7a000000000000000000000000000000000000000000000000000000000825281838161065089600483019190602083019252565b03925af18015610699575b610680575b5083516001600160a01b039190911681526020810191909152604090a151f35b8061068d61069392612c61565b80610378565b38610660565b6106a1612d59565b61065b565b600483517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b6106ee9250803d106106f5575b6106e68183612cba565b8101906133d2565b38806105b7565b503d6106dc565b610704612d59565b6105af565b61072a919250853d8711610731575b6107228183612cba565b810190612d40565b9038610573565b503d610718565b610740612d59565b61056b565b6107659150853d871161076b575b61075d8183612cba565b810190612d7e565b3861054e565b503d610753565b61077a612d59565b610546565b503461000e5760a060031936011261000e576107996103ca565b602435906107a56103e0565b916107b56002606554141561286e565b60026065556107c960ff60975416156128d3565b6107d281613370565b6107db836129c0565b6107e66084356131a7565b6107ef82612cfb565b916001600160a01b03926108508482169161080c85843381612d8d565b604051906339420b4560e11b8252602082600481875afa91821561096b575b600092610947575b5061084b90866108458460443561315b565b9161409b565b613d43565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101869052610923967ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9939091906000908290604490829084905af1801561093a575b610927575b506109066040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b0390a36109136001606555565b6040519081529081906020820190565b0390f35b8061068d61093492612c61565b386108d7565b610942612d59565b6108d2565b61084b9192506109649060203d8111610731576107228183612cba565b9190610833565b610973612d59565b61082b565b60031960c091011261000e576001600160a01b03600435818116810361000e5791602435828116810361000e57916044359160643591608435908116810361000e579060a43590565b503461000e57610a2f610a216109d636610978565b6109ec600260659995979498939954141561286e565b6002606555610a0060ff60975416156128d3565b610a09886129c0565b610a1286613370565b610a1c8584614474565b6131a7565b610a2a81612976565b612cfb565b610850610a3b83612cfb565b6001600160a01b0395610a52868886163381612d8d565b610a9e610a5f8786613d79565b948884169560405194610a98866339420b4560e11b968782528a82600460209b8c935afa918215610b09575b600092610af1575061315b565b926149f4565b50906040519081528281600481885afa928315610ae4575b600093610ac5575b5050613d43565b610adc929350803d10610731576107228183612cba565b903880610abe565b610aec612d59565b610ab6565b61072a919250893d8b11610731576107228183612cba565b610b11612d59565b610a8b565b503461000e57602060031936011261000e577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e610bb2610b546103ca565b610b636002606554141561286e565b6002606555610b70612938565b610b7981612976565b6001600160a01b0316600081815260c96020908152604091829020805460ff191660011790558151928352339083015290918291820190565b0390a16001606555005b503461000e57600060031936011261000e5760206001600160a01b0360d15416604051908152f35b503461000e57600060031936011261000e57610c056002606554141561286e565b6002606555610c12612938565b60975460ff811615610c5b5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1610c596001606555565b005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461000e57602060031936011261000e57610cd36103ca565b6001600160a01b03610cea81603354163314612692565b610d14610d10836001600160a01b0380911660005260d460205260406000205416151590565b1590565b610e8c5781610d57610d4b610d3e6000956001600160a01b031660005260d4602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b91610da0610d78836001600160a01b031660005260d4602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b610e56610dc0836001600160a01b031660005260d5602052604060002090565b54610e31610ded610dda610dd560d354612b80565b612aa2565b90546001600160a01b039160031b1c1690565b9180610e0c846001600160a01b031660005260d5602052604060002090565b5587610e2b876001600160a01b031660005260d5602052604060002090565b55612aa2565b90919082549060031b916001600160a01b039283811b93849216901b16911916179055565b610e5e612bbb565b80604051931691167f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8484a3f35b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b600319606091011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e57610f03610efd36610eb6565b91614f7e565b60408051928352602083019190915290f35b503461000e57604060031936011261000e57600435602435610f436001600160a01b03603354163314612692565b670de0b6b3a7640000610f568383612a2a565b11610ff35760005b60d354811015610fa75780610f9d610f98610f7b610fa294615254565b6001600160a01b0380911660005260d46020526040600020541690565b6153d2565b615244565b610f5e565b507f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5918160cc558060cd55610fee6040519283928360209093929193604081019481520152565b0390a1005b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b503461000e57600060031936011261000e57602060ff609754166040519015158152f35b503461000e57600060031936011261000e57602060ce54604051908152f35b503461000e57604060031936011261000e576110c1611080610a2a6103ca565b6110bb6040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156110f3575b6000916110d5575b5060243561315b565b906133f9565b604080519384526020840191909152919050f35b6110ed915060203d8111610731576107228183612cba565b386110b2565b6110fb612d59565b6110aa565b8015150361000e57565b503461000e5760c060031936011261000e576111246103ca565b604435906024356111336103e0565b9160a4359361114185611100565b6111506002606554141561286e565b600260655561116460ff60975416156128d3565b60009483156114f857611176856129c0565b6111816084356131a7565b61118a83612976565b61119383612cfb565b906001600160a01b0396878316916111af8784338c8a16612d8d565b6112725750857ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b9361092398936112116004602061121796604051928380926339420b4560e11b82525afa908115611265575b600091611247575b508961315b565b906131d9565b945b6109068660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b61125f915060203d8111610731576107228183612cba565b3861120a565b61126d612d59565b611202565b96916112cb919361129361128e60d1546001600160a01b031690565b6129c0565b6112c4604051996339420b4560e11b8b5260209a8b816004818b5afa9182156114eb575b916114ce575b508861315b565b30926131d9565b9461132d87876112e360d1546001600160a01b031690565b60405193849283927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401602090939291936001600160a01b0360408201951681520152565b03816000885af180156114c1575b611494575b506113a08761135d610d4b610d4b60d1546001600160a01b031690565b6040517faf929a800000000000000000000000000000000000000000000000000000000081526001600160a01b0390961660048701529491829081906024820190565b0381875afa978815611487575b600098611468575b5050823b1561000e576040517f90210d7e0000000000000000000000000000000000000000000000000000000081526004810197909752602487018690526001600160a01b0381166044880152610923967ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b936000908290606490829084905af1801561145b575b611448575b50611219565b8061068d61145592612c61565b38611442565b611463612d59565b61143d565b61147f929850803d1061076b5761075d8183612cba565b9538806113b5565b61148f612d59565b6113ad565b6114b390883d8a116114ba575b6114ab8183612cba565b810190612d66565b5038611340565b503d6114a1565b6114c9612d59565b61133b565b6114e591508b3d8d11610731576107228183612cba565b386112bd565b6114f3612d59565b6112b7565b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b503461000e57600060031936011261000e57602060cc54604051908152f35b503461000e576000806003193601126115bd576033547fffffffffffffffffffffffff00000000000000000000000000000000000000006001600160a01b0382169161158e338414612692565b1660335581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600060031936011261000e57602060cd54604051908152f35b503461000e57600060031936011261000e576116006002606554141561286e565b600260655561160d612938565b600160ff1960975461162260ff8216156128d3565b16176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a16001606555005b503461000e576000806003193601126115bd57808060ca54918060d354905b8183106116ab578561169a866116956116908885613c62565b613a9e565b614840565b604080519182526020820192909252f35b9091946116bd610d4b610f7b88615254565b9360409081517f961be39100000000000000000000000000000000000000000000000000000000815260209660049188818481855afa9081156118ab575b879161188e575b50888551927f705727b500000000000000000000000000000000000000000000000000000000845281848681845afa938415611881575b8994611859575b506001600160a01b039293946effffffffffffffffffffffffffffff8096169751809481937f2fa3a0d2000000000000000000000000000000000000000000000000000000008352165afa98891561184c575b879961182d575b5050831561181e57611805846117f36117e1826117ed6118179a986117c98f989b61180b9a6118119d16613c62565b976117e66117e1670de0b6b3a7640000988993613998565b613677565b05906136ee565b9c613998565b05916117ff818c613c62565b906137c1565b90613c81565b906136ee565b95615244565b9190611677565b50509450509461181790615244565b611844929950803d1061076b5761075d8183612cba565b96388061179a565b611854612d59565b611793565b6001600160a01b0393945061187a90833d85116106f5576106e68183612cba565b9392611740565b611889612d59565b611739565b6118a59150893d8b116106f5576106e68183612cba565b38611702565b6118b3612d59565b6116fb565b503461000e57600060031936011261000e5760206001600160a01b0360335416604051908152f35b503461000e57604060031936011261000e57602061169a6001600160a01b036119076103ca565b61192161191a60243592610a2a84613370565b918261415b565b95919290506004604051809581936339420b4560e11b8352165afa918215611972575b600092611952575b50613d43565b61196b91925060203d8111610731576107228183612cba565b903861194c565b61197a612d59565b611944565b503461000e57600060031936011261000e5760206001600160a01b0360cf5416604051908152f35b503461000e57606060031936011261000e576119c16103ca565b6024356119cc6103f6565b916001600160a01b036119e481603354163314612692565b6119ed82612cfb565b6119f6836152a1565b8411610ff35716611a2d6040516339420b4560e11b8152602081600481865afa908115611b1c575b600091611afe575b5084613d43565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260248101959095527f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda694610fee926000908290604490829084905af18015611af1575b611ade575b50604051938493849193929060409160608401956001600160a01b038093168552602085015216910152565b8061068d611aeb92612c61565b38611ab2565b611af9612d59565b611aad565b611b16915060203d8111610731576107228183612cba565b38611a26565b611b24612d59565b611a1e565b503461000e57611b3836610978565b611b4c60026065979496959754141561286e565b6002606555611b6060ff60975416156128d3565b611b6a8484614474565b85156114f857611b7d90610a1c836129c0565b611b8682612976565b611b8f82612cfb565b94611b9984612cfb565b916001600160a01b039182841693604051976339420b4560e11b808a528a60208b6004818b5afa9a8b15611d75575b60009b611d4e575b5084928b92888493169d8e916040518093819282525a92600491602094fa92831597610a98611c2f97611c1c611c2997611c2297611c399d611d41575b600091611d22575b508b61315b565b9361315b565b9c90613d43565b9a613d43565b9933868916612d8d565b833b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602481018890527f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d194611cf592899290916000908290604490829084905af18015611d15575b611d02575b506040519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a361169a6001606555565b8061068d611d0f92612c61565b38611cc0565b611d1d612d59565b611cbb565b611d3b915060203d602011610731576107228183612cba565b38611c15565b611d49612d59565b611c0d565b87929b5092611d6c869460203d602011610731576107228183612cba565b9b925092611bd0565b611d7d612d59565b611bc8565b503461000e57602060031936011261000e57611d9c6103ca565b611dab6002606554141561286e565b6002606555611db8612938565b6001600160a01b0381168060005260c960205260ff6040600020541615611e3557600090815260c96020908152604091829020805460ff1916905581516001600160a01b0393909316835233908301527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c91a1610c596001606555565b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e57600435611e8a6001600160a01b03603354163314612692565b670de0b6b3a76400008111610ff3576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a1005b503461000e57606060031936011261000e57611ee46103ca565b61169a611f1e611ef261040c565b92611f24611f16604435611f0581613370565b611f0f8785614474565b86846144b2565b939092612cfb565b94612cfb565b93604051926339420b4560e11b958685526004611f656020968794858285816001600160a01b03809b165afa918215611fa0575b600092611f885750613d43565b9760405194859384928352165afa928315610ae457600093610ac5575050613d43565b61196b919250863d8811610731576107228183612cba565b611fa8612d59565b611f58565b503461000e576000806003193601126115bd57604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b8181106120585750505084612011910385612cba565b60405193838594850191818652518092526040850193925b82811061203857505050500390f35b83516001600160a01b031685528695509381019392810192600101612029565b82546001600160a01b031684529286019260019283019201611ffb565b503461000e57602060031936011261000e577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b70660206004356120c36001600160a01b03603354163314612692565b8060ce55604051908152a1005b503461000e57600060031936011261000e57602060cb54604051908152f35b503461000e57602060031936011261000e57602061211361210e6103ca565b6152a1565b604051908152f35b503461000e57602060031936011261000e577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206121586103ca565b6001600160a01b039061217082603354163314612692565b612179816129c0565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55604051908152a1005b503461000e57604060031936011261000e576121c76103ca565b6121cf61040c565b906001600160a01b036121e781603354163314612692565b6121f66002606554141561286e565b6002606555612204836129c0565b61220d826129c0565b612230826001600160a01b0380911660005260d460205260406000205416151590565b6122c95761229581600094169183169283855260d46020526122838360408720906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60d35460d56020526040862055612ae7565b604051917f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188484a36122c76001606555565bf35b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e5760206121136123126103ca565b6150d2565b503461000e57604060031936011261000e5760005460ff8160081c16908160001461245a5750303b155b156123d657158061238e575b61235b602435600435612759565b61236157005b610c597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b6123bf6101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b6123d1600160ff196000541617600055565b61234d565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b60ff1615612341565b503461000e57602060031936011261000e5760206001600160a01b0361248a610a2a6103ca565b16604051908152f35b503461000e57602060031936011261000e576124ad6103ca565b6001600160a01b036124c481603354163314612692565b8116156124d457610c59906126f7565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e57602060031936011261000e577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206125956103ca565b6001600160a01b03906125ad82603354163314612692565b6125b6816129c0565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d054161760d055604051908152a1005b503461000e57602060031936011261000e576004356126156001600160a01b03603354163314612692565b670de0b6b3a76400008111610ff3576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a1005b503461000e57602060031936011261000e57610c59610f98610a2a6103ca565b503461000e57610f03610efd61268a36610eb6565b929092613a9e565b1561269957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b61277360ff60005460081c1661276e816127e3565b6127e3565b61277c336126f7565b61279b60ff60005460081c16612791816127e3565b60016065556127e3565b60ff196097541660975560ca5560cb55670de0b6b3a764000060cd55337fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55565b156127ea57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b1561287557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b156128da57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001600160a01b0360cf5416330361294c57565b60046040517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b031660005260c960205260ff6040600020541661299657565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b0316156129d057565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81198111612a36570190565b612a3e6129fa565b0190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60d354811015612ada575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b612ae2612a72565b612aad565b6001600160a01b0360d35468010000000000000000811015612b73575b600181018060d355811015612b66575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b612b6e612a72565b612b14565b612b7b612a42565b612b04565b6000199060018110612a36570190565b670de0b6b3a7640000818110612ba4570390565b612bac6129fa565b0390565b818110612ba4570390565b60d3548015612c32577f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a560001982019180831015612c25575b60d3600052017fffffffffffffffffffffffff0000000000000000000000000000000000000000815416905560d355565b612c2d612a72565b612bf4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b67ffffffffffffffff8111612c7557604052565b612c7d612a42565b604052565b60a0810190811067ffffffffffffffff821117612c7557604052565b6040810190811067ffffffffffffffff821117612c7557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117612c7557604052565b612d1e816001600160a01b0380911660005260d460205260406000205416151590565b15610e8c576001600160a01b0380911660005260d46020526040600020541690565b9081602091031261000e575160ff8116810361000e5790565b506040513d6000823e3d90fd5b9081602091031261000e5751612d7b81611100565b90565b9081602091031261000e575190565b600091612e45949383926040519560208701937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248a0152166044880152606487015260648652612ded86612c82565b16908260405195612dfd87612c9e565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152612e33843b1515612ef7565b51925af1612e3f612f5c565b90612fc8565b805180612e50575050565b81602080612e6593612e6a9501019101612d66565b612e6c565b565b15612e7357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b15612efe57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15612fc3573d9067ffffffffffffffff8211612fb6575b60405191612faa60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184612cba565b82523d6000602084013e565b612fbe612a42565b612f74565b606090565b90919015612fd4575090565b815115612fe45750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b84831061306e575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311613061575b01168101030190fd5b6000858286010152613058565b8183018101518684016044015285935091820191613021565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee911660128110612a36570190565b60ff16806012106130ca575b60120390565b6130d26129fa565b6130c4565b60ff16604d81116130e9575b600a0a90565b6130f16129fa565b6130e3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8115613130570490565b6131386130f6565b0490565b806000190482118115151661314f570290565b6131576129fa565b0290565b9060ff8116601281101561318557509061317f61317a612d7b936130b8565b6130d7565b9061313c565b601210613190575090565b61317a61319c91613087565b908115613130570490565b42116131af57565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b939192936131e6816153d2565b6001600160a01b036131f883836133f9565b5091909261321084809861320b82613370565b6133a1565b1690813b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600093848160248183875af18015613363575b613350575b50813b1561334c576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810191909152838160248183865af1801561333f575b61332c575b50803b15613328576040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b039690961660048701526024860191909152929391928290604490829084905af1801561331b575b61330e5750565b8061068d612e6a92612c61565b613323612d59565b613307565b8280fd5b8061068d61333992612c61565b386132aa565b613347612d59565b6132a5565b8380fd5b8061068d61335d92612c61565b3861325f565b61336b612d59565b61325a565b1561337757565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b116133a857565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b9081602091031261000e57516effffffffffffffffffffffffffffff8116810361000e5790565b906001600160a01b0360009216604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481865afa938415613601575b6000946135e2575b50604051907f705727b500000000000000000000000000000000000000000000000000000000948583528383600481885afa9283156135d5575b6000936135ae575b506134b26134b79160ca54906effffffffffffffffffffffffffffff80809716911685613ad9565b61360e565b958187106135a557506134ca9086612bb0565b935b6040519081528281600481875afa908115613598575b60009161357b575b5016906000826134fc57505050508192565b6004826135499361354e96604051938480927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa92831561356e575b92613551575b50508561313c565b613126565b92565b6135679250803d1061076b5761075d8183612cba565b3880613541565b613576612d59565b61353b565b6135929150833d85116106f5576106e68183612cba565b386134ea565b6135a0612d59565b6134e2565b949550946134cc565b6134b79193506135cd6134b291863d88116106f5576106e68183612cba565b93915061348a565b6135dd612d59565b613482565b6135fa919450823d84116106f5576106e68183612cba565b9238613448565b613609612d59565b613440565b600081126136195790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b60008112906706f05b59d3b2000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166136e1575b817f800000000000000000000000000000000000000000000000000000000000000003831216612a36570190565b6136e96129fa565b6136b3565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166136e157817f800000000000000000000000000000000000000000000000000000000000000003831216612a36570190565b670de0b6b3a76400006000821280157f800000000000000000000000000000000000000000000000000000000000000084018312166137b4575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612ba4570390565b6137bc6129fa565b613786565b60008212827f80000000000000000000000000000000000000000000000000000000000000000182128115166137b457827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821316612ba4570390565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600211600083131616613895575b60017fc0000000000000000000000000000000000000000000000000000000000000008212600083121616613888575b60011b90565b6138906129fa565b613882565b61389d6129fa565b613852565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616613918575b60017fe000000000000000000000000000000000000000000000000000000000000000821260008312161661390b575b60021b90565b6139136129fa565b613905565b6139206129fa565b6138d5565b670de0b6b3a76400009060017809392ee8e921d5d073aff322e62439fcf32d7f344649470f90821160008313161661398b575b60017ffffffffffffffff6c6d11716de2a2f8c500cdd19dbc6030cd280cbb9b6b8f070821260008312161661314f570290565b6139936129fa565b613958565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818104851183851616613a40575b60008212927f800000000000000000000000000000000000000000000000000000000000000094848787058512911616613a33575b82600087129505861290851616613a26575b05831291161661314f570290565b613a2e6129fa565b613a18565b613a3b6129fa565b613a06565b613a486129fa565b6139d1565b8115613a91575b60001982147f8000000000000000000000000000000000000000000000000000000000000000821416613a85570590565b613a8d6129fa565b0590565b613a996130f6565b613a54565b7f80000000000000000000000000000000000000000000000000000000000000008114613acc575b60000390565b613ad46129fa565b613ac6565b90918015613c5b576000613aed83856136ee565b12613c3157829181613afe84613925565b60028205613b0b916136ee565b90613b1591613a4d565b93613b1f916136ee565b670de0b6b3a7640000809381613b348861374c565b613b3e9085613998565b613b4790613677565b0582613b53868a613998565b613b5c90613677565b05613b669061381f565b613b6f916136ee565b95613b7a8589613998565b90613b8491613a4d565b613b8d916137c1565b613b979083613c81565b9180613ba291613998565b613bab90613677565b05613bb5916137c1565b91613bc08286613998565b613bc990613677565b0590613bd491613c81565b613bdd916136ee565b613be78280613998565b90613bf1846138a2565b90613bfb91613998565b613c04916137c1565b613c0d82613a9e565b91613c1791613c97565b613c20916136ee565b90613c2a91613c62565b6002900590565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5091505090565b90613c7c613c72612d7b93613925565b60028305906136ee565b613a4d565b6117e1670de0b6b3a764000092613a8d92613998565b919060006003841315613d3457506000811380613d2a575b15613cf357915b613ccc613c2a84613cc78185613a4d565b6136ee565b905b838203613cd9575050565b909250613ced613c2a84613cc78185613a4d565b90613cce565b6000811280613d18575b15613d1157613d0b90613a9e565b91613cb6565b5081613cb6565b5082613d2382613a9e565b1315613cfd565b5082811315613caf565b929050613d3d57565b60019150565b9060ff81166012811015613d5e575061317a61319c916130b8565b601210613d69575090565b9061317f61317a612d7b93613087565b9190613d84836153d2565b613d8e818461415b565b5090936001600160a01b031684813b1561000e576040928351917f9dc29fac000000000000000000000000000000000000000000000000000000008352600092838180613df660049a898c8401602090939291936001600160a01b0360408201951681520152565b038183895af1801561408e575b61407b575b50833b156133285784517f9f9ef98800000000000000000000000000000000000000000000000000000000815286810191825290839082908190602001038183885af1801561406e575b61405b575b50823b156140575783517fd8b8785300000000000000000000000000000000000000000000000000000000815285810191825290829082908190602001038183875af1801561404a575b614037575b5082517f705727b5000000000000000000000000000000000000000000000000000000009081815260209081818881885afa90811561402a575b849161400d575b506effffffffffffffffffffffffffffff80911615159384613f38575b505050509050613f12575050565b517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b613faa9450662386f26fc10000958751937f961be39100000000000000000000000000000000000000000000000000000000855280858b81855afa948515614000575b8395613fdf575b50808495968b8b518095819382525afa928315613fd2575b92613fb5575b5050169116614126565b108038808080613f04565b613fcb9250803d106106f5576106e68183612cba565b3880613fa0565b613fda612d59565b613f9a565b849550613ff98291823d84116106f5576106e68183612cba565b9550613f82565b614008612d59565b613f7b565b6140249150823d84116106f5576106e68183612cba565b38613ee7565b614032612d59565b613ee0565b8061068d61404492612c61565b38613ea6565b614052612d59565b613ea1565b5080fd5b8061068d61406892612c61565b38613e57565b614076612d59565b613e52565b8061068d61408892612c61565b38613e08565b614096612d59565b613e03565b6001600160a01b03909392936140b0816153d2565b6140ba838261415b565b509290916140c98380986133a1565b1690813b1561000e576040928351917f9dc29fac000000000000000000000000000000000000000000000000000000008352600092838180613df660049a898c8401602090939291936001600160a01b0360408201951681520152565b61312690670de0b6b3a7640000816000190481118215151661414e575b8360011c9102612a2a565b6141566129fa565b614143565b916001600160a01b036000931691604051927f705727b500000000000000000000000000000000000000000000000000000000908185526020928386600481855afa958615614370575b60009661433b575b509161429d939161421b6141d66134b2956effffffffffffffffffffffffffffff809a1661313c565b604051907f18160ddd0000000000000000000000000000000000000000000000000000000082528582600481875afa91821561432e575b60009261430f575b50613126565b9661422588613370565b61422e88613a9e565b9184604051947f961be3910000000000000000000000000000000000000000000000000000000086528186600481865afa958615614302575b6000966142e3575b5060046040518094819382525afa9485156142d6575b6000956142b7575b50508060ca54941692169061437d565b928383106142b05750612d7b8383612bb0565b9092508192565b6142ce929550803d106106f5576106e68183612cba565b92388061428d565b6142de612d59565b614285565b6142fb919650823d84116106f5576106e68183612cba565b943861426f565b61430a612d59565b614267565b614327919250863d881161076b5761075d8183612cba565b9038614215565b614336612d59565b61420d565b6134b2939196509161421b6141d6614363879561429d983d88116106f5576106e68183612cba565b98939550505091936141ad565b614378612d59565b6141a5565b92909261438a81846136ee565b908361439586613925565b600282056143a2916136ee565b906143ac91613a4d565b80946143b785613925565b90670de0b6b3a7640000968088949360028695056143d4916136ee565b906143de91613a4d565b6143e7916137c1565b6143f091613998565b6143f990613677565b05916144048561374c565b61440d91613998565b61441690613677565b05614420916136ee565b600290059283926144318480613998565b928061443c91613998565b61444591613998565b61444e90613677565b05614458916136ee565b9061446291613c97565b61446b916136ee565b612d7b916137c1565b6001600160a01b0390811691161461448857565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b6144be6144c491612cfb565b91612cfb565b6144ce838361415b565b50509182936001600160a01b03808316604051917f961be39100000000000000000000000000000000000000000000000000000000958684526020978885600481875afa948515614716575b6000956146f7575b5061459682614590614546846effffffffffffffffffffffffffffff809a16612bb0565b98888d60405181816004817f705727b5000000000000000000000000000000000000000000000000000000009e8f82525afa9182156146ea575b6000926146cd575b505016612bb0565b986148e2565b670de0b6b3a76400008103614673575b505092879592614618988a9693614606999616916040519687528187600481865afa968715614666575b600097614647575b5060046040518094819382525afa96871561463a575b60009761461b575b50508060ca549616931690614778565b61461260cb5482614723565b90612bb0565b91565b614632929750803d106106f5576106e68183612cba565b9438806145f6565b614642612d59565b6145ee565b61465f919750823d84116106f5576106e68183612cba565b95386145d8565b61466e612d59565b6145d0565b8997939a50986146bc6146a28b6146b66146a2826146189f6146069f9c999d6146b0916146a2919d9a9d61313c565b670de0b6b3a7640000900490565b9961313c565b9761313c565b9a93969295985098819497506145a6565b6146e39250803d106106f5576106e68183612cba565b388f614588565b6146f2612d59565b614580565b61470f919550893d8b116106f5576106e68183612cba565b9338614522565b61471e612d59565b61451a565b61473f670de0b6b3a7640000926706f05b59d3b200009261313c565b7ffffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4dffff811161476b57010490565b6147736129fa565b010490565b92919493909385158015614838575b613c3157611695846117ff8561481b81613c7c8c6147f96148116148269f8f6148219f61480c6118059f8f85670de0b6b3a76400006147ff6117e1614806948f6147f99061180b8c613c7c6147f2613c7c9f9e613c729f6147eb613c7c91836136ee565b9c80613998565b9380613998565b90613998565b05906137c1565b9d6136ee565b613925565b6117ff818c613c62565b92613c62565b6137c1565b6000811215612d7b57612d7b90613a9e565b508215614787565b80614821613a8d926148c360029561180b61485b8480613998565b9160017f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82116000831316166148d5575b60017fe00000000000000000000000000000000000000000000000000000000000000082126000831216166148c8575b881b613925565b613c97565b6148d06129fa565b6148bc565b6148dd6129fa565b61488c565b90612d7b91604051907f2fa3a0d200000000000000000000000000000000000000000000000000000000808352602093849182856004816001600160a01b038098165afa9485156149e7575b6000956149c5575b5060049060405194859384928352165afa9283156149b8575b600093614999575b50507812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21811160011661498c575b670de0b6b3a764000002613126565b6149946129fa565b61497d565b6149b0929350803d1061076b5761075d8183612cba565b903880614957565b6149c0612d59565b61494f565b60049195506149e090843d861161076b5761075d8183612cba565b9490614936565b6149ef612d59565b61492e565b92939190614a03828286614c42565b8093919395614a138580996133a1565b614a30846001600160a01b031660005260d2602052604060002090565b614a3b838254612a2a565b90556001600160a01b0380911693843b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600094614aa7949086908290602490829084905af18015614c35575b614c22575b501693612a2a565b823b15614057576040517f9f9ef9880000000000000000000000000000000000000000000000000000000081526004810191909152662386f26fc1000092614b9e929091818160248183875af18015614c15575b614c02575b50604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481845afa938415614bf5575b8394614bcf575b509080600492604051938480927f705727b50000000000000000000000000000000000000000000000000000000082525afa928315614bc2575b92614ba5575b50506effffffffffffffffffffffffffffff8091169116614126565b1061294c57565b614bbb9250803d106106f5576106e68183612cba565b3880614b82565b614bca612d59565b614b7c565b8291945091614bec600493823d84116106f5576106e68183612cba565b94919250614b42565b614bfd612d59565b614b3b565b8061068d614c0f92612c61565b38614b00565b614c1d612d59565b614afb565b8061068d614c2f92612c61565b38614a9f565b614c3d612d59565b614a9a565b91906000808312614f62575b6001600160a01b03918285169460409182519384847f961be391000000000000000000000000000000000000000000000000000000009384835260209889848d60049b8c915afa938415614f55575b8594614f36575b508b614d276effffffffffffffffffffffffffffff80961693868d8d818c848d8c51848187817f705727b5000000000000000000000000000000000000000000000000000000009e8f82525afa918215614f29575b91614f0c575b50169886169a519283918252818c5afa918215614eff575b8b92614ee2575b505016996148e2565b670de0b6b3a76400008103614e9e575b50918b918b614d6995948c8c518097819382525afa938415614e91575b8794614e72575b50888660ca54951692614778565b988289139788958b9087614e68575b50508515614de6575b5050505050614dc057505015614da85750614618614da160cb5483614723565b8092612bb0565b9190614db7612d7b9193613a9e565b60cb5490614723565b517f9a6114b7000000000000000000000000000000000000000000000000000000008152fd5b9091928094955089129485614e05575b50505050503880808080614d81565b8192939495508787518095819382525afa938415614e5b575b93614e3c575b5050614e2f86613a9e565b9116103880808080614df6565b614e53929350803d106106f5576106e68183612cba565b903880614e24565b614e63612d59565b614e1e565b1095508a38614d78565b614e8a9194508c8d3d106106f5576106e68183612cba565b9238614d5b565b614e99612d59565b614d54565b9b614ed7614ec98e8e9f6146a2816146b66146a2614ec394614d699d9c9b9a9b61313c565b93613998565b670de0b6b3a7640000900590565b9c5091909293614d37565b614ef89250803d106106f5576106e68183612cba565b388f614d1e565b614f07612d59565b614d17565b614f239150843d86116106f5576106e68183612cba565b38614cff565b614f31612d59565b614cf9565b614f4e9194508a3d8c116106f5576106e68183612cba565b9238614ca4565b614f5d612d59565b614c9d565b91614f7890614f7260cb5461374c565b90613c62565b91614c4e565b92919092614f8c8482614474565b81156114f857612d7b91614fab614fa5614fef93612cfb565b95612cfb565b60405161501e614ff56339420b4560e11b988984528460209788956001600160a01b039887826004818d89165afa918215615085575b600092615066575b50615092565b91614c42565b9490931692604051908982528382600481885afa918215615059575b6000926150415750613d43565b9660046040518094819382525afa928315610ae457600093610ac5575050613d43565b61196b919250843d8611610731576107228183612cba565b615061612d59565b615011565b61507e919250883d8a11610731576107228183612cba565b9038614fe9565b61508d612d59565b614fe1565b9060ff811660128110156150b15750906147f961317a612d7b936130b8565b6012106150bc575090565b906150cc61317a612d7b93613087565b90613a4d565b610d4b6150de91612cfb565b6040517f18160ddd000000000000000000000000000000000000000000000000000000008082526020918281600481875afa908115615237575b60009161521a575b501561520b57612d7b9282604051927f705727b50000000000000000000000000000000000000000000000000000000084528184600481865afa9384156151fe575b6000946151df575b5060046040518094819382525afa9283156151d2575b6000936151a0575b50506effffffffffffffffffffffffffffff16614126565b6effffffffffffffffffffffffffffff92935090816151ca92903d1061076b5761075d8183612cba565b919038615188565b6151da612d59565b615180565b6151f7919450823d84116106f5576106e68183612cba565b923861516a565b615206612d59565b615162565b505050670de0b6b3a764000090565b6152319150833d851161076b5761075d8183612cba565b38615120565b61523f612d59565b615118565b6001906000198114612a36570190565b6001600160a01b039060d354811015615294575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a601541690565b61529c612a72565b615268565b6152ad612d7b91612cfb565b6105da6105c06001600160a01b0383166effffffffffffffffffffffffffffff61533f60046040517f99c91a640000000000000000000000000000000000000000000000000000000081526020928184818582958a5afa9081156153c5575b6000916153a8575b50604051906339420b4560e11b8252838286818b5afa91821561539b575b600092615383575061315b565b94604051928380927f961be3910000000000000000000000000000000000000000000000000000000082525afa9182156106fc576000926106cf5750501690612bb0565b61072a919250843d8611610731576107228183612cba565b6153a3612d59565b615332565b6153bf9150833d851161076b5761075d8183612cba565b38615314565b6153cd612d59565b61530c565b6153ef816001600160a01b031660005260d2602052604060002090565b5480158015615634575b6156305761541d61541761540e60cd54612b90565b60cc5490612bb0565b82614723565b9081615559575b615432915060cd5490614723565b80615456575b506001600160a01b0316600090815260d26020526040812055565b55565b61546081836133f9565b50916001600160a01b0384169150813b1561000e576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810193909352600092838160248183875af1801561554c575b615539575b50813b15613328576040517f16c9e7a000000000000000000000000000000000000000000000000000000000815260048101919091526000936154539390928290602490829084905af1801561552c575b615519575b509150615438565b8061068d61552692612c61565b38615511565b615534612d59565b61550c565b8061068d61554692612c61565b386154bb565b615554612d59565b6154b6565b6001600160a01b0383166155a461557860d0546001600160a01b031690565b93604051906339420b4560e11b8252602082600481875afa918215611972576000926119525750613d43565b92813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019390935261543292906000908290604490829084905af18015615623575b615610575b50615424565b8061068d61561d92612c61565b3861560a565b61562b612d59565b615605565b5050565b5060ce5481106153f956fea2646970667358221220cfeb001e5e905005253ffadb5bc51861faa2a4974e88c72401f75d307f0d5adb64736f6c634300080f0033",
  "devdoc": {
    "details": "Supports dynamic assets. Assume r* to be close to 1. Be aware that r* changes when the relative price of the asset updates",
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "addressOfAsset(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "details": "Asset needs to be created and added to pool before any operation. This function assumes tax free token.",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "exchangeRate(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "xr": "The exchange rate of LP token"
        }
      },
      "mintFee(address)": {
        "params": {
          "token": "The address of the token to collect fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "pauseAsset(address)": {
        "details": "pause asset, restricting deposit and swap operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quoteAmountIn(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromToken": "The initial ERC20 token",
          "toAmount": "The given output amount",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "amountIn": "The input amount required",
          "haircut": "The haircut that would be applied"
        }
      },
      "quotePotentialDeposit(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "amount": "The amount to deposit",
          "token": "The token to deposit by user"
        },
        "returns": {
          "liquidity": "The potential liquidity user would receive",
          "reward": "reward"
        }
      },
      "quotePotentialSwap(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromAmount": "The given input amount",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "fee": "The fee that would be applied"
        }
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity (amount of the lp assets) to be withdrawn",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "withdrewAmount": "The amount of the from-token that is withdrew"
        }
      },
      "removeAsset(address)": {
        "details": "Can only be called by owner",
        "params": {
          "token": "The address of token to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAmpFactor(uint256)": {
        "params": {
          "ampFactor_": "new pool's amplification factor"
        }
      },
      "setDev(address)": {
        "params": {
          "dev_": "new contract dev address"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "feeTo_": "new fee beneficiary"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "details": "This function assumes tax free token.",
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "unpauseAsset(address)": {
        "details": "unpause asset, enabling deposit and swap operations"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity to be withdrawn (in fromToken decimal)",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "toAmount": "The total amount withdrawn"
        }
      }
    },
    "title": "Dynamic Pool",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "AssetRemoved(address,address)": {
        "notice": "An event thats emitted when asset is removed from Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "addressOfAsset(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "ampFactor()": {
        "notice": "Amplification factor"
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "dev()": {
        "notice": "Dev address"
      },
      "exchangeRate(address)": {
        "notice": "Returns the exchange rate of the LP token"
      },
      "getTokens()": {
        "notice": "Return list of tokens in the pool"
      },
      "haircutRate()": {
        "notice": "Haircut rate"
      },
      "initialize(uint256,uint256)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpDividendRatio()": {
        "notice": "LP dividend ratio : the ratio of haircut that should distribute to LP"
      },
      "mintFee(address)": {
        "notice": "Send fee collected to the fee beneficiary"
      },
      "mintFeeThreshold()": {
        "notice": "The threshold to mint fee (unit: WAD)"
      },
      "quoteAmountIn(address,address,int256)": {
        "notice": "Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)"
      },
      "quotePotentialDeposit(address,uint256)": {
        "notice": "Quotes potential deposit from pool"
      },
      "quotePotentialSwap(address,address,int256)": {
        "notice": "Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage)."
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "notice": "Quotes potential withdrawal from other asset from the pool"
      },
      "removeAsset(address)": {
        "notice": "Removes asset from asset struct"
      },
      "retentionRatio()": {
        "notice": "Retention ratio: the ratio of haircut that should stay in the pool"
      },
      "setAmpFactor(uint256)": {
        "notice": "Changes the pools amplification factor. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setFeeTo(address)": {
        "notice": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setMintFeeThreshold(uint256)": {
        "notice": "Set min fee to mint"
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "notice": "Enables withdrawing liquidity from an asset using LP from a different asset"
      }
    },
    "notice": "Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6335,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "_pausedAssets",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6469,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "ampFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 6472,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "haircutRate",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 6475,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "retentionRatio",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 6478,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "lpDividendRatio",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 6481,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "mintFeeThreshold",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 6484,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "dev",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 6486,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "feeTo",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 6488,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "masterWombat",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 6494,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "_feeCollected",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_contract(IAsset)4205,t_uint256)"
      },
      {
        "astId": 6498,
        "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
        "label": "_assets",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(AssetMap)6466_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAsset)4205": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IAsset)4205)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IAsset)",
        "numberOfBytes": "32",
        "value": "t_contract(IAsset)4205"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IAsset)4205,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAsset)4205",
        "label": "mapping(contract IAsset => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetMap)6466_storage": {
        "encoding": "inplace",
        "label": "struct Pool.AssetMap",
        "members": [
          {
            "astId": 6456,
            "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 6461,
            "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_contract(IAsset)4205)"
          },
          {
            "astId": 6465,
            "contract": "contracts/wombat-core/pool/DynamicPool.sol:DynamicPool",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}