{
  "address": "0x3dd65188B818712c52732CBBd230e68FbF55A336",
  "abi": [
    {
      "inputs": [],
      "name": "CORE_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_COV_RATIO_LIMIT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_INVALID_HIGH_COV_RATIO_FEE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_UNDERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "D",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "SL",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "equilCovRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "er",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "D_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "L_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_equilCovRatio",
          "type": "int256"
        }
      ],
      "name": "exactDepositLiquidityImpl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "liquidity",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "D_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "L_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "exactDepositLiquidityInEquilImpl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "liquidity",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromAssetCash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromAssetLiability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quotedToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endCovRatio",
          "type": "uint256"
        }
      ],
      "name": "highCovRatioFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "asset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_equilCovRatio",
          "type": "int256"
        }
      ],
      "name": "quoteDepositLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpTokenToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liabilityToMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "fromAsset",
          "type": "IAsset"
        },
        {
          "internalType": "contract IAsset",
          "name": "toAsset",
          "type": "IAsset"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate",
          "type": "uint256"
        }
      ],
      "name": "quoteSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IAsset",
          "name": "toAsset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapCreditForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "fromAsset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endCovRatio",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapTokensForCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeInFromToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "asset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_equilCovRatio",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalHaircutRate",
          "type": "uint256"
        }
      ],
      "name": "quoteWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liabilityToBurn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalHaircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "fromAsset",
          "type": "IAsset"
        },
        {
          "internalType": "contract IAsset",
          "name": "toAsset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_equilCovRatio",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalHaircutRate",
          "type": "uint256"
        }
      ],
      "name": "quoteWithdrawAmountFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "finalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "Ax",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Lx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "delta_credit",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "swapFromCreditQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "Ax",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Ay",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Lx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Ly",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Dx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "swapQuoteFunc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "Ax",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Lx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Dx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "swapToCreditQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "delta_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "L_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_equilCovRatio",
          "type": "int256"
        }
      ],
      "name": "withdrawalAmountImpl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "delta_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "L_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "withdrawalAmountInEquilImpl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fdf1a32655d3ff4facd9b5f2456b8684cfadee16b03770b14cf2bb29081afc9",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0x3dd65188B818712c52732CBBd230e68FbF55A336",
    "transactionIndex": 0,
    "gasUsed": "1610453",
    "logsBloom": "0x
    "blockHash": "0x6373c2069c3218e6d61d1bc2d0df09605d7a599ac92a1567d769045203468c46",
    "transactionHash": "0x6fdf1a32655d3ff4facd9b5f2456b8684cfadee16b03770b14cf2bb29081afc9",
    "logs": [],
    "blockNumber": 30328907,
    "cumulativeGasUsed": "1610453",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3f9c2456f68b38bf6a5942c97bd9a8d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CORE_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_COV_RATIO_LIMIT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_INVALID_HIGH_COV_RATIO_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_UNDERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"D\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"SL\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"equilCovRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"er\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"D_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"L_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_equilCovRatio\",\"type\":\"int256\"}],\"name\":\"exactDepositLiquidityImpl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"D_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"L_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"exactDepositLiquidityInEquilImpl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAssetCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromAssetLiability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotedToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCovRatio\",\"type\":\"uint256\"}],\"name\":\"highCovRatioFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_equilCovRatio\",\"type\":\"int256\"}],\"name\":\"quoteDepositLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liabilityToMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"fromAsset\",\"type\":\"IAsset\"},{\"internalType\":\"contract IAsset\",\"name\":\"toAsset\",\"type\":\"IAsset\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate\",\"type\":\"uint256\"}],\"name\":\"quoteSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IAsset\",\"name\":\"toAsset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate\",\"type\":\"uint256\"}],\"name\":\"quoteSwapCreditForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"fromAsset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCovRatio\",\"type\":\"uint256\"}],\"name\":\"quoteSwapTokensForCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeInFromToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_equilCovRatio\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalHaircutRate\",\"type\":\"uint256\"}],\"name\":\"quoteWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liabilityToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalHaircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"fromAsset\",\"type\":\"IAsset\"},{\"internalType\":\"contract IAsset\",\"name\":\"toAsset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_equilCovRatio\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalHaircutRate\",\"type\":\"uint256\"}],\"name\":\"quoteWithdrawAmountFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"Ax\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Lx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delta_credit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"swapFromCreditQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"Ax\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Ay\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Lx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Ly\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Dx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"swapQuoteFunc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"Ax\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Lx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Dx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"swapToCreditQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"delta_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"L_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_equilCovRatio\",\"type\":\"int256\"}],\"name\":\"withdrawalAmountImpl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"delta_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"L_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"withdrawalAmountInEquilImpl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations. Change log: - Move view functinos (quotes, high cov ratio fee) from the Pool contract to this contract - Add quote functions for cross chain swaps\",\"kind\":\"dev\",\"methods\":{\"quoteSwap(IAsset,IAsset,int256,uint256,uint256,uint256)\":{\"params\":{\"fromAmount\":\"The amount to quote\",\"fromAsset\":\"The initial asset\",\"toAsset\":\"The asset wanted by user\"},\"returns\":{\"actualToAmount\":\"The actual amount user would receive\",\"haircut\":\"The haircut that will be applied\"}},\"quoteSwapCreditForTokens(uint256,IAsset,uint256,uint256,uint256)\":{\"details\":\"reverse quote is not supported\"},\"quoteSwapTokensForCredit(IAsset,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"reverse quote is not supported haircut is calculated in the fromToken when swapping tokens for credit\"},\"quoteWithdrawAmount(IAsset,uint256,uint256,int256,uint256)\":{\"params\":{\"_equilCovRatio\":\"global equilibrium coverage ratio\",\"asset\":\"The asset willing to be withdrawn\",\"liquidity\":\"The liquidity willing to be withdrawn\",\"withdrawalHaircutRate\":\"withdraw haircut rate\"},\"returns\":{\"amount\":\"Total amount to be withdrawn from Pool\",\"liabilityToBurn\":\"Total liability to be burned by Pool\",\"withdrawalHaircut\":\"Total withdrawal haircut\"}},\"swapFromCreditQuote(int256,int256,int256,int256)\":{\"details\":\"This function always returns >= 0\"},\"swapQuoteFunc(int256,int256,int256,int256,int256,int256)\":{\"details\":\"This function always returns >= 0\",\"params\":{\"A\":\"amplification factor\",\"Ax\":\"asset of token x\",\"Ay\":\"asset of token y\",\"Dx\":\"delta x, i.e. token x amount inputted\",\"Lx\":\"liability of token x\",\"Ly\":\"liability of token y\"},\"returns\":{\"quote\":\"The quote for amount of token y swapped for token x amount inputted\"}},\"swapToCreditQuote(int256,int256,int256,int256)\":{\"details\":\"This function always returns >= 0\"},\"withdrawalAmountImpl(int256,int256,int256,int256,int256)\":{\"details\":\"Calculate the withdrawal amount for any r*\"},\"withdrawalAmountInEquilImpl(int256,int256,int256,int256)\":{\"details\":\"should be used only when r* = 1\"}},\"title\":\"CoreV3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactDepositLiquidityImpl(int256,int256,int256,int256,int256)\":{\"notice\":\"return the deposit reward in token amount when target liquidity (LP amount) is known\"},\"exactDepositLiquidityInEquilImpl(int256,int256,int256,int256)\":{\"notice\":\"return the deposit reward in token amount when target liquidity (LP amount) is known\"},\"quoteDepositLiquidity(IAsset,uint256,uint256,int256)\":{\"notice\":\"This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\"},\"quoteSwap(IAsset,IAsset,int256,uint256,uint256,uint256)\":{\"notice\":\"Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\"},\"quoteWithdrawAmount(IAsset,uint256,uint256,int256,uint256)\":{\"notice\":\"Calculates fee and liability to burn in case of withdrawal\"},\"swapFromCreditQuote(int256,int256,int256,int256)\":{\"notice\":\"quote swapping from credit for tokens\"},\"swapQuoteFunc(int256,int256,int256,int256,int256,int256)\":{\"notice\":\"Core Wombat stableswap equation\"},\"swapToCreditQuote(int256,int256,int256,int256)\":{\"notice\":\"quote swapping from tokens for credit\"}},\"notice\":\"Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/CoreV3.sol\":\"CoreV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IAsset is IERC20 {\\r\\n    function underlyingToken() external view returns (address);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function cash() external view returns (uint120);\\r\\n\\r\\n    function liability() external view returns (uint120);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function underlyingTokenDecimals() external view returns (uint8);\\r\\n\\r\\n    function setPool(address pool_) external;\\r\\n\\r\\n    function underlyingTokenBalance() external view returns (uint256);\\r\\n\\r\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(address to, uint256 amount) external;\\r\\n\\r\\n    function addCash(uint256 amount) external;\\r\\n\\r\\n    function removeCash(uint256 amount) external;\\r\\n\\r\\n    function addLiability(uint256 amount) external;\\r\\n\\r\\n    function removeLiability(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x422c0f5af1e3ee4db0a7baa912f8ed064bf92efc3ed761071abf8d991fe7120c\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10 ** 18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10 ** (18 - d);\\n        } else if (d > 18) {\\n            return (x / (10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * 10 ** (d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xd6cacca5817b3c8820f60e203c1485ef19ebe8c07dfdda7df9c870f3dbffaaf5\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10 ** 18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10 ** (18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10 ** (d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            return uint256(-value);\\n        } else {\\n            return uint256(value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ed1c19a0b5b1bba2680f7114303e7126059584e28075e893be59f60ae40a1aa\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../interfaces/IAsset.sol';\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV3\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n * Change log:\\n * - Move view functinos (quotes, high cov ratio fee) from the Pool contract to this contract\\n * - Add quote functions for cross chain swaps\\n */\\nlibrary CoreV3 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    int256 internal constant WAD_I = 10 ** 18;\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    error CORE_UNDERFLOW();\\n    error CORE_INVALID_VALUE();\\n    error CORE_INVALID_HIGH_COV_RATIO_FEE();\\n    error CORE_ZERO_LIQUIDITY();\\n    error CORE_CASH_NOT_ENOUGH();\\n    error CORE_COV_RATIO_LIMIT_EXCEEDED();\\n\\n    /*\\n     * Public view functions\\n     */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function quoteDepositLiquidity(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 ampFactor,\\n        int256 _equilCovRatio\\n    ) external view returns (uint256 lpTokenToMint, uint256 liabilityToMint) {\\n        liabilityToMint = _equilCovRatio == WAD_I\\n            ? exactDepositLiquidityInEquilImpl(\\n                int256(amount),\\n                int256(uint256(asset.cash())),\\n                int256(uint256(asset.liability())),\\n                int256(ampFactor)\\n            ).toUint256()\\n            : exactDepositLiquidityImpl(\\n                int256(amount),\\n                int256(uint256(asset.cash())),\\n                int256(uint256(asset.liability())),\\n                int256(ampFactor),\\n                _equilCovRatio\\n            ).toUint256();\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @param _equilCovRatio global equilibrium coverage ratio\\n     * @param withdrawalHaircutRate withdraw haircut rate\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return withdrawalHaircut Total withdrawal haircut\\n     */\\n    function quoteWithdrawAmount(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 ampFactor,\\n        int256 _equilCovRatio,\\n        uint256 withdrawalHaircutRate\\n    ) public view returns (uint256 amount, uint256 liabilityToBurn, uint256 withdrawalHaircut) {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        if (liabilityToBurn == 0) revert CORE_ZERO_LIQUIDITY();\\n\\n        amount = _equilCovRatio == WAD_I\\n            ? withdrawalAmountInEquilImpl(\\n                -int256(liabilityToBurn),\\n                int256(uint256(asset.cash())),\\n                int256(uint256(asset.liability())),\\n                int256(ampFactor)\\n            ).toUint256()\\n            : withdrawalAmountImpl(\\n                -int256(liabilityToBurn),\\n                int256(uint256(asset.cash())),\\n                int256(uint256(asset.liability())),\\n                int256(ampFactor),\\n                _equilCovRatio\\n            ).toUint256();\\n\\n        // charge withdrawal haircut\\n        if (withdrawalHaircutRate > 0) {\\n            withdrawalHaircut = amount.wmul(withdrawalHaircutRate);\\n            amount -= withdrawalHaircut;\\n        }\\n    }\\n\\n    function quoteWithdrawAmountFromOtherAsset(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 liquidity,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio,\\n        int256 _equilCovRatio,\\n        uint256 withdrawalHaircutRate\\n    ) external view returns (uint256 finalAmount, uint256 withdrewAmount) {\\n        // quote withdraw\\n        uint256 withdrawalHaircut;\\n        uint256 liabilityToBurn;\\n        (withdrewAmount, liabilityToBurn, withdrawalHaircut) = quoteWithdrawAmount(\\n            fromAsset,\\n            liquidity,\\n            ampFactor,\\n            _equilCovRatio,\\n            withdrawalHaircutRate\\n        );\\n\\n        // quote swap\\n        uint256 fromCash = fromAsset.cash() - withdrewAmount - withdrawalHaircut;\\n        uint256 fromLiability = fromAsset.liability() - liabilityToBurn;\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            withdrewAmount = (withdrewAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapQuoteFunc(\\n            int256(fromCash),\\n            int256(uint256(toAsset.cash())),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            int256(withdrewAmount),\\n            int256(ampFactor)\\n        );\\n\\n        // remove haircut\\n        finalAmount = idealToAmount - idealToAmount.wmul(haircutRate);\\n\\n        if (startCovRatio > 0 || endCovRatio > 0) {\\n            // charge high cov ratio fee\\n            uint256 fee = highCovRatioFee(\\n                fromCash,\\n                fromLiability,\\n                withdrewAmount,\\n                finalAmount,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n\\n            finalAmount -= fee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function quoteSwap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate\\n    ) external view returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 fromCash = uint256(fromAsset.cash());\\n        uint256 fromLiability = uint256(fromAsset.liability());\\n        uint256 toCash = uint256(toAsset.cash());\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * int256(scaleFactor)) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapQuoteFunc(\\n            int256(fromCash),\\n            int256(toCash),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            int256(ampFactor)\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert CORE_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = uint256(-fromAmount).wmul(haircutRate);\\n        }\\n    }\\n\\n    /// @dev reverse quote is not supported\\n    /// haircut is calculated in the fromToken when swapping tokens for credit\\n    function quoteSwapTokensForCredit(\\n        IAsset fromAsset,\\n        uint256 fromAmount,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) external view returns (uint256 creditAmount, uint256 feeInFromToken) {\\n        if (fromAmount == 0) return (0, 0);\\n        // haircut\\n        feeInFromToken = fromAmount.wmul((haircutRate));\\n\\n        // high coverage ratio fee\\n\\n        uint256 fromCash = fromAsset.cash();\\n        uint256 fromLiability = fromAsset.liability();\\n        feeInFromToken += highCovRatioFee(\\n            fromCash,\\n            fromLiability,\\n            fromAmount,\\n            fromAmount - feeInFromToken, // calculate haircut in the fromAmount (exclude haircut)\\n            startCovRatio,\\n            endCovRatio\\n        );\\n\\n        fromAmount -= feeInFromToken;\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * scaleFactor) / 1e18;\\n        }\\n\\n        creditAmount = swapToCreditQuote(\\n            int256(fromCash),\\n            int256(fromLiability),\\n            int256(fromAmount),\\n            int256(ampFactor)\\n        );\\n    }\\n\\n    /// @dev reverse quote is not supported\\n    function quoteSwapCreditForTokens(\\n        uint256 fromAmount,\\n        IAsset toAsset,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate\\n    ) external view returns (uint256 actualToAmount, uint256 haircut) {\\n        if (fromAmount == 0) return (0, 0);\\n        uint256 toCash = toAsset.cash();\\n        uint256 toLiability = toAsset.liability();\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromAmount = (fromAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapFromCreditQuote(\\n            int256(toCash),\\n            int256(toLiability),\\n            int256(fromAmount),\\n            int256(ampFactor)\\n        );\\n        if (fromAmount > 0 && toCash < idealToAmount) {\\n            revert CORE_CASH_NOT_ENOUGH();\\n        }\\n\\n        // normal quote\\n        haircut = idealToAmount.wmul(haircutRate);\\n        actualToAmount = idealToAmount - haircut;\\n    }\\n\\n    function equilCovRatio(int256 D, int256 SL, int256 A) public pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    /*\\n     * Pure calculating functions\\n     */\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) public pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        return Dy.abs();\\n    }\\n\\n    /**\\n     * @dev Calculate the withdrawal amount for any r*\\n     */\\n    function withdrawalAmountImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A,\\n        int256 _equilCovRatio\\n    ) public pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 delta_D = delta_i.wmul(_equilCovRatio) - (delta_i * A) / _equilCovRatio; // The only line that is different\\n        int256 b = -(L_i.wmul(r_i - A.wdiv(r_i)) + delta_D);\\n        int256 c = A.wmul(L_i_.wmul(L_i_));\\n        int256 A_i_ = _solveQuad(b, c);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        // equilvalent to:\\n        // int256 delta_D = delta_i.wmul(WAD_I - A);\\n        // int256 b = -(L_i.wmul(r_i - A.wdiv(r_i)) + delta_D);\\n        // int256 c = A.wmul(L_i_.wmul(L_i_));\\n        // int256 A_i_ = _solveQuad(b, c);\\n\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A,\\n        int256 _equilCovRatio\\n    ) public pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(_equilCovRatio) - (k * A) / _equilCovRatio + 2 * A.wmul(L_i); // The only line that is different\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    /**\\n     * @notice quote swapping from tokens for credit\\n     * @dev This function always returns >= 0\\n     */\\n    function swapToCreditQuote(int256 Ax, int256 Lx, int256 Dx, int256 A) public pure returns (uint256 quote) {\\n        int256 rx = Ax.wdiv(Lx);\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 x = rx_ - A.wdiv(rx_);\\n        int256 y = rx - A.wdiv(rx);\\n\\n        // adjsut credit by 1 / (1 + A)\\n        return ((Lx * (x - y)) / (WAD_I + A)).abs();\\n    }\\n\\n    /**\\n     * @notice quote swapping from credit for tokens\\n     * @dev This function always returns >= 0\\n     */\\n    function swapFromCreditQuote(\\n        int256 Ax,\\n        int256 Lx,\\n        int256 delta_credit,\\n        int256 A\\n    ) public pure returns (uint256 quote) {\\n        int256 rx = Ax.wdiv(Lx);\\n        // adjsut credit by 1 + A\\n        int256 b = (delta_credit * (WAD_I + A)) / Lx - rx + A.wdiv(rx); // flattened _coefficientFunc\\n        int256 rx_ = _solveQuad(b, A);\\n        int256 Dx = Ax - Lx.wmul(rx_);\\n\\n        return Dx.abs();\\n    }\\n\\n    function highCovRatioFee(\\n        uint256 fromAssetCash,\\n        uint256 fromAssetLiability,\\n        uint256 fromAmount,\\n        uint256 quotedToAmount,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) public pure returns (uint256 fee) {\\n        uint256 finalFromAssetCovRatio = (fromAssetCash + fromAmount).wdiv(fromAssetLiability);\\n\\n        if (finalFromAssetCovRatio > startCovRatio) {\\n            // charge high cov ratio fee\\n            uint256 feeRatio = _highCovRatioFee(\\n                fromAssetCash.wdiv(fromAssetLiability),\\n                finalFromAssetCovRatio,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n\\n            if (feeRatio > WAD) revert CORE_INVALID_HIGH_COV_RATIO_FEE();\\n            fee = feeRatio.wmul(quotedToAmount);\\n        }\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(int256 Lx, int256 rx, int256 Ly, int256 ry, int256 A) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(int256 Lx, int256 Ly, int256 rx_, int256 D, int256 A) internal pure returns (int256) {\\n        return (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly);\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _newEquilCovRatio(int256 er, int256 SL, int256 delta_i) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(int256 er_, int256 A, int256 SL, int256 delta_i) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice Calculate the high cov ratio fee in the to-asset in a swap.\\n     * @dev When cov ratio is in the range [startCovRatio, endCovRatio], the marginal cov ratio is\\n     * (r - startCovRatio) / (endCovRatio - startCovRatio). Here we approximate the high cov ratio cut\\n     * by calculating the \\\"average\\\" fee.\\n     * Note: `finalCovRatio` should be greater than `initCovRatio`\\n     */\\n    function _highCovRatioFee(\\n        uint256 initCovRatio,\\n        uint256 finalCovRatio,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) internal pure returns (uint256 fee) {\\n        if (finalCovRatio > endCovRatio) {\\n            // invalid swap\\n            revert CORE_COV_RATIO_LIMIT_EXCEEDED();\\n        } else if (finalCovRatio <= startCovRatio || finalCovRatio <= initCovRatio) {\\n            return 0;\\n        }\\n\\n        // 1. Calculate the area of fee(r) = (r - startCovRatio) / (endCovRatio - startCovRatio)\\n        // when r increase from initCovRatio to finalCovRatio\\n        // 2. Then multiply it by (endCovRatio - startCovRatio) / (finalCovRatio - initCovRatio)\\n        // to get the average fee over the range\\n        uint256 a = initCovRatio <= startCovRatio ? 0 : (initCovRatio - startCovRatio) * (initCovRatio - startCovRatio);\\n        uint256 b = (finalCovRatio - startCovRatio) * (finalCovRatio - startCovRatio);\\n        fee = ((b - a) / (finalCovRatio - initCovRatio) / 2).wdiv(endCovRatio - startCovRatio);\\n    }\\n}\\n\",\"keccak256\":\"0xc10b928ec1d13883c3f5dded056770fa647de8ed17eb7cf5dc736071a65cddf6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a57611c2f9081610020823930815050f35b600080fdfe6040608081526004908136101561001557600080fd5b6000803560e01c80631df0f4f214610ab05780631f86566214610a985780632841c1ad14610a805780632f6599bb14610a525780634c5b402d14610a3a5780635dbcd62c1461078357806362d2ab101461076b57806367146f2914610731578063691b5fb61461071957806391810795146106d2578063d7454c531461068f578063df49129814610677578063e02a44c614610381578063efd7af77146100fc5763f50fc03e146100c557600080fd5b60c03660031901126100f957506100f260209260a4359060843590606435906044359060243590356112ef565b9051908152f35b80fd5b5082906101403660031901126100f957610114610ae6565b61011c610b01565b926064359161013661012435610104358560443585610c7e565b9491929093839689519163961be39160e01b938484526001600160a01b03809116906020998a868581865afa958615610377578596610354575b5061018e906101898a6001600160781b03809916610c71565b610c71565b988d518b81868163705727b560e01b978882525afa908115610349576101c1929188918e899261032c575b505016610c71565b9b670de0b6b3a764000098608435670de0b6b3a763ffff198101610302575b505016918c5195865289868281865afa9586156102f857908a929185976102d9575b508d518094819382525afa9182156102ce57836102509796948b9461023497948e94916102a1575b50169216886112ef565b9061024961024460a43584610bae565b610f38565b0490610c71565b9360c435908115801590610296575b610271575b5050508351928352820152f35b9161028791868661028d96989560e43594611a2d565b90610c71565b91848080610264565b5060e435151561025f565b6102c191508c8d3d106102c7575b6102b98183610b57565b810190610b8f565b8f61022a565b503d6102af565b8b51903d90823e3d90fd5b6102f1919750833d85116102c7576102b98183610b57565b958e610202565b8d513d86823e3d90fd5b8a610323929f9c81949f50828261031c8261031c94610bae565b049e610bae565b049a8e806101e0565b6103429250803d106102c7576102b98183610b57565b388e6101b9565b508e513d87823e3d90fd5b61018e919650610370908c8d3d106102c7576102b98183610b57565b9590610170565b8e513d87823e3d90fd5b50829060c03660031901126100f957610398610ae6565b916103a1610b01565b91604435906084359282828112610644575b5086519463961be39160e01b8087526001600160a01b038098169360209889898681895afa98891561063a57829961061b575b506001600160781b038099168b519163705727b560e01b928381528c8189818c5afa90811561037757908c918e87926105fe575b5050169516918c51908582528c828981875afa91821561037757908e8e9287946105df575b50670de0b6b3a76400008d819e82036105ad575b50508990518096819382525afa9283156102f857918b8a9261048995948f889661058e575b50501696878d6064359516926112ef565b978187139586948a9086610584575b50508415610507575b505050506104f95750156104d757506104cb906104c361024460a43585610bae565b048092610c71565b915b8351928352820152f35b92916102446104f291946104ed60a43591610c60565b610bae565b04906104cd565b8651631c4bd71760e01b8152fd5b9091929350898388129485610525575b5050505050888080806104a1565b909192939450858c518094819382525afa928315610579579261055a575b5061054d85610c60565b9116108880808981610517565b610572919250883d8a116102c7576102b98183610b57565b9089610543565b8a51903d90823e3d90fd5b109450898d610498565b6105a5929650803d106102c7576102b98183610b57565b93388f610478565b80828d949f9c9882826105c66105d4966105cd94610bae565b049a610bae565b049b610fd5565b059b90508c38610453565b6105f7919450833d85116102c7576102b98183610b57565b923861043f565b6106149250803d106102c7576102b98183610b57565b8f8e61041a565b6106339199508a3d8c116102c7576102b98183610b57565b978b6103e6565b8b513d84823e3d90fd5b61067091935061066b61066161065b60a435610f5a565b92610f96565b600283059061104f565b610ff8565b91876103b3565b6020836100f261068636610b17565b92919091611571565b5060603660031901126100f957506100f26020926106cd6106c86106b66024359335610f96565b9261066b60443594600283059061104f565b610c60565b611af2565b509060a0366003190112610715576060906107036106ee610ae6565b60843590606435906044359060243590610c7e565b91929081519384526020840152820152f35b5080fd5b6020836100f261072836610b35565b93929092611473565b50829060a03660031901126100f9575061075f9061074d610b01565b608435916064359160443591356111c2565b82519182526020820152f35b6020836100f261077a36610b35565b9392909261170e565b50829060803660031901126100f95761079a610ae6565b90604435602435606435670de0b6b3a7640000810361096c5750855163961be39160e01b81529060206001600160a01b03861681848981845afa93841561094157908891879561094b575b5082908a519283809263705727b560e01b82525afa91821561094157926001600160a01b0395926108369592610831958992610924575b50506001600160781b038091169216906118b2565b610bf7565b925b169084519363705727b560e01b855260209485818381875afa90811561091a5786916001600160781b039185916108fd575b5016938461088357505050505080918351928352820152f35b8751928380926318160ddd60e01b82525afa9182156108f25780926108be575b5050906108b36108b89284610bae565b610bd7565b916104cd565b9091508482813d83116108eb575b6108d68183610b57565b810103126100f95750516108b36108b86108a3565b503d6108cc565b8651903d90823e3d90fd5b6109149150833d85116102c7576102b98183610b57565b8961086a565b87513d85823e3d90fd5b61093a9250803d106102c7576102b98183610b57565b8b8061081c565b89513d88823e3d90fd5b8391955061096590823d84116102c7576102b98183610b57565b94906107e5565b865163961be39160e01b815290929160206001600160a01b03871681848a81845afa938415610a0f579089918895610a19575b5082908b519283809263705727b560e01b82525afa918215610a0f57926109ec959261083195926001600160a01b0398958a926109f2575b50506001600160781b0380911692169061170e565b92610838565b610a089250803d106102c7576102b98183610b57565b8c806109d7565b8a513d89823e3d90fd5b83919550610a3390823d84116102c7576102b98183610b57565b949061099f565b6020836100f2610a4936610b17565b929190916118b2565b5060c03660031901126100f957506100f260209260a435906084359060643590604435906024359035611a2d565b6020836100f2610a8f36610b17565b929190916119c0565b6020836100f2610aa736610b17565b92919091611935565b5060e03660031901126100f9575061075f610ac9610ae6565b60c4359060a435906084359060643590604435906024359061106b565b600435906001600160a01b0382168203610afc57565b600080fd5b602435906001600160a01b0382168203610afc57565b6080906003190112610afc5760043590602435906044359060643590565b60a0906003190112610afc576004359060243590604435906064359060843590565b90601f8019910116810190811067ffffffffffffffff821117610b7957604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610afc57516001600160781b0381168103610afc5790565b81810292918115918404141715610bc157565b634e487b7160e01b600052601160045260246000fd5b8115610be1570490565b634e487b7160e01b600052601260045260246000fd5b60008112610c025790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b600160ff1b8114610bc15760000390565b91908203918211610bc157565b9394919290926000936001600160a01b0360009616604080519063705727b560e01b92838352602060049581858881865afa948515610f2e578c95610f0b575b50610cd3906001600160781b03809616610bae565b83516318160ddd60e01b815282818981875afa908115610f01578d91610ece575b50610cfe91610bd7565b9a8b15610ea657670de0b6b3a764000098808a03610df55750610d208c610c60565b9584519763961be39160e01b895283898281885afa988915610deb578399610dc8575b5090839186518096819382525afa938415610dbe5750928492610831979592610d7999979592610da1575b505016921690611571565b905b819580610d8757505050565b610d9e939650829450610244906104c39293610bae565b92565b610db79250803d106102c7576102b98183610b57565b3880610d6e565b51903d90823e3d90fd5b8492919950610de390833d85116102c7576102b98183610b57565b989091610d43565b86513d85823e3d90fd5b9796959493929190610e068d610c60565b9584519763961be39160e01b895283898281885afa988915610deb578399610e83575b5090839186518096819382525afa938415610dbe5750928492610e609997959261083199979592610e66575b505016921690611473565b90610d7b565b610e7c9250803d106102c7576102b98183610b57565b3880610e55565b8492919950610e9e90833d85116102c7576102b98183610b57565b989091610e29565b8684517fd4b6d81b000000000000000000000000000000000000000000000000000000008152fd5b90508281813d8311610efa575b610ee58183610b57565b81010312610ef65751610cfe610cf4565b8c80fd5b503d610edb565b85513d8f823e3d90fd5b610cd3919550610f2790833d85116102c7576102b98183610b57565b9490610cbe565b84513d8e823e3d90fd5b906706f05b59d3b200008201809211610bc157565b91908201809211610bc157565b90670de0b6b3a764000060008382039312818412811691841390151617610bc157565b81810392916000138015828513169184121617610bc157565b90670de0b6b3a764000091828102928184051490151715610bc157565b908160011b916002830503610bc157565b908160021b916004830503610bc157565b818102929160008212600160ff1b821416610bc1578184051490151715610bc157565b8115610be157600160ff1b8114600019831416610bc1570590565b9081670de0b6b3a764000001918212600116610bc157565b906706f05b59d3b200009160008382019384129112908015821691151617610bc157565b91909160008382019384129112908015821691151617610bc157565b9095919386156111b3576001600160a01b0361024491611096670de0b6b3a76400009384928b610bae565b049216916040519363961be39160e01b85526020918286600481885afa91821561118857600496600093611194575b50836001600160781b03809416966040519889809263705727b560e01b82525afa9081156111885761113a9a61111584611123968f9b9561111d9661112a9a60009261116b575b5050169a610c71565b8d8a8a611a2d565b90610f4d565b8098610c71565b9381810361113d575b5050611935565b91565b8161115b82826111548261116297989a999a610bae565b0497610bae565b0493610bae565b04913880611133565b6111819250803d106102c7576102b98183610b57565b388061110c565b6040513d6000823e3d90fd5b6111ac919350843d86116102c7576102b98183610b57565b91386110c5565b50505050505050600090600090565b9392919084156112e2576001600160a01b03169060405163961be39160e01b815260208082600481875afa918215611188576000926112c3575b506004816001600160781b03809416956040519283809263705727b560e01b82525afa918215611188576000926112a6575b5050670de0b6b3a76400009485810361128d575b506112519291879116846119c0565b809415159182611283575b5050611272576104c361024461113a9385610bae565b6004604051631c4bd71760e01b8152fd5b109050833861125c565b61129d8691611251959499610bae565b04969192611242565b6112bc9250803d106102c7576102b98183610b57565b388061122e565b816112db9293503d84116102c7576102b98183610b57565b90386111fc565b5050505050600090600090565b9390949180158015611459575b61142f578381819261130e898961104f565b978061131a8380610fd5565b9061132491610ff8565b98670de0b6b3a7640000809a8c61133b8880610fd5565b9061134591610ff8565b61134e9161104f565b611358908a610fd5565b6113619061102b565b0561136b91610f7d565b956113759161104f565b61137e90610f96565b6002820561138b9161104f565b9061139591610ff8565b8061139f87610f96565b600282056113ac9161104f565b906113b691610ff8565b6113bf91610f7d565b6113c891610fd5565b906113d291610ff8565b916113dc90610f96565b600282056113e99161104f565b906113f391610ff8565b6113fc91610f7d565b9061140691611af2565b61140f91610fd5565b6114189061102b565b059061142391610f7d565b61142c90611461565b90565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5083156112fc565b600081121561142c5761142c90610c60565b929193829194611483858261104f565b948161148e88610f96565b6002820561149b9161104f565b906114a591610ff8565b91670de0b6b3a7640000958483886114bf81988297610fd5565b6114c89061102b565b05926114d391610fd5565b906114dd91610ff8565b6114e691610f7d565b92806114f187610f96565b600282056114fe9161104f565b9061150891610ff8565b61151191610f7d565b61151a91610fd5565b6115239061102b565b059061152e9161104f565b61153790610c60565b938061154291610fd5565b61154b9061102b565b0561155591610fd5565b61155e9061102b565b0561156891611af2565b61142c91610f7d565b92909261157e818461104f565b908361158986610f96565b600282056115969161104f565b906115a091610ff8565b80946115ab85610f96565b90670de0b6b3a7640000968088949360028695056115c89161104f565b906115d291610ff8565b6115db91610f7d565b6115e491610fd5565b6115ed9061102b565b05916115f885610f5a565b61160191610fd5565b61160a9061102b565b056116149161104f565b600290059283926116258480610fd5565b928061163091610fd5565b61163991610fd5565b6116429061102b565b0561164c9161104f565b906116569161165f565b6115689161104f565b9190600060038413156116ff575060008113806116f5575b156116be57915b6002806116948561168f8186610ff8565b61104f565b05915b8483036116a357505050565b91935090816116b68561168f8185610ff8565b059190611697565b60008112806116e3575b156116dc576116d690610c60565b9161167e565b508161167e565b50826116ee82610c60565b13156116c8565b5082811315611677565b92905061170857565b60019150565b90929382156118aa576000611723838661104f565b1261142f5783918361173484610f96565b600282056117419161104f565b9061174b91610ff8565b946117559161104f565b90670de0b6b3a76400008093828261176e819587610fd5565b6117779061102b565b05906117838a87610fd5565b9061178d91610ff8565b61179691610f7d565b826117a1888b610fd5565b6117aa9061102b565b056117b490610fb3565b6117bd9161104f565b966117c8878a610fd5565b906117d291610ff8565b6117db91610f7d565b6117e59084610fd5565b6117ee9061102b565b0591806117fa91610fd5565b6118039061102b565b0561180d91610f7d565b91816118198287610fd5565b6118229061102b565b059061182d91610fd5565b6118369061102b565b056118409161104f565b61184a8280610fd5565b9061185484610fc4565b9061185e91610fd5565b61186791610f7d565b61187082610c60565b9161187a9161165f565b6118839161104f565b61188c90610f96565b600282056118999161104f565b906118a391610ff8565b6002900590565b509250505090565b919091811561192e5760006118c7828561104f565b1261142f578290826118d883610f96565b600282056118e59161104f565b906118ef91610ff8565b936118f99161104f565b670de0b6b3a76400008080938161190f89610f5a565b6119199086610fd5565b6119229061102b565b05826117a1888b610fd5565b9250505090565b6119af826119a96119b59361199261199861198261142c9a9861066b6119bb9b61168f61197d61196489610f96565b926119778661066b60028205809761104f565b9961104f565b610f96565b6119928161066b6106618c610f96565b90610f7d565b916119928161066b6106618b610f96565b90610fd5565b91611013565b90610ff8565b611461565b90611a26611a21826119a961142c976106cd61066b611a1b611a0e6119bb9b611a09886119fd670de0b6b3a76400009d8f61066161066b91610f96565b9586936119a98a611013565b610f7d565b9161066b61066186610f96565b9061104f565b61102b565b0590610f7d565b90959492939195611a4981611a4460009985610f4d565b611ac6565b91838311611a5a575b505050505050565b611a709596975090611a6b91611ac6565b611b2f565b90670de0b6b3a764000091828111611a9c57611a8f9161024491610bae565b0490388080808080611a52565b60046040517f5c7c5649000000000000000000000000000000000000000000000000000000008152fd5b90670de0b6b3a764000091828102928184041490151715610bc1576108b361142c928260011c90610f4d565b611afc8180610fd5565b908260021b9280840560041490151715610bc157611a0981611b26611b2b94611a1b600297610f96565b61165f565b0590565b929182821115611b635760046040517fa6af4260000000000000000000000000000000000000000000000000000000008152fd5b808211801590611bef575b611be65761142c93611bc192611bb891611bb290848111611bc757611bac60005b610189611b9c8887610c71565b611ba68988610c71565b90610bae565b92610c71565b90610bd7565b60011c92610c71565b90611ac6565b611bac611be1611bd78784610c71565b611ba68885610c71565b611b8f565b50505050600090565b5083821115611b6e56fea2646970667358221220264a8586a9f187981b2db1f6509585b5a6bbac48cb4f8beed0a089bb987f4abd64736f6c63430008120033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b6000803560e01c80631df0f4f214610ab05780631f86566214610a985780632841c1ad14610a805780632f6599bb14610a525780634c5b402d14610a3a5780635dbcd62c1461078357806362d2ab101461076b57806367146f2914610731578063691b5fb61461071957806391810795146106d2578063d7454c531461068f578063df49129814610677578063e02a44c614610381578063efd7af77146100fc5763f50fc03e146100c557600080fd5b60c03660031901126100f957506100f260209260a4359060843590606435906044359060243590356112ef565b9051908152f35b80fd5b5082906101403660031901126100f957610114610ae6565b61011c610b01565b926064359161013661012435610104358560443585610c7e565b9491929093839689519163961be39160e01b938484526001600160a01b03809116906020998a868581865afa958615610377578596610354575b5061018e906101898a6001600160781b03809916610c71565b610c71565b988d518b81868163705727b560e01b978882525afa908115610349576101c1929188918e899261032c575b505016610c71565b9b670de0b6b3a764000098608435670de0b6b3a763ffff198101610302575b505016918c5195865289868281865afa9586156102f857908a929185976102d9575b508d518094819382525afa9182156102ce57836102509796948b9461023497948e94916102a1575b50169216886112ef565b9061024961024460a43584610bae565b610f38565b0490610c71565b9360c435908115801590610296575b610271575b5050508351928352820152f35b9161028791868661028d96989560e43594611a2d565b90610c71565b91848080610264565b5060e435151561025f565b6102c191508c8d3d106102c7575b6102b98183610b57565b810190610b8f565b8f61022a565b503d6102af565b8b51903d90823e3d90fd5b6102f1919750833d85116102c7576102b98183610b57565b958e610202565b8d513d86823e3d90fd5b8a610323929f9c81949f50828261031c8261031c94610bae565b049e610bae565b049a8e806101e0565b6103429250803d106102c7576102b98183610b57565b388e6101b9565b508e513d87823e3d90fd5b61018e919650610370908c8d3d106102c7576102b98183610b57565b9590610170565b8e513d87823e3d90fd5b50829060c03660031901126100f957610398610ae6565b916103a1610b01565b91604435906084359282828112610644575b5086519463961be39160e01b8087526001600160a01b038098169360209889898681895afa98891561063a57829961061b575b506001600160781b038099168b519163705727b560e01b928381528c8189818c5afa90811561037757908c918e87926105fe575b5050169516918c51908582528c828981875afa91821561037757908e8e9287946105df575b50670de0b6b3a76400008d819e82036105ad575b50508990518096819382525afa9283156102f857918b8a9261048995948f889661058e575b50501696878d6064359516926112ef565b978187139586948a9086610584575b50508415610507575b505050506104f95750156104d757506104cb906104c361024460a43585610bae565b048092610c71565b915b8351928352820152f35b92916102446104f291946104ed60a43591610c60565b610bae565b04906104cd565b8651631c4bd71760e01b8152fd5b9091929350898388129485610525575b5050505050888080806104a1565b909192939450858c518094819382525afa928315610579579261055a575b5061054d85610c60565b9116108880808981610517565b610572919250883d8a116102c7576102b98183610b57565b9089610543565b8a51903d90823e3d90fd5b109450898d610498565b6105a5929650803d106102c7576102b98183610b57565b93388f610478565b80828d949f9c9882826105c66105d4966105cd94610bae565b049a610bae565b049b610fd5565b059b90508c38610453565b6105f7919450833d85116102c7576102b98183610b57565b923861043f565b6106149250803d106102c7576102b98183610b57565b8f8e61041a565b6106339199508a3d8c116102c7576102b98183610b57565b978b6103e6565b8b513d84823e3d90fd5b61067091935061066b61066161065b60a435610f5a565b92610f96565b600283059061104f565b610ff8565b91876103b3565b6020836100f261068636610b17565b92919091611571565b5060603660031901126100f957506100f26020926106cd6106c86106b66024359335610f96565b9261066b60443594600283059061104f565b610c60565b611af2565b509060a0366003190112610715576060906107036106ee610ae6565b60843590606435906044359060243590610c7e565b91929081519384526020840152820152f35b5080fd5b6020836100f261072836610b35565b93929092611473565b50829060a03660031901126100f9575061075f9061074d610b01565b608435916064359160443591356111c2565b82519182526020820152f35b6020836100f261077a36610b35565b9392909261170e565b50829060803660031901126100f95761079a610ae6565b90604435602435606435670de0b6b3a7640000810361096c5750855163961be39160e01b81529060206001600160a01b03861681848981845afa93841561094157908891879561094b575b5082908a519283809263705727b560e01b82525afa91821561094157926001600160a01b0395926108369592610831958992610924575b50506001600160781b038091169216906118b2565b610bf7565b925b169084519363705727b560e01b855260209485818381875afa90811561091a5786916001600160781b039185916108fd575b5016938461088357505050505080918351928352820152f35b8751928380926318160ddd60e01b82525afa9182156108f25780926108be575b5050906108b36108b89284610bae565b610bd7565b916104cd565b9091508482813d83116108eb575b6108d68183610b57565b810103126100f95750516108b36108b86108a3565b503d6108cc565b8651903d90823e3d90fd5b6109149150833d85116102c7576102b98183610b57565b8961086a565b87513d85823e3d90fd5b61093a9250803d106102c7576102b98183610b57565b8b8061081c565b89513d88823e3d90fd5b8391955061096590823d84116102c7576102b98183610b57565b94906107e5565b865163961be39160e01b815290929160206001600160a01b03871681848a81845afa938415610a0f579089918895610a19575b5082908b519283809263705727b560e01b82525afa918215610a0f57926109ec959261083195926001600160a01b0398958a926109f2575b50506001600160781b0380911692169061170e565b92610838565b610a089250803d106102c7576102b98183610b57565b8c806109d7565b8a513d89823e3d90fd5b83919550610a3390823d84116102c7576102b98183610b57565b949061099f565b6020836100f2610a4936610b17565b929190916118b2565b5060c03660031901126100f957506100f260209260a435906084359060643590604435906024359035611a2d565b6020836100f2610a8f36610b17565b929190916119c0565b6020836100f2610aa736610b17565b92919091611935565b5060e03660031901126100f9575061075f610ac9610ae6565b60c4359060a435906084359060643590604435906024359061106b565b600435906001600160a01b0382168203610afc57565b600080fd5b602435906001600160a01b0382168203610afc57565b6080906003190112610afc5760043590602435906044359060643590565b60a0906003190112610afc576004359060243590604435906064359060843590565b90601f8019910116810190811067ffffffffffffffff821117610b7957604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610afc57516001600160781b0381168103610afc5790565b81810292918115918404141715610bc157565b634e487b7160e01b600052601160045260246000fd5b8115610be1570490565b634e487b7160e01b600052601260045260246000fd5b60008112610c025790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b600160ff1b8114610bc15760000390565b91908203918211610bc157565b9394919290926000936001600160a01b0360009616604080519063705727b560e01b92838352602060049581858881865afa948515610f2e578c95610f0b575b50610cd3906001600160781b03809616610bae565b83516318160ddd60e01b815282818981875afa908115610f01578d91610ece575b50610cfe91610bd7565b9a8b15610ea657670de0b6b3a764000098808a03610df55750610d208c610c60565b9584519763961be39160e01b895283898281885afa988915610deb578399610dc8575b5090839186518096819382525afa938415610dbe5750928492610831979592610d7999979592610da1575b505016921690611571565b905b819580610d8757505050565b610d9e939650829450610244906104c39293610bae565b92565b610db79250803d106102c7576102b98183610b57565b3880610d6e565b51903d90823e3d90fd5b8492919950610de390833d85116102c7576102b98183610b57565b989091610d43565b86513d85823e3d90fd5b9796959493929190610e068d610c60565b9584519763961be39160e01b895283898281885afa988915610deb578399610e83575b5090839186518096819382525afa938415610dbe5750928492610e609997959261083199979592610e66575b505016921690611473565b90610d7b565b610e7c9250803d106102c7576102b98183610b57565b3880610e55565b8492919950610e9e90833d85116102c7576102b98183610b57565b989091610e29565b8684517fd4b6d81b000000000000000000000000000000000000000000000000000000008152fd5b90508281813d8311610efa575b610ee58183610b57565b81010312610ef65751610cfe610cf4565b8c80fd5b503d610edb565b85513d8f823e3d90fd5b610cd3919550610f2790833d85116102c7576102b98183610b57565b9490610cbe565b84513d8e823e3d90fd5b906706f05b59d3b200008201809211610bc157565b91908201809211610bc157565b90670de0b6b3a764000060008382039312818412811691841390151617610bc157565b81810392916000138015828513169184121617610bc157565b90670de0b6b3a764000091828102928184051490151715610bc157565b908160011b916002830503610bc157565b908160021b916004830503610bc157565b818102929160008212600160ff1b821416610bc1578184051490151715610bc157565b8115610be157600160ff1b8114600019831416610bc1570590565b9081670de0b6b3a764000001918212600116610bc157565b906706f05b59d3b200009160008382019384129112908015821691151617610bc157565b91909160008382019384129112908015821691151617610bc157565b9095919386156111b3576001600160a01b0361024491611096670de0b6b3a76400009384928b610bae565b049216916040519363961be39160e01b85526020918286600481885afa91821561118857600496600093611194575b50836001600160781b03809416966040519889809263705727b560e01b82525afa9081156111885761113a9a61111584611123968f9b9561111d9661112a9a60009261116b575b5050169a610c71565b8d8a8a611a2d565b90610f4d565b8098610c71565b9381810361113d575b5050611935565b91565b8161115b82826111548261116297989a999a610bae565b0497610bae565b0493610bae565b04913880611133565b6111819250803d106102c7576102b98183610b57565b388061110c565b6040513d6000823e3d90fd5b6111ac919350843d86116102c7576102b98183610b57565b91386110c5565b50505050505050600090600090565b9392919084156112e2576001600160a01b03169060405163961be39160e01b815260208082600481875afa918215611188576000926112c3575b506004816001600160781b03809416956040519283809263705727b560e01b82525afa918215611188576000926112a6575b5050670de0b6b3a76400009485810361128d575b506112519291879116846119c0565b809415159182611283575b5050611272576104c361024461113a9385610bae565b6004604051631c4bd71760e01b8152fd5b109050833861125c565b61129d8691611251959499610bae565b04969192611242565b6112bc9250803d106102c7576102b98183610b57565b388061122e565b816112db9293503d84116102c7576102b98183610b57565b90386111fc565b5050505050600090600090565b9390949180158015611459575b61142f578381819261130e898961104f565b978061131a8380610fd5565b9061132491610ff8565b98670de0b6b3a7640000809a8c61133b8880610fd5565b9061134591610ff8565b61134e9161104f565b611358908a610fd5565b6113619061102b565b0561136b91610f7d565b956113759161104f565b61137e90610f96565b6002820561138b9161104f565b9061139591610ff8565b8061139f87610f96565b600282056113ac9161104f565b906113b691610ff8565b6113bf91610f7d565b6113c891610fd5565b906113d291610ff8565b916113dc90610f96565b600282056113e99161104f565b906113f391610ff8565b6113fc91610f7d565b9061140691611af2565b61140f91610fd5565b6114189061102b565b059061142391610f7d565b61142c90611461565b90565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5083156112fc565b600081121561142c5761142c90610c60565b929193829194611483858261104f565b948161148e88610f96565b6002820561149b9161104f565b906114a591610ff8565b91670de0b6b3a7640000958483886114bf81988297610fd5565b6114c89061102b565b05926114d391610fd5565b906114dd91610ff8565b6114e691610f7d565b92806114f187610f96565b600282056114fe9161104f565b9061150891610ff8565b61151191610f7d565b61151a91610fd5565b6115239061102b565b059061152e9161104f565b61153790610c60565b938061154291610fd5565b61154b9061102b565b0561155591610fd5565b61155e9061102b565b0561156891611af2565b61142c91610f7d565b92909261157e818461104f565b908361158986610f96565b600282056115969161104f565b906115a091610ff8565b80946115ab85610f96565b90670de0b6b3a7640000968088949360028695056115c89161104f565b906115d291610ff8565b6115db91610f7d565b6115e491610fd5565b6115ed9061102b565b05916115f885610f5a565b61160191610fd5565b61160a9061102b565b056116149161104f565b600290059283926116258480610fd5565b928061163091610fd5565b61163991610fd5565b6116429061102b565b0561164c9161104f565b906116569161165f565b6115689161104f565b9190600060038413156116ff575060008113806116f5575b156116be57915b6002806116948561168f8186610ff8565b61104f565b05915b8483036116a357505050565b91935090816116b68561168f8185610ff8565b059190611697565b60008112806116e3575b156116dc576116d690610c60565b9161167e565b508161167e565b50826116ee82610c60565b13156116c8565b5082811315611677565b92905061170857565b60019150565b90929382156118aa576000611723838661104f565b1261142f5783918361173484610f96565b600282056117419161104f565b9061174b91610ff8565b946117559161104f565b90670de0b6b3a76400008093828261176e819587610fd5565b6117779061102b565b05906117838a87610fd5565b9061178d91610ff8565b61179691610f7d565b826117a1888b610fd5565b6117aa9061102b565b056117b490610fb3565b6117bd9161104f565b966117c8878a610fd5565b906117d291610ff8565b6117db91610f7d565b6117e59084610fd5565b6117ee9061102b565b0591806117fa91610fd5565b6118039061102b565b0561180d91610f7d565b91816118198287610fd5565b6118229061102b565b059061182d91610fd5565b6118369061102b565b056118409161104f565b61184a8280610fd5565b9061185484610fc4565b9061185e91610fd5565b61186791610f7d565b61187082610c60565b9161187a9161165f565b6118839161104f565b61188c90610f96565b600282056118999161104f565b906118a391610ff8565b6002900590565b509250505090565b919091811561192e5760006118c7828561104f565b1261142f578290826118d883610f96565b600282056118e59161104f565b906118ef91610ff8565b936118f99161104f565b670de0b6b3a76400008080938161190f89610f5a565b6119199086610fd5565b6119229061102b565b05826117a1888b610fd5565b9250505090565b6119af826119a96119b59361199261199861198261142c9a9861066b6119bb9b61168f61197d61196489610f96565b926119778661066b60028205809761104f565b9961104f565b610f96565b6119928161066b6106618c610f96565b90610f7d565b916119928161066b6106618b610f96565b90610fd5565b91611013565b90610ff8565b611461565b90611a26611a21826119a961142c976106cd61066b611a1b611a0e6119bb9b611a09886119fd670de0b6b3a76400009d8f61066161066b91610f96565b9586936119a98a611013565b610f7d565b9161066b61066186610f96565b9061104f565b61102b565b0590610f7d565b90959492939195611a4981611a4460009985610f4d565b611ac6565b91838311611a5a575b505050505050565b611a709596975090611a6b91611ac6565b611b2f565b90670de0b6b3a764000091828111611a9c57611a8f9161024491610bae565b0490388080808080611a52565b60046040517f5c7c5649000000000000000000000000000000000000000000000000000000008152fd5b90670de0b6b3a764000091828102928184041490151715610bc1576108b361142c928260011c90610f4d565b611afc8180610fd5565b908260021b9280840560041490151715610bc157611a0981611b26611b2b94611a1b600297610f96565b61165f565b0590565b929182821115611b635760046040517fa6af4260000000000000000000000000000000000000000000000000000000008152fd5b808211801590611bef575b611be65761142c93611bc192611bb891611bb290848111611bc757611bac60005b610189611b9c8887610c71565b611ba68988610c71565b90610bae565b92610c71565b90610bd7565b60011c92610c71565b90611ac6565b611bac611be1611bd78784610c71565b611ba68885610c71565b611b8f565b50505050600090565b5083821115611b6e56fea2646970667358221220264a8586a9f187981b2db1f6509585b5a6bbac48cb4f8beed0a089bb987f4abd64736f6c63430008120033",
  "devdoc": {
    "details": "Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations. Change log: - Move view functinos (quotes, high cov ratio fee) from the Pool contract to this contract - Add quote functions for cross chain swaps",
    "kind": "dev",
    "methods": {
      "quoteSwap(IAsset,IAsset,int256,uint256,uint256,uint256)": {
        "params": {
          "fromAmount": "The amount to quote",
          "fromAsset": "The initial asset",
          "toAsset": "The asset wanted by user"
        },
        "returns": {
          "actualToAmount": "The actual amount user would receive",
          "haircut": "The haircut that will be applied"
        }
      },
      "quoteSwapCreditForTokens(uint256,IAsset,uint256,uint256,uint256)": {
        "details": "reverse quote is not supported"
      },
      "quoteSwapTokensForCredit(IAsset,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "reverse quote is not supported haircut is calculated in the fromToken when swapping tokens for credit"
      },
      "quoteWithdrawAmount(IAsset,uint256,uint256,int256,uint256)": {
        "params": {
          "_equilCovRatio": "global equilibrium coverage ratio",
          "asset": "The asset willing to be withdrawn",
          "liquidity": "The liquidity willing to be withdrawn",
          "withdrawalHaircutRate": "withdraw haircut rate"
        },
        "returns": {
          "amount": "Total amount to be withdrawn from Pool",
          "liabilityToBurn": "Total liability to be burned by Pool",
          "withdrawalHaircut": "Total withdrawal haircut"
        }
      },
      "swapFromCreditQuote(int256,int256,int256,int256)": {
        "details": "This function always returns >= 0"
      },
      "swapQuoteFunc(int256,int256,int256,int256,int256,int256)": {
        "details": "This function always returns >= 0",
        "params": {
          "A": "amplification factor",
          "Ax": "asset of token x",
          "Ay": "asset of token y",
          "Dx": "delta x, i.e. token x amount inputted",
          "Lx": "liability of token x",
          "Ly": "liability of token y"
        },
        "returns": {
          "quote": "The quote for amount of token y swapped for token x amount inputted"
        }
      },
      "swapToCreditQuote(int256,int256,int256,int256)": {
        "details": "This function always returns >= 0"
      },
      "withdrawalAmountImpl(int256,int256,int256,int256,int256)": {
        "details": "Calculate the withdrawal amount for any r*"
      },
      "withdrawalAmountInEquilImpl(int256,int256,int256,int256)": {
        "details": "should be used only when r* = 1"
      }
    },
    "title": "CoreV3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exactDepositLiquidityImpl(int256,int256,int256,int256,int256)": {
        "notice": "return the deposit reward in token amount when target liquidity (LP amount) is known"
      },
      "exactDepositLiquidityInEquilImpl(int256,int256,int256,int256)": {
        "notice": "return the deposit reward in token amount when target liquidity (LP amount) is known"
      },
      "quoteDepositLiquidity(IAsset,uint256,uint256,int256)": {
        "notice": "This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1"
      },
      "quoteSwap(IAsset,IAsset,int256,uint256,uint256,uint256)": {
        "notice": "Quotes the actual amount user would receive in a swap, taking in account slippage and haircut"
      },
      "quoteWithdrawAmount(IAsset,uint256,uint256,int256,uint256)": {
        "notice": "Calculates fee and liability to burn in case of withdrawal"
      },
      "swapFromCreditQuote(int256,int256,int256,int256)": {
        "notice": "quote swapping from credit for tokens"
      },
      "swapQuoteFunc(int256,int256,int256,int256,int256,int256)": {
        "notice": "Core Wombat stableswap equation"
      },
      "swapToCreditQuote(int256,int256,int256,int256)": {
        "notice": "quote swapping from tokens for credit"
      }
    },
    "notice": "Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}