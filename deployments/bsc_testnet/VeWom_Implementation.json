{
  "address": "0x21CDC3B185c64E88e917C9D243554F8DC28fba47",
  "abi": [
    {
      "inputs": [],
      "name": "VEWOM_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "womAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "veWomAmount",
          "type": "uint256"
        }
      ],
      "name": "Enter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "womAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "veWomAmount",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetMasterWombat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        }
      ],
      "name": "SetMaxBreedingLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetVoter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "womAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalVeWomAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVeWomAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdateLockTime",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[10]",
              "name": "reserved",
              "type": "uint256[10]"
            },
            {
              "components": [
                {
                  "internalType": "uint48",
                  "name": "unlockTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint104",
                  "name": "womAmount",
                  "type": "uint104"
                },
                {
                  "internalType": "uint104",
                  "name": "veWomAmount",
                  "type": "uint104"
                }
              ],
              "internalType": "struct IVeWom.Breeding[]",
              "name": "breedings",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IVeWom.UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getUserOverview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "womLocked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "veWomBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_wom",
          "type": "address"
        },
        {
          "internalType": "contract IMasterWombat",
          "name": "_masterWombat",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "contract IMasterWombat",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDays",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "veWomAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterWombat",
          "name": "_masterWombat",
          "type": "address"
        }
      ],
      "name": "setMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxBreedingLength",
          "type": "uint256"
        }
      ],
      "name": "setMaxBreedingLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "setVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWhitelist",
          "name": "_whitelist",
          "type": "address"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDays",
          "type": "uint256"
        }
      ],
      "name": "update",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newVeWomAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usedVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_voteDelta",
          "type": "int256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "contract IWhitelist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wom",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bfffa786bdf6e91681d684fd8682b912d86596141c22ac4cf8235cd1c5544ad",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0x21CDC3B185c64E88e917C9D243554F8DC28fba47",
    "transactionIndex": 0,
    "gasUsed": "4114354",
    "logsBloom": "0x
    "blockHash": "0x06487ea54a5d0cf4e32da04d767e5bf4c9e448eed84022961e571d890e045120",
    "transactionHash": "0x9bfffa786bdf6e91681d684fd8682b912d86596141c22ac4cf8235cd1c5544ad",
    "logs": [],
    "blockNumber": 24900552,
    "cumulativeGasUsed": "4114354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "13c6fb06a9048309544c2baad67e3d53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VEWOM_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"womAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veWomAmount\",\"type\":\"uint256\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"womAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veWomAmount\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMasterWombat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"SetMaxBreedingLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"womAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalVeWomAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVeWomAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateLockTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[10]\",\"name\":\"reserved\",\"type\":\"uint256[10]\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"unlockTime\",\"type\":\"uint48\"},{\"internalType\":\"uint104\",\"name\":\"womAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"veWomAmount\",\"type\":\"uint104\"}],\"internalType\":\"struct IVeWom.Breeding[]\",\"name\":\"breedings\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IVeWom.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserOverview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"womLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"veWomBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wom\",\"type\":\"address\"},{\"internalType\":\"contract IMasterWombat\",\"name\":\"_masterWombat\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"contract IMasterWombat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"veWomAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterWombat\",\"name\":\"_masterWombat\",\"type\":\"address\"}],\"name\":\"setMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBreedingLength\",\"type\":\"uint256\"}],\"name\":\"setMaxBreedingLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newVeWomAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_voteDelta\",\"type\":\"int256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wom\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"explicity override multiple inheritance\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"isUser(address)\":{\"params\":{\"_addr\":\"the user address to check\"},\"returns\":{\"_0\":\"true if the user has wom in stake, false otherwise\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMasterWombat(address)\":{\"params\":{\"_masterWombat\":\"the new masterWombat address\"}},\"setVoter(address)\":{\"params\":{\"_voter\":\"the new NFT contract address\"}},\"setWhitelist(address)\":{\"params\":{\"_whitelist\":\"the new whitelist address\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"explicity override multiple inheritance\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"update(uint256,uint256)\":{\"params\":{\"lockDays\":\"the new lock days (it should be larger than original lock days)\",\"slot\":\"the veWOM slot\"}}},\"stateVariables\":{\"whitelist\":{\"details\":\"contract addresses are by default unable to stake wom, they must be previously whitelisted to stake wom\"}},\"title\":\"VeWom\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUserInfo(address)\":{\"notice\":\"return the user info\"},\"getUserOverview(address)\":{\"notice\":\"return the amount of Wom locked and veWOM acquired by a user\"},\"isUser(address)\":{\"notice\":\"checks wether user _addr has wom staked\"},\"masterWombat()\":{\"notice\":\"the masterWombat contract\"},\"mint(uint256,uint256)\":{\"notice\":\"lock WOM into contract and mint veWOM\"},\"setMasterWombat(address)\":{\"notice\":\"sets masterWombat address\"},\"setVoter(address)\":{\"notice\":\"sets voter contract address\"},\"setWhitelist(address)\":{\"notice\":\"sets whitelist address\"},\"update(uint256,uint256)\":{\"notice\":\"update the WOM lock days such that the end date is `now` + `lockDays`\"},\"usedVote(address)\":{\"notice\":\"amount of vote used currently for each user\"},\"voter()\":{\"notice\":\"Address of the Voter contract\"},\"whitelist()\":{\"notice\":\"whitelist wallet checker\"},\"wom()\":{\"notice\":\"the wom token\"}},\"notice\":\"Wombat Waddle: the staking contract for WOM, as well as the token used for governance. Note Waddling does not seem to slow the Wombat, it only makes it sturdier. Note that it's ownable and the owner wields tremendous power. The ownership will be transferred to a governance smart contract once Wombat is sufficiently distributed and the community can show to govern itself.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/VeWom.sol\":\"VeWom\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc4fad3a1df63344db686f3764208f5e62592346ec3bc5a7fcb161f9d1b1e59b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/wombat-governance/VeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/// @title VeERC20Upgradeable\\n/// @notice Modified version of ERC20Upgradeable where transfers and allowances are disabled.\\n/// @dev only minting and burning are allowed. The hook _afterTokenOperation is called after Minting and Burning.\\ncontract VeERC20Upgradeable is Initializable, ContextUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    /**\\n     * @dev Emitted when `value` tokens are burned and minted\\n     */\\n    event Burn(address indexed account, uint256 value);\\n    event Mint(address indexed beneficiary, uint256 value);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Mint(account, amount);\\n\\n        _afterTokenOperation(account, _balances[account]);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burn(account, amount);\\n\\n        _afterTokenOperation(account, _balances[account]);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any minting and burning.\\n     * @param account the account being affected\\n     * @param newBalance newBalance after operation\\n     */\\n    function _afterTokenOperation(address account, uint256 newBalance) internal virtual {}\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x584ff6f86e049be5139f343c793f210a7b0d518493f044cf787503bf1e4c48cb\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/VeWom.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './libraries/DSMath.sol';\\nimport './libraries/LogExpMath.sol';\\nimport './interfaces/IWhitelist.sol';\\nimport './interfaces/IMasterWombat.sol';\\nimport './interfaces/IVeWom.sol';\\nimport './VeERC20Upgradeable.sol';\\n\\ninterface IVe {\\n    function vote(address user, int256 voteDelta) external;\\n}\\n\\n/// @title VeWom\\n/// @notice Wombat Waddle: the staking contract for WOM, as well as the token used for governance.\\n/// Note Waddling does not seem to slow the Wombat, it only makes it sturdier.\\n/// Note that it's ownable and the owner wields tremendous power. The ownership\\n/// will be transferred to a governance smart contract once Wombat is sufficiently\\n/// distributed and the community can show to govern itself.\\ncontract VeWom is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    VeERC20Upgradeable,\\n    IVeWom,\\n    IVe\\n{\\n    using SafeERC20 for IERC20;\\n    using DSMath for uint256;\\n\\n    uint256 constant WAD = 1e18;\\n\\n    /// @notice the wom token\\n    IERC20 public wom;\\n\\n    /// @notice the masterWombat contract\\n    IMasterWombat public masterWombat;\\n\\n    /// @notice whitelist wallet checker\\n    /// @dev contract addresses are by default unable to stake wom, they must be previously whitelisted to stake wom\\n    IWhitelist public whitelist;\\n\\n    uint32 maxBreedingLength;\\n    uint32 minLockDays;\\n    uint32 maxLockDays;\\n\\n    /// @notice user info mapping\\n    mapping(address => UserInfo) internal users;\\n\\n    /// @notice Address of the Voter contract\\n    address public voter;\\n    /// @notice amount of vote used currently for each user\\n    mapping(address => uint256) public usedVote;\\n\\n    event Enter(address addr, uint256 unlockTime, uint256 womAmount, uint256 veWomAmount);\\n    event Exit(address addr, uint256 unlockTime, uint256 womAmount, uint256 veWomAmount);\\n    event SetMasterWombat(address addr);\\n    event SetVoter(address addr);\\n    event SetWhiteList(address addr);\\n    event SetMaxBreedingLength(uint256 len);\\n    event UpdateLockTime(\\n        address addr,\\n        uint256 slot,\\n        uint256 unlockTime,\\n        uint256 womAmount,\\n        uint256 originalVeWomAmount,\\n        uint256 newVeWomAmount\\n    );\\n\\n    error VEWOM_OVERFLOW();\\n\\n    modifier onlyVoter() {\\n        require(msg.sender == voter, 'VeWom: caller is not voter');\\n        _;\\n    }\\n\\n    function initialize(IERC20 _wom, IMasterWombat _masterWombat) external initializer {\\n        require(address(_masterWombat) != address(0), 'zero address');\\n        require(address(_wom) != address(0), 'zero address');\\n\\n        // Initialize veWOM\\n        __ERC20_init('Wombat Waddle', 'veWOM');\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        masterWombat = _masterWombat;\\n        wom = _wom;\\n\\n        // Note: one should pay attention to storage collision\\n        maxBreedingLength = 10000;\\n        minLockDays = 7;\\n        maxLockDays = 1461;\\n    }\\n\\n    function _verifyVoteIsEnough(address _user) internal view {\\n        require(balanceOf(_user) >= usedVote[_user], 'VeWom: not enough vote');\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice sets masterWombat address\\n    /// @param _masterWombat the new masterWombat address\\n    function setMasterWombat(IMasterWombat _masterWombat) external onlyOwner {\\n        require(address(_masterWombat) != address(0), 'zero address');\\n        masterWombat = _masterWombat;\\n        emit SetMasterWombat(address(_masterWombat));\\n    }\\n\\n    /// @notice sets voter contract address\\n    /// @param _voter the new NFT contract address\\n    function setVoter(address _voter) external onlyOwner {\\n        require(address(_voter) != address(0), 'zero address');\\n        voter = _voter;\\n        emit SetVoter(_voter);\\n    }\\n\\n    /// @notice sets whitelist address\\n    /// @param _whitelist the new whitelist address\\n    function setWhitelist(IWhitelist _whitelist) external onlyOwner {\\n        require(address(_whitelist) != address(0), 'zero address');\\n        whitelist = _whitelist;\\n        emit SetWhiteList(address(_whitelist));\\n    }\\n\\n    function setMaxBreedingLength(uint256 _maxBreedingLength) external onlyOwner {\\n        if (_maxBreedingLength > type(uint32).max) revert VEWOM_OVERFLOW();\\n        maxBreedingLength = uint32(_maxBreedingLength);\\n        emit SetMaxBreedingLength(_maxBreedingLength);\\n    }\\n\\n    /// @notice checks wether user _addr has wom staked\\n    /// @param _addr the user address to check\\n    /// @return true if the user has wom in stake, false otherwise\\n    function isUser(address _addr) external view override returns (bool) {\\n        return balanceOf(_addr) > 0;\\n    }\\n\\n    /// @notice return the amount of Wom locked and veWOM acquired by a user\\n    function getUserOverview(address _addr) external view override returns (uint256 womLocked, uint256 veWomBalance) {\\n        UserInfo storage user = users[_addr];\\n        uint256 len = user.breedings.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            womLocked += user.breedings[i].womAmount;\\n        }\\n        veWomBalance = balanceOf(_addr);\\n    }\\n\\n    /// @notice return the user info\\n    function getUserInfo(address addr) external view override returns (UserInfo memory) {\\n        return users[addr];\\n    }\\n\\n    /// @dev explicity override multiple inheritance\\n    function totalSupply() public view override(VeERC20Upgradeable, IVeWom) returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    /// @dev explicity override multiple inheritance\\n    function balanceOf(address account) public view override(VeERC20Upgradeable, IVeWom) returns (uint256) {\\n        return super.balanceOf(account);\\n    }\\n\\n    function _expectedVeWomAmount(uint256 amount, uint256 lockDays) internal pure returns (uint256) {\\n        // veWOM = WOM * 0.026 * lockDays^0.5\\n        return amount.wmul(26162237992630200).wmul(LogExpMath.pow(lockDays * WAD, 50e16));\\n    }\\n\\n    /// @notice lock WOM into contract and mint veWOM\\n    function mint(uint256 amount, uint256 lockDays)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256 veWomAmount)\\n    {\\n        require(amount > 0, 'amount to deposit cannot be zero');\\n        if (amount > uint256(type(uint104).max)) revert VEWOM_OVERFLOW();\\n\\n        // assert call is not coming from a smart contract\\n        // unless it is whitelisted\\n        _assertNotContract(msg.sender);\\n\\n        require(lockDays >= uint256(minLockDays) && lockDays <= uint256(maxLockDays), 'lock days is invalid');\\n        require(users[msg.sender].breedings.length < uint256(maxBreedingLength), 'breed too much');\\n\\n        uint256 unlockTime = block.timestamp + 86400 * lockDays; // seconds in a day = 86400\\n        veWomAmount = _expectedVeWomAmount(amount, lockDays);\\n\\n        if (unlockTime > uint256(type(uint48).max)) revert VEWOM_OVERFLOW();\\n        if (veWomAmount > uint256(type(uint104).max)) revert VEWOM_OVERFLOW();\\n\\n        users[msg.sender].breedings.push(Breeding(uint48(unlockTime), uint104(amount), uint104(veWomAmount)));\\n\\n        // Request Wom from user\\n        wom.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // event Mint(address indexed user, uint256 indexed amount) is emitted\\n        _mint(msg.sender, veWomAmount);\\n\\n        emit Enter(msg.sender, unlockTime, amount, veWomAmount);\\n    }\\n\\n    function burn(uint256 slot) external override nonReentrant whenNotPaused {\\n        uint256 length = users[msg.sender].breedings.length;\\n        require(slot < length, 'wut?');\\n\\n        Breeding memory breeding = users[msg.sender].breedings[slot];\\n        require(uint256(breeding.unlockTime) <= block.timestamp, 'not yet meh');\\n\\n        // remove slot\\n        if (slot != length - 1) {\\n            users[msg.sender].breedings[slot] = users[msg.sender].breedings[length - 1];\\n        }\\n        users[msg.sender].breedings.pop();\\n\\n        wom.transfer(msg.sender, breeding.womAmount);\\n\\n        // event Burn(address indexed user, uint256 indexed amount) is emitted\\n        _burn(msg.sender, breeding.veWomAmount);\\n\\n        emit Exit(msg.sender, breeding.unlockTime, breeding.womAmount, breeding.veWomAmount);\\n    }\\n\\n    /// @notice update the WOM lock days such that the end date is `now` + `lockDays`\\n    /// @param slot the veWOM slot\\n    /// @param lockDays the new lock days (it should be larger than original lock days)\\n    function update(uint256 slot, uint256 lockDays)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256 newVeWomAmount)\\n    {\\n        _assertNotContract(msg.sender);\\n\\n        require(lockDays >= uint256(minLockDays) && lockDays <= uint256(maxLockDays), 'lock days is invalid');\\n\\n        uint256 length = users[msg.sender].breedings.length;\\n        require(slot < length, 'slot position should be less than the number of slots');\\n\\n        uint256 originalUnlockTime = uint256(users[msg.sender].breedings[slot].unlockTime);\\n        uint256 originalWomAmount = uint256(users[msg.sender].breedings[slot].womAmount);\\n        uint256 originalVeWomAmount = uint256(users[msg.sender].breedings[slot].veWomAmount);\\n        uint256 newUnlockTime = block.timestamp + 1 days * lockDays;\\n        newVeWomAmount = _expectedVeWomAmount(originalWomAmount, lockDays);\\n\\n        if (newUnlockTime > type(uint48).max) revert VEWOM_OVERFLOW();\\n        if (newVeWomAmount > type(uint104).max) revert VEWOM_OVERFLOW();\\n\\n        require(originalUnlockTime < newUnlockTime, 'the new end date must be greater than existing end date');\\n        require(\\n            originalVeWomAmount < newVeWomAmount,\\n            'the new veWom amount must be greater than existing veWom amount'\\n        );\\n\\n        // change unlock time and veWom amount\\n        users[msg.sender].breedings[slot].unlockTime = uint48(newUnlockTime);\\n        users[msg.sender].breedings[slot].veWomAmount = uint104(newVeWomAmount);\\n\\n        _mint(msg.sender, newVeWomAmount - originalVeWomAmount);\\n\\n        // emit event\\n        emit UpdateLockTime(msg.sender, slot, newUnlockTime, originalWomAmount, originalVeWomAmount, newVeWomAmount);\\n    }\\n\\n    /// @notice asserts addres in param is not a smart contract.\\n    /// @notice if it is a smart contract, check that it is whitelisted\\n    /// @param _addr the address to check\\n    function _assertNotContract(address _addr) private view {\\n        if (_addr != tx.origin) {\\n            require(\\n                address(whitelist) != address(0) && whitelist.check(_addr),\\n                'Smart contract depositors not allowed'\\n            );\\n        }\\n    }\\n\\n    /// @notice hook called after token operation mint/burn\\n    /// @dev updates masterWombat\\n    /// @param _account the account being affected\\n    /// @param _newBalance the newVeWomBalance of the user\\n    function _afterTokenOperation(address _account, uint256 _newBalance) internal override {\\n        _verifyVoteIsEnough(_account);\\n        masterWombat.updateFactor(_account, _newBalance);\\n    }\\n\\n    function vote(address _user, int256 _voteDelta) external override onlyVoter {\\n        if (_voteDelta >= 0) {\\n            usedVote[_user] += uint256(_voteDelta);\\n            _verifyVoteIsEnough(_user);\\n        } else {\\n            // reverts if usedVote[_user] < -_voteDelta\\n            usedVote[_user] -= uint256(-_voteDelta);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ce369e276153f5fcff9d5c632d0b4bf49ad520ffb1acba06b39edfef3471a1\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256 transfered,\\n            uint256[] memory rewards,\\n            uint256[] memory additionalRewards\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x4ed8f1f02ce578468e115e03a4f3671d13a273cad6e373a45a18af6041096444\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IVeWom.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the VeWom\\n */\\ninterface IVeWom {\\n    struct Breeding {\\n        uint48 unlockTime;\\n        uint104 womAmount;\\n        uint104 veWomAmount;\\n    }\\n\\n    struct UserInfo {\\n        // reserve usage for future upgrades\\n        uint256[10] reserved;\\n        Breeding[] breedings;\\n    }\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _addr) external view returns (uint256);\\n\\n    function isUser(address _addr) external view returns (bool);\\n\\n    function getUserOverview(address _addr) external view returns (uint256 womLocked, uint256 veWomBalance);\\n\\n    function getUserInfo(address addr) external view returns (UserInfo memory);\\n\\n    function mint(uint256 amount, uint256 lockDays) external returns (uint256 veWomAmount);\\n\\n    function burn(uint256 slot) external;\\n\\n    function update(uint256 slot, uint256 lockDays) external returns (uint256 newVeWomAmount);\\n}\\n\",\"keccak256\":\"0x09cbc975f3c52631e66e542a0d0ca041e48fde904e553c03059d4858339a2eb0\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IWhitelist {\\n    function approveWallet(address _wallet) external;\\n\\n    function revokeWallet(address _wallet) external;\\n\\n    function check(address _wallet) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf860bd3e8b62a9602d2c4b03b09edd8f0c71ce0c9f66a55bc54005a728ad6035\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess\\n    function sqrt(uint256 y, uint256 guess) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            if (guess > y || guess == 0) {\\n                z = y;\\n            } else {\\n                z = guess;\\n            }\\n            uint256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x59b28c7651c7dee39d050a364ae180b5390ffa58dbd9d524778d163c0a9531f2\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/libraries/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.8.5;\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant UNAUTHORIZED_OPERATION = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        _require(x < 2**255, Errors.X_OUT_OF_BOUNDS);\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        _require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\",\"keccak256\":\"0x3793338bdc7819f2e0315133306aefb27667c1fd83ca4e51364d7a188acc035c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576149cc908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806306fdde03146102435780630705999d1461023a5780630a7feeb21461023157806318160ddd146102285780631b2ef1ca1461021f5780632fb565e814610216578063313ce5671461020d5780633bd61ba8146102045780633f4ba83a146101fb5780634209fff1146101f257806342966c68146101e957806346c96aac146101e0578063485cc955146101d75780634bc2a657146101ce578063552eec2f146101c55780635c975abb146101bc5780636386c1c7146101b357806370a08231146101aa578063715018a6146101a15780638456cb5914610198578063854cff2f1461018f5780638da5cb5b1461018657806393e59dc11461017d57806395d89b4114610174578063b0dfaa7a1461016b578063c5a6222e14610162578063d4c9b0d1146101595763f2fde38b1461015157600080fd5b61000e6117bd565b5061000e611712565b5061000e6116ea565b5061000e611604565b5061000e61155c565b5061000e611534565b5061000e61150c565b5061000e611474565b5061000e6113e8565b5061000e61136c565b5061000e611349565b5061000e611230565b5061000e611167565b5061000e6110a4565b5061000e61100c565b5061000e610ea8565b5061000e610e80565b5061000e610b8e565b5061000e610b47565b5061000e610a7e565b5061000e610a56565b5061000e610a39565b5061000e61070d565b5061000e6104ce565b5061000e6104af565b5061000e61046f565b5061000e6103d7565b5061000e6102c2565b919091602080825283519081818401526000945b8286106102ac575050601f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092604095961161029f575b0116010190565b6000858286010152610298565b8581018201518487016040015294810194610260565b503461000e576000806003193601126103c357604051908060cc546102e681611919565b8085529160019180831690811561037b5750600114610320575b61031c85610310818703826119fe565b6040519182918261024c565b0390f35b925060cc83527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe5b8284106103635750505081016020016103108261031c610300565b80546020858701810191909152909301928101610348565b86955061031c969350602092506103109491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b8201019293610300565b80fd5b6001600160a01b0381160361000e57565b503461000e57602060031936011261000e577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d6020600435610418816103c6565b6001600160a01b03906104308260335416331461186c565b1661043c811515611a3f565b807fffffffffffffffffffffffff000000000000000000000000000000000000000060fc54161760fc55604051908152a1005b503461000e57602060031936011261000e576001600160a01b03600435610495816103c6565b166000526101006020526020604060002054604051908152f35b503461000e57600060031936011261000e57602060cb54604051908152f35b503461000e5760408060031936011261000e57600435602435906104f760026065541415612258565b600260655561050b60ff60975416156120ed565b6105168115156122a3565b6cffffffffffffffffffffffffff918282116106e45761053533612d25565b61058460fd5463ffffffff808260c01c16841015806106d6575b610558906122ee565b600a610577336001600160a01b031660005260fe602052604060002090565b01549160a01c1611612339565b6105a061059961059383612384565b426121f0565b91836127a4565b9265ffffffffffff908183116106ad578085116106ad579161065460209694927f3af2c1ec57343b1e7e40c3f6c85f5ad943344cd8548bdf819f1da51aaebb3db69461064f600a610604336001600160a01b031660005260fe602052604060002090565b0191610622610611611a8a565b948716859065ffffffffffff169052565b6cffffffffffffffffffffffffff87821616848c015289166cffffffffffffffffffffffffff1688840152565b6123c2565b6106738261066a60fb546001600160a01b031690565b3090339061246c565b61067d85336126c5565b83513381526020810191909152604081019190915260608101849052608090a16106a76001606555565b51908152f35b600486517f7e685645000000000000000000000000000000000000000000000000000000008152fd5b5060e082901c84111561054f565b600484517f7e685645000000000000000000000000000000000000000000000000000000008152fd5b503461000e57604060031936011261000e5760043560243561073460026065541415612258565b600260655561074860ff60975416156120ed565b61075133612d25565b61077160fd5463ffffffff8160c01c168310159081610a2b575b506122ee565b600a9161079e83610795336001600160a01b031660005260fe602052604060002090565b01548210612bd2565b6107e46107d96107cc83866107c6336001600160a01b031660005260fe602052604060002090565b01612168565b505465ffffffffffff1690565b65ffffffffffff1690565b9161083661082461080d84876107c6336001600160a01b031660005260fe602052604060002090565b505460301c6cffffffffffffffffffffffffff1690565b6cffffffffffffffffffffffffff1690565b9161086761082461085f83886107c6336001600160a01b031660005260fe602052604060002090565b505460981c90565b9361087e61087761059385612384565b93856127a4565b9465ffffffffffff90818511610a01576cffffffffffffffffffffffffff95868811610a01576109a07ff8e2edd66620761fcb68d32d12d6e8c57350084b4756209ed054979196a2b9f9976109598760209c6109458d986108e38d6109ec9c10612c43565b6108ee8a8a10612cb4565b61091084846107c6336001600160a01b031660005260fe602052604060002090565b50908d1665ffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000825416179055565b33600090815260fe602052604090206107c6565b5090851672ffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffff0000000000000000000000000000000000000083549260981b169116179055565b6109b36109ad83856128da565b336126c5565b60405195869533879260a09491979695926001600160a01b0360c086019916855260208501526040840152606083015260808201520152565b0390a16109f96001606555565b604051908152f35b60046040517f7e685645000000000000000000000000000000000000000000000000000000008152fd5b905060e01c8211153861076b565b503461000e57600060031936011261000e57602060405160128152f35b503461000e57600060031936011261000e5760206001600160a01b0360fc5416604051908152f35b503461000e57600060031936011261000e57610aa66001600160a01b0360335416331461186c565b60975460ff811615610b03577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461000e57602060031936011261000e576020610b84600435610b6a816103c6565b6001600160a01b031660005260c960205260406000205490565b1515604051908152f35b503461000e57602060031936011261000e577f275029c7b988945c03ac5499c0d532fce79ce36efab42e1b3f180a62001cad2c600435610bd360026065541415612258565b6002606555610be760ff60975416156120ed565b600a610c06336001600160a01b031660005260fe602052604060002090565b0154610c13818310612834565b610c3f610c3983600a6107c6336001600160a01b031660005260fe602052604060002090565b506121fc565b91610c5e610c566107d9855165ffffffffffff1690565b42101561287f565b610c67826128ca565b8103610e19575b5050610c98600a610c92336001600160a01b031660005260fe602052604060002090565b016129c8565b610cb9610cad60fb546001600160a01b031690565b6001600160a01b031690565b60006020610d2c81850193610cdb85516cffffffffffffffffffffffffff1690565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526cffffffffffffffffffffffffff909116602482015293849283919082906044820190565b03925af18015610e0c575b610dde575b50610dcf610d91610d7d610d7d6040860195610d71610d6b61082489516cffffffffffffffffffffffffff1690565b33612aa2565b5165ffffffffffff1690565b93516cffffffffffffffffffffffffff1690565b6040805133815265ffffffffffff90941660208501526cffffffffffffffffffffffffff948516908401529290921660608201529081906080820190565b0390a1610ddc6001606555565b005b610dfe9060203d8111610e05575b610df681836119fe565b810190612549565b5038610d3c565b503d610dec565b610e14612a24565b610d37565b610e73610e52610e7993610e4c600a610e45336001600160a01b031660005260fe602052604060002090565b01916128ca565b90612168565b5091600a6107c6336001600160a01b031660005260fe602052604060002090565b906128f1565b3880610c6e565b503461000e57600060031936011261000e5760206001600160a01b0360ff5416604051908152f35b503461000e57604060031936011261000e57600435610ec6816103c6565b602435610ed2816103c6565b6000549060ff8260081c1691826000146110035750303b155b15610f9957610f0091159283610f3357611aaa565b610f0657005b610ddc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b610f646101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b610f9460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006000541617600055565b611aaa565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b60ff1615610eeb565b503461000e57602060031936011261000e577fc6ff127433b785c51da9ae4088ee184c909b1a55b9afd82ae6c64224d3bc15d2602060043561104d816103c6565b6001600160a01b03906110658260335416331461186c565b16611071811515611a3f565b807fffffffffffffffffffffffff000000000000000000000000000000000000000060ff54161760ff55604051908152a1005b503461000e57602060031936011261000e576004356110c2816103c6565b6000906001600160a01b038116825260fe602052600a6040832001805483915b81831061111a5784611108856001600160a01b031660005260c960205260406000205490565b60408051928352602083019190915290f35b9091936111476001916cffffffffffffffffffffffffff61113b8886612168565b505460301c16906121f0565b94600019811461115a575b0191906110e2565b611162612138565b611152565b503461000e57600060031936011261000e57602060ff609754166040519015158152f35b60208082528251919261018084019260008386015b600a821061121b57505050906101a0818094930151946101608082015285518094520193019160005b8281106111d7575050505090565b8351805165ffffffffffff168652808301516cffffffffffffffffffffffffff908116878501526040918201511690860152606090940193928101926001016111c9565b848060019285518152019301910190916111a0565b503461000e5760208060031936011261000e5760043561124f816103c6565b6040606083825161125f8161199c565b835161126a816119c5565b610140368237815201526001600160a01b0360009216825260fe8352808220918151926112968461199c565b8251818387835b600a8310611332575050505090816112b6600a936119c5565b85520193845467ffffffffffffffff8111611325575b835192956112e0600583901b8401856119fe565b8184528652818620958284015b8282106113095750505061031c9450830152519182918261118b565b60018481926113178b6121fc565b8152019801910190966112ed565b61132d61196c565b6112cc565b60019182918554815201930191019091889061129d565b503461000e57602060031936011261000e5760206109f9600435610b6a816103c6565b503461000e576000806003193601126103c3576033547fffffffffffffffffffffffff00000000000000000000000000000000000000006001600160a01b038216916113b933841461186c565b1660335581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600060031936011261000e576114106001600160a01b0360335416331461186c565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060975461144360ff8216156120ed565b16176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b503461000e57602060031936011261000e577f3990e3e141b903f4f5602428874be692206642a653b416f336d965e2f04813ce60206004356114b5816103c6565b6001600160a01b03906114cd8260335416331461186c565b166114d9811515611a3f565b807fffffffffffffffffffffffff000000000000000000000000000000000000000060fd54161760fd55604051908152a1005b503461000e57600060031936011261000e5760206001600160a01b0360335416604051908152f35b503461000e57600060031936011261000e5760206001600160a01b0360fd5416604051908152f35b503461000e576000806003193601126103c357604051908060cd5461158081611919565b8085529160019180831690811561037b57506001146115a95761031c85610310818703826119fe565b925060cd83527f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e5b8284106115ec5750505081016020016103108261031c610300565b805460208587018101919091529093019281016115d1565b503461000e57604060031936011261000e57600435611622816103c6565b602435906001600160a01b03918260ff541633036116a65760009283821261166e57821683526101006020526040832080546116699392611662916121f0565b9055612ec3565b604051f35b9061167890612f31565b9116825261010060205260408220908154818110611699575b039055604051f35b6116a1612138565b611691565b606460405162461bcd60e51b815260206004820152601a60248201527f5665576f6d3a2063616c6c6572206973206e6f7420766f7465720000000000006044820152fd5b503461000e57600060031936011261000e5760206001600160a01b0360fb5416604051908152f35b503461000e57602060031936011261000e5760043561173d6001600160a01b0360335416331461186c565b63ffffffff8111610a015760207f20fff119b2ff981a49e3649af737a2d9a9f9b4bd74c35c0448478c2bd4666a689160fd547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff77ffffffff00000000000000000000000000000000000000008360a01b1691161760fd55604051908152a1005b503461000e57602060031936011261000e576004356117db816103c6565b6001600160a01b036117f28160335416331461186c565b81161561180257610ddc906118b7565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561187357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b90600182811c92168015611962575b602083101461193357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611928565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176119b857604052565b6119c061196c565b604052565b610140810190811067ffffffffffffffff8211176119b857604052565b60a0810190811067ffffffffffffffff8211176119b857604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176119b857604052565b15611a4657565b606460405162461bcd60e51b815260206004820152600c60248201527f7a65726f206164647265737300000000000000000000000000000000000000006044820152fd5b604051906060820182811067ffffffffffffffff8211176119b857604052565b90611acc6001600160a01b03611ac38184161515611a3f565b83161515611a3f565b604051611ad88161199c565b600d81526020907f576f6d62617420576164646c65000000000000000000000000000000000000008282015260405191611b118361199c565b600583527f7665574f4d00000000000000000000000000000000000000000000000000000081840152611b5d60ff60005460081c16611b4f81611de4565b611b5881611de4565b611de4565b81519167ffffffffffffffff8311611dd7575b611b8483611b7f60cc54611919565b611ef6565b81601f8411600114611d2557509282611c42969593611bc293611c0e96600092611d1a575b50506000198260011b9260031b1c19161760cc55611fd8565b611bca611e55565b611bd2611eae565b611bda611e73565b6001600160a01b03167fffffffffffffffffffffffff000000000000000000000000000000000000000060fc54161760fc55565b6001600160a01b03167fffffffffffffffffffffffff000000000000000000000000000000000000000060fb54161760fb55565b611c8775271000000000000000000000000000000000000000007fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff60fd54161760fd55565b611ccf78070000000000000000000000000000000000000000000000007fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff60fd54161760fd55565b611d187d05b5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60fd54161760fd55565b565b015190503880611ba9565b60cc60005291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084167f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe936000905b828210611dbf57505093611bc293611c0e969360019383611c429b9a9810611da6575b505050811b0160cc55611fd8565b015160001960f88460031b161c19169055388080611d98565b80600186978294978701518155019601940190611d75565b611ddf61196c565b611b70565b15611deb57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b611e6a60ff60005460081c16611b5881611de4565b611d18336118b7565b611e8460ff60005460081c16611de4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060975416609755565b611ebf60ff60005460081c16611de4565b6001606555565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b601f8111611f02575050565b60009060cc82527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe906020601f850160051c83019410611f5d575b601f0160051c01915b828110611f5257505050565b818155600101611f46565b9092508290611f3d565b601f8111611f73575050565b60009060cd82527f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e906020601f850160051c83019410611fce575b601f0160051c01915b828110611fc357505050565b818155600101611fb7565b9092508290611fae565b90815167ffffffffffffffff81116120e0575b611fff81611ffa60cd54611919565b611f67565b602080601f831160011461203a575081929360009261202f575b50506000198260011b9260031b1c19161760cd55565b015190503880612019565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083169461208b60cd6000527f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e90565b926000905b8782106120c85750508360019596106120af575b505050811b0160cd55565b015160001960f88460031b161c191690553880806120a4565b80600185968294968601518155019501930190612090565b6120e861196c565b611feb565b156120f457565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80548210156121805760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6706f05b59d3b20000907ffffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4dffff81116121e4570190565b6121ec612138565b0190565b811981116121e4570190565b906040516060810181811067ffffffffffffffff82111761224b575b604052604081935465ffffffffffff811683526cffffffffffffffffffffffffff8160301c16602084015260981c910152565b61225361196c565b612218565b1561225f57565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b156122aa57565b606460405162461bcd60e51b815260206004820152602060248201527f616d6f756e7420746f206465706f7369742063616e6e6f74206265207a65726f6044820152fd5b156122f557565b606460405162461bcd60e51b815260206004820152601460248201527f6c6f636b206461797320697320696e76616c69640000000000000000000000006044820152fd5b1561234057565b606460405162461bcd60e51b815260206004820152600e60248201527f627265656420746f6f206d7563680000000000000000000000000000000000006044820152fd5b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab81116001166123b5575b620151800290565b6123bd612138565b6123ad565b906123ea611d18928054906801000000000000000082101561245f575b600182018155612168565b919091612452575b8051602082015160409092015160981b7fffffffffffffffffffffffffff000000000000000000000000000000000000001672ffffffffffffffffffffffffff00000000000060309390931b9290921665ffffffffffff90911617179055565b61245a611ec6565b6123f2565b61246761196c565b6123df565b600091612524949383926040519560208701937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248a01521660448801526064870152606486526124cc866119e2565b169082604051956124dc8761199c565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152612512843b15156125d2565b51925af161251e61261d565b90612689565b80518061252f575050565b8160208061254493611d189501019101612549565b612561565b9081602091031261000e5751801515810361000e5790565b1561256857565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b156125d957565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15612684573d9067ffffffffffffffff8211612677575b6040519161266b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601846119fe565b82523d6000602084013e565b61267f61196c565b612635565b606090565b90919015612695575090565b8151156126a55750805190602001fd5b6126c19060405191829162461bcd60e51b83526004830161024c565b0390fd5b6001600160a01b0381168015612760577f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885602084612708611d189660cb546121f0565b60cb55612728856001600160a01b031660005260c9602052604060002090565b6127338282546121f0565b9055604051908152a2612759816001600160a01b031660005260c9602052604060002090565b5490612e38565b606460405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b6127de9161280991600019916127f6665cf26ab61477b892808504841181151516612827575b670de0b6b3a76400009687948592026121af565b0492828493860482118115151661281a575b02613d87565b920482118115151661280d575b026121af565b0490565b612815612138565b612803565b612822612138565b6127f0565b61282f612138565b6127ca565b1561283b57565b606460405162461bcd60e51b815260206004820152600460248201527f7775743f000000000000000000000000000000000000000000000000000000006044820152fd5b1561288657565b606460405162461bcd60e51b815260206004820152600b60248201527f6e6f7420796574206d65680000000000000000000000000000000000000000006044820152fd5b60001990600181106121e4570190565b8181106128e5570390565b6128ed612138565b0390565b906129bb575b818103612902575050565b815481547fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001665ffffffffffff91909116178155611d1891805482547fffffffffffffffffffffffffff00000000000000000000000000ffffffffffff1672ffffffffffffffffffffffffff00000000000090911617825554815472ffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffff00000000000000000000000000000000000000909116179055565b6129c3611ec6565b6128f7565b805480156129f557600019019060006129e18383612168565b6129e9575555565b6129f1611ec6565b5555565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b506040513d6000823e3d90fd5b15612a3857565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fd5b6001600160a01b0381168015612b68577fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5612b4884611d1895612af8866001600160a01b031660005260c9602052604060002090565b54612b0582821015612a31565b03612b23866001600160a01b031660005260c9602052604060002090565b55612b38612b338260cb546128da565b60cb55565b6040519081529081906020820190565b0390a2612759816001600160a01b031660005260c9602052604060002090565b608460405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fd5b15612bd957565b608460405162461bcd60e51b815260206004820152603560248201527f736c6f7420706f736974696f6e2073686f756c64206265206c6573732074686160448201527f6e20746865206e756d626572206f6620736c6f747300000000000000000000006064820152fd5b15612c4a57565b608460405162461bcd60e51b815260206004820152603760248201527f746865206e657720656e642064617465206d757374206265206772656174657260448201527f207468616e206578697374696e6720656e6420646174650000000000000000006064820152fd5b15612cbb57565b608460405162461bcd60e51b815260206004820152603f60248201527f746865206e6577207665576f6d20616d6f756e74206d7573742062652067726560448201527f61746572207468616e206578697374696e67207665576f6d20616d6f756e74006064820152fd5b6001600160a01b0380911690328203612d3c575050565b60fd54168015159182612dbd575b505015612d5357565b608460405162461bcd60e51b815260206004820152602560248201527f536d61727420636f6e7472616374206465706f7369746f7273206e6f7420616c60448201527f6c6f7765640000000000000000000000000000000000000000000000000000006064820152fd5b60209192506024604051809481937fc23697a800000000000000000000000000000000000000000000000000000000835260048301525afa908115612e2b575b600091612e0d575b503880612d4a565b612e25915060203d8111610e0557610df681836119fe565b38612e05565b612e33612a24565b612dfd565b612e4181612ec3565b6001600160a01b038060fc5416803b1561000e576000928360449260405196879586947f4f00a93e00000000000000000000000000000000000000000000000000000000865216600485015260248401525af18015612eb6575b612ea25750565b67ffffffffffffffff81116119b857604052565b612ebe612a24565b612e9b565b6001600160a01b031660005260c960205260406000205461010060205260406000205411612eed57565b606460405162461bcd60e51b815260206004820152601660248201527f5665576f6d3a206e6f7420656e6f75676820766f7465000000000000000000006044820152fd5b600160ff1b8114612f43575b60000390565b612f4b612138565b612f3d565b7ffffffffffffffffffffffffffffffffffffffffffffffffc87d2531627000000907f800000000000000000000000000000000000000000000003782dace9d900000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e000000907f800000000000000000000000000000000000000000000006f05b59d3b200000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffffffffffffffff5287143a539e000000907f8000000000000000000000000000000000000000000000ad78ebc5ac6200000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf000000907f800000000000000000000000000000000000000000000056bc75e2d63100000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e7800000907f80000000000000000000000000000000000000000000002b5e3af16b1880000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c00000907f800000000000000000000000000000000000000000000015af1d78b58c40000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffff5287143a539e00000907f80000000000000000000000000000000000000000000000ad78ebc5ac620000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf00000907f8000000000000000000000000000000000000000000000056bc75e2d6310000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e780000907f800000000000000000000000000000000000000000000002b5e3af16b188000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c0000907f8000000000000000000000000000000000000000000000015af1d78b58c4000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffff3f68318436f8ea4cb460f000000000907f8000000000000000000000000000000000c097ce7bc90715b34b9f100000000081126001166121e4570190565b7f7ffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cefffff81136001166132f9575b68056bc75e2d631000000190565b613301612138565b6132eb565b60008112906803782dace9d900000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613355575b81600160ff1b038312166121e4570190565b61335d612138565b613343565b600081129068ad78ebc5ac6200000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906856bc75e2d63100000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b6000811290682b5e3af16b1880000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906815af1d78b58c40000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b6000811290680ad78ebc5ac620000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b600081129068056bc75e2d6310000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906802b5e3af16b188000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b600081129068015af1d78b58c4000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b600081129067ad78ebc5ac62000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906756bc75e2d631000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906ec097ce7bc90715b34b9f100000000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60649060017f0147ae147ae147ae147ae147ae147ae147ae147ae147ae147ae147ae147ae1478211600083131616613774575b60017ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb98212600083121616613768570290565b613770612138565b0290565b61377c612138565b613735565b6b02df0ab5a80a22c61ab5a700906001742c946c2bbca77c51fd5dbb9b6b977eb57ae2a4810282116000831316166137e7575b60017fffffffffffffffffffffffd36b93d4435883ae02a244649468814a851d5b7efe8212600083121616613768570290565b6137ef612138565b6137b4565b693f1fce3da636ea5cf8509060017602071a702111fbea2c24c1f0a7775c81684ed1aa2d0030821160008313161661385a575b60017ffffffffffffffffffffdf8e58fdeee0415d3db3e0f5888a37e97b12e55d2ffd08212600083121616613768570290565b613862612138565b613827565b690127fa27722cc06cc5e2906001766eb614127829fdc13a3ecbf3403f628ab3ac34d34e0c8182116000831316166138cd575b60017fffffffffffffffffff9149ebed87d6023ec5c1340cbfc09d754c53cb2cb1f37f8212600083121616613768570290565b6138d5612138565b61389a565b68280e60114edb805d039060017703320d351227ed0e191fe0057d88b3d353d790bc64ae52838211600083131616613940575b60017ffffffffffffffffffccdf2caedd812f1e6e01ffa82774c2cac286f439b51ad7d8212600083121616613768570290565b613948612138565b61390d565b680ebc5fb417461211109060017708afb1dcc10223b496190e5924ceb5c883d30f51acd9577e82116000831316166139b3575b60017ffffffffffffffffff7504e233efddc4b69e6f1a6db314a377c2cf0ae5326a8828212600083121616613768570290565b6139bb612138565b613980565b6808f00f760a4b2db55d906001770e5240bc6352d0b85e32903aa78bdb23e04ceb6de5bc9d7f8211600083131616613a26575b60017ffffffffffffffffff1adbf439cad2f47a1cd6fc5587424dc1fb314921a4362818212600083121616613768570290565b613a2e612138565b6139f3565b6806f5f17757889379379060017712638fd7097e98a815affbc7cb0eb130448889a9ffa568b28211600083131616613a99575b60017fffffffffffffffffed9c7028f6816757ea50043834f14ecfbb777656005a974e8212600083121616613768570290565b613aa1612138565b613a66565b68056bc75e2d6310000090600177179ca10c9242235d511e976394d79eb08303d500b3eeca658211600083131616613b0c575b60017fffffffffffffffffe8635ef36dbddca2aee1689c6b28614f7cfc2aff4c11359b8212600083121616613768570290565b613b14612138565b613ad9565b60017f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211600083131616613b8c575b60017fc0000000000000000000000000000000000000000000000000000000000000008212600083121616613b7f575b60011b90565b613b87612138565b613b79565b613b94612138565b613b49565b6ec097ce7bc90715b34b9f100000000090600170aa242499697392d2dde50bd1d5d0b9e9ea8211600083131616613bfe575b60017fffffffffffffffffffffffffffffff55dbdb66968c6d2d221af42e2a2f4616168212600083121616613768570290565b613c06612138565b613bcb565b6706f05b59d3b200009060017812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218211600083131616613c71575b60017fffffffffffffffed8da22e2dbc545f18a019ba33b78c0619a50197736d71e0df8212600083121616613768570290565b613c79612138565b613c3e565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818104851183851616613d0a575b6000821292600160ff1b94848787058512911616613cfd575b82600087129505861290851616613cf0575b058312911616613768570290565b613cf8612138565b613ce2565b613d05612138565b613cd0565b613d12612138565b613cb7565b8015613d31576ec097ce7bc90715b34b9f10000000000590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8115613d31576000198214600160ff1b821416613d7b570590565b613d83612138565b0590565b8015613ea957600160ff1b811015613e6b57670de0b6b3a7640000613e2e9180670c7d713b49da00001280613e5a575b15613e4457613dc8613df5916147a3565b613def613de184613dda818505613c0b565b9307613c0b565b670de0b6b3a7640000900590565b906136c0565b05807ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc0000131580613e31575b613e2990613eaf565b613f39565b90565b5068070c1cc73b00c80000811315613e20565b613e50613e559161436a565b613c0b565b613df5565b50670f43fc2c04ee00008112613db7565b62461bcd60e51b600052602060045260076024527f42414c233030360000000000000000000000000000000000000000000000000060445260646000fd5b50600090565b15613eb657565b62461bcd60e51b600052602060045260076024527f42414c233030380000000000000000000000000000000000000000000000000060445260646000fd5b15613efb57565b62461bcd60e51b600052602060045260076024527f42414c233030390000000000000000000000000000000000000000000000000060445260646000fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc000081121580614357575b613f6c90613ef4565b60008112614342576806f05b59d3b2000000811261430857613f8d90612fa0565b613faf770195e54c5dd42177f53a27172fa9ec63026282700000000091613702565b8068056bc75e2d631000009168ad78ebc5ac620000008112156142e5575b506856bc75e2d6310000008112156142ca575b682b5e3af16b188000008112156142af575b6815af1d78b58c400000811215614294575b680ad78ebc5ac6200000811215614279575b68056bc75e2d6310000081121561425e575b6802b5e3af16b1880000811215614243575b68015af1d78b58c40000811215614219575b80808080808080808061405e816132c0565b6140688280613c7e565b68056bc75e2d631000009005600290059081614083916136c0565b9161408d91613c7e565b68056bc75e2d6310000090056003900590816140a8916136c0565b916140b291613c7e565b68056bc75e2d6310000090056004900590816140cd916136c0565b916140d791613c7e565b68056bc75e2d6310000090056005900590816140f2916136c0565b916140fc91613c7e565b68056bc75e2d631000009005600690059081614117916136c0565b9161412191613c7e565b68056bc75e2d63100000900560079005908161413c916136c0565b9161414691613c7e565b68056bc75e2d631000009005600890059081614161916136c0565b9161416b91613c7e565b68056bc75e2d631000009005600990059081614186916136c0565b9161419091613c7e565b68056bc75e2d631000009005600a900590816141ab916136c0565b916141b591613c7e565b68056bc75e2d631000009005600b900590816141d0916136c0565b916141da91613c7e565b68056bc75e2d631000009005600c90056141f3916136c0565b6141fc91613c7e565b68056bc75e2d6310000090059061421291613c7e565b6064900590565b61422e61422861423d92613220565b92613a33565b68056bc75e2d63100000900590565b9061404c565b61422e614252614258926131d0565b926139c0565b9061403a565b61422e61426d61427392613180565b9261394d565b90614028565b61422e61428861428e92613130565b926138da565b90614016565b61422e6142a36142a9926130e0565b92613867565b90614004565b61422e6142be6142c492613090565b926137f4565b90613ff2565b61422e6142d96142df92613040565b92613781565b90613fe0565b90506142f19150612ff0565b6e01855144814a7ff805980ff00840009038613fcd565b6803782dace9d900000081126143375761432190612f50565b613faf6b1425982cf597cd205cef738091613702565b613faf600191613702565b613e2961434e91612f31565b613e2e90613d17565b5068070c1cc73b00c80000811315613f63565b670de0b6b3a7640000811261478957614212613e2e9160007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c000000000000082121561475e575b73011798004d755d3c8bc8e03204cf44619e00000082121561473b575b6143d090613702565b6143da8192613702565b90816e01855144814a7ff805980ff00840008112156146dc575b50506145586005613def61455161422e61452961454b61454061422e6144de8a6b02df0ab5a80a22c61ab5a700613def9c12156146af575b693f1fce3da636ea5cf850811215614684575b690127fa27722cc06cc5e2811215614659575b68280e60114edb805d0381121561462f575b680ebc5fb41746121110811215614605575b6808f00f760a4b2db55d8112156145db575b6806f5f17757889379378112156145b1575b6806248f33704b286603811215614587575b6805c548670b9510e7ac81121561455d575b6144d86144d26144cd83613180565b613aa6565b916134e8565b90613d60565b61453a61452f61422e6144f461422e8580613c7e565b80988561452061422e8461451a61450f61422e83809d613c7e565b9460038605906136c0565b93613c7e565b9e8f05906136c0565b9c613c7e565b9960078b05906136c0565b98613c7e565b9560098705906136c0565b94613c7e565b600b900590565b613b19565b61457b61456c61458192613aa6565b6805c548670b9510e7ac900590565b9c61361f565b9b6144be565b6145a56145966145ab92613aa6565b6806248f33704b286603900590565b9c6135d2565b9b6144ac565b6145cf6145c06145d592613aa6565b6806f5f1775788937937900590565b9c613584565b9b61449a565b6145f96145ea6145ff92613aa6565b6808f00f760a4b2db55d900590565b9c613536565b9b614488565b61462361461461462992613aa6565b680ebc5fb41746121110900590565b9c6134e8565b9b614476565b61464d61463e61465392613aa6565b68280e60114edb805d03900590565b9c61349a565b9b614464565b61467861466861467e92613aa6565b690127fa27722cc06cc5e2900590565b9c61344c565b9b614452565b6146a36146936146a992613aa6565b693f1fce3da636ea5cf850900590565b9c6133fe565b9b61443f565b6146d06146be6146d692613aa6565b6b02df0ab5a80a22c61ab5a700900590565b9c6133b0565b9b61442c565b614558919350613def9250613def61455161422e61452961454b61454061422e6144de61472b61472561471060059b613aa6565b6e01855144814a7ff805980ff0084000900590565b9c613362565b9b9a5050505050505050506143f4565b906147576b1425982cf597cd205cef73806143d0920592613306565b90506143c7565b50770195e54c5dd42177f53a27172fa9ec63026282700000000090056806f05b59d3b20000006143aa565b61479561479a91613d17565b61436a565b613e2e90612f31565b670de0b6b3a76400009060017809392ee8e921d5d073aff322e62439fcf32d7f344649470f908211600083131616614989575b60017ffffffffffffffff6c6d11716de2a2f8c500cdd19dbc6030cd280cbb9b6b8f070821260008312161661497c575b0261481081613270565b61481990613b99565b906148239061366c565b61482c91613d60565b6148368180613c7e565b6ec097ce7bc90715b34b9f100000000090058080808085614858828098613c7e565b6ec097ce7bc90715b34b9f100000000090059060038205614878916136c0565b9161488291613c7e565b6ec097ce7bc90715b34b9f1000000000900590600582056148a2916136c0565b916148ac91613c7e565b6ec097ce7bc90715b34b9f1000000000900590600782056148cc916136c0565b916148d691613c7e565b6ec097ce7bc90715b34b9f1000000000900590600982056148f6916136c0565b9161490091613c7e565b6ec097ce7bc90715b34b9f1000000000900590600b8205614920916136c0565b9161492a91613c7e565b6ec097ce7bc90715b34b9f1000000000900590600d820561494a916136c0565b9161495491613c7e565b6ec097ce7bc90715b34b9f10000000009005600f9005614973916136c0565b613e2e90613b19565b614984612138565b614806565b614991612138565b6147d656fea264697066735822122048867a64c353dc4428e9013b4bcf4da5e39670bddb124156446f78f3210513a864736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806306fdde03146102435780630705999d1461023a5780630a7feeb21461023157806318160ddd146102285780631b2ef1ca1461021f5780632fb565e814610216578063313ce5671461020d5780633bd61ba8146102045780633f4ba83a146101fb5780634209fff1146101f257806342966c68146101e957806346c96aac146101e0578063485cc955146101d75780634bc2a657146101ce578063552eec2f146101c55780635c975abb146101bc5780636386c1c7146101b357806370a08231146101aa578063715018a6146101a15780638456cb5914610198578063854cff2f1461018f5780638da5cb5b1461018657806393e59dc11461017d57806395d89b4114610174578063b0dfaa7a1461016b578063c5a6222e14610162578063d4c9b0d1146101595763f2fde38b1461015157600080fd5b61000e6117bd565b5061000e611712565b5061000e6116ea565b5061000e611604565b5061000e61155c565b5061000e611534565b5061000e61150c565b5061000e611474565b5061000e6113e8565b5061000e61136c565b5061000e611349565b5061000e611230565b5061000e611167565b5061000e6110a4565b5061000e61100c565b5061000e610ea8565b5061000e610e80565b5061000e610b8e565b5061000e610b47565b5061000e610a7e565b5061000e610a56565b5061000e610a39565b5061000e61070d565b5061000e6104ce565b5061000e6104af565b5061000e61046f565b5061000e6103d7565b5061000e6102c2565b919091602080825283519081818401526000945b8286106102ac575050601f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092604095961161029f575b0116010190565b6000858286010152610298565b8581018201518487016040015294810194610260565b503461000e576000806003193601126103c357604051908060cc546102e681611919565b8085529160019180831690811561037b5750600114610320575b61031c85610310818703826119fe565b6040519182918261024c565b0390f35b925060cc83527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe5b8284106103635750505081016020016103108261031c610300565b80546020858701810191909152909301928101610348565b86955061031c969350602092506103109491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b8201019293610300565b80fd5b6001600160a01b0381160361000e57565b503461000e57602060031936011261000e577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d6020600435610418816103c6565b6001600160a01b03906104308260335416331461186c565b1661043c811515611a3f565b807fffffffffffffffffffffffff000000000000000000000000000000000000000060fc54161760fc55604051908152a1005b503461000e57602060031936011261000e576001600160a01b03600435610495816103c6565b166000526101006020526020604060002054604051908152f35b503461000e57600060031936011261000e57602060cb54604051908152f35b503461000e5760408060031936011261000e57600435602435906104f760026065541415612258565b600260655561050b60ff60975416156120ed565b6105168115156122a3565b6cffffffffffffffffffffffffff918282116106e45761053533612d25565b61058460fd5463ffffffff808260c01c16841015806106d6575b610558906122ee565b600a610577336001600160a01b031660005260fe602052604060002090565b01549160a01c1611612339565b6105a061059961059383612384565b426121f0565b91836127a4565b9265ffffffffffff908183116106ad578085116106ad579161065460209694927f3af2c1ec57343b1e7e40c3f6c85f5ad943344cd8548bdf819f1da51aaebb3db69461064f600a610604336001600160a01b031660005260fe602052604060002090565b0191610622610611611a8a565b948716859065ffffffffffff169052565b6cffffffffffffffffffffffffff87821616848c015289166cffffffffffffffffffffffffff1688840152565b6123c2565b6106738261066a60fb546001600160a01b031690565b3090339061246c565b61067d85336126c5565b83513381526020810191909152604081019190915260608101849052608090a16106a76001606555565b51908152f35b600486517f7e685645000000000000000000000000000000000000000000000000000000008152fd5b5060e082901c84111561054f565b600484517f7e685645000000000000000000000000000000000000000000000000000000008152fd5b503461000e57604060031936011261000e5760043560243561073460026065541415612258565b600260655561074860ff60975416156120ed565b61075133612d25565b61077160fd5463ffffffff8160c01c168310159081610a2b575b506122ee565b600a9161079e83610795336001600160a01b031660005260fe602052604060002090565b01548210612bd2565b6107e46107d96107cc83866107c6336001600160a01b031660005260fe602052604060002090565b01612168565b505465ffffffffffff1690565b65ffffffffffff1690565b9161083661082461080d84876107c6336001600160a01b031660005260fe602052604060002090565b505460301c6cffffffffffffffffffffffffff1690565b6cffffffffffffffffffffffffff1690565b9161086761082461085f83886107c6336001600160a01b031660005260fe602052604060002090565b505460981c90565b9361087e61087761059385612384565b93856127a4565b9465ffffffffffff90818511610a01576cffffffffffffffffffffffffff95868811610a01576109a07ff8e2edd66620761fcb68d32d12d6e8c57350084b4756209ed054979196a2b9f9976109598760209c6109458d986108e38d6109ec9c10612c43565b6108ee8a8a10612cb4565b61091084846107c6336001600160a01b031660005260fe602052604060002090565b50908d1665ffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000825416179055565b33600090815260fe602052604090206107c6565b5090851672ffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffff0000000000000000000000000000000000000083549260981b169116179055565b6109b36109ad83856128da565b336126c5565b60405195869533879260a09491979695926001600160a01b0360c086019916855260208501526040840152606083015260808201520152565b0390a16109f96001606555565b604051908152f35b60046040517f7e685645000000000000000000000000000000000000000000000000000000008152fd5b905060e01c8211153861076b565b503461000e57600060031936011261000e57602060405160128152f35b503461000e57600060031936011261000e5760206001600160a01b0360fc5416604051908152f35b503461000e57600060031936011261000e57610aa66001600160a01b0360335416331461186c565b60975460ff811615610b03577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461000e57602060031936011261000e576020610b84600435610b6a816103c6565b6001600160a01b031660005260c960205260406000205490565b1515604051908152f35b503461000e57602060031936011261000e577f275029c7b988945c03ac5499c0d532fce79ce36efab42e1b3f180a62001cad2c600435610bd360026065541415612258565b6002606555610be760ff60975416156120ed565b600a610c06336001600160a01b031660005260fe602052604060002090565b0154610c13818310612834565b610c3f610c3983600a6107c6336001600160a01b031660005260fe602052604060002090565b506121fc565b91610c5e610c566107d9855165ffffffffffff1690565b42101561287f565b610c67826128ca565b8103610e19575b5050610c98600a610c92336001600160a01b031660005260fe602052604060002090565b016129c8565b610cb9610cad60fb546001600160a01b031690565b6001600160a01b031690565b60006020610d2c81850193610cdb85516cffffffffffffffffffffffffff1690565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526cffffffffffffffffffffffffff909116602482015293849283919082906044820190565b03925af18015610e0c575b610dde575b50610dcf610d91610d7d610d7d6040860195610d71610d6b61082489516cffffffffffffffffffffffffff1690565b33612aa2565b5165ffffffffffff1690565b93516cffffffffffffffffffffffffff1690565b6040805133815265ffffffffffff90941660208501526cffffffffffffffffffffffffff948516908401529290921660608201529081906080820190565b0390a1610ddc6001606555565b005b610dfe9060203d8111610e05575b610df681836119fe565b810190612549565b5038610d3c565b503d610dec565b610e14612a24565b610d37565b610e73610e52610e7993610e4c600a610e45336001600160a01b031660005260fe602052604060002090565b01916128ca565b90612168565b5091600a6107c6336001600160a01b031660005260fe602052604060002090565b906128f1565b3880610c6e565b503461000e57600060031936011261000e5760206001600160a01b0360ff5416604051908152f35b503461000e57604060031936011261000e57600435610ec6816103c6565b602435610ed2816103c6565b6000549060ff8260081c1691826000146110035750303b155b15610f9957610f0091159283610f3357611aaa565b610f0657005b610ddc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b610f646101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b610f9460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006000541617600055565b611aaa565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b60ff1615610eeb565b503461000e57602060031936011261000e577fc6ff127433b785c51da9ae4088ee184c909b1a55b9afd82ae6c64224d3bc15d2602060043561104d816103c6565b6001600160a01b03906110658260335416331461186c565b16611071811515611a3f565b807fffffffffffffffffffffffff000000000000000000000000000000000000000060ff54161760ff55604051908152a1005b503461000e57602060031936011261000e576004356110c2816103c6565b6000906001600160a01b038116825260fe602052600a6040832001805483915b81831061111a5784611108856001600160a01b031660005260c960205260406000205490565b60408051928352602083019190915290f35b9091936111476001916cffffffffffffffffffffffffff61113b8886612168565b505460301c16906121f0565b94600019811461115a575b0191906110e2565b611162612138565b611152565b503461000e57600060031936011261000e57602060ff609754166040519015158152f35b60208082528251919261018084019260008386015b600a821061121b57505050906101a0818094930151946101608082015285518094520193019160005b8281106111d7575050505090565b8351805165ffffffffffff168652808301516cffffffffffffffffffffffffff908116878501526040918201511690860152606090940193928101926001016111c9565b848060019285518152019301910190916111a0565b503461000e5760208060031936011261000e5760043561124f816103c6565b6040606083825161125f8161199c565b835161126a816119c5565b610140368237815201526001600160a01b0360009216825260fe8352808220918151926112968461199c565b8251818387835b600a8310611332575050505090816112b6600a936119c5565b85520193845467ffffffffffffffff8111611325575b835192956112e0600583901b8401856119fe565b8184528652818620958284015b8282106113095750505061031c9450830152519182918261118b565b60018481926113178b6121fc565b8152019801910190966112ed565b61132d61196c565b6112cc565b60019182918554815201930191019091889061129d565b503461000e57602060031936011261000e5760206109f9600435610b6a816103c6565b503461000e576000806003193601126103c3576033547fffffffffffffffffffffffff00000000000000000000000000000000000000006001600160a01b038216916113b933841461186c565b1660335581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600060031936011261000e576114106001600160a01b0360335416331461186c565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060975461144360ff8216156120ed565b16176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b503461000e57602060031936011261000e577f3990e3e141b903f4f5602428874be692206642a653b416f336d965e2f04813ce60206004356114b5816103c6565b6001600160a01b03906114cd8260335416331461186c565b166114d9811515611a3f565b807fffffffffffffffffffffffff000000000000000000000000000000000000000060fd54161760fd55604051908152a1005b503461000e57600060031936011261000e5760206001600160a01b0360335416604051908152f35b503461000e57600060031936011261000e5760206001600160a01b0360fd5416604051908152f35b503461000e576000806003193601126103c357604051908060cd5461158081611919565b8085529160019180831690811561037b57506001146115a95761031c85610310818703826119fe565b925060cd83527f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e5b8284106115ec5750505081016020016103108261031c610300565b805460208587018101919091529093019281016115d1565b503461000e57604060031936011261000e57600435611622816103c6565b602435906001600160a01b03918260ff541633036116a65760009283821261166e57821683526101006020526040832080546116699392611662916121f0565b9055612ec3565b604051f35b9061167890612f31565b9116825261010060205260408220908154818110611699575b039055604051f35b6116a1612138565b611691565b606460405162461bcd60e51b815260206004820152601a60248201527f5665576f6d3a2063616c6c6572206973206e6f7420766f7465720000000000006044820152fd5b503461000e57600060031936011261000e5760206001600160a01b0360fb5416604051908152f35b503461000e57602060031936011261000e5760043561173d6001600160a01b0360335416331461186c565b63ffffffff8111610a015760207f20fff119b2ff981a49e3649af737a2d9a9f9b4bd74c35c0448478c2bd4666a689160fd547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff77ffffffff00000000000000000000000000000000000000008360a01b1691161760fd55604051908152a1005b503461000e57602060031936011261000e576004356117db816103c6565b6001600160a01b036117f28160335416331461186c565b81161561180257610ddc906118b7565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b1561187357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b90600182811c92168015611962575b602083101461193357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691611928565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176119b857604052565b6119c061196c565b604052565b610140810190811067ffffffffffffffff8211176119b857604052565b60a0810190811067ffffffffffffffff8211176119b857604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176119b857604052565b15611a4657565b606460405162461bcd60e51b815260206004820152600c60248201527f7a65726f206164647265737300000000000000000000000000000000000000006044820152fd5b604051906060820182811067ffffffffffffffff8211176119b857604052565b90611acc6001600160a01b03611ac38184161515611a3f565b83161515611a3f565b604051611ad88161199c565b600d81526020907f576f6d62617420576164646c65000000000000000000000000000000000000008282015260405191611b118361199c565b600583527f7665574f4d00000000000000000000000000000000000000000000000000000081840152611b5d60ff60005460081c16611b4f81611de4565b611b5881611de4565b611de4565b81519167ffffffffffffffff8311611dd7575b611b8483611b7f60cc54611919565b611ef6565b81601f8411600114611d2557509282611c42969593611bc293611c0e96600092611d1a575b50506000198260011b9260031b1c19161760cc55611fd8565b611bca611e55565b611bd2611eae565b611bda611e73565b6001600160a01b03167fffffffffffffffffffffffff000000000000000000000000000000000000000060fc54161760fc55565b6001600160a01b03167fffffffffffffffffffffffff000000000000000000000000000000000000000060fb54161760fb55565b611c8775271000000000000000000000000000000000000000007fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff60fd54161760fd55565b611ccf78070000000000000000000000000000000000000000000000007fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff60fd54161760fd55565b611d187d05b5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60fd54161760fd55565b565b015190503880611ba9565b60cc60005291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084167f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe936000905b828210611dbf57505093611bc293611c0e969360019383611c429b9a9810611da6575b505050811b0160cc55611fd8565b015160001960f88460031b161c19169055388080611d98565b80600186978294978701518155019601940190611d75565b611ddf61196c565b611b70565b15611deb57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b611e6a60ff60005460081c16611b5881611de4565b611d18336118b7565b611e8460ff60005460081c16611de4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060975416609755565b611ebf60ff60005460081c16611de4565b6001606555565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b601f8111611f02575050565b60009060cc82527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe906020601f850160051c83019410611f5d575b601f0160051c01915b828110611f5257505050565b818155600101611f46565b9092508290611f3d565b601f8111611f73575050565b60009060cd82527f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e906020601f850160051c83019410611fce575b601f0160051c01915b828110611fc357505050565b818155600101611fb7565b9092508290611fae565b90815167ffffffffffffffff81116120e0575b611fff81611ffa60cd54611919565b611f67565b602080601f831160011461203a575081929360009261202f575b50506000198260011b9260031b1c19161760cd55565b015190503880612019565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe083169461208b60cd6000527f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e90565b926000905b8782106120c85750508360019596106120af575b505050811b0160cd55565b015160001960f88460031b161c191690553880806120a4565b80600185968294968601518155019501930190612090565b6120e861196c565b611feb565b156120f457565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80548210156121805760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6706f05b59d3b20000907ffffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4dffff81116121e4570190565b6121ec612138565b0190565b811981116121e4570190565b906040516060810181811067ffffffffffffffff82111761224b575b604052604081935465ffffffffffff811683526cffffffffffffffffffffffffff8160301c16602084015260981c910152565b61225361196c565b612218565b1561225f57565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b156122aa57565b606460405162461bcd60e51b815260206004820152602060248201527f616d6f756e7420746f206465706f7369742063616e6e6f74206265207a65726f6044820152fd5b156122f557565b606460405162461bcd60e51b815260206004820152601460248201527f6c6f636b206461797320697320696e76616c69640000000000000000000000006044820152fd5b1561234057565b606460405162461bcd60e51b815260206004820152600e60248201527f627265656420746f6f206d7563680000000000000000000000000000000000006044820152fd5b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab81116001166123b5575b620151800290565b6123bd612138565b6123ad565b906123ea611d18928054906801000000000000000082101561245f575b600182018155612168565b919091612452575b8051602082015160409092015160981b7fffffffffffffffffffffffffff000000000000000000000000000000000000001672ffffffffffffffffffffffffff00000000000060309390931b9290921665ffffffffffff90911617179055565b61245a611ec6565b6123f2565b61246761196c565b6123df565b600091612524949383926040519560208701937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248a01521660448801526064870152606486526124cc866119e2565b169082604051956124dc8761199c565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152612512843b15156125d2565b51925af161251e61261d565b90612689565b80518061252f575050565b8160208061254493611d189501019101612549565b612561565b9081602091031261000e5751801515810361000e5790565b1561256857565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b156125d957565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d15612684573d9067ffffffffffffffff8211612677575b6040519161266b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601846119fe565b82523d6000602084013e565b61267f61196c565b612635565b606090565b90919015612695575090565b8151156126a55750805190602001fd5b6126c19060405191829162461bcd60e51b83526004830161024c565b0390fd5b6001600160a01b0381168015612760577f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885602084612708611d189660cb546121f0565b60cb55612728856001600160a01b031660005260c9602052604060002090565b6127338282546121f0565b9055604051908152a2612759816001600160a01b031660005260c9602052604060002090565b5490612e38565b606460405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b6127de9161280991600019916127f6665cf26ab61477b892808504841181151516612827575b670de0b6b3a76400009687948592026121af565b0492828493860482118115151661281a575b02613d87565b920482118115151661280d575b026121af565b0490565b612815612138565b612803565b612822612138565b6127f0565b61282f612138565b6127ca565b1561283b57565b606460405162461bcd60e51b815260206004820152600460248201527f7775743f000000000000000000000000000000000000000000000000000000006044820152fd5b1561288657565b606460405162461bcd60e51b815260206004820152600b60248201527f6e6f7420796574206d65680000000000000000000000000000000000000000006044820152fd5b60001990600181106121e4570190565b8181106128e5570390565b6128ed612138565b0390565b906129bb575b818103612902575050565b815481547fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001665ffffffffffff91909116178155611d1891805482547fffffffffffffffffffffffffff00000000000000000000000000ffffffffffff1672ffffffffffffffffffffffffff00000000000090911617825554815472ffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffff00000000000000000000000000000000000000909116179055565b6129c3611ec6565b6128f7565b805480156129f557600019019060006129e18383612168565b6129e9575555565b6129f1611ec6565b5555565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b506040513d6000823e3d90fd5b15612a3857565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fd5b6001600160a01b0381168015612b68577fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5612b4884611d1895612af8866001600160a01b031660005260c9602052604060002090565b54612b0582821015612a31565b03612b23866001600160a01b031660005260c9602052604060002090565b55612b38612b338260cb546128da565b60cb55565b6040519081529081906020820190565b0390a2612759816001600160a01b031660005260c9602052604060002090565b608460405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fd5b15612bd957565b608460405162461bcd60e51b815260206004820152603560248201527f736c6f7420706f736974696f6e2073686f756c64206265206c6573732074686160448201527f6e20746865206e756d626572206f6620736c6f747300000000000000000000006064820152fd5b15612c4a57565b608460405162461bcd60e51b815260206004820152603760248201527f746865206e657720656e642064617465206d757374206265206772656174657260448201527f207468616e206578697374696e6720656e6420646174650000000000000000006064820152fd5b15612cbb57565b608460405162461bcd60e51b815260206004820152603f60248201527f746865206e6577207665576f6d20616d6f756e74206d7573742062652067726560448201527f61746572207468616e206578697374696e67207665576f6d20616d6f756e74006064820152fd5b6001600160a01b0380911690328203612d3c575050565b60fd54168015159182612dbd575b505015612d5357565b608460405162461bcd60e51b815260206004820152602560248201527f536d61727420636f6e7472616374206465706f7369746f7273206e6f7420616c60448201527f6c6f7765640000000000000000000000000000000000000000000000000000006064820152fd5b60209192506024604051809481937fc23697a800000000000000000000000000000000000000000000000000000000835260048301525afa908115612e2b575b600091612e0d575b503880612d4a565b612e25915060203d8111610e0557610df681836119fe565b38612e05565b612e33612a24565b612dfd565b612e4181612ec3565b6001600160a01b038060fc5416803b1561000e576000928360449260405196879586947f4f00a93e00000000000000000000000000000000000000000000000000000000865216600485015260248401525af18015612eb6575b612ea25750565b67ffffffffffffffff81116119b857604052565b612ebe612a24565b612e9b565b6001600160a01b031660005260c960205260406000205461010060205260406000205411612eed57565b606460405162461bcd60e51b815260206004820152601660248201527f5665576f6d3a206e6f7420656e6f75676820766f7465000000000000000000006044820152fd5b600160ff1b8114612f43575b60000390565b612f4b612138565b612f3d565b7ffffffffffffffffffffffffffffffffffffffffffffffffc87d2531627000000907f800000000000000000000000000000000000000000000003782dace9d900000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e000000907f800000000000000000000000000000000000000000000006f05b59d3b200000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffffffffffffffff5287143a539e000000907f8000000000000000000000000000000000000000000000ad78ebc5ac6200000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf000000907f800000000000000000000000000000000000000000000056bc75e2d63100000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e7800000907f80000000000000000000000000000000000000000000002b5e3af16b1880000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c00000907f800000000000000000000000000000000000000000000015af1d78b58c40000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffff5287143a539e00000907f80000000000000000000000000000000000000000000000ad78ebc5ac620000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cf00000907f8000000000000000000000000000000000000000000000056bc75e2d6310000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffffd4a1c50e94e780000907f800000000000000000000000000000000000000000000002b5e3af16b188000081126001166121e4570190565b7ffffffffffffffffffffffffffffffffffffffffffffffffea50e2874a73c0000907f8000000000000000000000000000000000000000000000015af1d78b58c4000081126001166121e4570190565b7fffffffffffffffffffffffffffffffffff3f68318436f8ea4cb460f000000000907f8000000000000000000000000000000000c097ce7bc90715b34b9f100000000081126001166121e4570190565b7f7ffffffffffffffffffffffffffffffffffffffffffffffa9438a1d29cefffff81136001166132f9575b68056bc75e2d631000000190565b613301612138565b6132eb565b60008112906803782dace9d900000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613355575b81600160ff1b038312166121e4570190565b61335d612138565b613343565b600081129068ad78ebc5ac6200000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906856bc75e2d63100000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b6000811290682b5e3af16b1880000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906815af1d78b58c40000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b6000811290680ad78ebc5ac620000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b600081129068056bc75e2d6310000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906802b5e3af16b188000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b600081129068015af1d78b58c4000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b600081129067ad78ebc5ac62000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906756bc75e2d631000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112906ec097ce7bc90715b34b9f100000000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383138115166133555781600160ff1b038312166121e4570190565b60649060017f0147ae147ae147ae147ae147ae147ae147ae147ae147ae147ae147ae147ae1478211600083131616613774575b60017ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb98212600083121616613768570290565b613770612138565b0290565b61377c612138565b613735565b6b02df0ab5a80a22c61ab5a700906001742c946c2bbca77c51fd5dbb9b6b977eb57ae2a4810282116000831316166137e7575b60017fffffffffffffffffffffffd36b93d4435883ae02a244649468814a851d5b7efe8212600083121616613768570290565b6137ef612138565b6137b4565b693f1fce3da636ea5cf8509060017602071a702111fbea2c24c1f0a7775c81684ed1aa2d0030821160008313161661385a575b60017ffffffffffffffffffffdf8e58fdeee0415d3db3e0f5888a37e97b12e55d2ffd08212600083121616613768570290565b613862612138565b613827565b690127fa27722cc06cc5e2906001766eb614127829fdc13a3ecbf3403f628ab3ac34d34e0c8182116000831316166138cd575b60017fffffffffffffffffff9149ebed87d6023ec5c1340cbfc09d754c53cb2cb1f37f8212600083121616613768570290565b6138d5612138565b61389a565b68280e60114edb805d039060017703320d351227ed0e191fe0057d88b3d353d790bc64ae52838211600083131616613940575b60017ffffffffffffffffffccdf2caedd812f1e6e01ffa82774c2cac286f439b51ad7d8212600083121616613768570290565b613948612138565b61390d565b680ebc5fb417461211109060017708afb1dcc10223b496190e5924ceb5c883d30f51acd9577e82116000831316166139b3575b60017ffffffffffffffffff7504e233efddc4b69e6f1a6db314a377c2cf0ae5326a8828212600083121616613768570290565b6139bb612138565b613980565b6808f00f760a4b2db55d906001770e5240bc6352d0b85e32903aa78bdb23e04ceb6de5bc9d7f8211600083131616613a26575b60017ffffffffffffffffff1adbf439cad2f47a1cd6fc5587424dc1fb314921a4362818212600083121616613768570290565b613a2e612138565b6139f3565b6806f5f17757889379379060017712638fd7097e98a815affbc7cb0eb130448889a9ffa568b28211600083131616613a99575b60017fffffffffffffffffed9c7028f6816757ea50043834f14ecfbb777656005a974e8212600083121616613768570290565b613aa1612138565b613a66565b68056bc75e2d6310000090600177179ca10c9242235d511e976394d79eb08303d500b3eeca658211600083131616613b0c575b60017fffffffffffffffffe8635ef36dbddca2aee1689c6b28614f7cfc2aff4c11359b8212600083121616613768570290565b613b14612138565b613ad9565b60017f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211600083131616613b8c575b60017fc0000000000000000000000000000000000000000000000000000000000000008212600083121616613b7f575b60011b90565b613b87612138565b613b79565b613b94612138565b613b49565b6ec097ce7bc90715b34b9f100000000090600170aa242499697392d2dde50bd1d5d0b9e9ea8211600083131616613bfe575b60017fffffffffffffffffffffffffffffff55dbdb66968c6d2d221af42e2a2f4616168212600083121616613768570290565b613c06612138565b613bcb565b6706f05b59d3b200009060017812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218211600083131616613c71575b60017fffffffffffffffed8da22e2dbc545f18a019ba33b78c0619a50197736d71e0df8212600083121616613768570290565b613c79612138565b613c3e565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818104851183851616613d0a575b6000821292600160ff1b94848787058512911616613cfd575b82600087129505861290851616613cf0575b058312911616613768570290565b613cf8612138565b613ce2565b613d05612138565b613cd0565b613d12612138565b613cb7565b8015613d31576ec097ce7bc90715b34b9f10000000000590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8115613d31576000198214600160ff1b821416613d7b570590565b613d83612138565b0590565b8015613ea957600160ff1b811015613e6b57670de0b6b3a7640000613e2e9180670c7d713b49da00001280613e5a575b15613e4457613dc8613df5916147a3565b613def613de184613dda818505613c0b565b9307613c0b565b670de0b6b3a7640000900590565b906136c0565b05807ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc0000131580613e31575b613e2990613eaf565b613f39565b90565b5068070c1cc73b00c80000811315613e20565b613e50613e559161436a565b613c0b565b613df5565b50670f43fc2c04ee00008112613db7565b62461bcd60e51b600052602060045260076024527f42414c233030360000000000000000000000000000000000000000000000000060445260646000fd5b50600090565b15613eb657565b62461bcd60e51b600052602060045260076024527f42414c233030380000000000000000000000000000000000000000000000000060445260646000fd5b15613efb57565b62461bcd60e51b600052602060045260076024527f42414c233030390000000000000000000000000000000000000000000000000060445260646000fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc000081121580614357575b613f6c90613ef4565b60008112614342576806f05b59d3b2000000811261430857613f8d90612fa0565b613faf770195e54c5dd42177f53a27172fa9ec63026282700000000091613702565b8068056bc75e2d631000009168ad78ebc5ac620000008112156142e5575b506856bc75e2d6310000008112156142ca575b682b5e3af16b188000008112156142af575b6815af1d78b58c400000811215614294575b680ad78ebc5ac6200000811215614279575b68056bc75e2d6310000081121561425e575b6802b5e3af16b1880000811215614243575b68015af1d78b58c40000811215614219575b80808080808080808061405e816132c0565b6140688280613c7e565b68056bc75e2d631000009005600290059081614083916136c0565b9161408d91613c7e565b68056bc75e2d6310000090056003900590816140a8916136c0565b916140b291613c7e565b68056bc75e2d6310000090056004900590816140cd916136c0565b916140d791613c7e565b68056bc75e2d6310000090056005900590816140f2916136c0565b916140fc91613c7e565b68056bc75e2d631000009005600690059081614117916136c0565b9161412191613c7e565b68056bc75e2d63100000900560079005908161413c916136c0565b9161414691613c7e565b68056bc75e2d631000009005600890059081614161916136c0565b9161416b91613c7e565b68056bc75e2d631000009005600990059081614186916136c0565b9161419091613c7e565b68056bc75e2d631000009005600a900590816141ab916136c0565b916141b591613c7e565b68056bc75e2d631000009005600b900590816141d0916136c0565b916141da91613c7e565b68056bc75e2d631000009005600c90056141f3916136c0565b6141fc91613c7e565b68056bc75e2d6310000090059061421291613c7e565b6064900590565b61422e61422861423d92613220565b92613a33565b68056bc75e2d63100000900590565b9061404c565b61422e614252614258926131d0565b926139c0565b9061403a565b61422e61426d61427392613180565b9261394d565b90614028565b61422e61428861428e92613130565b926138da565b90614016565b61422e6142a36142a9926130e0565b92613867565b90614004565b61422e6142be6142c492613090565b926137f4565b90613ff2565b61422e6142d96142df92613040565b92613781565b90613fe0565b90506142f19150612ff0565b6e01855144814a7ff805980ff00840009038613fcd565b6803782dace9d900000081126143375761432190612f50565b613faf6b1425982cf597cd205cef738091613702565b613faf600191613702565b613e2961434e91612f31565b613e2e90613d17565b5068070c1cc73b00c80000811315613f63565b670de0b6b3a7640000811261478957614212613e2e9160007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c000000000000082121561475e575b73011798004d755d3c8bc8e03204cf44619e00000082121561473b575b6143d090613702565b6143da8192613702565b90816e01855144814a7ff805980ff00840008112156146dc575b50506145586005613def61455161422e61452961454b61454061422e6144de8a6b02df0ab5a80a22c61ab5a700613def9c12156146af575b693f1fce3da636ea5cf850811215614684575b690127fa27722cc06cc5e2811215614659575b68280e60114edb805d0381121561462f575b680ebc5fb41746121110811215614605575b6808f00f760a4b2db55d8112156145db575b6806f5f17757889379378112156145b1575b6806248f33704b286603811215614587575b6805c548670b9510e7ac81121561455d575b6144d86144d26144cd83613180565b613aa6565b916134e8565b90613d60565b61453a61452f61422e6144f461422e8580613c7e565b80988561452061422e8461451a61450f61422e83809d613c7e565b9460038605906136c0565b93613c7e565b9e8f05906136c0565b9c613c7e565b9960078b05906136c0565b98613c7e565b9560098705906136c0565b94613c7e565b600b900590565b613b19565b61457b61456c61458192613aa6565b6805c548670b9510e7ac900590565b9c61361f565b9b6144be565b6145a56145966145ab92613aa6565b6806248f33704b286603900590565b9c6135d2565b9b6144ac565b6145cf6145c06145d592613aa6565b6806f5f1775788937937900590565b9c613584565b9b61449a565b6145f96145ea6145ff92613aa6565b6808f00f760a4b2db55d900590565b9c613536565b9b614488565b61462361461461462992613aa6565b680ebc5fb41746121110900590565b9c6134e8565b9b614476565b61464d61463e61465392613aa6565b68280e60114edb805d03900590565b9c61349a565b9b614464565b61467861466861467e92613aa6565b690127fa27722cc06cc5e2900590565b9c61344c565b9b614452565b6146a36146936146a992613aa6565b693f1fce3da636ea5cf850900590565b9c6133fe565b9b61443f565b6146d06146be6146d692613aa6565b6b02df0ab5a80a22c61ab5a700900590565b9c6133b0565b9b61442c565b614558919350613def9250613def61455161422e61452961454b61454061422e6144de61472b61472561471060059b613aa6565b6e01855144814a7ff805980ff0084000900590565b9c613362565b9b9a5050505050505050506143f4565b906147576b1425982cf597cd205cef73806143d0920592613306565b90506143c7565b50770195e54c5dd42177f53a27172fa9ec63026282700000000090056806f05b59d3b20000006143aa565b61479561479a91613d17565b61436a565b613e2e90612f31565b670de0b6b3a76400009060017809392ee8e921d5d073aff322e62439fcf32d7f344649470f908211600083131616614989575b60017ffffffffffffffff6c6d11716de2a2f8c500cdd19dbc6030cd280cbb9b6b8f070821260008312161661497c575b0261481081613270565b61481990613b99565b906148239061366c565b61482c91613d60565b6148368180613c7e565b6ec097ce7bc90715b34b9f100000000090058080808085614858828098613c7e565b6ec097ce7bc90715b34b9f100000000090059060038205614878916136c0565b9161488291613c7e565b6ec097ce7bc90715b34b9f1000000000900590600582056148a2916136c0565b916148ac91613c7e565b6ec097ce7bc90715b34b9f1000000000900590600782056148cc916136c0565b916148d691613c7e565b6ec097ce7bc90715b34b9f1000000000900590600982056148f6916136c0565b9161490091613c7e565b6ec097ce7bc90715b34b9f1000000000900590600b8205614920916136c0565b9161492a91613c7e565b6ec097ce7bc90715b34b9f1000000000900590600d820561494a916136c0565b9161495491613c7e565b6ec097ce7bc90715b34b9f10000000009005600f9005614973916136c0565b613e2e90613b19565b614984612138565b614806565b614991612138565b6147d656fea264697066735822122048867a64c353dc4428e9013b4bcf4da5e39670bddb124156446f78f3210513a864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "explicity override multiple inheritance"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "isUser(address)": {
        "params": {
          "_addr": "the user address to check"
        },
        "returns": {
          "_0": "true if the user has wom in stake, false otherwise"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMasterWombat(address)": {
        "params": {
          "_masterWombat": "the new masterWombat address"
        }
      },
      "setVoter(address)": {
        "params": {
          "_voter": "the new NFT contract address"
        }
      },
      "setWhitelist(address)": {
        "params": {
          "_whitelist": "the new whitelist address"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "explicity override multiple inheritance"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "update(uint256,uint256)": {
        "params": {
          "lockDays": "the new lock days (it should be larger than original lock days)",
          "slot": "the veWOM slot"
        }
      }
    },
    "stateVariables": {
      "whitelist": {
        "details": "contract addresses are by default unable to stake wom, they must be previously whitelisted to stake wom"
      }
    },
    "title": "VeWom",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUserInfo(address)": {
        "notice": "return the user info"
      },
      "getUserOverview(address)": {
        "notice": "return the amount of Wom locked and veWOM acquired by a user"
      },
      "isUser(address)": {
        "notice": "checks wether user _addr has wom staked"
      },
      "masterWombat()": {
        "notice": "the masterWombat contract"
      },
      "mint(uint256,uint256)": {
        "notice": "lock WOM into contract and mint veWOM"
      },
      "setMasterWombat(address)": {
        "notice": "sets masterWombat address"
      },
      "setVoter(address)": {
        "notice": "sets voter contract address"
      },
      "setWhitelist(address)": {
        "notice": "sets whitelist address"
      },
      "update(uint256,uint256)": {
        "notice": "update the WOM lock days such that the end date is `now` + `lockDays`"
      },
      "usedVote(address)": {
        "notice": "amount of vote used currently for each user"
      },
      "voter()": {
        "notice": "Address of the Voter contract"
      },
      "whitelist()": {
        "notice": "whitelist wallet checker"
      },
      "wom()": {
        "notice": "the wom token"
      }
    },
    "notice": "Wombat Waddle: the staking contract for WOM, as well as the token used for governance. Note Waddling does not seem to slow the Wombat, it only makes it sturdier. Note that it's ownable and the owner wields tremendous power. The ownership will be transferred to a governance smart contract once Wombat is sufficiently distributed and the community can show to govern itself.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16004,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16010,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_allowances",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16012,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 16014,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 16016,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "_symbol",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 16255,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 16306,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "wom",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IERC20)1420"
      },
      {
        "astId": 16310,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "masterWombat",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IMasterWombat)19297"
      },
      {
        "astId": 16314,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "whitelist",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IWhitelist)19681"
      },
      {
        "astId": 16316,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "maxBreedingLength",
        "offset": 20,
        "slot": "253",
        "type": "t_uint32"
      },
      {
        "astId": 16318,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "minLockDays",
        "offset": 24,
        "slot": "253",
        "type": "t_uint32"
      },
      {
        "astId": 16320,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "maxLockDays",
        "offset": 28,
        "slot": "253",
        "type": "t_uint32"
      },
      {
        "astId": 16326,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "users",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_struct(UserInfo)19601_storage)"
      },
      {
        "astId": 16329,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "voter",
        "offset": 0,
        "slot": "255",
        "type": "t_address"
      },
      {
        "astId": 16334,
        "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
        "label": "usedVote",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Breeding)19592_storage)dyn_storage": {
        "base": "t_struct(Breeding)19592_storage",
        "encoding": "dynamic_array",
        "label": "struct IVeWom.Breeding[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1420": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterWombat)19297": {
        "encoding": "inplace",
        "label": "contract IMasterWombat",
        "numberOfBytes": "20"
      },
      "t_contract(IWhitelist)19681": {
        "encoding": "inplace",
        "label": "contract IWhitelist",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)19601_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IVeWom.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)19601_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Breeding)19592_storage": {
        "encoding": "inplace",
        "label": "struct IVeWom.Breeding",
        "members": [
          {
            "astId": 19587,
            "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
            "label": "unlockTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 19589,
            "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
            "label": "womAmount",
            "offset": 6,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 19591,
            "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
            "label": "veWomAmount",
            "offset": 19,
            "slot": "0",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)19601_storage": {
        "encoding": "inplace",
        "label": "struct IVeWom.UserInfo",
        "members": [
          {
            "astId": 19596,
            "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
            "label": "reserved",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)10_storage"
          },
          {
            "astId": 19600,
            "contract": "contracts/wombat-governance/VeWom.sol:VeWom",
            "label": "breedings",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_struct(Breeding)19592_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}