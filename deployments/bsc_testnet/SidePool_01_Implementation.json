{
  "address": "0x2D97CE403D00f0e42Dc8eCD20F5c91e602c09cd5",
  "abi": [
    {
      "inputs": [],
      "name": "CORE_UNDERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_AMOUNT_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_SAME_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetAmpFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpDividendRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retentionRatio",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetHaircutRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetMasterWombat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetMintFeeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferTipBucket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnpausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addressOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ampFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantInUint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDividendRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "pauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAmpFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev_",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpDividendRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterWombat_",
          "type": "address"
        }
      ],
      "name": "setMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFeeThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setMintFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tipBucketBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferTipBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unpauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32b150e94125dc5e4cbe0a4bbda5edc795944fb555ce32058699a3f1de141c8f",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0x2D97CE403D00f0e42Dc8eCD20F5c91e602c09cd5",
    "transactionIndex": 1,
    "gasUsed": "4717342",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4d9562dfd08f586a1c8045ea8d23c75ce72a478bf253579530607d5ad9b454b6",
    "transactionHash": "0x32b150e94125dc5e4cbe0a4bbda5edc795944fb555ce32058699a3f1de141c8f",
    "logs": [],
    "blockNumber": 21303650,
    "cumulativeGasUsed": "4742366",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "dd9f272e3dad78df367a50e188c6ba45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CORE_UNDERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_AMOUNT_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_SAME_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetAmpFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpDividendRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retentionRatio\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHaircutRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMasterWombat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMintFeeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferTipBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addressOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantInUint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"}],\"name\":\"setAmpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterWombat_\",\"type\":\"address\"}],\"name\":\"setMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeThreshold_\",\"type\":\"uint256\"}],\"name\":\"setMintFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tipBucketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTipBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unpauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The main entry-point of Wombat protocol Note: All variables are 18 decimals, except from that of underlying tokens\",\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"addressOfAsset(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"details\":\"Asset needs to be created and added to pool before any operation. This function assumes tax free token.\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"exchangeRate(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"xr\":\"The exchange rate of LP token\"}},\"mintFee(address)\":{\"params\":{\"token\":\"The address of the token to collect fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"pauseAsset(address)\":{\"details\":\"pause asset, restricting deposit and swap operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quotePotentialDeposit(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"amount\":\"The amount to deposit\",\"token\":\"The token to deposit by user\"},\"returns\":{\"liquidity\":\"The potential liquidity user would receive\",\"reward\":\"reward\"}},\"quotePotentialSwap(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromAmount\":\"The amount to quote\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"fee\":\"The fee that would be applied\"}},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity (amount of the lp assets) to be withdrawn\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"withdrewAmount\":\"The amount of the from-token that is withdrew\"}},\"removeAsset(address)\":{\"details\":\"Can only be called by owner\",\"params\":{\"token\":\"The address of token to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAmpFactor(uint256)\":{\"params\":{\"ampFactor_\":\"new pool's amplification factor\"}},\"setDev(address)\":{\"params\":{\"dev_\":\"new contract dev address\"}},\"setFeeTo(address)\":{\"params\":{\"feeTo_\":\"new fee beneficiary\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"details\":\"This function assumes tax free token.\",\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"unpauseAsset(address)\":{\"details\":\"unpause asset, enabling deposit and swap operations\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity to be withdrawn (in fromToken decimal)\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"toAmount\":\"The total amount withdrawn\"}}},\"title\":\"Pool\",\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"AssetRemoved(address,address)\":{\"notice\":\"An event thats emitted when asset is removed from Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"addressOfAsset(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"ampFactor()\":{\"notice\":\"Amplification factor\"},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"dev()\":{\"notice\":\"Dev address\"},\"exchangeRate(address)\":{\"notice\":\"Returns the exchange rate of the LP token\"},\"getTokens()\":{\"notice\":\"Return list of tokens in the pool\"},\"haircutRate()\":{\"notice\":\"Haircut rate\"},\"initialize(uint256,uint256)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpDividendRatio()\":{\"notice\":\"LP dividend ratio : the ratio of haircut that should distribute to LP\"},\"mintFee(address)\":{\"notice\":\"Send fee collected to the fee beneficiary\"},\"mintFeeThreshold()\":{\"notice\":\"The threshold to mint fee (unit: WAD)\"},\"quotePotentialDeposit(address,uint256)\":{\"notice\":\"Quotes potential deposit from pool\"},\"quotePotentialSwap(address,address,int256)\":{\"notice\":\"Quotes potential outcome of a swap given current state, taking in account slippage and haircut\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"notice\":\"Quotes potential withdrawal from other asset from the pool\"},\"removeAsset(address)\":{\"notice\":\"Removes asset from asset struct\"},\"retentionRatio()\":{\"notice\":\"Retention ratio: the ratio of haircut that should stay in the pool\"},\"setAmpFactor(uint256)\":{\"notice\":\"Changes the pools amplification factor. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setFeeTo(address)\":{\"notice\":\"Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setMintFeeThreshold(uint256)\":{\"notice\":\"Set min fee to mint\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Enables withdrawing liquidity from an asset using LP from a different asset\"}},\"notice\":\"Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc4fad3a1df63344db686f3764208f5e62592346ec3bc5a7fcb161f9d1b1e59b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf2611a58f79def15405a1144303fbdcdbac177d3a2b291baec538fc4d04a5c09\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10**(18 - d);\\n        } else if (d > 18) {\\n            return (x / (10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * 10**(d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xf1ea82815cfaf6646386567a515dbe20763438ce18ccc2e7d165242d75646503\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10**18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10**(18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10**(d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10**(18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10**(d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x779eb90c3ebaa99535702d097e2108e09116a242a8ad00b7bdf86411386e13d4\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV2\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n */\\ncontract CoreV2 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n    int256 internal constant WAD_I = 10**18;\\n    uint256 internal constant WAD = 10**18;\\n\\n    error CORE_UNDERFLOW();\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function _swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) internal pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        if (Dy < 0) {\\n            quote = uint256(-Dy);\\n        } else {\\n            quote = uint256(Dy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(\\n        int256 Lx,\\n        int256 rx,\\n        int256 Ly,\\n        int256 ry,\\n        int256 A\\n    ) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(\\n        int256 Lx,\\n        int256 Ly,\\n        int256 rx_,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256) {\\n        return Lx.wmul(rx_ - A.wdiv(rx_)).wdiv(Ly) - D.wdiv(Ly);\\n    }\\n\\n    /**\\n     * @return v positive value indicates a reward and negative value indicates a fee\\n     */\\n    function depositRewardImpl(\\n        int256 D,\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 v) {\\n        if (L_i == 0) {\\n            // early return in case of div of 0\\n            return 0;\\n        }\\n        if (delta_i + SL == 0) {\\n            return L_i - A_i;\\n        }\\n\\n        int256 r_i_ = _targetedCovRatio(SL, delta_i, A_i, L_i, D, A);\\n        v = A_i + delta_i - (L_i + delta_i).wmul(r_i_);\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) internal pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = _equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _equilCovRatio(\\n        int256 D,\\n        int256 SL,\\n        int256 A\\n    ) internal pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    function _newEquilCovRatio(\\n        int256 er,\\n        int256 SL,\\n        int256 delta_i\\n    ) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(\\n        int256 er_,\\n        int256 A,\\n        int256 SL,\\n        int256 delta_i\\n    ) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice TODO (if any) from Yellow Paper (Haircut).\\n     * @dev Applies haircut rate to amount\\n     * @param amount The amount that will receive the discount\\n     * @param rate The rate to be applied\\n     * @return The result of operation.\\n     */\\n    function _haircut(uint256 amount, uint256 rate) internal pure returns (uint256) {\\n        return amount.wmul(rate);\\n    }\\n}\\n\",\"keccak256\":\"0xc5d08951cf3c33d7e7604db9bc43ae488e0bbacd85e8be1bb253b185bddcf662\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PausableAssets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\n/**\\n * @title PausableAssets\\n * @notice Handles assets pause and unpause of Wombat protocol.\\n * @dev Allows pausing and unpausing of deposit and swap operations\\n */\\ncontract PausableAssets {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event PausedAsset(address asset, address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event UnpausedAsset(address asset, address account);\\n\\n    mapping(address => bool) private _pausedAssets;\\n\\n    error WOMBAT_ASSET_ALREADY_PAUSED();\\n    error WOMBAT_ASSET_NOT_PAUSED();\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function requireAssetNotPaused(address asset) internal view {\\n        if (_pausedAssets[asset]) revert WOMBAT_ASSET_ALREADY_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function requireAssetPaused(address asset) internal view {\\n        if (!_pausedAssets[asset]) revert WOMBAT_ASSET_NOT_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Triggers paused state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function _pauseAsset(address asset) internal {\\n        requireAssetNotPaused(asset);\\n        _pausedAssets[asset] = true;\\n        emit PausedAsset(asset, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function _unpauseAsset(address asset) internal {\\n        requireAssetPaused(asset);\\n        _pausedAssets[asset] = false;\\n        emit UnpausedAsset(asset, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe12faf6a6814fa9734798b98dc025a0e2b17c2a16a0de3d4e6a0a733ccbcd7a6\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './CoreV2.sol';\\nimport '../interfaces/IAsset.sol';\\nimport './PausableAssets.sol';\\nimport '../../wombat-governance/interfaces/IMasterWombat.sol';\\n\\n/**\\n * @title Pool\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n * Note: All variables are 18 decimals, except from that of underlying tokens\\n */\\ncontract Pool is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PausableAssets,\\n    CoreV2\\n{\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n\\n    /// @notice Asset Map struct holds assets\\n    struct AssetMap {\\n        address[] keys;\\n        mapping(address => IAsset) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    /* Storage */\\n\\n    /// @notice Amplification factor\\n    uint256 public ampFactor;\\n\\n    /// @notice Haircut rate\\n    uint256 public haircutRate;\\n\\n    /// @notice Retention ratio: the ratio of haircut that should stay in the pool\\n    uint256 public retentionRatio;\\n\\n    /// @notice LP dividend ratio : the ratio of haircut that should distribute to LP\\n    uint256 public lpDividendRatio;\\n\\n    /// @notice The threshold to mint fee (unit: WAD)\\n    uint256 public mintFeeThreshold;\\n\\n    /// @notice Dev address\\n    address public dev;\\n\\n    address public feeTo;\\n\\n    address public masterWombat;\\n\\n    /// @notice Dividend collected by each asset (unit: WAD)\\n    mapping(IAsset => uint256) private _feeCollected;\\n\\n    /// @notice A record of assets inside Pool\\n    AssetMap private _assets;\\n\\n    /* Events */\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when asset is removed from Pool\\n    event AssetRemoved(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    event SetDev(address addr);\\n    event SetMasterWombat(address addr);\\n    event SetFeeTo(address addr);\\n\\n    event SetMintFeeThreshold(uint256 value);\\n    event SetFee(uint256 lpDividendRatio, uint256 retentionRatio);\\n    event SetAmpFactor(uint256 value);\\n    event SetHaircutRate(uint256 value);\\n\\n    event FillPool(address token, uint256 amount);\\n    event TransferTipBucket(address token, uint256 amount, address to);\\n\\n    /* Errors */\\n\\n    error WOMBAT_FORBIDDEN();\\n    error WOMBAT_EXPIRED();\\n\\n    error WOMBAT_ASSET_NOT_EXISTS();\\n    error WOMBAT_ASSET_ALREADY_EXIST();\\n\\n    error WOMBAT_ZERO_ADDRESS();\\n    error WOMBAT_ZERO_AMOUNT();\\n    error WOMBAT_ZERO_LIQUIDITY();\\n    error WOMBAT_INVALID_VALUE();\\n    error WOMBAT_SAME_ADDRESS();\\n    error WOMBAT_AMOUNT_TOO_LOW();\\n    error WOMBAT_CASH_NOT_ENOUGH();\\n\\n    /* Pesudo modifiers to safe gas */\\n\\n    function _checkLiquidity(uint256 liquidity) private pure {\\n        if (liquidity == 0) revert WOMBAT_ZERO_LIQUIDITY();\\n    }\\n\\n    function _checkAddress(address to) private pure {\\n        if (to == address(0)) revert WOMBAT_ZERO_ADDRESS();\\n    }\\n\\n    function _checkSameAddress(address from, address to) private pure {\\n        if (from == to) revert WOMBAT_SAME_ADDRESS();\\n    }\\n\\n    function _checkAmount(uint256 minAmt, uint256 amt) private pure {\\n        if (minAmt > amt) revert WOMBAT_AMOUNT_TOO_LOW();\\n    }\\n\\n    function _ensure(uint256 deadline) private view {\\n        if (deadline < block.timestamp) revert WOMBAT_EXPIRED();\\n    }\\n\\n    function _onlyDev() private view {\\n        if (dev != msg.sender) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /* Construtor and setters */\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public virtual initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        ampFactor = ampFactor_;\\n        haircutRate = haircutRate_;\\n\\n        lpDividendRatio = WAD;\\n\\n        dev = msg.sender;\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external nonReentrant {\\n        _onlyDev();\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external nonReentrant {\\n        _onlyDev();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev pause asset, restricting deposit and swap operations\\n     */\\n    function pauseAsset(address token) external nonReentrant {\\n        _onlyDev();\\n        _pauseAsset(token);\\n    }\\n\\n    /**\\n     * @dev unpause asset, enabling deposit and swap operations\\n     */\\n    function unpauseAsset(address token) external nonReentrant {\\n        _onlyDev();\\n        _unpauseAsset(token);\\n    }\\n\\n    // Setters //\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev_ new contract dev address\\n     */\\n    function setDev(address dev_) external onlyOwner {\\n        _checkAddress(dev_);\\n        dev = dev_;\\n        emit SetDev(dev_);\\n    }\\n\\n    function setMasterWombat(address masterWombat_) external onlyOwner {\\n        _checkAddress(masterWombat_);\\n        masterWombat = masterWombat_;\\n        emit SetMasterWombat(masterWombat_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools amplification factor. Can only be set by the contract owner.\\n     * @param ampFactor_ new pool's amplification factor\\n     */\\n    function setAmpFactor(uint256 ampFactor_) external onlyOwner {\\n        if (ampFactor_ > WAD) revert WOMBAT_INVALID_VALUE(); // ampFactor_ should not be set bigger than 1\\n        ampFactor = ampFactor_;\\n        emit SetAmpFactor(ampFactor_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        if (haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE(); // haircutRate_ should not be set bigger than 1\\n        haircutRate = haircutRate_;\\n        emit SetHaircutRate(haircutRate_);\\n    }\\n\\n    function setFee(uint256 lpDividendRatio_, uint256 retentionRatio_) external onlyOwner {\\n        if (retentionRatio_ + lpDividendRatio_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        mintAllFee();\\n        retentionRatio = retentionRatio_;\\n        lpDividendRatio = lpDividendRatio_;\\n        emit SetFee(lpDividendRatio_, retentionRatio_);\\n    }\\n\\n    /**\\n     * @notice Changes the fee beneficiary. Can only be set by the contract owner.\\n     * This value cannot be set to 0 to avoid unsettled fee.\\n     * @param feeTo_ new fee beneficiary\\n     */\\n    function setFeeTo(address feeTo_) external onlyOwner {\\n        _checkAddress(feeTo_);\\n        feeTo = feeTo_;\\n        emit SetFeeTo(feeTo_);\\n    }\\n\\n    /**\\n     * @notice Set min fee to mint\\n     */\\n    function setMintFeeThreshold(uint256 mintFeeThreshold_) external onlyOwner {\\n        mintFeeThreshold = mintFeeThreshold_;\\n        emit SetMintFeeThreshold(mintFeeThreshold_);\\n    }\\n\\n    /* Assets */\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner nonReentrant {\\n        _checkAddress(asset);\\n        _checkAddress(token);\\n\\n        if (_containsAsset(token)) revert WOMBAT_ASSET_ALREADY_EXIST();\\n        _assets.values[token] = IAsset(asset);\\n        _assets.indexOf[token] = _assets.keys.length;\\n        _assets.keys.push(token);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Removes asset from asset struct\\n     * @dev Can only be called by owner\\n     * @param token The address of token to remove\\n     */\\n    function removeAsset(address token) external onlyOwner {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n\\n        address asset = address(_getAsset(token));\\n        delete _assets.values[token];\\n\\n        uint256 index = _assets.indexOf[token];\\n        uint256 lastIndex = _assets.keys.length - 1;\\n        address lastKey = _assets.keys[lastIndex];\\n\\n        _assets.indexOf[lastKey] = index;\\n        delete _assets.indexOf[token];\\n\\n        _assets.keys[index] = lastKey;\\n        _assets.keys.pop();\\n\\n        emit AssetRemoved(token, asset);\\n    }\\n\\n    /**\\n     * @notice Return list of tokens in the pool\\n     */\\n    function getTokens() external view returns (address[] memory) {\\n        return _assets.keys;\\n    }\\n\\n    /**\\n     * @notice get length of asset list\\n     * @return the size of the asset list\\n     */\\n    function _sizeOfAssetList() private view returns (uint256) {\\n        return _assets.keys.length;\\n    }\\n\\n    /**\\n     * @notice Gets asset with token address key\\n     * @param key The address of token\\n     * @return the corresponding asset in state\\n     */\\n    function _getAsset(address key) private view returns (IAsset) {\\n        return _assets.values[key];\\n    }\\n\\n    /**\\n     * @notice Gets key (address) at index\\n     * @param index the index\\n     * @return the key of index\\n     */\\n    function _getKeyAtIndex(uint256 index) private view returns (address) {\\n        return _assets.keys[index];\\n    }\\n\\n    /**\\n     * @notice Looks if the asset is contained by the list\\n     * @param token The address of token to look for\\n     * @return bool true if the asset is in asset list, false otherwise\\n     */\\n    function _containsAsset(address token) private view returns (bool) {\\n        return _assets.values[token] != IAsset(address(0));\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) internal view returns (IAsset) {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        return _assets.values[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function addressOfAsset(address token) external view returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function _exactDepositToInEquil(IAsset asset, uint256 amount)\\n        internal\\n        view\\n        returns (\\n            uint256 lpTokenToMint,\\n            uint256 liabilityToMint,\\n            uint256 reward\\n        )\\n    {\\n        liabilityToMint = exactDepositLiquidityInEquilImpl(\\n            int256(amount),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToMint >= amount) {\\n            reward = liabilityToMint - amount;\\n        } else {\\n            // rounding error\\n            liabilityToMint = amount;\\n        }\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        // collect fee before deposit\\n        _mintFee(asset);\\n\\n        uint256 liabilityToMint;\\n        (liquidity, liabilityToMint, ) = _exactDepositToInEquil(asset, amount);\\n\\n        _checkLiquidity(liquidity);\\n        _checkAmount(minimumLiquidity, liquidity);\\n\\n        asset.addCash(amount);\\n        asset.addLiability(liabilityToMint);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation. This function assumes tax free token.\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        if (amount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(token);\\n\\n        IAsset asset = _assetOf(token);\\n        IERC20(token).safeTransferFrom(address(msg.sender), address(asset), amount);\\n\\n        if (!shouldStake) {\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, to);\\n        } else {\\n            _checkAddress(masterWombat);\\n            // deposit and stake on behalf of the user\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, address(this));\\n\\n            asset.approve(masterWombat, liquidity);\\n\\n            uint256 pid = IMasterWombat(masterWombat).getAssetPid(address(asset));\\n            IMasterWombat(masterWombat).depositFor(pid, liquidity, to);\\n        }\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential deposit from pool\\n     * @dev To be used by frontend\\n     * @param token The token to deposit by user\\n     * @param amount The amount to deposit\\n     * @return liquidity The potential liquidity user would receive\\n     * @return reward\\n     */\\n    function quotePotentialDeposit(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256 liquidity, uint256 reward)\\n    {\\n        IAsset asset = _assetOf(token);\\n        (liquidity, , reward) = _exactDepositToInEquil(asset, amount.toWad(asset.underlyingTokenDecimals()));\\n    }\\n\\n    /* Withdraw */\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee\\n     */\\n    function _withdrawFrom(IAsset asset, uint256 liquidity)\\n        private\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 liabilityToBurn,\\n            uint256 fee\\n        )\\n    {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        _checkLiquidity(liabilityToBurn);\\n\\n        amount = withdrawalAmountInEquilImpl(\\n            -int256(liabilityToBurn),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToBurn >= amount) {\\n            fee = liabilityToBurn - amount;\\n        } else {\\n            // rounding error\\n            amount = liabilityToBurn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @return amount The total amount withdrawn\\n     */\\n    function _withdraw(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 minimumAmount\\n    ) private returns (uint256 amount) {\\n        // collect fee before withdraw\\n        _mintFee(asset);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, ) = _withdrawFrom(asset, liquidity);\\n        _checkAmount(minimumAmount, amount);\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount);\\n        asset.removeLiability(liabilityToBurn);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (asset.liability() > 0 && uint256(asset.cash()).wdiv(asset.liability()) < WAD / 100)\\n            revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        _checkAddress(to);\\n        _ensure(deadline);\\n\\n        IAsset asset = _assetOf(token);\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        amount = _withdraw(asset, liquidity, minimumAmount.toWad(decimals)).fromWad(decimals);\\n        asset.transferUnderlyingToken(to, amount);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Enables withdrawing liquidity from an asset using LP from a different asset\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity to be withdrawn (in fromToken decimal)\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return toAmount The total amount withdrawn\\n     */\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256 toAmount) {\\n        _checkAddress(to);\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        // Withdraw and swap\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        IERC20(fromAsset).safeTransferFrom(address(msg.sender), address(fromAsset), liquidity);\\n        uint256 fromAmountInWad = _withdraw(fromAsset, liquidity, 0);\\n        (toAmount, ) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmountInWad,\\n            minimumAmount.toWad(toAsset.underlyingTokenDecimals())\\n        );\\n\\n        toAmount = toAmount.fromWad(toAsset.underlyingTokenDecimals());\\n        toAsset.transferUnderlyingToken(to, toAmount);\\n\\n        emit Withdraw(msg.sender, toToken, toAmount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return fee The fee that would be applied\\n     */\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (uint256 amount, uint256 fee)\\n    {\\n        _checkLiquidity(liquidity);\\n        IAsset asset = _assetOf(token);\\n        (amount, , fee) = _withdrawFrom(asset, liquidity);\\n        amount = amount.fromWad(asset.underlyingTokenDecimals());\\n    }\\n\\n    function _quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) internal view returns (uint256 amount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        (withdrewAmount, , ) = _withdrawFrom(fromAsset, liquidity);\\n        amount = _swapQuoteFunc(\\n            int256(uint256(fromAsset.cash()) - withdrewAmount),\\n            int256(uint256(toAsset.cash())),\\n            int256(uint256(fromAsset.liability()) - liquidity),\\n            int256(uint256(toAsset.liability())),\\n            int256(withdrewAmount),\\n            int256(ampFactor)\\n        );\\n        amount = amount - amount.wmul(haircutRate);\\n        amount = amount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from other asset from the pool\\n     * @dev To be used by frontend\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity (amount of the lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return withdrewAmount The amount of the from-token that is withdrew\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual returns (uint256 amount, uint256 withdrewAmount) {\\n        (amount, withdrewAmount) = _quotePotentialWithdrawFromOtherAsset(fromToken, toToken, liquidity);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Swap */\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view virtual returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 idealToAmount;\\n        uint256 toCash = toAsset.cash();\\n\\n        idealToAmount = _swapQuoteFunc(\\n            int256(uint256(fromAsset.cash())),\\n            int256(toCash),\\n            int256(uint256(fromAsset.liability())),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            int256(ampFactor)\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert WOMBAT_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = (uint256(-fromAmount)).wmul(haircutRate);\\n        }\\n    }\\n\\n    /**\\n     * expect fromAmount and minimumToAmount to be in WAD\\n     */\\n    function _swap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = _quoteFrom(fromAsset, toAsset, int256(fromAmount));\\n        _checkAmount(minimumToAmount, actualToAmount);\\n\\n        _feeCollected[toAsset] += haircut;\\n\\n        fromAsset.addCash(fromAmount);\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        toAsset.removeCash(actualToAmount + haircut);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (uint256(toAsset.cash()).wdiv(toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @dev This function assumes tax free token.\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n\\n        (actualToAmount, haircut) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumToAmount.toWad(toDecimal)\\n        );\\n\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        haircut = haircut.fromWad(toDecimal);\\n\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential outcome of a swap given current state, taking in account slippage and haircut\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        fromAmount = fromAmount.toWad(fromAsset.underlyingTokenDecimals());\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        potentialOutcome = potentialOutcome.fromWad(toAsset.underlyingTokenDecimals());\\n        haircut = haircut.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Queries */\\n\\n    /**\\n     * @notice Returns the exchange rate of the LP token\\n     * @param token The address of the token\\n     * @return xr The exchange rate of LP token\\n     */\\n    function exchangeRate(address token) external view returns (uint256 xr) {\\n        IAsset asset = _assetOf(token);\\n        if (asset.totalSupply() == 0) return WAD;\\n        return xr = uint256(asset.liability()).wdiv(uint256(asset.totalSupply()));\\n    }\\n\\n    function globalEquilCovRatio() external view returns (uint256 equilCovRatio, uint256 invariantInUint) {\\n        int256 invariant;\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        equilCovRatio = uint256(_equilCovRatio(invariant, SL, int256(ampFactor)));\\n        invariantInUint = uint256(invariant);\\n    }\\n\\n    function tipBucketBalance(address token) external view returns (uint256 balance) {\\n        IAsset asset = _assetOf(token);\\n        return\\n            asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) - asset.cash() - _feeCollected[asset];\\n    }\\n\\n    /* Utils */\\n\\n    // this function is used to move fund from tip bucket to the pool to keep r* = 1 as error accumulates\\n    // unit of amount should be in WAD\\n    function fillPool(address token, uint256 amount) external {\\n        _onlyDev();\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n            asset.cash() -\\n            _feeCollected[asset];\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.addCash(amount);\\n        emit FillPool(token, amount);\\n    }\\n\\n    // unit of amount should be in WAD\\n    function transferTipBucket(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOwner {\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) -\\n            asset.cash() -\\n            _feeCollected[asset];\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.transferUnderlyingToken(to, amount.fromWad(asset.underlyingTokenDecimals()));\\n        emit TransferTipBucket(token, amount, to);\\n    }\\n\\n    function _globalInvariantFunc() internal view returns (int256 D, int256 SL) {\\n        int256 A = int256(ampFactor);\\n\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += L_i;\\n            D += L_i.wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to send fee collected to the fee beneficiary\\n     * @param asset The address of the asset to collect fee\\n     */\\n    function _mintFee(IAsset asset) private {\\n        uint256 feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0 || feeCollected < mintFeeThreshold) {\\n            // early return\\n            return;\\n        }\\n        {\\n            // dividend to veWOM\\n            uint256 dividend = feeCollected.wmul(WAD - lpDividendRatio - retentionRatio);\\n\\n            if (dividend > 0) {\\n                asset.transferUnderlyingToken(feeTo, dividend.fromWad(asset.underlyingTokenDecimals()));\\n            }\\n        }\\n        {\\n            // dividend to LP\\n            uint256 lpDividend = feeCollected.wmul(lpDividendRatio);\\n            if (lpDividend > 0) {\\n                // exact deposit to maintain r* = 1\\n                // increase the value of the LP token, i.e. assetsPerShare\\n                (, uint256 liabilityToMint, ) = _exactDepositToInEquil(asset, lpDividend);\\n                asset.addLiability(liabilityToMint);\\n                asset.addCash(lpDividend);\\n            }\\n        }\\n\\n        _feeCollected[asset] = 0;\\n    }\\n\\n    function mintAllFee() internal {\\n        for (uint256 i = 0; i < _sizeOfAssetList(); i++) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send fee collected to the fee beneficiary\\n     * @param token The address of the token to collect fee\\n     */\\n    function mintFee(address token) external {\\n        _mintFee(_assetOf(token));\\n    }\\n}\\n\",\"keccak256\":\"0xdc91ed28ae74e039b6d30950ced28e6495b33a6d36cc61688ff239a546805f9c\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256 transfered,\\n            uint256[] memory rewards,\\n            uint256[] memory additionalRewards\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x4ed8f1f02ce578468e115e03a4f3671d13a273cad6e373a45a18af6041096444\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576154f2908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c8063017b82921461035b578063017e7e58146103525780630705999d14610349578063070f81d91461034057806309a5fca3146103375780630f91f06f1461032e5780633753b14a146103255780633bd61ba81461031c5780633f4ba83a146103135780634a5e42b11461030a5780634fdd64e51461030157806352f7c988146102f85780635c975abb146102ef5780635cfe092e146102e657806361858e23146102dd5780636281baef146102d45780636922d5ca146102cb578063715018a6146102c2578063815bfd29146102b95780638456cb59146102b05780638a2dfe09146102a75780638da5cb5b1461029e578063907448ed1461029557806391cca3db1461028c57806393aeea02146102835780639908fc8b1461027a5780639abacb41146102715780639e4416b714610268578063a4275ceb1461025f578063aa6ca80814610256578063d043c5651461024d578063d0dd0e5614610244578063d30ffeda1461023b578063d477f05f14610232578063da48999714610229578063dc3b7c8b14610220578063e4a3011614610217578063e9249cc71461020e578063f2fde38b14610205578063f46901ed146101fc578063f57e84d5146101f35763f8b49e72146101eb57600080fd5b61000e612b0c565b5061000e612aa1565b5061000e612a0f565b5061000e61294a565b5061000e61291a565b5061000e6127ce565b5061000e6127a2565b5061000e61265c565b5061000e6125ca565b5061000e612482565b5061000e612463565b5061000e612408565b5061000e612340565b5061000e61206d565b5061000e612002565b5061000e611f25565b5061000e611ccc565b5061000e6119d9565b5061000e6119b1565b5061000e61191a565b5061000e6118f2565b5061000e61173a565b5061000e6116c1565b5061000e6116a2565b5061000e611623565b5061000e611604565b5061000e611216565b5061000e61116c565b5061000e61114d565b5061000e611129565b5061000e611021565b5061000e610ea6565b5061000e610ca9565b5061000e610bd4565b5061000e610bac565b5061000e610b06565b5061000e6109b1565b5061000e61076f565b5061000e6104a0565b5061000e61040e565b5061000e61038e565b5061000e61036f565b600091031261000e57565b503461000e57600060031936011261000e57602060ca54604051908152f35b503461000e57600060031936011261000e5760206001600160a01b0360d05416604051908152f35b600435906001600160a01b038216820361000e57565b606435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b503461000e57602060031936011261000e577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d602061044b6103b6565b6001600160a01b039061046382603354163314612b2c565b61046c81612e5a565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d154161760d155604051908152a1005b503461000e5760408060031936011261000e576104bb6103b6565b906024356104c7612dd2565b6104d083613195565b906105cd6001600160a01b038316926105c66105ac86517f99c91a640000000000000000000000000000000000000000000000000000000081526effffffffffffffffffffffffffffff6105656004838a818360209788935afa908115610762575b600091610735575b50848b8d51938480926339420b4560e11b82525afa918215610728575b6000926106f9575b506135f5565b9189517f961be39100000000000000000000000000000000000000000000000000000000815281816004818d5afa9182156106ec575b6000926106bf575b5050169061304a565b916001600160a01b031660005260d2602052604060002090565b549061304a565b811161069657813b1561000e576000937f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379285855180927f16c9e7a000000000000000000000000000000000000000000000000000000000825281838161063c89600483019190602083019252565b03925af18015610689575b610670575b5083516001600160a01b039091168152602081019190915280604081015b0390a151f35b8061067d610683926130fb565b80610364565b3861064c565b6106916131f3565b610647565b600483517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b6106de9250803d106106e5575b6106d68183613154565b81019061386c565b38806105a3565b503d6106cc565b6106f46131f3565b61059b565b61071a919250853d8711610721575b6107128183613154565b8101906131da565b903861055f565b503d610708565b6107306131f3565b610557565b6107559150853d871161075b575b61074d8183613154565b810190613218565b3861053a565b503d610743565b61076a6131f3565b610532565b503461000e5760a060031936011261000e576107896103b6565b602435906107956103cc565b916107a560026065541415612d08565b60026065556107b960ff6097541615612d6d565b6107c28161380a565b6107cb83612e5a565b6107d6608435613641565b6107df82613195565b916001600160a01b0392610840848216916107fc85843381613227565b604051906339420b4560e11b8252602082600481875afa91821561095b575b600092610937575b5061083b9086610835846044356135f5565b9161453a565b6141e2565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101869052610913967ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9939091906000908290604490829084905af1801561092a575b610917575b506108f66040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b0390a36109036001606555565b6040519081529081906020820190565b0390f35b8061067d610924926130fb565b386108c7565b6109326131f3565b6108c2565b61083b9192506109549060203d8111610721576107128183613154565b9190610823565b6109636131f3565b61081b565b60031960c091011261000e576001600160a01b03600435818116810361000e5791602435828116810361000e57916044359160643591608435908116810361000e579060a43590565b503461000e57610a1f610a116109c636610968565b6109dc6002606599959794989399541415612d08565b60026065556109f060ff6097541615612d6d565b6109f988612e5a565b610a028661380a565b610a0c8584614913565b613641565b610a1a81612e10565b613195565b610840610a2b83613195565b6001600160a01b0395610a42868886163381613227565b610a8e610a4f8786614218565b948884169560405194610a88866339420b4560e11b968782528a82600460209b8c935afa918215610af9575b600092610ae157506135f5565b92614b10565b50906040519081528281600481885afa928315610ad4575b600093610ab5575b50506141e2565b610acc929350803d10610721576107128183613154565b903880610aae565b610adc6131f3565b610aa6565b61071a919250893d8b11610721576107128183613154565b610b016131f3565b610a7b565b503461000e57602060031936011261000e577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e610ba2610b446103b6565b610b5360026065541415612d08565b6002606555610b60612dd2565b610b6981612e10565b6001600160a01b0316600081815260c96020908152604091829020805460ff191660011790558151928352339083015290918291820190565b0390a16001606555005b503461000e57600060031936011261000e5760206001600160a01b0360d15416604051908152f35b503461000e57600060031936011261000e57610bf560026065541415612d08565b6002606555610c02612dd2565b60975460ff811615610c4b5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1610c496001606555565b005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461000e57602060031936011261000e57610cc36103b6565b6001600160a01b03610cda81603354163314612b2c565b610d04610d00836001600160a01b0380911660005260d460205260406000205416151590565b1590565b610e7c5781610d47610d3b610d2e6000956001600160a01b031660005260d4602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b91610d90610d68836001600160a01b031660005260d4602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b610e46610db0836001600160a01b031660005260d5602052604060002090565b54610e21610ddd610dca610dc560d35461301a565b612f3c565b90546001600160a01b039160031b1c1690565b9180610dfc846001600160a01b031660005260d5602052604060002090565b5587610e1b876001600160a01b031660005260d5602052604060002090565b55612f3c565b90919082549060031b916001600160a01b039283811b93849216901b16911916179055565b610e4e613055565b80604051931691167f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8484a3f35b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b503461000e57606060031936011261000e57610ec06103b6565b610ec86103e2565b9060443590610ed78382614913565b8115610ff757610f8d91610ef6610ef0610f3a93613195565b94613195565b604051610f6a610f406339420b4560e11b978884528460209788956001600160a01b039887826004818d89165afa918215610fea575b600092610fcb575b50615040565b91614d5e565b9490931692604051908882528382600481885afa918215610fbe575b600092610f9f575b506141e2565b9560046040518094819382525afa928315610ad457600093610ab55750506141e2565b60408051928352602083019190915290f35b610fb7919250843d8611610721576107128183613154565b9038610f64565b610fc66131f3565b610f5c565b610fe3919250883d8a11610721576107128183613154565b9038610f34565b610ff26131f3565b610f2c565b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b503461000e57604060031936011261000e5760043560243561104f6001600160a01b03603354163314612b2c565b670de0b6b3a76400006110628383612ec4565b116110ff5760005b60d3548110156110b357806110a96110a46110876110ae94615202565b6001600160a01b0380911660005260d46020526040600020541690565b61524f565b6151f2565b61106a565b507f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5918160cc558060cd556110fa6040519283928360209093929193604081019481520152565b0390a1005b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b503461000e57600060031936011261000e57602060ff609754166040519015158152f35b503461000e57600060031936011261000e57602060ce54604051908152f35b503461000e57604060031936011261000e576111cd61118c610a1a6103b6565b6111c76040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156111ff575b6000916111e1575b506024356135f5565b90613893565b604080519384526020840191909152919050f35b6111f9915060203d8111610721576107128183613154565b386111be565b6112076131f3565b6111b6565b8015150361000e57565b503461000e5760c060031936011261000e576112306103b6565b6044359060243561123f6103cc565b9160a4359361124d8561120c565b61125c60026065541415612d08565b600260655561127060ff6097541615612d6d565b6000948315610ff75761128285612e5a565b61128d608435613641565b61129683612e10565b61129f83613195565b906001600160a01b0396878316916112bb8784338c8a16613227565b61137e5750857ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b93610913989361131d6004602061132396604051928380926339420b4560e11b82525afa908115611371575b600091611353575b50896135f5565b90613673565b945b6108f68660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b61136b915060203d8111610721576107128183613154565b38611316565b6113796131f3565b61130e565b96916113d7919361139f61139a60d1546001600160a01b031690565b612e5a565b6113d0604051996339420b4560e11b8b5260209a8b816004818b5afa9182156115f7575b916115da575b50886135f5565b3092613673565b9461143987876113ef60d1546001600160a01b031690565b60405193849283927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401602090939291936001600160a01b0360408201951681520152565b03816000885af180156115cd575b6115a0575b506114ac87611469610d3b610d3b60d1546001600160a01b031690565b6040517faf929a800000000000000000000000000000000000000000000000000000000081526001600160a01b0390961660048701529491829081906024820190565b0381875afa978815611593575b600098611574575b5050823b1561000e576040517f90210d7e0000000000000000000000000000000000000000000000000000000081526004810197909752602487018690526001600160a01b0381166044880152610913967ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b936000908290606490829084905af18015611567575b611554575b50611325565b8061067d611561926130fb565b3861154e565b61156f6131f3565b611549565b61158b929850803d1061075b5761074d8183613154565b9538806114c1565b61159b6131f3565b6114b9565b6115bf90883d8a116115c6575b6115b78183613154565b810190613200565b503861144c565b503d6115ad565b6115d56131f3565b611447565b6115f191508b3d8d11610721576107128183613154565b386113c9565b6115ff6131f3565b6113c3565b503461000e57600060031936011261000e57602060cc54604051908152f35b503461000e5760008060031936011261169f576033547fffffffffffffffffffffffff00000000000000000000000000000000000000006001600160a01b03821691611670338414612b2c565b1660335581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600060031936011261000e57602060cd54604051908152f35b503461000e57600060031936011261000e576116e260026065541415612d08565b60026065556116ef612dd2565b600160ff1960975461170460ff821615612d6d565b16176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a16001606555005b503461000e5760008060031936011261169f57808060ca54918060d354905b81831061178d578561177c8661177761177288856140fc565b613f38565b614a6e565b604080519182526020820192909252f35b90919461179f610d3b61108788615202565b6040908151917f961be39100000000000000000000000000000000000000000000000000000000835260209160049183858481855afa9485156118e5575b87956118c2575b5090839151928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa9182156118b5575b8592611898575b50506effffffffffffffffffffffffffffff80911691821561188b57826118726118618261185b61187e97611884999761187897166140fc565b9a613b88565b9861186c818c6140fc565b90613c5b565b9061411b565b90613b88565b956151f2565b9190611759565b50505094611884906151f2565b6118ae9250803d106106e5576106d68183613154565b3880611821565b6118bd6131f3565b61181a565b84929195506118dd90833d85116106e5576106d68183613154565b9490916117e4565b6118ed6131f3565b6117dd565b503461000e57600060031936011261000e5760206001600160a01b0360335416604051908152f35b503461000e57604060031936011261000e57602061177c6001600160a01b036119416103b6565b61195b61195460243592610a1a8461380a565b91826145fa565b95919290506004604051809581936339420b4560e11b8352165afa9182156119a4575b60009261198b57506141e2565b610fb791925060203d8111610721576107128183613154565b6119ac6131f3565b61197e565b503461000e57600060031936011261000e5760206001600160a01b0360cf5416604051908152f35b503461000e57606060031936011261000e576119f36103b6565b6024356119fe6103f8565b906001600160a01b0390611a1782603354163314612b2c565b611a2084613195565b9182169360409384517f99c91a640000000000000000000000000000000000000000000000000000000081528660209160049688888580858381895afa948515611cbf575b600095611c7f575b50916effffffffffffffffffffffffffffff6105ac926105c694611afb9798611ab885516339420b4560e11b9b8c825284828781875afa918215610728576000926106f957506135f5565b9451928380927f961be3910000000000000000000000000000000000000000000000000000000082525afa908115611c72575b600091611c55575b50169061304a565b8511611c2d5790611b2a918751908152818188818c5afa918215611c20575b600092611c03575b5050846141e2565b90863b1561000e57611baa600061066a93819984837f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda69a8c51968795869485937f9e79eaa50000000000000000000000000000000000000000000000000000000085528401602090939291936001600160a01b0360408201951681520152565b03925af18015611bf6575b611be3575b5085516001600160a01b0393841681526020810194909452909116604083015281906060820190565b8061067d611bf0926130fb565b38611bba565b611bfe6131f3565b611bb5565b611c199250803d10610721576107128183613154565b3880611b22565b611c286131f3565b611b1a565b8587517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b611c6c9150893d8b116106e5576106d68183613154565b38611af3565b611c7a6131f3565b611aeb565b611afb95506105ac9282611cb36effffffffffffffffffffffffffffff936105c697953d841161075b5761074d8183613154565b97509294509250611a6d565b611cc76131f3565b611a65565b503461000e57611cdb36610968565b611cef600260659794969597541415612d08565b6002606555611d0360ff6097541615612d6d565b611d0d8484614913565b8515610ff757611d2090610a0c83612e5a565b611d2982612e10565b611d3282613195565b94611d3c84613195565b916001600160a01b039182841693604051976339420b4560e11b808a528a60208b6004818b5afa9a8b15611f18575b60009b611ef1575b5084928b92888493169d8e916040518093819282525a92600491602094fa92831597610a88611dd297611dbf611dcc97611dc597611ddc9d611ee4575b600091611ec5575b508b6135f5565b936135f5565b9c906141e2565b9a6141e2565b9933868916613227565b833b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602481018890527f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d194611e9892899290916000908290604490829084905af18015611eb8575b611ea5575b506040519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a361177c6001606555565b8061067d611eb2926130fb565b38611e63565b611ec06131f3565b611e5e565b611ede915060203d602011610721576107128183613154565b38611db8565b611eec6131f3565b611db0565b87929b5092611f0f869460203d602011610721576107128183613154565b9b925092611d73565b611f206131f3565b611d6b565b503461000e57602060031936011261000e57611f3f6103b6565b611f4e60026065541415612d08565b6002606555611f5b612dd2565b6001600160a01b0381168060005260c960205260ff6040600020541615611fd857600090815260c96020908152604091829020805460ff1916905581516001600160a01b0393909316835233908301527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c91a1610c496001606555565b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e5760043561202d6001600160a01b03603354163314612b2c565b670de0b6b3a764000081116110ff576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a1005b503461000e57606060031936011261000e576120876103b6565b61208f6103e2565b906044359161209d8361380a565b6120a78183614913565b6120b082613195565b906120ba90613195565b6120c484836145fa565b50506001600160a01b038093169060409586948551917f961be3910000000000000000000000000000000000000000000000000000000080845260208096819460049687958985838981885afa6109139e6122529e61223299610d3b9961222c99612202996121f0999396938415612333575b600094612314575b5061215c886effffffffffffffffffffffffffffff80961661304a565b94169d8e988651978852838883818d5afa978815612307575b6000986122e4575b506121c790858851868186817f705727b500000000000000000000000000000000000000000000000000000000998a82525afa9081156122d7575b6000916122ba575b501661304a565b95518099819382525afa9586156122ad575b60009661228e575b508060ca5496169316906149a6565b6121fc60cb5482614951565b9061304a565b8c5190868289816339420b4560e11b998a82525afa918215612281575b60009261226957506141e2565b99613195565b9289518094819382525afa928315610ad457600093610ab55750506141e2565b925191825260208201929092529081906040820190565b610fb7919250873d8911610721576107128183613154565b6122896131f3565b61221f565b6122a69196508d803d106106e5576106d68183613154565b94386121e1565b6122b56131f3565b6121d9565b6122d19150873d89116106e5576106d68183613154565b386121c0565b6122df6131f3565b6121b8565b6121c791985061230090853d87116106e5576106d68183613154565b979061217d565b61230f6131f3565b612175565b61232c919450833d85116106e5576106d68183613154565b923861213f565b61233b6131f3565b612137565b503461000e5760008060031936011261169f57604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b8181106123eb57505050846123a4910385613154565b60405193838594850191818652518092526040850193925b8281106123cb57505050500390f35b83516001600160a01b0316855286955093810193928101926001016123bc565b82546001600160a01b03168452928601926001928301920161238e565b503461000e57602060031936011261000e577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b70660206004356124566001600160a01b03603354163314612b2c565b8060ce55604051908152a1005b503461000e57600060031936011261000e57602060cb54604051908152f35b503461000e5760208060031936011261000e57610903610913916105c66105ac6124ad610a1a6103b6565b926effffffffffffffffffffffffffffff6001600160a01b038516916004816125376040517f99c91a64000000000000000000000000000000000000000000000000000000008152828185818a5afa9081156125bd575b6000916125a0575b50604051906339420b4560e11b8252838286818b5afa918215612593575b60009261257b57506135f5565b94604051928380927f961be3910000000000000000000000000000000000000000000000000000000082525afa9182156106ec576000926106bf575050169061304a565b61071a919250843d8611610721576107128183613154565b61259b6131f3565b61252a565b6125b79150833d851161075b5761074d8183613154565b3861250c565b6125c56131f3565b612504565b503461000e57602060031936011261000e577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206126076103b6565b6001600160a01b039061261f82603354163314612b2c565b61262881612e5a565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55604051908152a1005b503461000e57604060031936011261000e576126766103b6565b61267e6103e2565b906001600160a01b0361269681603354163314612b2c565b6126a560026065541415612d08565b60026065556126b383612e5a565b6126bc82612e5a565b6126df826001600160a01b0380911660005260d460205260406000205416151590565b6127785761274481600094169183169283855260d46020526127328360408720906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60d35460d56020526040862055612f81565b604051917f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188484a36127766001606555565bf35b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e5760206127c66127c16103b6565b615080565b604051908152f35b503461000e57604060031936011261000e5760005460ff8160081c1690816000146129115750303b155b1561288d571580612845575b612812602435600435612bf3565b61281857005b610c497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b6128766101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b612888600160ff196000541617600055565b612804565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b60ff16156127f8565b503461000e57602060031936011261000e5760206001600160a01b03612941610a1a6103b6565b16604051908152f35b503461000e57602060031936011261000e576129646103b6565b6001600160a01b0361297b81603354163314612b2c565b81161561298b57610c4990612b91565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e57602060031936011261000e577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e6020612a4c6103b6565b6001600160a01b0390612a6482603354163314612b2c565b612a6d81612e5a565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d054161760d055604051908152a1005b503461000e57602060031936011261000e57600435612acc6001600160a01b03603354163314612b2c565b670de0b6b3a764000081116110ff576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a1005b503461000e57602060031936011261000e57610c496110a4610a1a6103b6565b15612b3357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b612c0d60ff60005460081c16612c0881612c7d565b612c7d565b612c1633612b91565b612c3560ff60005460081c16612c2b81612c7d565b6001606555612c7d565b60ff196097541660975560ca5560cb55670de0b6b3a764000060cd55337fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55565b15612c8457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b15612d0f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b15612d7457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001600160a01b0360cf54163303612de657565b60046040517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b031660005260c960205260ff60406000205416612e3057565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b031615612e6a57565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81198111612ed0570190565b612ed8612e94565b0190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60d354811015612f74575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b612f7c612f0c565b612f47565b6001600160a01b0360d3546801000000000000000081101561300d575b600181018060d355811015613000575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b613008612f0c565b612fae565b613015612edc565b612f9e565b6000199060018110612ed0570190565b670de0b6b3a764000081811061303e570390565b613046612e94565b0390565b81811061303e570390565b60d35480156130cc577f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a5600019820191808310156130bf575b60d3600052017fffffffffffffffffffffffff0000000000000000000000000000000000000000815416905560d355565b6130c7612f0c565b61308e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b67ffffffffffffffff811161310f57604052565b613117612edc565b604052565b60a0810190811067ffffffffffffffff82111761310f57604052565b6040810190811067ffffffffffffffff82111761310f57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761310f57604052565b6131b8816001600160a01b0380911660005260d460205260406000205416151590565b15610e7c576001600160a01b0380911660005260d46020526040600020541690565b9081602091031261000e575160ff8116810361000e5790565b506040513d6000823e3d90fd5b9081602091031261000e57516132158161120c565b90565b9081602091031261000e575190565b6000916132df949383926040519560208701937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248a01521660448801526064870152606486526132878661311c565b1690826040519561329787613138565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460208801526132cd843b1515613391565b51925af16132d96133f6565b90613462565b8051806132ea575050565b816020806132ff936133049501019101613200565b613306565b565b1561330d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b1561339857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d1561345d573d9067ffffffffffffffff8211613450575b6040519161344460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184613154565b82523d6000602084013e565b613458612edc565b61340e565b606090565b9091901561346e575090565b81511561347e5750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b848310613508575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116134fb575b01168101030190fd5b60008582860101526134f2565b81830181015186840160440152859350918201916134bb565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee911660128110612ed0570190565b60ff1680601210613564575b60120390565b61356c612e94565b61355e565b60ff16604d8111613583575b600a0a90565b61358b612e94565b61357d565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b81156135ca570490565b6135d2613590565b0490565b80600019048211811515166135e9570290565b6135f1612e94565b0290565b9060ff8116601281101561361f57509061361961361461321593613552565b613571565b906135d6565b60121061362a575090565b61361461363691613521565b9081156135ca570490565b421161364957565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b939192936136808161524f565b6001600160a01b036136928383613893565b509190926136aa8480986136a58261380a565b61383b565b1690813b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600093848160248183875af180156137fd575b6137ea575b50813b156137e6576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810191909152838160248183865af180156137d9575b6137c6575b50803b156137c2576040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b039690961660048701526024860191909152929391928290604490829084905af180156137b5575b6137a85750565b8061067d613304926130fb565b6137bd6131f3565b6137a1565b8280fd5b8061067d6137d3926130fb565b38613744565b6137e16131f3565b61373f565b8380fd5b8061067d6137f7926130fb565b386136f9565b6138056131f3565b6136f4565b1561381157565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b1161384257565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b9081602091031261000e57516effffffffffffffffffffffffffffff8116810361000e5790565b906001600160a01b0360009216604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481865afa938415613a9b575b600094613a7c575b50604051907f705727b500000000000000000000000000000000000000000000000000000000948583528383600481885afa928315613a6f575b600093613a48575b5061394c6139519160ca54906effffffffffffffffffffffffffffff80809716911685613f73565b613aa8565b95818710613a3f5750613964908661304a565b935b6040519081528281600481875afa908115613a32575b600091613a15575b50169060008261399657505050508192565b6004826139e3936139e896604051938480927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa928315613a08575b926139eb575b5050856135d6565b6135c0565b92565b613a019250803d1061075b5761074d8183613154565b38806139db565b613a106131f3565b6139d5565b613a2c9150833d85116106e5576106d68183613154565b38613984565b613a3a6131f3565b61397c565b94955094613966565b613951919350613a6761394c91863d88116106e5576106d68183613154565b939150613924565b613a776131f3565b61391c565b613a94919450823d84116106e5576106d68183613154565b92386138e2565b613aa36131f3565b6138da565b60008112613ab35790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b60008112906706f05b59d3b2000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613b7b575b817f800000000000000000000000000000000000000000000000000000000000000003831216612ed0570190565b613b83612e94565b613b4d565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613b7b57817f800000000000000000000000000000000000000000000000000000000000000003831216612ed0570190565b670de0b6b3a76400006000821280157f80000000000000000000000000000000000000000000000000000000000000008401831216613c4e575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182131661303e570390565b613c56612e94565b613c20565b60008212827f8000000000000000000000000000000000000000000000000000000000000000018212811516613c4e57827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182131661303e570390565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600211600083131616613d2f575b60017fc0000000000000000000000000000000000000000000000000000000000000008212600083121616613d22575b60011b90565b613d2a612e94565b613d1c565b613d37612e94565b613cec565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616613db2575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616613da5575b60021b90565b613dad612e94565b613d9f565b613dba612e94565b613d6f565b670de0b6b3a76400009060017809392ee8e921d5d073aff322e62439fcf32d7f344649470f908211600083131616613e25575b60017ffffffffffffffff6c6d11716de2a2f8c500cdd19dbc6030cd280cbb9b6b8f07082126000831216166135e9570290565b613e2d612e94565b613df2565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818104851183851616613eda575b60008212927f800000000000000000000000000000000000000000000000000000000000000094848787058512911616613ecd575b82600087129505861290851616613ec0575b0583129116166135e9570290565b613ec8612e94565b613eb2565b613ed5612e94565b613ea0565b613ee2612e94565b613e6b565b8115613f2b575b60001982147f8000000000000000000000000000000000000000000000000000000000000000821416613f1f570590565b613f27612e94565b0590565b613f33613590565b613eee565b7f80000000000000000000000000000000000000000000000000000000000000008114613f66575b60000390565b613f6e612e94565b613f60565b909180156140f5576000613f878385613b88565b126140cb57829181613f9884613dbf565b60028205613fa591613b88565b90613faf91613ee7565b93613fb991613b88565b670de0b6b3a7640000809381613fce88613be6565b613fd89085613e32565b613fe190613b11565b0582613fed868a613e32565b613ff690613b11565b0561400090613cb9565b61400991613b88565b956140148589613e32565b9061401e91613ee7565b61402791613c5b565b614031908361411b565b918061403c91613e32565b61404590613b11565b0561404f91613c5b565b9161405a8286613e32565b61406390613b11565b059061406e9161411b565b61407791613b88565b6140818280613e32565b9061408b84613d3c565b9061409591613e32565b61409e91613c5b565b6140a782613f38565b916140b191614136565b6140ba91613b88565b906140c4916140fc565b6002900590565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5091505090565b9061411661410c61321593613dbf565b6002830590613b88565b613ee7565b614131670de0b6b3a764000092613f2792613e32565b613b11565b9190600060038413156141d3575060008113806141c9575b1561419257915b61416b6140c4846141668185613ee7565b613b88565b905b838203614178575050565b90925061418c6140c4846141668185613ee7565b9061416d565b60008112806141b7575b156141b0576141aa90613f38565b91614155565b5081614155565b50826141c282613f38565b131561419c565b508281131561414e565b9290506141dc57565b60019150565b9060ff811660128110156141fd575061361461363691613552565b601210614208575090565b9061361961361461321593613521565b91906142238361524f565b61422d81846145fa565b5090936001600160a01b031684813b1561000e576040928351917f9dc29fac00000000000000000000000000000000000000000000000000000000835260009283818061429560049a898c8401602090939291936001600160a01b0360408201951681520152565b038183895af1801561452d575b61451a575b50833b156137c25784517f9f9ef98800000000000000000000000000000000000000000000000000000000815286810191825290839082908190602001038183885af1801561450d575b6144fa575b50823b156144f65783517fd8b8785300000000000000000000000000000000000000000000000000000000815285810191825290829082908190602001038183875af180156144e9575b6144d6575b5082517f705727b5000000000000000000000000000000000000000000000000000000009081815260209081818881885afa9081156144c9575b84916144ac575b506effffffffffffffffffffffffffffff809116151593846143d7575b5050505090506143b1575050565b517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6144499450662386f26fc10000958751937f961be39100000000000000000000000000000000000000000000000000000000855280858b81855afa94851561449f575b839561447e575b50808495968b8b518095819382525afa928315614471575b92614454575b50501691166145c5565b1080388080806143a3565b61446a9250803d106106e5576106d68183613154565b388061443f565b6144796131f3565b614439565b8495506144988291823d84116106e5576106d68183613154565b9550614421565b6144a76131f3565b61441a565b6144c39150823d84116106e5576106d68183613154565b38614386565b6144d16131f3565b61437f565b8061067d6144e3926130fb565b38614345565b6144f16131f3565b614340565b5080fd5b8061067d614507926130fb565b386142f6565b6145156131f3565b6142f1565b8061067d614527926130fb565b386142a7565b6145356131f3565b6142a2565b6001600160a01b039093929361454f8161524f565b61455983826145fa565b5092909161456883809861383b565b1690813b1561000e576040928351917f9dc29fac00000000000000000000000000000000000000000000000000000000835260009283818061429560049a898c8401602090939291936001600160a01b0360408201951681520152565b6135c090670de0b6b3a764000081600019048111821515166145ed575b8360011c9102612ec4565b6145f5612e94565b6145e2565b916001600160a01b036000931691604051927f705727b500000000000000000000000000000000000000000000000000000000908185526020928386600481855afa95861561480f575b6000966147da575b509161473c93916146ba61467561394c956effffffffffffffffffffffffffffff809a166135d6565b604051907f18160ddd0000000000000000000000000000000000000000000000000000000082528582600481875afa9182156147cd575b6000926147ae575b506135c0565b966146c48861380a565b6146cd88613f38565b9184604051947f961be3910000000000000000000000000000000000000000000000000000000086528186600481865afa9586156147a1575b600096614782575b5060046040518094819382525afa948515614775575b600095614756575b50508060ca54941692169061481c565b9283831061474f5750613215838361304a565b9092508192565b61476d929550803d106106e5576106d68183613154565b92388061472c565b61477d6131f3565b614724565b61479a919650823d84116106e5576106d68183613154565b943861470e565b6147a96131f3565b614706565b6147c6919250863d881161075b5761074d8183613154565b90386146b4565b6147d56131f3565b6146ac565b61394c93919650916146ba614675614802879561473c983d88116106e5576106d68183613154565b989395505050919361464c565b6148176131f3565b614644565b9290926148298184613b88565b908361483486613dbf565b6002820561484191613b88565b9061484b91613ee7565b809461485685613dbf565b90670de0b6b3a76400009680889493600286950561487391613b88565b9061487d91613ee7565b61488691613c5b565b61488f91613e32565b61489890613b11565b05916148a385613be6565b6148ac91613e32565b6148b590613b11565b056148bf91613b88565b600290059283926148d08480613e32565b92806148db91613e32565b6148e491613e32565b6148ed90613b11565b056148f791613b88565b9061490191614136565b61490a91613b88565b61321591613c5b565b6001600160a01b0390811691161461492757565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b61496d670de0b6b3a7640000926706f05b59d3b20000926135d6565b7ffffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4dffff811161499957010490565b6149a1612e94565b010490565b92919493909385158015614a66575b6140cb576117778461186c85614a49816141168c614a27614a3f614a549f8f614a4f9f614a3a6118729f8f85670de0b6b3a7640000614a2d614131614a34948f614a27906118788c614116614a206141169f9e61410c9f614a196141169183613b88565b9c80613e32565b9380613e32565b90613e32565b0590613c5b565b9d613b88565b613dbf565b61186c818c6140fc565b926140fc565b613c5b565b60008112156132155761321590613f38565b5082156149b5565b80614a4f613f2792614af1600295611878614a898480613e32565b9160017f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211600083131616614b03575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616614af6575b881b613dbf565b614136565b614afe612e94565b614aea565b614b0b612e94565b614aba565b92939190614b1f828286614d5e565b8093919395614b2f85809961383b565b614b4c846001600160a01b031660005260d2602052604060002090565b614b57838254612ec4565b90556001600160a01b0380911693843b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600094614bc3949086908290602490829084905af18015614d51575b614d3e575b501693612ec4565b823b156144f6576040517f9f9ef9880000000000000000000000000000000000000000000000000000000081526004810191909152662386f26fc1000092614cba929091818160248183875af18015614d31575b614d1e575b50604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481845afa938415614d11575b8394614ceb575b509080600492604051938480927f705727b50000000000000000000000000000000000000000000000000000000082525afa928315614cde575b92614cc1575b50506effffffffffffffffffffffffffffff80911691166145c5565b10612de657565b614cd79250803d106106e5576106d68183613154565b3880614c9e565b614ce66131f3565b614c98565b8291945091614d08600493823d84116106e5576106d68183613154565b94919250614c5e565b614d196131f3565b614c57565b8061067d614d2b926130fb565b38614c1c565b614d396131f3565b614c17565b8061067d614d4b926130fb565b38614bbb565b614d596131f3565b614bb6565b9190600090818312615024575b6001600160a01b03809116936040908151937f961be3910000000000000000000000000000000000000000000000000000000090818652602095600495878288818d5afa918215615017575b8392614ff4575b50614e64906effffffffffffffffffffffffffffff80931695169989888c8b8a519189835281838581845afa928315614fe7575b8993614fc8575b50818c518095817f705727b500000000000000000000000000000000000000000000000000000000948582525afa938415614fbb575b8994614f9c575b508c8c518097819382525afa938415614f8f575b8794614f70575b508886808060ca549716941692166149a6565b988289139788958b9087614f66575b50508515614ee4575b5050505050614ebe57505015614ea65750614ea3614e9c60cb5483614951565b809261304a565b91565b9190614eb56132159193613f38565b60cb5490614951565b517f9a6114b7000000000000000000000000000000000000000000000000000000008152fd5b9091928094955089129485614f03575b50505050503880808080614e7c565b8192939495508787518095819382525afa938415614f59575b93614f3a575b5050614f2d86613f38565b9116103880808080614ef4565b614f51929350803d106106e5576106d68183613154565b903880614f22565b614f616131f3565b614f1c565b1095508a38614e73565b614f889194508c8d3d106106e5576106d68183613154565b9238614e51565b614f976131f3565b614e4a565b614fb4919450823d84116106e5576106d68183613154565b9238614e36565b614fc36131f3565b614e2f565b614fe0919350823d84116106e5576106d68183613154565b9138614df9565b614fef6131f3565b614df2565b614e6491925061501090893d8b116106e5576106d68183613154565b9190614dbe565b61501f6131f3565b614db7565b9161503a9061503460cb54613be6565b906140fc565b91614d6b565b9060ff8116601281101561505f575090614a2761361461321593613552565b60121061506a575090565b9061507a61361461321593613521565b90613ee7565b610d3b61508c91613195565b6040517f18160ddd000000000000000000000000000000000000000000000000000000008082526020918281600481875afa9081156151e5575b6000916151c8575b50156151b9576132159282604051927f705727b50000000000000000000000000000000000000000000000000000000084528184600481865afa9384156151ac575b60009461518d575b5060046040518094819382525afa928315615180575b60009361514e575b50506effffffffffffffffffffffffffffff166145c5565b6effffffffffffffffffffffffffffff929350908161517892903d1061075b5761074d8183613154565b919038615136565b6151886131f3565b61512e565b6151a5919450823d84116106e5576106d68183613154565b9238615118565b6151b46131f3565b615110565b505050670de0b6b3a764000090565b6151df9150833d851161075b5761074d8183613154565b386150ce565b6151ed6131f3565b6150c6565b6001906000198114612ed0570190565b6001600160a01b039060d354811015615242575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a601541690565b61524a612f0c565b615216565b61526c816001600160a01b031660005260d2602052604060002090565b54801580156154b1575b6154ad5761529a61529461528b60cd5461302a565b60cc549061304a565b82614951565b90816153d6575b6152af915060cd5490614951565b806152d3575b506001600160a01b0316600090815260d26020526040812055565b55565b6152dd8183613893565b50916001600160a01b0384169150813b1561000e576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810193909352600092838160248183875af180156153c9575b6153b6575b50813b156137c2576040517f16c9e7a000000000000000000000000000000000000000000000000000000000815260048101919091526000936152d09390928290602490829084905af180156153a9575b615396575b5091506152b5565b8061067d6153a3926130fb565b3861538e565b6153b16131f3565b615389565b8061067d6153c3926130fb565b38615338565b6153d16131f3565b615333565b6001600160a01b0383166154216153f560d0546001600160a01b031690565b93604051906339420b4560e11b8252602082600481875afa9182156119a45760009261198b57506141e2565b92813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0391909116600482015260248101939093526152af92906000908290604490829084905af180156154a0575b61548d575b506152a1565b8061067d61549a926130fb565b38615487565b6154a86131f3565b615482565b5050565b5060ce54811061527656fea26469706673582212206960b4049a859811334dbaf495c0d82600c5a828f45139f3bfd1faf46a39179264736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063017b82921461035b578063017e7e58146103525780630705999d14610349578063070f81d91461034057806309a5fca3146103375780630f91f06f1461032e5780633753b14a146103255780633bd61ba81461031c5780633f4ba83a146103135780634a5e42b11461030a5780634fdd64e51461030157806352f7c988146102f85780635c975abb146102ef5780635cfe092e146102e657806361858e23146102dd5780636281baef146102d45780636922d5ca146102cb578063715018a6146102c2578063815bfd29146102b95780638456cb59146102b05780638a2dfe09146102a75780638da5cb5b1461029e578063907448ed1461029557806391cca3db1461028c57806393aeea02146102835780639908fc8b1461027a5780639abacb41146102715780639e4416b714610268578063a4275ceb1461025f578063aa6ca80814610256578063d043c5651461024d578063d0dd0e5614610244578063d30ffeda1461023b578063d477f05f14610232578063da48999714610229578063dc3b7c8b14610220578063e4a3011614610217578063e9249cc71461020e578063f2fde38b14610205578063f46901ed146101fc578063f57e84d5146101f35763f8b49e72146101eb57600080fd5b61000e612b0c565b5061000e612aa1565b5061000e612a0f565b5061000e61294a565b5061000e61291a565b5061000e6127ce565b5061000e6127a2565b5061000e61265c565b5061000e6125ca565b5061000e612482565b5061000e612463565b5061000e612408565b5061000e612340565b5061000e61206d565b5061000e612002565b5061000e611f25565b5061000e611ccc565b5061000e6119d9565b5061000e6119b1565b5061000e61191a565b5061000e6118f2565b5061000e61173a565b5061000e6116c1565b5061000e6116a2565b5061000e611623565b5061000e611604565b5061000e611216565b5061000e61116c565b5061000e61114d565b5061000e611129565b5061000e611021565b5061000e610ea6565b5061000e610ca9565b5061000e610bd4565b5061000e610bac565b5061000e610b06565b5061000e6109b1565b5061000e61076f565b5061000e6104a0565b5061000e61040e565b5061000e61038e565b5061000e61036f565b600091031261000e57565b503461000e57600060031936011261000e57602060ca54604051908152f35b503461000e57600060031936011261000e5760206001600160a01b0360d05416604051908152f35b600435906001600160a01b038216820361000e57565b606435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b604435906001600160a01b038216820361000e57565b503461000e57602060031936011261000e577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d602061044b6103b6565b6001600160a01b039061046382603354163314612b2c565b61046c81612e5a565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d154161760d155604051908152a1005b503461000e5760408060031936011261000e576104bb6103b6565b906024356104c7612dd2565b6104d083613195565b906105cd6001600160a01b038316926105c66105ac86517f99c91a640000000000000000000000000000000000000000000000000000000081526effffffffffffffffffffffffffffff6105656004838a818360209788935afa908115610762575b600091610735575b50848b8d51938480926339420b4560e11b82525afa918215610728575b6000926106f9575b506135f5565b9189517f961be39100000000000000000000000000000000000000000000000000000000815281816004818d5afa9182156106ec575b6000926106bf575b5050169061304a565b916001600160a01b031660005260d2602052604060002090565b549061304a565b811161069657813b1561000e576000937f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379285855180927f16c9e7a000000000000000000000000000000000000000000000000000000000825281838161063c89600483019190602083019252565b03925af18015610689575b610670575b5083516001600160a01b039091168152602081019190915280604081015b0390a151f35b8061067d610683926130fb565b80610364565b3861064c565b6106916131f3565b610647565b600483517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b6106de9250803d106106e5575b6106d68183613154565b81019061386c565b38806105a3565b503d6106cc565b6106f46131f3565b61059b565b61071a919250853d8711610721575b6107128183613154565b8101906131da565b903861055f565b503d610708565b6107306131f3565b610557565b6107559150853d871161075b575b61074d8183613154565b810190613218565b3861053a565b503d610743565b61076a6131f3565b610532565b503461000e5760a060031936011261000e576107896103b6565b602435906107956103cc565b916107a560026065541415612d08565b60026065556107b960ff6097541615612d6d565b6107c28161380a565b6107cb83612e5a565b6107d6608435613641565b6107df82613195565b916001600160a01b0392610840848216916107fc85843381613227565b604051906339420b4560e11b8252602082600481875afa91821561095b575b600092610937575b5061083b9086610835846044356135f5565b9161453a565b6141e2565b93813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482015260248101869052610913967ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad9939091906000908290604490829084905af1801561092a575b610917575b506108f66040519283921695873396846040919493926001600160a01b03606083019616825260208201520152565b0390a36109036001606555565b6040519081529081906020820190565b0390f35b8061067d610924926130fb565b386108c7565b6109326131f3565b6108c2565b61083b9192506109549060203d8111610721576107128183613154565b9190610823565b6109636131f3565b61081b565b60031960c091011261000e576001600160a01b03600435818116810361000e5791602435828116810361000e57916044359160643591608435908116810361000e579060a43590565b503461000e57610a1f610a116109c636610968565b6109dc6002606599959794989399541415612d08565b60026065556109f060ff6097541615612d6d565b6109f988612e5a565b610a028661380a565b610a0c8584614913565b613641565b610a1a81612e10565b613195565b610840610a2b83613195565b6001600160a01b0395610a42868886163381613227565b610a8e610a4f8786614218565b948884169560405194610a88866339420b4560e11b968782528a82600460209b8c935afa918215610af9575b600092610ae157506135f5565b92614b10565b50906040519081528281600481885afa928315610ad4575b600093610ab5575b50506141e2565b610acc929350803d10610721576107128183613154565b903880610aae565b610adc6131f3565b610aa6565b61071a919250893d8b11610721576107128183613154565b610b016131f3565b610a7b565b503461000e57602060031936011261000e577fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e610ba2610b446103b6565b610b5360026065541415612d08565b6002606555610b60612dd2565b610b6981612e10565b6001600160a01b0316600081815260c96020908152604091829020805460ff191660011790558151928352339083015290918291820190565b0390a16001606555005b503461000e57600060031936011261000e5760206001600160a01b0360d15416604051908152f35b503461000e57600060031936011261000e57610bf560026065541415612d08565b6002606555610c02612dd2565b60975460ff811615610c4b5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1610c496001606555565b005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461000e57602060031936011261000e57610cc36103b6565b6001600160a01b03610cda81603354163314612b2c565b610d04610d00836001600160a01b0380911660005260d460205260406000205416151590565b1590565b610e7c5781610d47610d3b610d2e6000956001600160a01b031660005260d4602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b91610d90610d68836001600160a01b031660005260d4602052604060002090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b610e46610db0836001600160a01b031660005260d5602052604060002090565b54610e21610ddd610dca610dc560d35461301a565b612f3c565b90546001600160a01b039160031b1c1690565b9180610dfc846001600160a01b031660005260d5602052604060002090565b5587610e1b876001600160a01b031660005260d5602052604060002090565b55612f3c565b90919082549060031b916001600160a01b039283811b93849216901b16911916179055565b610e4e613055565b80604051931691167f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8484a3f35b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b503461000e57606060031936011261000e57610ec06103b6565b610ec86103e2565b9060443590610ed78382614913565b8115610ff757610f8d91610ef6610ef0610f3a93613195565b94613195565b604051610f6a610f406339420b4560e11b978884528460209788956001600160a01b039887826004818d89165afa918215610fea575b600092610fcb575b50615040565b91614d5e565b9490931692604051908882528382600481885afa918215610fbe575b600092610f9f575b506141e2565b9560046040518094819382525afa928315610ad457600093610ab55750506141e2565b60408051928352602083019190915290f35b610fb7919250843d8611610721576107128183613154565b9038610f64565b610fc66131f3565b610f5c565b610fe3919250883d8a11610721576107128183613154565b9038610f34565b610ff26131f3565b610f2c565b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b503461000e57604060031936011261000e5760043560243561104f6001600160a01b03603354163314612b2c565b670de0b6b3a76400006110628383612ec4565b116110ff5760005b60d3548110156110b357806110a96110a46110876110ae94615202565b6001600160a01b0380911660005260d46020526040600020541690565b61524f565b6151f2565b61106a565b507f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5918160cc558060cd556110fa6040519283928360209093929193604081019481520152565b0390a1005b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b503461000e57600060031936011261000e57602060ff609754166040519015158152f35b503461000e57600060031936011261000e57602060ce54604051908152f35b503461000e57604060031936011261000e576111cd61118c610a1a6103b6565b6111c76040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156111ff575b6000916111e1575b506024356135f5565b90613893565b604080519384526020840191909152919050f35b6111f9915060203d8111610721576107128183613154565b386111be565b6112076131f3565b6111b6565b8015150361000e57565b503461000e5760c060031936011261000e576112306103b6565b6044359060243561123f6103cc565b9160a4359361124d8561120c565b61125c60026065541415612d08565b600260655561127060ff6097541615612d6d565b6000948315610ff75761128285612e5a565b61128d608435613641565b61129683612e10565b61129f83613195565b906001600160a01b0396878316916112bb8784338c8a16613227565b61137e5750857ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b93610913989361131d6004602061132396604051928380926339420b4560e11b82525afa908115611371575b600091611353575b50896135f5565b90613673565b945b6108f68660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b61136b915060203d8111610721576107128183613154565b38611316565b6113796131f3565b61130e565b96916113d7919361139f61139a60d1546001600160a01b031690565b612e5a565b6113d0604051996339420b4560e11b8b5260209a8b816004818b5afa9182156115f7575b916115da575b50886135f5565b3092613673565b9461143987876113ef60d1546001600160a01b031690565b60405193849283927f095ea7b300000000000000000000000000000000000000000000000000000000845260048401602090939291936001600160a01b0360408201951681520152565b03816000885af180156115cd575b6115a0575b506114ac87611469610d3b610d3b60d1546001600160a01b031690565b6040517faf929a800000000000000000000000000000000000000000000000000000000081526001600160a01b0390961660048701529491829081906024820190565b0381875afa978815611593575b600098611574575b5050823b1561000e576040517f90210d7e0000000000000000000000000000000000000000000000000000000081526004810197909752602487018690526001600160a01b0381166044880152610913967ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b936000908290606490829084905af18015611567575b611554575b50611325565b8061067d611561926130fb565b3861154e565b61156f6131f3565b611549565b61158b929850803d1061075b5761074d8183613154565b9538806114c1565b61159b6131f3565b6114b9565b6115bf90883d8a116115c6575b6115b78183613154565b810190613200565b503861144c565b503d6115ad565b6115d56131f3565b611447565b6115f191508b3d8d11610721576107128183613154565b386113c9565b6115ff6131f3565b6113c3565b503461000e57600060031936011261000e57602060cc54604051908152f35b503461000e5760008060031936011261169f576033547fffffffffffffffffffffffff00000000000000000000000000000000000000006001600160a01b03821691611670338414612b2c565b1660335581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600060031936011261000e57602060cd54604051908152f35b503461000e57600060031936011261000e576116e260026065541415612d08565b60026065556116ef612dd2565b600160ff1960975461170460ff821615612d6d565b16176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a16001606555005b503461000e5760008060031936011261169f57808060ca54918060d354905b81831061178d578561177c8661177761177288856140fc565b613f38565b614a6e565b604080519182526020820192909252f35b90919461179f610d3b61108788615202565b6040908151917f961be39100000000000000000000000000000000000000000000000000000000835260209160049183858481855afa9485156118e5575b87956118c2575b5090839151928380927f705727b50000000000000000000000000000000000000000000000000000000082525afa9182156118b5575b8592611898575b50506effffffffffffffffffffffffffffff80911691821561188b57826118726118618261185b61187e97611884999761187897166140fc565b9a613b88565b9861186c818c6140fc565b90613c5b565b9061411b565b90613b88565b956151f2565b9190611759565b50505094611884906151f2565b6118ae9250803d106106e5576106d68183613154565b3880611821565b6118bd6131f3565b61181a565b84929195506118dd90833d85116106e5576106d68183613154565b9490916117e4565b6118ed6131f3565b6117dd565b503461000e57600060031936011261000e5760206001600160a01b0360335416604051908152f35b503461000e57604060031936011261000e57602061177c6001600160a01b036119416103b6565b61195b61195460243592610a1a8461380a565b91826145fa565b95919290506004604051809581936339420b4560e11b8352165afa9182156119a4575b60009261198b57506141e2565b610fb791925060203d8111610721576107128183613154565b6119ac6131f3565b61197e565b503461000e57600060031936011261000e5760206001600160a01b0360cf5416604051908152f35b503461000e57606060031936011261000e576119f36103b6565b6024356119fe6103f8565b906001600160a01b0390611a1782603354163314612b2c565b611a2084613195565b9182169360409384517f99c91a640000000000000000000000000000000000000000000000000000000081528660209160049688888580858381895afa948515611cbf575b600095611c7f575b50916effffffffffffffffffffffffffffff6105ac926105c694611afb9798611ab885516339420b4560e11b9b8c825284828781875afa918215610728576000926106f957506135f5565b9451928380927f961be3910000000000000000000000000000000000000000000000000000000082525afa908115611c72575b600091611c55575b50169061304a565b8511611c2d5790611b2a918751908152818188818c5afa918215611c20575b600092611c03575b5050846141e2565b90863b1561000e57611baa600061066a93819984837f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda69a8c51968795869485937f9e79eaa50000000000000000000000000000000000000000000000000000000085528401602090939291936001600160a01b0360408201951681520152565b03925af18015611bf6575b611be3575b5085516001600160a01b0393841681526020810194909452909116604083015281906060820190565b8061067d611bf0926130fb565b38611bba565b611bfe6131f3565b611bb5565b611c199250803d10610721576107128183613154565b3880611b22565b611c286131f3565b611b1a565b8587517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b611c6c9150893d8b116106e5576106d68183613154565b38611af3565b611c7a6131f3565b611aeb565b611afb95506105ac9282611cb36effffffffffffffffffffffffffffff936105c697953d841161075b5761074d8183613154565b97509294509250611a6d565b611cc76131f3565b611a65565b503461000e57611cdb36610968565b611cef600260659794969597541415612d08565b6002606555611d0360ff6097541615612d6d565b611d0d8484614913565b8515610ff757611d2090610a0c83612e5a565b611d2982612e10565b611d3282613195565b94611d3c84613195565b916001600160a01b039182841693604051976339420b4560e11b808a528a60208b6004818b5afa9a8b15611f18575b60009b611ef1575b5084928b92888493169d8e916040518093819282525a92600491602094fa92831597610a88611dd297611dbf611dcc97611dc597611ddc9d611ee4575b600091611ec5575b508b6135f5565b936135f5565b9c906141e2565b9a6141e2565b9933868916613227565b833b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602481018890527f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d194611e9892899290916000908290604490829084905af18015611eb8575b611ea5575b506040519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a361177c6001606555565b8061067d611eb2926130fb565b38611e63565b611ec06131f3565b611e5e565b611ede915060203d602011610721576107128183613154565b38611db8565b611eec6131f3565b611db0565b87929b5092611f0f869460203d602011610721576107128183613154565b9b925092611d73565b611f206131f3565b611d6b565b503461000e57602060031936011261000e57611f3f6103b6565b611f4e60026065541415612d08565b6002606555611f5b612dd2565b6001600160a01b0381168060005260c960205260ff6040600020541615611fd857600090815260c96020908152604091829020805460ff1916905581516001600160a01b0393909316835233908301527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c91a1610c496001606555565b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e5760043561202d6001600160a01b03603354163314612b2c565b670de0b6b3a764000081116110ff576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a1005b503461000e57606060031936011261000e576120876103b6565b61208f6103e2565b906044359161209d8361380a565b6120a78183614913565b6120b082613195565b906120ba90613195565b6120c484836145fa565b50506001600160a01b038093169060409586948551917f961be3910000000000000000000000000000000000000000000000000000000080845260208096819460049687958985838981885afa6109139e6122529e61223299610d3b9961222c99612202996121f0999396938415612333575b600094612314575b5061215c886effffffffffffffffffffffffffffff80961661304a565b94169d8e988651978852838883818d5afa978815612307575b6000986122e4575b506121c790858851868186817f705727b500000000000000000000000000000000000000000000000000000000998a82525afa9081156122d7575b6000916122ba575b501661304a565b95518099819382525afa9586156122ad575b60009661228e575b508060ca5496169316906149a6565b6121fc60cb5482614951565b9061304a565b8c5190868289816339420b4560e11b998a82525afa918215612281575b60009261226957506141e2565b99613195565b9289518094819382525afa928315610ad457600093610ab55750506141e2565b925191825260208201929092529081906040820190565b610fb7919250873d8911610721576107128183613154565b6122896131f3565b61221f565b6122a69196508d803d106106e5576106d68183613154565b94386121e1565b6122b56131f3565b6121d9565b6122d19150873d89116106e5576106d68183613154565b386121c0565b6122df6131f3565b6121b8565b6121c791985061230090853d87116106e5576106d68183613154565b979061217d565b61230f6131f3565b612175565b61232c919450833d85116106e5576106d68183613154565b923861213f565b61233b6131f3565b612137565b503461000e5760008060031936011261169f57604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b8181106123eb57505050846123a4910385613154565b60405193838594850191818652518092526040850193925b8281106123cb57505050500390f35b83516001600160a01b0316855286955093810193928101926001016123bc565b82546001600160a01b03168452928601926001928301920161238e565b503461000e57602060031936011261000e577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b70660206004356124566001600160a01b03603354163314612b2c565b8060ce55604051908152a1005b503461000e57600060031936011261000e57602060cb54604051908152f35b503461000e5760208060031936011261000e57610903610913916105c66105ac6124ad610a1a6103b6565b926effffffffffffffffffffffffffffff6001600160a01b038516916004816125376040517f99c91a64000000000000000000000000000000000000000000000000000000008152828185818a5afa9081156125bd575b6000916125a0575b50604051906339420b4560e11b8252838286818b5afa918215612593575b60009261257b57506135f5565b94604051928380927f961be3910000000000000000000000000000000000000000000000000000000082525afa9182156106ec576000926106bf575050169061304a565b61071a919250843d8611610721576107128183613154565b61259b6131f3565b61252a565b6125b79150833d851161075b5761074d8183613154565b3861250c565b6125c56131f3565b612504565b503461000e57602060031936011261000e577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206126076103b6565b6001600160a01b039061261f82603354163314612b2c565b61262881612e5a565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55604051908152a1005b503461000e57604060031936011261000e576126766103b6565b61267e6103e2565b906001600160a01b0361269681603354163314612b2c565b6126a560026065541415612d08565b60026065556126b383612e5a565b6126bc82612e5a565b6126df826001600160a01b0380911660005260d460205260406000205416151590565b6127785761274481600094169183169283855260d46020526127328360408720906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60d35460d56020526040862055612f81565b604051917f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188484a36127766001606555565bf35b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b503461000e57602060031936011261000e5760206127c66127c16103b6565b615080565b604051908152f35b503461000e57604060031936011261000e5760005460ff8160081c1690816000146129115750303b155b1561288d571580612845575b612812602435600435612bf3565b61281857005b610c497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b6128766101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b612888600160ff196000541617600055565b612804565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b60ff16156127f8565b503461000e57602060031936011261000e5760206001600160a01b03612941610a1a6103b6565b16604051908152f35b503461000e57602060031936011261000e576129646103b6565b6001600160a01b0361297b81603354163314612b2c565b81161561298b57610c4990612b91565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e57602060031936011261000e577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e6020612a4c6103b6565b6001600160a01b0390612a6482603354163314612b2c565b612a6d81612e5a565b16807fffffffffffffffffffffffff000000000000000000000000000000000000000060d054161760d055604051908152a1005b503461000e57602060031936011261000e57600435612acc6001600160a01b03603354163314612b2c565b670de0b6b3a764000081116110ff576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a1005b503461000e57602060031936011261000e57610c496110a4610a1a6103b6565b15612b3357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b612c0d60ff60005460081c16612c0881612c7d565b612c7d565b612c1633612b91565b612c3560ff60005460081c16612c2b81612c7d565b6001606555612c7d565b60ff196097541660975560ca5560cb55670de0b6b3a764000060cd55337fffffffffffffffffffffffff000000000000000000000000000000000000000060cf54161760cf55565b15612c8457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b15612d0f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b15612d7457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001600160a01b0360cf54163303612de657565b60046040517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b031660005260c960205260ff60406000205416612e3057565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b031615612e6a57565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81198111612ed0570190565b612ed8612e94565b0190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60d354811015612f74575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b612f7c612f0c565b612f47565b6001600160a01b0360d3546801000000000000000081101561300d575b600181018060d355811015613000575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b613008612f0c565b612fae565b613015612edc565b612f9e565b6000199060018110612ed0570190565b670de0b6b3a764000081811061303e570390565b613046612e94565b0390565b81811061303e570390565b60d35480156130cc577f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a5600019820191808310156130bf575b60d3600052017fffffffffffffffffffffffff0000000000000000000000000000000000000000815416905560d355565b6130c7612f0c565b61308e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b67ffffffffffffffff811161310f57604052565b613117612edc565b604052565b60a0810190811067ffffffffffffffff82111761310f57604052565b6040810190811067ffffffffffffffff82111761310f57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761310f57604052565b6131b8816001600160a01b0380911660005260d460205260406000205416151590565b15610e7c576001600160a01b0380911660005260d46020526040600020541690565b9081602091031261000e575160ff8116810361000e5790565b506040513d6000823e3d90fd5b9081602091031261000e57516132158161120c565b90565b9081602091031261000e575190565b6000916132df949383926040519560208701937f23b872dd0000000000000000000000000000000000000000000000000000000085526001600160a01b03938480921660248a01521660448801526064870152606486526132878661311c565b1690826040519561329787613138565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460208801526132cd843b1515613391565b51925af16132d96133f6565b90613462565b8051806132ea575050565b816020806132ff936133049501019101613200565b613306565b565b1561330d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b1561339857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b3d1561345d573d9067ffffffffffffffff8211613450575b6040519161344460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184613154565b82523d6000602084013e565b613458612edc565b61340e565b606090565b9091901561346e575090565b81511561347e5750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401526000915b848310613508575050601f836044947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116134fb575b01168101030190fd5b60008582860101526134f2565b81830181015186840160440152859350918201916134bb565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee911660128110612ed0570190565b60ff1680601210613564575b60120390565b61356c612e94565b61355e565b60ff16604d8111613583575b600a0a90565b61358b612e94565b61357d565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b81156135ca570490565b6135d2613590565b0490565b80600019048211811515166135e9570290565b6135f1612e94565b0290565b9060ff8116601281101561361f57509061361961361461321593613552565b613571565b906135d6565b60121061362a575090565b61361461363691613521565b9081156135ca570490565b421161364957565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b939192936136808161524f565b6001600160a01b036136928383613893565b509190926136aa8480986136a58261380a565b61383b565b1690813b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600093848160248183875af180156137fd575b6137ea575b50813b156137e6576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810191909152838160248183865af180156137d9575b6137c6575b50803b156137c2576040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b039690961660048701526024860191909152929391928290604490829084905af180156137b5575b6137a85750565b8061067d613304926130fb565b6137bd6131f3565b6137a1565b8280fd5b8061067d6137d3926130fb565b38613744565b6137e16131f3565b61373f565b8380fd5b8061067d6137f7926130fb565b386136f9565b6138056131f3565b6136f4565b1561381157565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b1161384257565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b9081602091031261000e57516effffffffffffffffffffffffffffff8116810361000e5790565b906001600160a01b0360009216604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481865afa938415613a9b575b600094613a7c575b50604051907f705727b500000000000000000000000000000000000000000000000000000000948583528383600481885afa928315613a6f575b600093613a48575b5061394c6139519160ca54906effffffffffffffffffffffffffffff80809716911685613f73565b613aa8565b95818710613a3f5750613964908661304a565b935b6040519081528281600481875afa908115613a32575b600091613a15575b50169060008261399657505050508192565b6004826139e3936139e896604051938480927f18160ddd0000000000000000000000000000000000000000000000000000000082525afa928315613a08575b926139eb575b5050856135d6565b6135c0565b92565b613a019250803d1061075b5761074d8183613154565b38806139db565b613a106131f3565b6139d5565b613a2c9150833d85116106e5576106d68183613154565b38613984565b613a3a6131f3565b61397c565b94955094613966565b613951919350613a6761394c91863d88116106e5576106d68183613154565b939150613924565b613a776131f3565b61391c565b613a94919450823d84116106e5576106d68183613154565b92386138e2565b613aa36131f3565b6138da565b60008112613ab35790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b60008112906706f05b59d3b2000091817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613b7b575b817f800000000000000000000000000000000000000000000000000000000000000003831216612ed0570190565b613b83612e94565b613b4d565b60008112817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313811516613b7b57817f800000000000000000000000000000000000000000000000000000000000000003831216612ed0570190565b670de0b6b3a76400006000821280157f80000000000000000000000000000000000000000000000000000000000000008401831216613c4e575b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182131661303e570390565b613c56612e94565b613c20565b60008212827f8000000000000000000000000000000000000000000000000000000000000000018212811516613c4e57827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182131661303e570390565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600211600083131616613d2f575b60017fc0000000000000000000000000000000000000000000000000000000000000008212600083121616613d22575b60011b90565b613d2a612e94565b613d1c565b613d37612e94565b613cec565b6001817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04600411600083131616613db2575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616613da5575b60021b90565b613dad612e94565b613d9f565b613dba612e94565b613d6f565b670de0b6b3a76400009060017809392ee8e921d5d073aff322e62439fcf32d7f344649470f908211600083131616613e25575b60017ffffffffffffffff6c6d11716de2a2f8c500cdd19dbc6030cd280cbb9b6b8f07082126000831216166135e9570290565b613e2d612e94565b613df2565b600082136000821390837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818104851183851616613eda575b60008212927f800000000000000000000000000000000000000000000000000000000000000094848787058512911616613ecd575b82600087129505861290851616613ec0575b0583129116166135e9570290565b613ec8612e94565b613eb2565b613ed5612e94565b613ea0565b613ee2612e94565b613e6b565b8115613f2b575b60001982147f8000000000000000000000000000000000000000000000000000000000000000821416613f1f570590565b613f27612e94565b0590565b613f33613590565b613eee565b7f80000000000000000000000000000000000000000000000000000000000000008114613f66575b60000390565b613f6e612e94565b613f60565b909180156140f5576000613f878385613b88565b126140cb57829181613f9884613dbf565b60028205613fa591613b88565b90613faf91613ee7565b93613fb991613b88565b670de0b6b3a7640000809381613fce88613be6565b613fd89085613e32565b613fe190613b11565b0582613fed868a613e32565b613ff690613b11565b0561400090613cb9565b61400991613b88565b956140148589613e32565b9061401e91613ee7565b61402791613c5b565b614031908361411b565b918061403c91613e32565b61404590613b11565b0561404f91613c5b565b9161405a8286613e32565b61406390613b11565b059061406e9161411b565b61407791613b88565b6140818280613e32565b9061408b84613d3c565b9061409591613e32565b61409e91613c5b565b6140a782613f38565b916140b191614136565b6140ba91613b88565b906140c4916140fc565b6002900590565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5091505090565b9061411661410c61321593613dbf565b6002830590613b88565b613ee7565b614131670de0b6b3a764000092613f2792613e32565b613b11565b9190600060038413156141d3575060008113806141c9575b1561419257915b61416b6140c4846141668185613ee7565b613b88565b905b838203614178575050565b90925061418c6140c4846141668185613ee7565b9061416d565b60008112806141b7575b156141b0576141aa90613f38565b91614155565b5081614155565b50826141c282613f38565b131561419c565b508281131561414e565b9290506141dc57565b60019150565b9060ff811660128110156141fd575061361461363691613552565b601210614208575090565b9061361961361461321593613521565b91906142238361524f565b61422d81846145fa565b5090936001600160a01b031684813b1561000e576040928351917f9dc29fac00000000000000000000000000000000000000000000000000000000835260009283818061429560049a898c8401602090939291936001600160a01b0360408201951681520152565b038183895af1801561452d575b61451a575b50833b156137c25784517f9f9ef98800000000000000000000000000000000000000000000000000000000815286810191825290839082908190602001038183885af1801561450d575b6144fa575b50823b156144f65783517fd8b8785300000000000000000000000000000000000000000000000000000000815285810191825290829082908190602001038183875af180156144e9575b6144d6575b5082517f705727b5000000000000000000000000000000000000000000000000000000009081815260209081818881885afa9081156144c9575b84916144ac575b506effffffffffffffffffffffffffffff809116151593846143d7575b5050505090506143b1575050565b517f5bf78ef4000000000000000000000000000000000000000000000000000000008152fd5b6144499450662386f26fc10000958751937f961be39100000000000000000000000000000000000000000000000000000000855280858b81855afa94851561449f575b839561447e575b50808495968b8b518095819382525afa928315614471575b92614454575b50501691166145c5565b1080388080806143a3565b61446a9250803d106106e5576106d68183613154565b388061443f565b6144796131f3565b614439565b8495506144988291823d84116106e5576106d68183613154565b9550614421565b6144a76131f3565b61441a565b6144c39150823d84116106e5576106d68183613154565b38614386565b6144d16131f3565b61437f565b8061067d6144e3926130fb565b38614345565b6144f16131f3565b614340565b5080fd5b8061067d614507926130fb565b386142f6565b6145156131f3565b6142f1565b8061067d614527926130fb565b386142a7565b6145356131f3565b6142a2565b6001600160a01b039093929361454f8161524f565b61455983826145fa565b5092909161456883809861383b565b1690813b1561000e576040928351917f9dc29fac00000000000000000000000000000000000000000000000000000000835260009283818061429560049a898c8401602090939291936001600160a01b0360408201951681520152565b6135c090670de0b6b3a764000081600019048111821515166145ed575b8360011c9102612ec4565b6145f5612e94565b6145e2565b916001600160a01b036000931691604051927f705727b500000000000000000000000000000000000000000000000000000000908185526020928386600481855afa95861561480f575b6000966147da575b509161473c93916146ba61467561394c956effffffffffffffffffffffffffffff809a166135d6565b604051907f18160ddd0000000000000000000000000000000000000000000000000000000082528582600481875afa9182156147cd575b6000926147ae575b506135c0565b966146c48861380a565b6146cd88613f38565b9184604051947f961be3910000000000000000000000000000000000000000000000000000000086528186600481865afa9586156147a1575b600096614782575b5060046040518094819382525afa948515614775575b600095614756575b50508060ca54941692169061481c565b9283831061474f5750613215838361304a565b9092508192565b61476d929550803d106106e5576106d68183613154565b92388061472c565b61477d6131f3565b614724565b61479a919650823d84116106e5576106d68183613154565b943861470e565b6147a96131f3565b614706565b6147c6919250863d881161075b5761074d8183613154565b90386146b4565b6147d56131f3565b6146ac565b61394c93919650916146ba614675614802879561473c983d88116106e5576106d68183613154565b989395505050919361464c565b6148176131f3565b614644565b9290926148298184613b88565b908361483486613dbf565b6002820561484191613b88565b9061484b91613ee7565b809461485685613dbf565b90670de0b6b3a76400009680889493600286950561487391613b88565b9061487d91613ee7565b61488691613c5b565b61488f91613e32565b61489890613b11565b05916148a385613be6565b6148ac91613e32565b6148b590613b11565b056148bf91613b88565b600290059283926148d08480613e32565b92806148db91613e32565b6148e491613e32565b6148ed90613b11565b056148f791613b88565b9061490191614136565b61490a91613b88565b61321591613c5b565b6001600160a01b0390811691161461492757565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b61496d670de0b6b3a7640000926706f05b59d3b20000926135d6565b7ffffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4dffff811161499957010490565b6149a1612e94565b010490565b92919493909385158015614a66575b6140cb576117778461186c85614a49816141168c614a27614a3f614a549f8f614a4f9f614a3a6118729f8f85670de0b6b3a7640000614a2d614131614a34948f614a27906118788c614116614a206141169f9e61410c9f614a196141169183613b88565b9c80613e32565b9380613e32565b90613e32565b0590613c5b565b9d613b88565b613dbf565b61186c818c6140fc565b926140fc565b613c5b565b60008112156132155761321590613f38565b5082156149b5565b80614a4f613f2792614af1600295611878614a898480613e32565b9160017f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211600083131616614b03575b60017fe0000000000000000000000000000000000000000000000000000000000000008212600083121616614af6575b881b613dbf565b614136565b614afe612e94565b614aea565b614b0b612e94565b614aba565b92939190614b1f828286614d5e565b8093919395614b2f85809961383b565b614b4c846001600160a01b031660005260d2602052604060002090565b614b57838254612ec4565b90556001600160a01b0380911693843b1561000e576040517f16c9e7a00000000000000000000000000000000000000000000000000000000081526004810194909452600094614bc3949086908290602490829084905af18015614d51575b614d3e575b501693612ec4565b823b156144f6576040517f9f9ef9880000000000000000000000000000000000000000000000000000000081526004810191909152662386f26fc1000092614cba929091818160248183875af18015614d31575b614d1e575b50604051917f961be3910000000000000000000000000000000000000000000000000000000083526020908184600481845afa938415614d11575b8394614ceb575b509080600492604051938480927f705727b50000000000000000000000000000000000000000000000000000000082525afa928315614cde575b92614cc1575b50506effffffffffffffffffffffffffffff80911691166145c5565b10612de657565b614cd79250803d106106e5576106d68183613154565b3880614c9e565b614ce66131f3565b614c98565b8291945091614d08600493823d84116106e5576106d68183613154565b94919250614c5e565b614d196131f3565b614c57565b8061067d614d2b926130fb565b38614c1c565b614d396131f3565b614c17565b8061067d614d4b926130fb565b38614bbb565b614d596131f3565b614bb6565b9190600090818312615024575b6001600160a01b03809116936040908151937f961be3910000000000000000000000000000000000000000000000000000000090818652602095600495878288818d5afa918215615017575b8392614ff4575b50614e64906effffffffffffffffffffffffffffff80931695169989888c8b8a519189835281838581845afa928315614fe7575b8993614fc8575b50818c518095817f705727b500000000000000000000000000000000000000000000000000000000948582525afa938415614fbb575b8994614f9c575b508c8c518097819382525afa938415614f8f575b8794614f70575b508886808060ca549716941692166149a6565b988289139788958b9087614f66575b50508515614ee4575b5050505050614ebe57505015614ea65750614ea3614e9c60cb5483614951565b809261304a565b91565b9190614eb56132159193613f38565b60cb5490614951565b517f9a6114b7000000000000000000000000000000000000000000000000000000008152fd5b9091928094955089129485614f03575b50505050503880808080614e7c565b8192939495508787518095819382525afa938415614f59575b93614f3a575b5050614f2d86613f38565b9116103880808080614ef4565b614f51929350803d106106e5576106d68183613154565b903880614f22565b614f616131f3565b614f1c565b1095508a38614e73565b614f889194508c8d3d106106e5576106d68183613154565b9238614e51565b614f976131f3565b614e4a565b614fb4919450823d84116106e5576106d68183613154565b9238614e36565b614fc36131f3565b614e2f565b614fe0919350823d84116106e5576106d68183613154565b9138614df9565b614fef6131f3565b614df2565b614e6491925061501090893d8b116106e5576106d68183613154565b9190614dbe565b61501f6131f3565b614db7565b9161503a9061503460cb54613be6565b906140fc565b91614d6b565b9060ff8116601281101561505f575090614a2761361461321593613552565b60121061506a575090565b9061507a61361461321593613521565b90613ee7565b610d3b61508c91613195565b6040517f18160ddd000000000000000000000000000000000000000000000000000000008082526020918281600481875afa9081156151e5575b6000916151c8575b50156151b9576132159282604051927f705727b50000000000000000000000000000000000000000000000000000000084528184600481865afa9384156151ac575b60009461518d575b5060046040518094819382525afa928315615180575b60009361514e575b50506effffffffffffffffffffffffffffff166145c5565b6effffffffffffffffffffffffffffff929350908161517892903d1061075b5761074d8183613154565b919038615136565b6151886131f3565b61512e565b6151a5919450823d84116106e5576106d68183613154565b9238615118565b6151b46131f3565b615110565b505050670de0b6b3a764000090565b6151df9150833d851161075b5761074d8183613154565b386150ce565b6151ed6131f3565b6150c6565b6001906000198114612ed0570190565b6001600160a01b039060d354811015615242575b60d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a601541690565b61524a612f0c565b615216565b61526c816001600160a01b031660005260d2602052604060002090565b54801580156154b1575b6154ad5761529a61529461528b60cd5461302a565b60cc549061304a565b82614951565b90816153d6575b6152af915060cd5490614951565b806152d3575b506001600160a01b0316600090815260d26020526040812055565b55565b6152dd8183613893565b50916001600160a01b0384169150813b1561000e576040517fa0f0f6040000000000000000000000000000000000000000000000000000000081526004810193909352600092838160248183875af180156153c9575b6153b6575b50813b156137c2576040517f16c9e7a000000000000000000000000000000000000000000000000000000000815260048101919091526000936152d09390928290602490829084905af180156153a9575b615396575b5091506152b5565b8061067d6153a3926130fb565b3861538e565b6153b16131f3565b615389565b8061067d6153c3926130fb565b38615338565b6153d16131f3565b615333565b6001600160a01b0383166154216153f560d0546001600160a01b031690565b93604051906339420b4560e11b8252602082600481875afa9182156119a45760009261198b57506141e2565b92813b1561000e576040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0391909116600482015260248101939093526152af92906000908290604490829084905af180156154a0575b61548d575b506152a1565b8061067d61549a926130fb565b38615487565b6154a86131f3565b615482565b5050565b5060ce54811061527656fea26469706673582212206960b4049a859811334dbaf495c0d82600c5a828f45139f3bfd1faf46a39179264736f6c634300080f0033",
  "devdoc": {
    "details": "The main entry-point of Wombat protocol Note: All variables are 18 decimals, except from that of underlying tokens",
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "addressOfAsset(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "details": "Asset needs to be created and added to pool before any operation. This function assumes tax free token.",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "exchangeRate(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "xr": "The exchange rate of LP token"
        }
      },
      "mintFee(address)": {
        "params": {
          "token": "The address of the token to collect fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "pauseAsset(address)": {
        "details": "pause asset, restricting deposit and swap operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quotePotentialDeposit(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "amount": "The amount to deposit",
          "token": "The token to deposit by user"
        },
        "returns": {
          "liquidity": "The potential liquidity user would receive",
          "reward": "reward"
        }
      },
      "quotePotentialSwap(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromAmount": "The amount to quote",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "fee": "The fee that would be applied"
        }
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity (amount of the lp assets) to be withdrawn",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "withdrewAmount": "The amount of the from-token that is withdrew"
        }
      },
      "removeAsset(address)": {
        "details": "Can only be called by owner",
        "params": {
          "token": "The address of token to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAmpFactor(uint256)": {
        "params": {
          "ampFactor_": "new pool's amplification factor"
        }
      },
      "setDev(address)": {
        "params": {
          "dev_": "new contract dev address"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "feeTo_": "new fee beneficiary"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "details": "This function assumes tax free token.",
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "unpauseAsset(address)": {
        "details": "unpause asset, enabling deposit and swap operations"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity to be withdrawn (in fromToken decimal)",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "toAmount": "The total amount withdrawn"
        }
      }
    },
    "title": "Pool",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "AssetRemoved(address,address)": {
        "notice": "An event thats emitted when asset is removed from Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "addressOfAsset(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "ampFactor()": {
        "notice": "Amplification factor"
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "dev()": {
        "notice": "Dev address"
      },
      "exchangeRate(address)": {
        "notice": "Returns the exchange rate of the LP token"
      },
      "getTokens()": {
        "notice": "Return list of tokens in the pool"
      },
      "haircutRate()": {
        "notice": "Haircut rate"
      },
      "initialize(uint256,uint256)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpDividendRatio()": {
        "notice": "LP dividend ratio : the ratio of haircut that should distribute to LP"
      },
      "mintFee(address)": {
        "notice": "Send fee collected to the fee beneficiary"
      },
      "mintFeeThreshold()": {
        "notice": "The threshold to mint fee (unit: WAD)"
      },
      "quotePotentialDeposit(address,uint256)": {
        "notice": "Quotes potential deposit from pool"
      },
      "quotePotentialSwap(address,address,int256)": {
        "notice": "Quotes potential outcome of a swap given current state, taking in account slippage and haircut"
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "notice": "Quotes potential withdrawal from other asset from the pool"
      },
      "removeAsset(address)": {
        "notice": "Removes asset from asset struct"
      },
      "retentionRatio()": {
        "notice": "Retention ratio: the ratio of haircut that should stay in the pool"
      },
      "setAmpFactor(uint256)": {
        "notice": "Changes the pools amplification factor. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setFeeTo(address)": {
        "notice": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setMintFeeThreshold(uint256)": {
        "notice": "Set min fee to mint"
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "notice": "Enables withdrawing liquidity from an asset using LP from a different asset"
      }
    },
    "notice": "Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5778,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_pausedAssets",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5909,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "ampFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 5912,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "haircutRate",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 5915,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "retentionRatio",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 5918,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "lpDividendRatio",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 5921,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "mintFeeThreshold",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 5924,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "dev",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 5926,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "feeTo",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 5928,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "masterWombat",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 5934,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_feeCollected",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_contract(IAsset)4041,t_uint256)"
      },
      {
        "astId": 5938,
        "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
        "label": "_assets",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(AssetMap)5906_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAsset)4041": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IAsset)4041)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IAsset)",
        "numberOfBytes": "32",
        "value": "t_contract(IAsset)4041"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IAsset)4041,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAsset)4041",
        "label": "mapping(contract IAsset => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetMap)5906_storage": {
        "encoding": "inplace",
        "label": "struct Pool.AssetMap",
        "members": [
          {
            "astId": 5896,
            "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5901,
            "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_contract(IAsset)4041)"
          },
          {
            "astId": 5905,
            "contract": "contracts/wombat-core/pool/Pool.sol:Pool",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}