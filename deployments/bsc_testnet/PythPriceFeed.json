{
  "address": "0x7B35b009F499535623C6B89F46d02445eFC2f538",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPyth",
          "name": "_pyth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPriceAgeBound",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPriceAgeBound",
          "type": "uint256"
        }
      ],
      "name": "SetMaxPriceAgeBound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPriceFeed",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "UpdateFallbackPriceFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "priceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPriceAge",
          "type": "uint256"
        }
      ],
      "name": "UpdatepriceID",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fallbackPriceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxPriceAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPriceAgeBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceIDs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "_fallbackPriceFeed",
          "type": "address"
        }
      ],
      "name": "setFallbackPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPriceAgeBound",
          "type": "uint256"
        }
      ],
      "name": "setMaxPriceAgeBound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_priceID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maxPriceAge",
          "type": "uint256"
        }
      ],
      "name": "setPriceID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71799231ff10318845625c614fdaa7a4c6be3eb2ad5de45b8f1d0c77677626ba",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0x7B35b009F499535623C6B89F46d02445eFC2f538",
    "transactionIndex": 0,
    "gasUsed": "573218",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000001000000000000000000000000000000800000000000000200000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000800000000000400000000000000000000000000000000000000000040001004000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000001",
    "blockHash": "0xd9b8fad8755fa76e55e2a06e9280c6eb7177108e50e00ccd440662c898cd0080",
    "transactionHash": "0x71799231ff10318845625c614fdaa7a4c6be3eb2ad5de45b8f1d0c77677626ba",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30329424,
        "transactionHash": "0x71799231ff10318845625c614fdaa7a4c6be3eb2ad5de45b8f1d0c77677626ba",
        "address": "0x7B35b009F499535623C6B89F46d02445eFC2f538",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000db9f9be4d6a033d622f6785ba6f8c3680dec2452"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd9b8fad8755fa76e55e2a06e9280c6eb7177108e50e00ccd440662c898cd0080"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 30329424,
        "transactionHash": "0x71799231ff10318845625c614fdaa7a4c6be3eb2ad5de45b8f1d0c77677626ba",
        "address": "0x7B35b009F499535623C6B89F46d02445eFC2f538",
        "topics": [
          "0xdbf066993ca6a3a38bfd6eb48f33d3ecd4f034d6f720786ec998d16a8a213bd2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000015180",
        "logIndex": 1,
        "blockHash": "0xd9b8fad8755fa76e55e2a06e9280c6eb7177108e50e00ccd440662c898cd0080"
      }
    ],
    "blockNumber": 30329424,
    "cumulativeGasUsed": "573218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd7308b14BF4008e7C7196eC35610B1427C5702EA",
    86400
  ],
  "numDeployments": 1,
  "solcInputHash": "677157ab1959102ac614f15c41c6b273",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"_pyth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceAgeBound\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPriceAgeBound\",\"type\":\"uint256\"}],\"name\":\"SetMaxPriceAgeBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceFeed\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"UpdateFallbackPriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"priceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPriceAge\",\"type\":\"uint256\"}],\"name\":\"UpdatepriceID\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fallbackPriceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxPriceAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceAgeBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceIDs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_fallbackPriceFeed\",\"type\":\"address\"}],\"name\":\"setFallbackPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPriceAgeBound\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceAgeBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_priceID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceAge\",\"type\":\"uint256\"}],\"name\":\"setPriceID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Pyth Price Feed with fallback\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fallbackPriceFeed()\":{\"notice\":\"the fallback price feed in case the price is not available on Pyth\"},\"getLatestPrice(address)\":{\"notice\":\"Returns the latest price.\"}},\"notice\":\"Contract to get the latest prices for multiple tokens from Pyth\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/asset/PythPriceFeed.sol\":\"PythPriceFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"},\"contracts/wombat-core/asset/OraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../interfaces/IPriceFeed.sol';\\n\\n/**\\n * @title Chainlink Price Feed\\n * @notice Contract to get the latest prices for multiple tokens from Chainlink\\n */\\nabstract contract OraclePriceFeed is IPriceFeed, Ownable {\\n    /// @notice the fallback price feed in case the price is not available on Pyth\\n    IPriceFeed public fallbackPriceFeed;\\n    uint256 public maxPriceAgeBound;\\n\\n    event SetMaxPriceAgeBound(uint256 maxPriceAgeBound);\\n    event UpdateFallbackPriceFeed(IPriceFeed priceFeed);\\n\\n    constructor(uint256 _maxPriceAgeBound) {\\n        setMaxPriceAgeBound(_maxPriceAgeBound);\\n    }\\n\\n    function _getFallbackPrice(IERC20 _token) internal view returns (uint256 price) {\\n        if (fallbackPriceFeed != IPriceFeed(address(0))) {\\n            return fallbackPriceFeed.getLatestPrice(_token);\\n        } else {\\n            revert('Price is too old');\\n        }\\n    }\\n\\n    function setFallbackPriceFeed(IPriceFeed _fallbackPriceFeed) external onlyOwner {\\n        fallbackPriceFeed = _fallbackPriceFeed;\\n        emit UpdateFallbackPriceFeed(_fallbackPriceFeed);\\n    }\\n\\n    function setMaxPriceAgeBound(uint256 _maxPriceAgeBound) public onlyOwner {\\n        maxPriceAgeBound = _maxPriceAgeBound;\\n        emit SetMaxPriceAgeBound(_maxPriceAgeBound);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe43a05b48f18c9f0e7a78053ac41e5bd6e8851d287117c14e23740c57171e954\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/asset/PythPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@pythnetwork/pyth-sdk-solidity/IPyth.sol';\\nimport '@pythnetwork/pyth-sdk-solidity/PythStructs.sol';\\n\\nimport './OraclePriceFeed.sol';\\n\\n/**\\n * @title Pyth Price Feed with fallback\\n * @notice Contract to get the latest prices for multiple tokens from Pyth\\n */\\ncontract PythPriceFeed is OraclePriceFeed {\\n    IPyth pyth;\\n    mapping(IERC20 => bytes32) public priceIDs;\\n    mapping(IERC20 => uint256) public maxPriceAge;\\n\\n    event UpdatepriceID(IERC20 token, bytes32 priceID, uint256 maxPriceAge);\\n\\n    constructor(IPyth _pyth, uint256 _maxPriceAgeBound) OraclePriceFeed(_maxPriceAgeBound) {\\n        pyth = _pyth;\\n    }\\n\\n    /**\\n     * Returns the latest price.\\n     */\\n    function getLatestPrice(IERC20 _token) external view returns (uint256 price) {\\n        bytes32 priceID = priceIDs[_token];\\n        PythStructs.Price memory priceStruct = pyth.getPrice(priceID);\\n\\n        // If the price is too old, use the fallback price feed\\n        if (block.timestamp - priceStruct.publishTime > maxPriceAge[_token]) {\\n            return _getFallbackPrice(_token);\\n        } else {\\n            require(priceStruct.price > 0);\\n            return uint256(int256(priceStruct.price)) * (10 ** uint256(int256(priceStruct.expo + 18)));\\n        }\\n    }\\n\\n    function setPriceID(IERC20 _token, bytes32 _priceID, uint256 _maxPriceAge) external onlyOwner {\\n        require(_maxPriceAge <= maxPriceAgeBound, 'invalid _maxPriceAge');\\n        priceIDs[_token] = _priceID;\\n        maxPriceAge[_token] = _maxPriceAge;\\n        emit UpdatepriceID(_token, _priceID, _maxPriceAge);\\n    }\\n}\\n\",\"keccak256\":\"0x70de948266a740fd023b51b30a080dee8d027f6d093c11fe08274ac48671f9ba\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IPriceFeed {\\n    /**\\n     * @notice return price of the asset in 18 decimals\\n     */\\n    function getLatestPrice(IERC20 _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe70b2abd69cabdefd722b1b007c85c306159b9f5db08a917ee216f319d58b441\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080346100d957601f61092438819003918201601f19168301916001600160401b038311848410176100de5780849260409485528339810103126100d95780516001600160a01b038082169290918390036100d9576020807fdbf066993ca6a3a38bfd6eb48f33d3ecd4f034d6f720786ec998d16a8a213bd292015160005460018060a01b03199433868316176000553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380600255604051908152a1603554161760355560405161082f90816100f58239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260048036101561001457600080fd5b600091823560e01c8063051adf121461044857806316345f181461041b57806328734f49146103fc578063327d486e1461032a5780635109d3d1146102b05780636579b73e14610279578063715018a6146102105780638da5cb5b146101ea578063b8c400f0146101c2578063c1d5e4ce146101875763f2fde38b1461009957600080fd5b34610183576020366003190112610183578135916001600160a01b039182841680940361017f576100c86104b1565b831561011657505082548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b8382346101be5760203660031901126101be57806020926001600160a01b036101ae610496565b1681526036845220549051908152f35b5080fd5b8382346101be57816003193601126101be576020906001600160a01b03600154169051908152f35b8382346101be57816003193601126101be576001600160a01b0360209254169051908152f35b83346102765780600319360112610276576102296104b1565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8382346101be5760203660031901126101be57806020926001600160a01b036102a0610496565b1681526037845220549051908152f35b5090346101835760203660031901126101835735906001600160a01b038216809203610183577f6cff7fca5d8d3ff53de63073399d617b38b793a4e9d03d57dfe1ab2c88c477df916020916103036104b1565b8173ffffffffffffffffffffffffffffffffffffffff19600154161760015551908152a180f35b50903461018357606036600319011261018357610345610496565b9160243592604435926103566104b1565b60025484116103b95750917f64b1523fae76cc6cca244a7cd511849f1d18e41a5b50db4e31649048a0c3a3c493916001600160a01b036060941692838752603660205280828820556037602052828288205581519384526020840152820152a180f35b606490602084519162461bcd60e51b8352820152601460248201527f696e76616c6964205f6d617850726963654167650000000000000000000000006044820152fd5b8382346101be57816003193601126101be576020906002549051908152f35b8382346101be5760203660031901126101be5760209061044161043c610496565b610541565b9051908152f35b509034610183576020366003190112610183577fdbf066993ca6a3a38bfd6eb48f33d3ecd4f034d6f720786ec998d16a8a213bd291602091359061048a6104b1565b8160025551908152a180f35b600435906001600160a01b03821682036104ac57565b600080fd5b6001600160a01b036000541633036104c557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761052b57604052565b634e487b7160e01b600052604160045260246000fd5b6080906001600160a01b038082169060009082825260366020526040808320549160355416938151968780967f31d98b3f0000000000000000000000000000000000000000000000000000000082526004958683015260249788915afa96871561071157849761066a575b50606087015142039042821161065757845260376020528184205410156105de57505050506105db915061071b565b90565b9091929350845160070b948386131561065357015160030b601201637fffffff8113637fffffff198212176106425760030b604d811161064257600a0a938481029481860414901517156106325750505090565b601190634e487b7160e01b835252fd5b50601190634e487b7160e01b835252fd5b8380fd5b505050601190634e487b7160e01b835252fd5b9096506080813d8211610709575b8161068560809383610509565b810103126106535781519067ffffffffffffffff60808301818111848210176106f757845281518060070b81036106f3578352602082015190811681036106ef576020830152828101518060030b81036106ef5790606091848401520151606082015295386105ac565b8580fd5b8680fd5b8787604188634e487b7160e01b835252fd5b3d9150610678565b82513d86823e3d90fd5b6001546001600160a01b03908116919082156107b557602460209260405194859384927f16345f180000000000000000000000000000000000000000000000000000000084521660048301525afa9081156107a95760009161077b575090565b906020823d82116107a1575b8161079460209383610509565b8101031261027657505190565b3d9150610787565b6040513d6000823e3d90fd5b606460405162461bcd60e51b815260206004820152601060248201527f507269636520697320746f6f206f6c64000000000000000000000000000000006044820152fdfea2646970667358221220799bfb3f55e5599e23453ffa9f58caf94139f9874fad998e1e4120efceec1c4564736f6c63430008120033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c8063051adf121461044857806316345f181461041b57806328734f49146103fc578063327d486e1461032a5780635109d3d1146102b05780636579b73e14610279578063715018a6146102105780638da5cb5b146101ea578063b8c400f0146101c2578063c1d5e4ce146101875763f2fde38b1461009957600080fd5b34610183576020366003190112610183578135916001600160a01b039182841680940361017f576100c86104b1565b831561011657505082548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b8382346101be5760203660031901126101be57806020926001600160a01b036101ae610496565b1681526036845220549051908152f35b5080fd5b8382346101be57816003193601126101be576020906001600160a01b03600154169051908152f35b8382346101be57816003193601126101be576001600160a01b0360209254169051908152f35b83346102765780600319360112610276576102296104b1565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8382346101be5760203660031901126101be57806020926001600160a01b036102a0610496565b1681526037845220549051908152f35b5090346101835760203660031901126101835735906001600160a01b038216809203610183577f6cff7fca5d8d3ff53de63073399d617b38b793a4e9d03d57dfe1ab2c88c477df916020916103036104b1565b8173ffffffffffffffffffffffffffffffffffffffff19600154161760015551908152a180f35b50903461018357606036600319011261018357610345610496565b9160243592604435926103566104b1565b60025484116103b95750917f64b1523fae76cc6cca244a7cd511849f1d18e41a5b50db4e31649048a0c3a3c493916001600160a01b036060941692838752603660205280828820556037602052828288205581519384526020840152820152a180f35b606490602084519162461bcd60e51b8352820152601460248201527f696e76616c6964205f6d617850726963654167650000000000000000000000006044820152fd5b8382346101be57816003193601126101be576020906002549051908152f35b8382346101be5760203660031901126101be5760209061044161043c610496565b610541565b9051908152f35b509034610183576020366003190112610183577fdbf066993ca6a3a38bfd6eb48f33d3ecd4f034d6f720786ec998d16a8a213bd291602091359061048a6104b1565b8160025551908152a180f35b600435906001600160a01b03821682036104ac57565b600080fd5b6001600160a01b036000541633036104c557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761052b57604052565b634e487b7160e01b600052604160045260246000fd5b6080906001600160a01b038082169060009082825260366020526040808320549160355416938151968780967f31d98b3f0000000000000000000000000000000000000000000000000000000082526004958683015260249788915afa96871561071157849761066a575b50606087015142039042821161065757845260376020528184205410156105de57505050506105db915061071b565b90565b9091929350845160070b948386131561065357015160030b601201637fffffff8113637fffffff198212176106425760030b604d811161064257600a0a938481029481860414901517156106325750505090565b601190634e487b7160e01b835252fd5b50601190634e487b7160e01b835252fd5b8380fd5b505050601190634e487b7160e01b835252fd5b9096506080813d8211610709575b8161068560809383610509565b810103126106535781519067ffffffffffffffff60808301818111848210176106f757845281518060070b81036106f3578352602082015190811681036106ef576020830152828101518060030b81036106ef5790606091848401520151606082015295386105ac565b8580fd5b8680fd5b8787604188634e487b7160e01b835252fd5b3d9150610678565b82513d86823e3d90fd5b6001546001600160a01b03908116919082156107b557602460209260405194859384927f16345f180000000000000000000000000000000000000000000000000000000084521660048301525afa9081156107a95760009161077b575090565b906020823d82116107a1575b8161079460209383610509565b8101031261027657505190565b3d9150610787565b6040513d6000823e3d90fd5b606460405162461bcd60e51b815260206004820152601060248201527f507269636520697320746f6f206f6c64000000000000000000000000000000006044820152fdfea2646970667358221220799bfb3f55e5599e23453ffa9f58caf94139f9874fad998e1e4120efceec1c4564736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Pyth Price Feed with fallback",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fallbackPriceFeed()": {
        "notice": "the fallback price feed in case the price is not available on Pyth"
      },
      "getLatestPrice(address)": {
        "notice": "Returns the latest price."
      }
    },
    "notice": "Contract to get the latest prices for multiple tokens from Pyth",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1476,
        "contract": "contracts/wombat-core/asset/PythPriceFeed.sol:PythPriceFeed",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9270,
        "contract": "contracts/wombat-core/asset/PythPriceFeed.sol:PythPriceFeed",
        "label": "fallbackPriceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPriceFeed)10508"
      },
      {
        "astId": 9272,
        "contract": "contracts/wombat-core/asset/PythPriceFeed.sol:PythPriceFeed",
        "label": "maxPriceAgeBound",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9357,
        "contract": "contracts/wombat-core/asset/PythPriceFeed.sol:PythPriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9452,
        "contract": "contracts/wombat-core/asset/PythPriceFeed.sol:PythPriceFeed",
        "label": "pyth",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IPyth)8564"
      },
      {
        "astId": 9457,
        "contract": "contracts/wombat-core/asset/PythPriceFeed.sol:PythPriceFeed",
        "label": "priceIDs",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_contract(IERC20)4216,t_bytes32)"
      },
      {
        "astId": 9462,
        "contract": "contracts/wombat-core/asset/PythPriceFeed.sol:PythPriceFeed",
        "label": "maxPriceAge",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_contract(IERC20)4216,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4216": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)10508": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IPyth)8564": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)4216,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)4216",
        "label": "mapping(contract IERC20 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_contract(IERC20)4216,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)4216",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}