{
  "address": "0xabdA1181EB1539512a731FFDdE86e71b90BEB01D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMultiRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWomWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IMultiRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basePartition",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boostedPartition",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionPartition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "womPerSec",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accWomPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVeWOM",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVeWOM",
          "type": "address"
        }
      ],
      "name": "UpdateVeWOM",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_allocPoint",
          "type": "uint96"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IMultiRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basePartition",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostedPartition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWomWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_wom",
          "type": "address"
        },
        {
          "internalType": "contract IVeWom",
          "name": "_veWom",
          "type": "address"
        },
        {
          "internalType": "uint104",
          "name": "_womPerSec",
          "type": "uint104"
        },
        {
          "internalType": "uint16",
          "name": "_basePartition",
          "type": "uint16"
        },
        {
          "internalType": "uint40",
          "name": "_startTimestamp",
          "type": "uint40"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "multiClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newMasterWombat",
      "outputs": [
        {
          "internalType": "contract IMasterWombatV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "bonusTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "bonusTokenSymbols",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pendingBonusRewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "allocPoint",
          "type": "uint96"
        },
        {
          "internalType": "contract IMultiRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumOfFactors",
          "type": "uint256"
        },
        {
          "internalType": "uint104",
          "name": "accWomPerShare",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "accWomPerFactorShare",
          "type": "uint104"
        },
        {
          "internalType": "uint40",
          "name": "lastRewardTimestamp",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "rewarderBonusTokenInfo",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "bonusTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "bonusTokenSymbols",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_allocPoint",
          "type": "uint96"
        },
        {
          "internalType": "contract IMultiRewarder",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterWombatV2",
          "name": "_newMasterWombat",
          "type": "address"
        }
      ],
      "name": "setNewMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVeWom",
          "name": "_newVeWom",
          "type": "address"
        }
      ],
      "name": "setVeWom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_basePartition",
          "type": "uint16"
        }
      ],
      "name": "updateEmissionPartition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint104",
          "name": "_womPerSec",
          "type": "uint104"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newVeWomBalance",
          "type": "uint256"
        }
      ],
      "name": "updateFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "factor",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardDebt",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "pendingWom",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veWom",
      "outputs": [
        {
          "internalType": "contract IVeWom",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wom",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "womPerSec",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa72f37726cd3533aefc8a19da25a6d2eee2d21bcbcd6401d50e69ffccd87038",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0xabdA1181EB1539512a731FFDdE86e71b90BEB01D",
    "transactionIndex": 3,
    "gasUsed": "3845556",
    "logsBloom": "0x
    "blockHash": "0x97f87e2d712b8bfd51c14280a37a4ca7d3218384a57eba1a9bc217b89f8f34cf",
    "transactionHash": "0xfa72f37726cd3533aefc8a19da25a6d2eee2d21bcbcd6401d50e69ffccd87038",
    "logs": [],
    "blockNumber": 24499175,
    "cumulativeGasUsed": "3925322",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37d2c83c5a331736be0a331625ac12a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMultiRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"EmergencyWomWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IMultiRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePartition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostedPartition\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"womPerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accWomPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVeWOM\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVeWOM\",\"type\":\"address\"}],\"name\":\"UpdateVeWOM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_allocPoint\",\"type\":\"uint96\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IMultiRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePartition\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostedPartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWomWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wom\",\"type\":\"address\"},{\"internalType\":\"contract IVeWom\",\"name\":\"_veWom\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"_womPerSec\",\"type\":\"uint104\"},{\"internalType\":\"uint16\",\"name\":\"_basePartition\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"_startTimestamp\",\"type\":\"uint40\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"multiClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newMasterWombat\",\"outputs\":[{\"internalType\":\"contract IMasterWombatV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingBonusRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"allocPoint\",\"type\":\"uint96\"},{\"internalType\":\"contract IMultiRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumOfFactors\",\"type\":\"uint256\"},{\"internalType\":\"uint104\",\"name\":\"accWomPerShare\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"accWomPerFactorShare\",\"type\":\"uint104\"},{\"internalType\":\"uint40\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewarderBonusTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_allocPoint\",\"type\":\"uint96\"},{\"internalType\":\"contract IMultiRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterWombatV2\",\"name\":\"_newMasterWombat\",\"type\":\"address\"}],\"name\":\"setNewMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVeWom\",\"name\":\"_newVeWom\",\"type\":\"address\"}],\"name\":\"setVeWom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_basePartition\",\"type\":\"uint16\"}],\"name\":\"updateEmissionPartition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint104\",\"name\":\"_womPerSec\",\"type\":\"uint104\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newVeWomBalance\",\"type\":\"uint256\"}],\"name\":\"updateFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"factor\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingWom\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veWom\",\"outputs\":[{\"internalType\":\"contract IVeWom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wom\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"womPerSec\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Updates: - pack struct - move pendingWom into UserInfo - use MultiRewarderPerSec\",\"kind\":\"dev\",\"methods\":{\"add(uint96,address,address)\":{\"details\":\"Reverts if the same LP token is added more than once.\",\"params\":{\"_allocPoint\":\"allocation points for this LP\",\"_lpToken\":\"the corresponding lp token\",\"_rewarder\":\"the rewarder\"}},\"deposit(uint256,uint256)\":{\"details\":\"it is possible to call this function with _amount == 0 to claim current rewards\",\"params\":{\"_amount\":\"amount to deposit\",\"_pid\":\"the pool id\"}},\"depositFor(uint256,uint256,address)\":{\"details\":\"user must initiate transaction from masterchef\",\"params\":{\"_amount\":\"amount to deposit\",\"_pid\":\"the pool id\",\"_user\":\"the user being represented\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"massUpdatePools()\":{\"details\":\"Be careful of gas spending!\"},\"migrate(uint256[])\":{\"details\":\"Assume the orginal MasterWombat has stopped emisions hence we can skip updatePool() to save gas cost\"},\"multiClaim(uint256[])\":{\"params\":{\"_pids\":\"array pids, pools to claim\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingTokens(uint256,address)\":{\"params\":{\"_pid\":\"the pool id\",\"_user\":\"the user address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewarderBonusTokenInfo(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"set(uint256,uint96,address,bool)\":{\"params\":{\"_allocPoint\":\"allocation points\",\"_pid\":\"the pool id\",\"_rewarder\":\"the rewarder\",\"overwrite\":\"overwrite rewarder?\"}},\"setVeWom(address)\":{\"params\":{\"_newVeWom\":\"the new VeWom address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"updateEmissionPartition(uint16)\":{\"params\":{\"_basePartition\":\"the future base partition\"}},\"updateEmissionRate(uint104)\":{\"details\":\"Pancake has to add hidden dummy pools inorder to alter the emission,here we make it simple and transparent to all.\",\"params\":{\"_womPerSec\":\"wom amount to be updated\"}},\"updateFactor(address,uint256)\":{\"details\":\"can only be called by veWom\",\"params\":{\"_newVeWomBalance\":\"the amount of veWOM\",\"_user\":\"the user to update\"}},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"the amount to withdraw\",\"_pid\":\"the pool id\"}}},\"title\":\"MasterWombatV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(uint96,address,address)\":{\"notice\":\"Add a new lp to the pool. Can only be called by the owner.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit LP tokens to MasterChef for WOM allocation.\"},\"depositFor(uint256,uint256,address)\":{\"notice\":\"Deposit LP tokens to MasterChef for WOM allocation on behalf of user\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"emergencyWomWithdraw()\":{\"notice\":\"In case we need to manually migrate WOM funds from MasterChef Sends all remaining wom from the contract to the owner\"},\"massUpdatePools()\":{\"notice\":\"Update reward variables for all pools.\"},\"migrate(uint256[])\":{\"notice\":\"Helper function to migrate fund from multiple pools to the new MasterWombat.user must initiate transaction from masterchef\"},\"multiClaim(uint256[])\":{\"notice\":\"claims rewards for multiple pids\"},\"pendingTokens(uint256,address)\":{\"notice\":\"View function to see pending WOMs on frontend.\"},\"poolLength()\":{\"notice\":\"returns pool length\"},\"rewarderBonusTokenInfo(uint256)\":{\"notice\":\"Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm\"},\"set(uint256,uint96,address,bool)\":{\"notice\":\"Update the given pool's WOM allocation point. Can only be called by the owner.\"},\"setVeWom(address)\":{\"notice\":\"updates veWom address\"},\"updateEmissionPartition(uint16)\":{\"notice\":\"updates emission partition\"},\"updateEmissionRate(uint104)\":{\"notice\":\"updates emission rate\"},\"updateFactor(address,uint256)\":{\"notice\":\"updates factor after any veWom token operation (minting/burning)\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool to be up-to-date.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw LP tokens from MasterWombat.Automatically harvest pending rewards and sends to user\"},\"womPerSec()\":{\"notice\":\"WOM tokens created per second. 13.18 fixed point\"}},\"notice\":\"MasterWombat is a boss. He is not afraid of any snakes. In fact, he drinks their venoms. So, veWom holders boost their (boosted) emissions. This contract rewards users in function of their amount of lp staked (base pool) factor (boosted pool) Factor and sumOfFactors are updated by contract VeWom.sol after any veWom minting/burning (veERC20Upgradeable hook). Note that it's ownable and the owner wields tremendous power. The ownership will be transferred to a governance smart contract once Wombat is sufficiently distributed and the community can show to govern itself.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/MasterWombatV2.sol\":\"MasterWombatV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc4fad3a1df63344db686f3764208f5e62592346ec3bc5a7fcb161f9d1b1e59b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/wombat-governance/MasterWombatV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport './libraries/DSMath.sol';\\nimport './interfaces/IVeWom.sol';\\nimport './interfaces/IMasterWombatV2.sol';\\nimport './interfaces/IMultiRewarder.sol';\\n\\n/// @title MasterWombatV2\\n/// @notice MasterWombat is a boss. He is not afraid of any snakes. In fact, he drinks their venoms. So, veWom holders boost\\n/// their (boosted) emissions. This contract rewards users in function of their amount of lp staked (base pool) factor (boosted pool)\\n/// Factor and sumOfFactors are updated by contract VeWom.sol after any veWom minting/burning (veERC20Upgradeable hook).\\n/// Note that it's ownable and the owner wields tremendous power. The ownership\\n/// will be transferred to a governance smart contract once Wombat is sufficiently\\n/// distributed and the community can show to govern itself.\\n/// @dev Updates:\\n/// - pack struct\\n/// - move pendingWom into UserInfo\\n/// - use MultiRewarderPerSec\\ncontract MasterWombatV2 is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    IMasterWombatV2\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        // storage slot 1\\n        uint128 amount; // 20.18 fixed point. How many LP tokens the user has provided.\\n        uint128 factor; // 20.18 fixed point. boosted factor = sqrt (lpAmount * veWom.balanceOf())\\n        // storage slot 2\\n        uint128 rewardDebt; // 20.18 fixed point. Reward debt. See explanation below.\\n        uint128 pendingWom; // 20.18 fixed point. Amount of pending wom\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of WOMs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   ((user.amount * pool.accWomPerShare + user.factor * pool.accWomPerFactorShare) / 1e12) -\\n        //        user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accWomPerShare`, `accWomPerFactorShare` (and `lastRewardTimestamp`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        // storage slot 1\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint96 allocPoint; // How many allocation points assigned to this pool. WOMs to distribute per second.\\n        // storage slot 2\\n        IMultiRewarder rewarder;\\n        // storage slot 3\\n        uint256 sumOfFactors; // the sum of all boosted factors by all of the users in the pool\\n        // storage slot 4\\n        uint104 accWomPerShare; // 19.12 fixed point. Accumulated WOMs per share, times 1e12.\\n        uint104 accWomPerFactorShare; // 19.12 fixed point.accumulated wom per factor share\\n        uint40 lastRewardTimestamp; // Last timestamp that WOMs distribution occurs.\\n    }\\n\\n    // Wom token\\n    IERC20 public wom;\\n    // Venom does not seem to hurt the Wombat, it only makes it stronger.\\n    IVeWom public veWom;\\n    // New Master Wombat address for future migrations\\n    IMasterWombatV2 public newMasterWombat;\\n    /// @notice WOM tokens created per second. 13.18 fixed point\\n    uint104 public womPerSec;\\n    // Emissions: both must add to 1000 => 100%\\n    // base partition emissions (e.g. 300 for 30%)\\n    uint16 public basePartition;\\n    // Total allocation points. Must be the sum of all allocation points in all pools. 10.18 fixed point\\n    uint96 public totalAllocPoint;\\n    // The timestamp when WOM mining starts.\\n    uint40 public startTimestamp;\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Set of all LP tokens that have been added as pools\\n    EnumerableSet.AddressSet private lpTokens;\\n    // userInfo[pid][user], Info of each user that stakes LP tokens\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Mapping of asset to pid. Offset by +1 to distinguish with default value\\n    mapping(address => uint256) internal assetPid;\\n\\n    event Add(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IMultiRewarder indexed rewarder);\\n    event Set(uint256 indexed pid, uint256 allocPoint, IMultiRewarder indexed rewarder, bool overwrite);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event DepositFor(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardTimestamp, uint256 lpSupply, uint256 accWomPerShare);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdateEmissionRate(address indexed user, uint256 womPerSec);\\n    event UpdateEmissionPartition(address indexed user, uint256 basePartition, uint256 boostedPartition);\\n    event UpdateVeWOM(address indexed user, address oldVeWOM, address newVeWOM);\\n    event EmergencyWomWithdraw(address owner, uint256 balance);\\n\\n    /// @dev Modifier ensuring that certain function can only be called by VeWom\\n    modifier onlyVeWom() {\\n        require(address(veWom) == msg.sender, 'MasterWombat: caller is not VeWom');\\n        _;\\n    }\\n\\n    function initialize(\\n        IERC20 _wom,\\n        IVeWom _veWom,\\n        uint104 _womPerSec,\\n        uint16 _basePartition,\\n        uint40 _startTimestamp\\n    ) external initializer {\\n        require(address(_wom) != address(0), 'wom address cannot be zero');\\n        require(_womPerSec != 0, 'wom per sec cannot be zero');\\n        require(_basePartition <= 1000, 'base partition must be in range 0, 1000');\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        wom = _wom;\\n        veWom = _veWom;\\n        womPerSec = _womPerSec;\\n        basePartition = _basePartition;\\n        startTimestamp = _startTimestamp;\\n        totalAllocPoint = 0;\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setNewMasterWombat(IMasterWombatV2 _newMasterWombat) external onlyOwner {\\n        newMasterWombat = _newMasterWombat;\\n    }\\n\\n    /// @notice returns pool length\\n    function poolLength() external view override returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getAssetPid(address asset) external view override returns (uint256) {\\n        // revert if asset not exist\\n        return assetPid[asset] - 1;\\n    }\\n\\n    function boostedPartition() external view returns (uint256) {\\n        return 1000 - basePartition;\\n    }\\n\\n    /// @notice Add a new lp to the pool. Can only be called by the owner.\\n    /// @dev Reverts if the same LP token is added more than once.\\n    /// @param _allocPoint allocation points for this LP\\n    /// @param _lpToken the corresponding lp token\\n    /// @param _rewarder the rewarder\\n    function add(\\n        uint96 _allocPoint,\\n        IERC20 _lpToken,\\n        IMultiRewarder _rewarder\\n    ) external onlyOwner {\\n        require(Address.isContract(address(_lpToken)), 'add: LP token must be a valid contract');\\n        require(\\n            Address.isContract(address(_rewarder)) || address(_rewarder) == address(0),\\n            'add: rewarder must be contract or zero'\\n        );\\n        require(!lpTokens.contains(address(_lpToken)), 'add: LP already added');\\n\\n        // update all pools\\n        massUpdatePools();\\n\\n        // update last time rewards were calculated to now\\n        uint40 lastRewardTimestamp = block.timestamp > startTimestamp ? uint40(block.timestamp) : startTimestamp;\\n\\n        // add _allocPoint to total alloc points\\n        totalAllocPoint += _allocPoint;\\n\\n        // update PoolInfo with the new LP\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: to96(_allocPoint),\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accWomPerShare: 0,\\n                rewarder: _rewarder,\\n                sumOfFactors: 0,\\n                accWomPerFactorShare: 0\\n            })\\n        );\\n        assetPid[address(_lpToken)] = poolInfo.length;\\n\\n        // add lpToken to the lpTokens enumerable set\\n        lpTokens.add(address(_lpToken));\\n        emit Add(poolInfo.length - 1, _allocPoint, _lpToken, _rewarder);\\n    }\\n\\n    /// @notice Update the given pool's WOM allocation point. Can only be called by the owner.\\n    /// @param _pid the pool id\\n    /// @param _allocPoint allocation points\\n    /// @param _rewarder the rewarder\\n    /// @param overwrite overwrite rewarder?\\n    function set(\\n        uint256 _pid,\\n        uint96 _allocPoint,\\n        IMultiRewarder _rewarder,\\n        bool overwrite\\n    ) external onlyOwner {\\n        require(\\n            Address.isContract(address(_rewarder)) || address(_rewarder) == address(0),\\n            'set: rewarder must be contract or zero'\\n        );\\n        massUpdatePools();\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n        poolInfo[_pid].allocPoint = to96(_allocPoint);\\n        if (overwrite) {\\n            poolInfo[_pid].rewarder = _rewarder;\\n        }\\n        emit Set(_pid, _allocPoint, overwrite ? _rewarder : poolInfo[_pid].rewarder, overwrite);\\n    }\\n\\n    /// @notice View function to see pending WOMs on frontend.\\n    /// @param _pid the pool id\\n    /// @param _user the user address\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 pendingRewards,\\n            IERC20[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accWomPerShare = pool.accWomPerShare;\\n        uint256 accWomPerFactorShare = pool.accWomPerFactorShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 secondsElapsed = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 womReward = (secondsElapsed * womPerSec * pool.allocPoint) / totalAllocPoint;\\n            accWomPerShare += to104((womReward * 1e12 * basePartition) / (lpSupply * 1000));\\n            if (pool.sumOfFactors != 0) {\\n                accWomPerFactorShare += to104((womReward * 1e12 * (1000 - basePartition)) / (pool.sumOfFactors * 1000));\\n            }\\n        }\\n        pendingRewards =\\n            ((uint256(user.amount) * accWomPerShare + uint256(user.factor) * accWomPerFactorShare) / 1e12) +\\n            user.pendingWom -\\n            user.rewardDebt;\\n        // If it's a double reward farm, we return info about the bonus token\\n        if (address(pool.rewarder) != address(0)) {\\n            (bonusTokenAddresses, bonusTokenSymbols) = rewarderBonusTokenInfo(_pid);\\n            pendingBonusRewards = pool.rewarder.pendingTokens(_user);\\n        }\\n    }\\n\\n    /// @notice Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm\\n    /// @param _pid the pool id\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        public\\n        view\\n        override\\n        returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (address(pool.rewarder) == address(0)) {\\n            return (bonusTokenAddresses, bonusTokenSymbols);\\n        }\\n\\n        bonusTokenAddresses = pool.rewarder.rewardTokens();\\n        uint256 len = bonusTokenAddresses.length;\\n        bonusTokenSymbols = new string[](len);\\n        for (uint256 i; i < len; ++i) {\\n            if (address(bonusTokenAddresses[i]) == address(0)) {\\n                bonusTokenSymbols[i] = 'BNB';\\n            } else {\\n                bonusTokenSymbols[i] = IERC20Metadata(address(bonusTokenAddresses[i])).symbol();\\n            }\\n        }\\n    }\\n\\n    /// @notice Update reward variables for all pools.\\n    /// @dev Be careful of gas spending!\\n    function massUpdatePools() public override {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    /// @notice Update reward variables of the given pool to be up-to-date.\\n    /// @param _pid the pool id\\n    function updatePool(uint256 _pid) external override {\\n        _updatePool(_pid);\\n    }\\n\\n    function _updatePool(uint256 _pid) private {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        // update only if now > last time we updated rewards\\n        if (block.timestamp > pool.lastRewardTimestamp) {\\n            uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n            // if balance of lp supply is 0, update lastRewardTime and quit function\\n            if (lpSupply == 0) {\\n                pool.lastRewardTimestamp = uint40(block.timestamp);\\n                return;\\n            }\\n            // calculate seconds elapsed since last update\\n            uint256 secondsElapsed = block.timestamp - pool.lastRewardTimestamp;\\n\\n            // calculate wom reward\\n            uint256 womReward = (secondsElapsed * womPerSec * pool.allocPoint) / totalAllocPoint;\\n\\n            // update accWomPerShare to reflect base rewards\\n            pool.accWomPerShare += to104((womReward * 1e12 * basePartition) / (lpSupply * 1000));\\n\\n            // update accWomPerFactorShare to reflect boosted rewards\\n            if (pool.sumOfFactors == 0) {\\n                pool.accWomPerFactorShare = 0;\\n            } else {\\n                pool.accWomPerFactorShare += to104(\\n                    (womReward * 1e12 * (1000 - basePartition)) / (pool.sumOfFactors * 1000)\\n                );\\n            }\\n\\n            // update lastRewardTimestamp to now\\n            pool.lastRewardTimestamp = uint40(block.timestamp);\\n            emit UpdatePool(_pid, pool.lastRewardTimestamp, lpSupply, pool.accWomPerShare);\\n        }\\n    }\\n\\n    /// @notice Helper function to migrate fund from multiple pools to the new MasterWombat.\\n    /// @notice user must initiate transaction from masterchef\\n    /// @dev Assume the orginal MasterWombat has stopped emisions\\n    /// hence we can skip updatePool() to save gas cost\\n    function migrate(uint256[] calldata _pids) external override nonReentrant {\\n        require(address(newMasterWombat) != (address(0)), 'to where?');\\n\\n        _multiClaim(_pids);\\n        for (uint256 i = 0; i < _pids.length; ++i) {\\n            uint256 pid = _pids[i];\\n            UserInfo storage user = userInfo[pid][msg.sender];\\n\\n            if (user.amount > 0) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                pool.lpToken.approve(address(newMasterWombat), user.amount);\\n                uint256 newPid = newMasterWombat.getAssetPid(address(pool.lpToken));\\n                newMasterWombat.depositFor(newPid, user.amount, msg.sender);\\n\\n                pool.sumOfFactors -= user.factor;\\n                delete userInfo[pid][msg.sender];\\n            }\\n        }\\n    }\\n\\n    /// @notice Deposit LP tokens to MasterChef for WOM allocation on behalf of user\\n    /// @dev user must initiate transaction from masterchef\\n    /// @param _pid the pool id\\n    /// @param _amount amount to deposit\\n    /// @param _user the user being represented\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external override nonReentrant whenNotPaused {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        // update pool in case user has deposited\\n        _updatePool(_pid);\\n        if (user.amount > 0) {\\n            // Harvest WOM\\n            uint256 pending = ((uint256(user.amount) *\\n                pool.accWomPerShare +\\n                uint256(user.factor) *\\n                pool.accWomPerFactorShare) / 1e12) +\\n                user.pendingWom -\\n                user.rewardDebt;\\n            user.pendingWom = 0;\\n\\n            pending = safeWomTransfer(payable(_user), pending);\\n            emit Harvest(_user, _pid, pending);\\n        }\\n\\n        // update amount of lp staked by user\\n        user.amount += to128(_amount);\\n\\n        // update boosted factor\\n        uint256 oldFactor = user.factor;\\n        user.factor = to128(DSMath.sqrt(user.amount * veWom.balanceOf(_user), user.amount));\\n        pool.sumOfFactors = pool.sumOfFactors + user.factor - oldFactor;\\n\\n        // update reward debt\\n        user.rewardDebt = to128(\\n            (uint256(user.amount) * pool.accWomPerShare + uint256(user.factor) * pool.accWomPerFactorShare) / 1e12\\n        );\\n\\n        IMultiRewarder rewarder = poolInfo[_pid].rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onReward(_user, user.amount);\\n        }\\n\\n        // safe transfer is not needed for Asset\\n        pool.lpToken.transferFrom(msg.sender, address(this), _amount);\\n        emit DepositFor(_user, _pid, _amount);\\n    }\\n\\n    /// @notice Deposit LP tokens to MasterChef for WOM allocation.\\n    /// @dev it is possible to call this function with _amount == 0 to claim current rewards\\n    /// @param _pid the pool id\\n    /// @param _amount amount to deposit\\n    function deposit(uint256 _pid, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256, uint256[] memory)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        _updatePool(_pid);\\n        uint256 pending;\\n        if (user.amount > 0) {\\n            // Harvest WOM\\n            pending =\\n                ((uint256(user.amount) * pool.accWomPerShare + uint256(user.factor) * pool.accWomPerFactorShare) /\\n                    1e12) +\\n                user.pendingWom -\\n                user.rewardDebt;\\n            user.pendingWom = 0;\\n\\n            pending = safeWomTransfer(payable(msg.sender), pending);\\n            emit Harvest(msg.sender, _pid, pending);\\n        }\\n\\n        // update amount of lp staked by user\\n        user.amount += to128(_amount);\\n\\n        // update boosted factor\\n        uint256 oldFactor = user.factor;\\n        user.factor = to128(DSMath.sqrt(user.amount * veWom.balanceOf(msg.sender), user.amount));\\n        pool.sumOfFactors = pool.sumOfFactors + user.factor - oldFactor;\\n\\n        // update reward debt\\n        user.rewardDebt = to128(\\n            (uint256(user.amount) * pool.accWomPerShare + uint256(user.factor) * pool.accWomPerFactorShare) / 1e12\\n        );\\n\\n        IMultiRewarder rewarder = poolInfo[_pid].rewarder;\\n        uint256[] memory additionalRewards;\\n        if (address(rewarder) != address(0)) {\\n            additionalRewards = rewarder.onReward(msg.sender, user.amount);\\n        }\\n\\n        // safe transfer is not needed for Asset\\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\\n        emit Deposit(msg.sender, _pid, _amount);\\n        return (pending, additionalRewards);\\n    }\\n\\n    /// @notice claims rewards for multiple pids\\n    /// @param _pids array pids, pools to claim\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[][] memory\\n        )\\n    {\\n        return _multiClaim(_pids);\\n    }\\n\\n    /// @notice private function to claim rewards for multiple pids\\n    /// @param _pids array pids, pools to claim\\n    function _multiClaim(uint256[] memory _pids)\\n        private\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[][] memory\\n        )\\n    {\\n        // accumulate rewards for each one of the pids in pending\\n        uint256 pending;\\n        uint256[] memory amounts = new uint256[](_pids.length);\\n        uint256[][] memory additionalRewards = new uint256[][](_pids.length);\\n        for (uint256 i = 0; i < _pids.length; ++i) {\\n            UserInfo storage user = userInfo[_pids[i]][msg.sender];\\n            if (user.amount > 0) {\\n                _updatePool(_pids[i]);\\n\\n                PoolInfo storage pool = poolInfo[_pids[i]];\\n                // increase pending to send all rewards once\\n                uint256 poolRewards = ((uint256(user.amount) *\\n                    pool.accWomPerShare +\\n                    uint256(user.factor) *\\n                    pool.accWomPerFactorShare) / 1e12) +\\n                    user.pendingWom -\\n                    user.rewardDebt;\\n\\n                user.pendingWom = 0;\\n\\n                // update reward debt\\n                user.rewardDebt = to128(\\n                    (uint256(user.amount) * pool.accWomPerShare + uint256(user.factor) * pool.accWomPerFactorShare) /\\n                        1e12\\n                );\\n\\n                // increase pending\\n                pending += poolRewards;\\n\\n                amounts[i] = poolRewards;\\n                // if existant, get external rewarder rewards for pool\\n                IMultiRewarder rewarder = pool.rewarder;\\n                if (address(rewarder) != address(0)) {\\n                    additionalRewards[i] = rewarder.onReward(msg.sender, user.amount);\\n                }\\n            }\\n        }\\n        // transfer all remaining rewards\\n        uint256 transfered = safeWomTransfer(payable(msg.sender), pending);\\n        if (transfered != pending) {\\n            for (uint256 i = 0; i < _pids.length; ++i) {\\n                amounts[i] = (transfered * amounts[i]) / pending;\\n                emit Harvest(msg.sender, _pids[i], amounts[i]);\\n            }\\n        } else {\\n            for (uint256 i = 0; i < _pids.length; ++i) {\\n                // emit event for pool\\n                emit Harvest(msg.sender, _pids[i], amounts[i]);\\n            }\\n        }\\n\\n        return (transfered, amounts, additionalRewards);\\n    }\\n\\n    /// @notice Withdraw LP tokens from MasterWombat.\\n    /// @notice Automatically harvest pending rewards and sends to user\\n    /// @param _pid the pool id\\n    /// @param _amount the amount to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256, uint256[] memory)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, 'withdraw: not good');\\n\\n        _updatePool(_pid);\\n\\n        // Harvest WOM\\n        uint256 pending = ((uint256(user.amount) *\\n            pool.accWomPerShare +\\n            uint256(user.factor) *\\n            pool.accWomPerFactorShare) / 1e12) +\\n            user.pendingWom -\\n            user.rewardDebt;\\n        user.pendingWom = 0;\\n\\n        pending = safeWomTransfer(payable(msg.sender), pending);\\n        emit Harvest(msg.sender, _pid, pending);\\n\\n        // for boosted factor\\n        uint256 oldFactor = user.factor;\\n\\n        // update amount of lp staked\\n        user.amount -= to128(_amount);\\n\\n        // update boosted factor\\n        user.factor = to128(DSMath.sqrt(user.amount * veWom.balanceOf(msg.sender), user.amount));\\n        pool.sumOfFactors = pool.sumOfFactors + user.factor - oldFactor;\\n\\n        // update reward debt\\n        user.rewardDebt = to128(\\n            (uint256(user.amount) * pool.accWomPerShare + uint256(user.factor) * pool.accWomPerFactorShare) / 1e12\\n        );\\n\\n        IMultiRewarder rewarder = poolInfo[_pid].rewarder;\\n        uint256[] memory additionalRewards;\\n        if (address(rewarder) != address(0)) {\\n            additionalRewards = rewarder.onReward(msg.sender, user.amount);\\n        }\\n\\n        // safe transfer is not needed for Asset\\n        pool.lpToken.transfer(address(msg.sender), _amount);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n        return (pending, additionalRewards);\\n    }\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    /// @param _pid the pool id\\n    function emergencyWithdraw(uint256 _pid) external override nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        // safe transfer is not needed for Asset\\n        pool.lpToken.transfer(address(msg.sender), user.amount);\\n\\n        // update boosted factor\\n        pool.sumOfFactors = pool.sumOfFactors - user.factor;\\n        user.factor = 0;\\n\\n        // reset rewarder\\n        IMultiRewarder rewarder = poolInfo[_pid].rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onReward(msg.sender, 0);\\n        }\\n\\n        // update base factors\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    /// @notice Safe wom transfer function, just in case if rounding error causes pool to not have enough WOMs.\\n    /// @param _to beneficiary\\n    /// @param _amount the amount to transfer\\n    function safeWomTransfer(address payable _to, uint256 _amount) private returns (uint256) {\\n        uint256 womBal = wom.balanceOf(address(this));\\n\\n        // perform additional check in case there are no more wom tokens to distribute.\\n        // emergency withdraw would be necessary\\n        // require(womBal > 0, 'No tokens to distribute');\\n\\n        if (_amount > womBal) {\\n            wom.transfer(_to, womBal);\\n            return womBal;\\n        } else {\\n            wom.transfer(_to, _amount);\\n            return _amount;\\n        }\\n    }\\n\\n    /// @notice updates emission rate\\n    /// @param _womPerSec wom amount to be updated\\n    /// @dev Pancake has to add hidden dummy pools inorder to alter the emission,\\n    /// @dev here we make it simple and transparent to all.\\n    function updateEmissionRate(uint104 _womPerSec) external onlyOwner {\\n        massUpdatePools();\\n        womPerSec = _womPerSec;\\n        emit UpdateEmissionRate(msg.sender, _womPerSec);\\n    }\\n\\n    /// @notice updates emission partition\\n    /// @param _basePartition the future base partition\\n    function updateEmissionPartition(uint16 _basePartition) external onlyOwner {\\n        require(_basePartition <= 1000);\\n        massUpdatePools();\\n        basePartition = _basePartition;\\n        emit UpdateEmissionPartition(msg.sender, _basePartition, 1000 - _basePartition);\\n    }\\n\\n    /// @notice updates veWom address\\n    /// @param _newVeWom the new VeWom address\\n    function setVeWom(IVeWom _newVeWom) external onlyOwner {\\n        require(address(_newVeWom) != address(0));\\n        massUpdatePools();\\n        IVeWom oldVeWom = veWom;\\n        veWom = _newVeWom;\\n        emit UpdateVeWOM(msg.sender, address(oldVeWom), address(_newVeWom));\\n    }\\n\\n    /// @notice updates factor after any veWom token operation (minting/burning)\\n    /// @param _user the user to update\\n    /// @param _newVeWomBalance the amount of veWOM\\n    /// @dev can only be called by veWom\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external override onlyVeWom {\\n        // loop over each pool : beware gas cost!\\n        uint256 length = poolInfo.length;\\n\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            UserInfo storage user = userInfo[pid][_user];\\n\\n            // skip if user doesn't have any deposit in the pool\\n            if (user.amount == 0) {\\n                continue;\\n            }\\n\\n            PoolInfo storage pool = poolInfo[pid];\\n\\n            // first, update pool\\n            _updatePool(pid);\\n            // calculate pending\\n            uint256 pending = ((uint256(user.amount) *\\n                pool.accWomPerShare +\\n                uint256(user.factor) *\\n                pool.accWomPerFactorShare) / 1e12) - user.rewardDebt;\\n            // increase pendingWom\\n            user.pendingWom += to128(pending);\\n            // get oldFactor\\n            uint256 oldFactor = user.factor; // get old factor\\n            // calculate newFactor using\\n            uint256 newFactor = DSMath.sqrt(user.amount * _newVeWomBalance, user.amount);\\n            // update user factor\\n            user.factor = to128(newFactor);\\n            // update reward debt, take into account newFactor\\n            user.rewardDebt = to128(\\n                (uint256(user.amount) * pool.accWomPerShare + newFactor * pool.accWomPerFactorShare) / 1e12\\n            );\\n            // also, update sumOfFactors\\n            pool.sumOfFactors = pool.sumOfFactors + newFactor - oldFactor;\\n        }\\n    }\\n\\n    /// @notice In case we need to manually migrate WOM funds from MasterChef\\n    /// Sends all remaining wom from the contract to the owner\\n    function emergencyWomWithdraw() external onlyOwner {\\n        // safe transfer is not needed for WOM\\n        wom.transfer(address(msg.sender), wom.balanceOf(address(this)));\\n        emit EmergencyWomWithdraw(address(msg.sender), wom.balanceOf(address(this)));\\n    }\\n\\n    function to128(uint256 val) internal pure returns (uint128) {\\n        if (val > type(uint128).max) revert('uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    function to104(uint256 val) internal pure returns (uint104) {\\n        if (val > type(uint104).max) revert('uint104 overflow');\\n        return uint104(val);\\n    }\\n\\n    function to96(uint256 val) internal pure returns (uint96) {\\n        if (val > type(uint96).max) revert('uint96 overflow');\\n        return uint96(val);\\n    }\\n}\\n\",\"keccak256\":\"0xea3aab10fe5980bbef086579a2ae09520c796dc67ca8ab4d310508b16c9507c5\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombatV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @dev Interface of the MasterWombatV2\\n */\\ninterface IMasterWombatV2 {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            IERC20[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256 transfered,\\n            uint256[] memory rewards,\\n            uint256[][] memory additionalRewards\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x6e6021d1218bfbd044a7059eb1b13ad35a8e44979c7f9243305d5c3a3ab81cc9\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IMultiRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMultiRewarder {\\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2cae5469e2fd3201eb912287d022bbac97a4cd5fe7aa5775ac97eac4d855e84\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IVeWom.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the VeWom\\n */\\ninterface IVeWom {\\n    struct Breeding {\\n        uint48 unlockTime;\\n        uint104 womAmount;\\n        uint104 veWomAmount;\\n    }\\n\\n    struct UserInfo {\\n        // reserve usage for future upgrades\\n        uint256[10] reserved;\\n        Breeding[] breedings;\\n    }\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _addr) external view returns (uint256);\\n\\n    function isUser(address _addr) external view returns (bool);\\n\\n    function getUserInfo(address addr) external view returns (UserInfo memory);\\n\\n    function mint(uint256 amount, uint256 lockDays) external returns (uint256 veWomAmount);\\n\\n    function burn(uint256 slot) external;\\n\\n    function update(uint256 slot, uint256 lockDays) external returns (uint256 newVeWomAmount);\\n}\\n\",\"keccak256\":\"0x917accdfbcbcbe80396fc74d7bd45c5fb60e70b6d1271153489c324c22d2069e\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess\\n    function sqrt(uint256 y, uint256 guess) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            if (guess > y || guess == 0) {\\n                z = y;\\n            } else {\\n                z = guess;\\n            }\\n            uint256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x59b28c7651c7dee39d050a364ae180b5390ffa58dbd9d524778d163c0a9531f2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Updates: - pack struct - move pendingWom into UserInfo - use MultiRewarderPerSec",
    "kind": "dev",
    "methods": {
      "add(uint96,address,address)": {
        "details": "Reverts if the same LP token is added more than once.",
        "params": {
          "_allocPoint": "allocation points for this LP",
          "_lpToken": "the corresponding lp token",
          "_rewarder": "the rewarder"
        }
      },
      "deposit(uint256,uint256)": {
        "details": "it is possible to call this function with _amount == 0 to claim current rewards",
        "params": {
          "_amount": "amount to deposit",
          "_pid": "the pool id"
        }
      },
      "depositFor(uint256,uint256,address)": {
        "details": "user must initiate transaction from masterchef",
        "params": {
          "_amount": "amount to deposit",
          "_pid": "the pool id",
          "_user": "the user being represented"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "massUpdatePools()": {
        "details": "Be careful of gas spending!"
      },
      "migrate(uint256[])": {
        "details": "Assume the orginal MasterWombat has stopped emisions hence we can skip updatePool() to save gas cost"
      },
      "multiClaim(uint256[])": {
        "params": {
          "_pids": "array pids, pools to claim"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingTokens(uint256,address)": {
        "params": {
          "_pid": "the pool id",
          "_user": "the user address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewarderBonusTokenInfo(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "set(uint256,uint96,address,bool)": {
        "params": {
          "_allocPoint": "allocation points",
          "_pid": "the pool id",
          "_rewarder": "the rewarder",
          "overwrite": "overwrite rewarder?"
        }
      },
      "setVeWom(address)": {
        "params": {
          "_newVeWom": "the new VeWom address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "updateEmissionPartition(uint16)": {
        "params": {
          "_basePartition": "the future base partition"
        }
      },
      "updateEmissionRate(uint104)": {
        "details": "Pancake has to add hidden dummy pools inorder to alter the emission,here we make it simple and transparent to all.",
        "params": {
          "_womPerSec": "wom amount to be updated"
        }
      },
      "updateFactor(address,uint256)": {
        "details": "can only be called by veWom",
        "params": {
          "_newVeWomBalance": "the amount of veWOM",
          "_user": "the user to update"
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "the amount to withdraw",
          "_pid": "the pool id"
        }
      }
    },
    "title": "MasterWombatV2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(uint96,address,address)": {
        "notice": "Add a new lp to the pool. Can only be called by the owner."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit LP tokens to MasterChef for WOM allocation."
      },
      "depositFor(uint256,uint256,address)": {
        "notice": "Deposit LP tokens to MasterChef for WOM allocation on behalf of user"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "emergencyWomWithdraw()": {
        "notice": "In case we need to manually migrate WOM funds from MasterChef Sends all remaining wom from the contract to the owner"
      },
      "massUpdatePools()": {
        "notice": "Update reward variables for all pools."
      },
      "migrate(uint256[])": {
        "notice": "Helper function to migrate fund from multiple pools to the new MasterWombat.user must initiate transaction from masterchef"
      },
      "multiClaim(uint256[])": {
        "notice": "claims rewards for multiple pids"
      },
      "pendingTokens(uint256,address)": {
        "notice": "View function to see pending WOMs on frontend."
      },
      "poolLength()": {
        "notice": "returns pool length"
      },
      "rewarderBonusTokenInfo(uint256)": {
        "notice": "Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm"
      },
      "set(uint256,uint96,address,bool)": {
        "notice": "Update the given pool's WOM allocation point. Can only be called by the owner."
      },
      "setVeWom(address)": {
        "notice": "updates veWom address"
      },
      "updateEmissionPartition(uint16)": {
        "notice": "updates emission partition"
      },
      "updateEmissionRate(uint104)": {
        "notice": "updates emission rate"
      },
      "updateFactor(address,uint256)": {
        "notice": "updates factor after any veWom token operation (minting/burning)"
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool to be up-to-date."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw LP tokens from MasterWombat.Automatically harvest pending rewards and sends to user"
      },
      "womPerSec()": {
        "notice": "WOM tokens created per second. 13.18 fixed point"
      }
    },
    "notice": "MasterWombat is a boss. He is not afraid of any snakes. In fact, he drinks their venoms. So, veWom holders boost their (boosted) emissions. This contract rewards users in function of their amount of lp staked (base pool) factor (boosted pool) Factor and sumOfFactors are updated by contract VeWom.sol after any veWom minting/burning (veERC20Upgradeable hook). Note that it's ownable and the owner wields tremendous power. The ownership will be transferred to a governance smart contract once Wombat is sufficiently distributed and the community can show to govern itself.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 322,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 366,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11134,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "wom",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20)1420"
      },
      {
        "astId": 11137,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "veWom",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IVeWom)19545"
      },
      {
        "astId": 11140,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "newMasterWombat",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IMasterWombatV2)19312"
      },
      {
        "astId": 11143,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "womPerSec",
        "offset": 0,
        "slot": "204",
        "type": "t_uint104"
      },
      {
        "astId": 11145,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "basePartition",
        "offset": 13,
        "slot": "204",
        "type": "t_uint16"
      },
      {
        "astId": 11147,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "totalAllocPoint",
        "offset": 15,
        "slot": "204",
        "type": "t_uint96"
      },
      {
        "astId": 11149,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "startTimestamp",
        "offset": 27,
        "slot": "204",
        "type": "t_uint40"
      },
      {
        "astId": 11153,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "poolInfo",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_struct(PoolInfo)11131_storage)dyn_storage"
      },
      {
        "astId": 11156,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "lpTokens",
        "offset": 0,
        "slot": "206",
        "type": "t_struct(AddressSet)3408_storage"
      },
      {
        "astId": 11163,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "userInfo",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)11114_storage))"
      },
      {
        "astId": 11167,
        "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
        "label": "assetPid",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)11131_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)11131_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterWombatV2.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1420": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterWombatV2)19312": {
        "encoding": "inplace",
        "label": "contract IMasterWombatV2",
        "numberOfBytes": "20"
      },
      "t_contract(IMultiRewarder)19475": {
        "encoding": "inplace",
        "label": "contract IMultiRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(IVeWom)19545": {
        "encoding": "inplace",
        "label": "contract IVeWom",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)11114_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterWombatV2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)11114_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)11114_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterWombatV2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)11114_storage)"
      },
      "t_struct(AddressSet)3408_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3407,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3137_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)11131_storage": {
        "encoding": "inplace",
        "label": "struct MasterWombatV2.PoolInfo",
        "members": [
          {
            "astId": 11117,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1420"
          },
          {
            "astId": 11119,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "allocPoint",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 11122,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "rewarder",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IMultiRewarder)19475"
          },
          {
            "astId": 11124,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "sumOfFactors",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11126,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "accWomPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint104"
          },
          {
            "astId": 11128,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "accWomPerFactorShare",
            "offset": 13,
            "slot": "3",
            "type": "t_uint104"
          },
          {
            "astId": 11130,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "lastRewardTimestamp",
            "offset": 26,
            "slot": "3",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)3137_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3132,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3136,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)11114_storage": {
        "encoding": "inplace",
        "label": "struct MasterWombatV2.UserInfo",
        "members": [
          {
            "astId": 11107,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 11109,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "factor",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 11111,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 11113,
            "contract": "contracts/wombat-governance/MasterWombatV2.sol:MasterWombatV2",
            "label": "pendingWom",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}