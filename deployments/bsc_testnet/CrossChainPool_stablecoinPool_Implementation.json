{
  "address": "0x8A9c2E0b1f9408f3d3469B1633CE8E17Ec76Ccd3",
  "abi": [
    {
      "inputs": [],
      "name": "POOL__CREDIT_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL__REACH_MAXIMUM_BURNED_CREDIT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL__REACH_MAXIMUM_MINTED_CREDIT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_AMOUNT_TOO_LOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_ALREADY_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ASSET_NOT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_COV_RATIO_LIMIT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_FORBIDDEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_SAME_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WOMBAT_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        }
      ],
      "name": "MintCredit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetAmpFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpDividendRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "retentionRatio",
          "type": "uint256"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetHaircutRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetMasterWombat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetMintFeeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SetWithdrawalHaircutRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenHaircut",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SwapCreditForTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromTokenHaircut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapTokensForCredit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferTipBucket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnpausedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adaptor",
      "outputs": [
        {
          "internalType": "contract IAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addressOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ampFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "completeSwapCreditForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creditBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditForTokensHaircut",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endCovRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "equilCovRatio",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "invariant",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEquilCovRatioWithCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "equilCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantInUint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "haircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpDividendRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterWombat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumInboundCredit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumOutboundCredit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mintCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeCollected",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "pauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "toAmount",
          "type": "int256"
        }
      ],
      "name": "quoteAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "finalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromCreditAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapCreditForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapTokensForCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeInFromToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAdaptor",
          "name": "_adaptor",
          "type": "address"
        }
      ],
      "name": "setAdaptorAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ampFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAmpFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "startCovRatio_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "endCovRatio_",
          "type": "uint128"
        }
      ],
      "name": "setCovRatioFeeParam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_tokensForCreditHaircut",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_creditForTokensHaircut",
          "type": "uint128"
        }
      ],
      "name": "setCrossChainHaircut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev_",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpDividendRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeTo_",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterWombat_",
          "type": "address"
        }
      ],
      "name": "setMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_maximumInboundCredit",
          "type": "uint128"
        }
      ],
      "name": "setMaximumInboundCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_maximumOutboundCredit",
          "type": "uint128"
        }
      ],
      "name": "setMaximumOutboundCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintFeeThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setMintFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setSwapCreditForTokensEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setSwapTokensForCreditEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalHaircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startCovRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "swapCreditForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiverValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "swapCreditForTokensCrossChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trackingId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapCreditForTokensEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTokensForCreditEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toChain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumCreditAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiverValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForTokensCrossChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromTokenHaircut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sequence",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tipBucketBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensForCreditHaircut",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCreditBurned",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCreditMinted",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferTipBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unpauseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalHaircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb388bd2ac742d3550c94b7283bb68040cea8d4de3113d6b7619be00303ed96ce",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0x8A9c2E0b1f9408f3d3469B1633CE8E17Ec76Ccd3",
    "transactionIndex": 1,
    "gasUsed": "5026297",
    "logsBloom": "0x
    "blockHash": "0x400a68c120b44b60bd21653326a8aa83da13759bcf3c8edadd1645dfc7f6a635",
    "transactionHash": "0xb388bd2ac742d3550c94b7283bb68040cea8d4de3113d6b7619be00303ed96ce",
    "logs": [],
    "blockNumber": 32191777,
    "cumulativeGasUsed": "5057538",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "63efbea27c0d26b17225186f31ed736c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"POOL__CREDIT_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL__REACH_MAXIMUM_BURNED_CREDIT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL__REACH_MAXIMUM_MINTED_CREDIT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_AMOUNT_TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_ALREADY_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ASSET_NOT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_COV_RATIO_LIMIT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_FORBIDDEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_SAME_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WOMBAT_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"}],\"name\":\"MintCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetAmpFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpDividendRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retentionRatio\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetHaircutRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMasterWombat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMintFeeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalHaircutRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenHaircut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SwapCreditForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenHaircut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"}],\"name\":\"SwapTokensForCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferTipBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adaptor\",\"outputs\":[{\"internalType\":\"contract IAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addressOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ampFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"completeSwapCreditForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditForTokensHaircut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endCovRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"equilCovRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"invariant\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEquilCovRatioWithCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"equilCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantInUint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWombat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumInboundCredit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumOutboundCredit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mintCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeCollected\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"toAmount\",\"type\":\"int256\"}],\"name\":\"quoteAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromCreditAmount\",\"type\":\"uint256\"}],\"name\":\"quoteSwapCreditForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"quoteSwapTokensForCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeInFromToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAdaptor\",\"name\":\"_adaptor\",\"type\":\"address\"}],\"name\":\"setAdaptorAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ampFactor_\",\"type\":\"uint256\"}],\"name\":\"setAmpFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"startCovRatio_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endCovRatio_\",\"type\":\"uint128\"}],\"name\":\"setCovRatioFeeParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_tokensForCreditHaircut\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_creditForTokensHaircut\",\"type\":\"uint128\"}],\"name\":\"setCrossChainHaircut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterWombat_\",\"type\":\"address\"}],\"name\":\"setMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_maximumInboundCredit\",\"type\":\"uint128\"}],\"name\":\"setMaximumInboundCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_maximumOutboundCredit\",\"type\":\"uint128\"}],\"name\":\"setMaximumOutboundCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeThreshold_\",\"type\":\"uint256\"}],\"name\":\"setMintFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapCreditForTokensEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapTokensForCreditEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalHaircutRate_\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCovRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapCreditForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"swapCreditForTokensCrossChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trackingId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapCreditForTokensEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensForCreditEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCreditAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"swapTokensForTokensCrossChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenHaircut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequence\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tipBucketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForCreditHaircut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCreditBurned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCreditMinted\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferTipBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unpauseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalHaircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Refer to note of `swapTokensForTokensCrossChain` for procedure of a cross-chain swap Note: All variables are 18 decimals, except from that of parameters of external functions and underlying tokens\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"PausedAsset(address,address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"UnpausedAsset(address,address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"addressOfAsset(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"details\":\"Asset needs to be created and added to pool before any operation. This function assumes tax free token.\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"minimumLiquidity\":\"The minimum amount of liquidity to receive\",\"shouldStake\":\"Whether to stake LP tokens automatically after deposit\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"exchangeRate(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"xr\":\"The exchange rate of LP token\"}},\"isPaused(address)\":{\"details\":\"Function to return if the asset is paused. The return value is only useful when true. When the return value is false, the asset can be either not paused or not exist.\"},\"mintCredit(uint256,address)\":{\"details\":\"This function is only for the case when `completeSwapCreditForTokens` fails, and should not be called otherwise Also, this function should work even if the pool is paused\"},\"mintFee(address)\":{\"params\":{\"token\":\"The address of the token to collect fee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"pauseAsset(address)\":{\"details\":\"pause asset, restricting deposit and swap operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quoteAmountIn(address,address,int256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromToken\":\"The initial ERC20 token\",\"toAmount\":\"The given output amount\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"amountIn\":\"The input amount required\",\"haircut\":\"The haircut that would be applied\"}},\"quotePotentialDeposit(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"amount\":\"The amount to deposit\",\"token\":\"The token to deposit by user\"},\"returns\":{\"liquidity\":\"The potential liquidity user would receive\"}},\"quotePotentialSwap(address,address,int256)\":{\"details\":\"In reverse quote, the haircut is in the `fromAsset`\",\"params\":{\"fromAmount\":\"The given input amount\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\"}},\"quotePotentialWithdrawFromOtherAsset(address,address,uint256)\":{\"details\":\"take into account high cov ratio fee\"},\"removeAsset(address)\":{\"details\":\"Can only be called by owner\",\"params\":{\"token\":\"The address of token to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAmpFactor(uint256)\":{\"params\":{\"ampFactor_\":\"new pool's amplification factor\"}},\"setDev(address)\":{\"params\":{\"dev_\":\"new contract dev address\"}},\"setFeeTo(address)\":{\"params\":{\"feeTo_\":\"new fee beneficiary\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"details\":\"This function assumes tax free token.\",\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"swapCreditForTokensCrossChain(address,uint256,uint256,uint256,address,uint256,uint256)\":{\"details\":\"Nonce must be non-zero, otherwise wormhole will revert the message Delivery fee attached to the txn should be done off-chain via `WormholeAdaptor.estimateDeliveryFee` to reduce gas cost\"},\"swapTokensForTokensCrossChain(address,address,uint256,uint256,uint256,uint256,address,uint256,uint256)\":{\"details\":\"Steps: 1. Swap `fromToken` for credit; 2. Notify relayer to bridge credit to the `toChain`; 3. Relayer invoke `completeSwapCreditForTokens` to swap credit for `toToken` in the `toChain` Note: haircut returned here is just high cov ratio fee. Delivery fee attached to the txn should be done off-chain via `WormholeAdaptor.estimateDeliveryFee` to reduce gas cost\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTipBucket(address,uint256,address)\":{\"details\":\"unit of amount should be in WAD\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"unpauseAsset(address)\":{\"details\":\"unpause asset, enabling deposit and swap operations\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromToken\":\"The corresponding token user holds the LP (Asset) from\",\"liquidity\":\"The liquidity to be withdrawn (in fromToken decimal)\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"toToken\":\"The token wanting to be withdrawn (needs to be well covered)\"},\"returns\":{\"toAmount\":\"The total amount withdrawn\"}}},\"title\":\"Mega Pool\",\"version\":1},\"userdoc\":{\"errors\":{\"POOL__CREDIT_NOT_ENOUGH()\":[{\"notice\":\"Errors\"}]},\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"AssetRemoved(address,address)\":{\"notice\":\"An event thats emitted when asset is removed from Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"SwapCreditForTokens(uint256,address,uint256,uint256,address)\":{\"notice\":\"Event that is emitted when credit is swapped into token\"},\"SwapTokensForCredit(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event that is emitted when token is swapped into credit\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"adaptor()\":{\"notice\":\"Storage\"},\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"addressOfAsset(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"ampFactor()\":{\"notice\":\"Amplification factor\"},\"completeSwapCreditForTokens(address,uint256,uint256,address)\":{\"notice\":\"Swap credit to tokens; should be called by the adaptor\"},\"deposit(address,uint256,uint256,address,uint256,bool)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"dev()\":{\"notice\":\"Dev address\"},\"exchangeRate(address)\":{\"notice\":\"Returns the exchange rate of the LP token\"},\"fillPool(address,uint256)\":{\"notice\":\"Move fund from tip bucket to the pool to keep r* = 1 as error accumulates unit of amount should be in WAD\"},\"getTokens()\":{\"notice\":\"Return list of tokens in the pool\"},\"globalEquilCovRatioWithCredit()\":{\"notice\":\"Calculate the r* and invariant when all credits are settled\"},\"haircutRate()\":{\"notice\":\"Haircut rate\"},\"initialize(uint256,uint256)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpDividendRatio()\":{\"notice\":\"LP dividend ratio : the ratio of haircut that should distribute to LP\"},\"maximumOutboundCredit()\":{\"notice\":\"the maximum allowed amount of net mint credit. `totalCreditMinted - totalCreditBurned` should be smaller than this value\"},\"mintCredit(uint256,address)\":{\"notice\":\"In case `completeSwapCreditForTokens` fails, adaptor should mint credit to the respective user\"},\"mintFee(address)\":{\"notice\":\"Send fee collected to the fee beneficiary\"},\"mintFeeThreshold()\":{\"notice\":\"The threshold to mint fee (unit: WAD)\"},\"quoteAmountIn(address,address,int256)\":{\"notice\":\"Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)\"},\"quotePotentialDeposit(address,uint256)\":{\"notice\":\"Quotes potential deposit from pool\"},\"quotePotentialSwap(address,address,int256)\":{\"notice\":\"Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage).\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"quoteSwapCreditForTokens(address,uint256)\":{\"notice\":\"Read-only functions\"},\"removeAsset(address)\":{\"notice\":\"Removes asset from asset struct\"},\"retentionRatio()\":{\"notice\":\"Retention ratio: the ratio of haircut that should stay in the pool\"},\"setAmpFactor(uint256)\":{\"notice\":\"Changes the pools amplification factor. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setFeeTo(address)\":{\"notice\":\"Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setMintFeeThreshold(uint256)\":{\"notice\":\"Set min fee to mint\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"swapCreditForTokens(address,uint256,uint256,address)\":{\"notice\":\"Swap credit for tokens (same chain)\"},\"swapCreditForTokensCrossChain(address,uint256,uint256,uint256,address,uint256,uint256)\":{\"notice\":\"Bridge credit and swap it for `toToken` in the `toChain`\"},\"swapTokensForTokensCrossChain(address,address,uint256,uint256,uint256,uint256,address,uint256,uint256)\":{\"notice\":\"Initiate a cross chain swap\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"},\"withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Enables withdrawing liquidity from an asset using LP from a different asset\"},\"withdrawalHaircutRate()\":{\"notice\":\"Withdrawal haircut rate charged at the time of withdrawal\"}},\"notice\":\"Mega Pool is able to handle cross-chain swaps in addition to ordinary swap within its own chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/CrossChainPool.sol\":\"CrossChainPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IAdaptor {\\n    /* Cross-chain functions that is used to initiate a cross-chain message, should be invoked by Pool */\\n\\n    function bridgeCreditAndSwapForTokens(\\n        address toToken,\\n        uint256 toChain,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    ) external payable returns (uint256 trackingId);\\n}\\n\",\"keccak256\":\"0x9e1bcb49ad994996fa844c1210f577b0daeec992665648e1bf1c4ef559adca0a\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IAsset is IERC20 {\\r\\n    function underlyingToken() external view returns (address);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function cash() external view returns (uint120);\\r\\n\\r\\n    function liability() external view returns (uint120);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function underlyingTokenDecimals() external view returns (uint8);\\r\\n\\r\\n    function setPool(address pool_) external;\\r\\n\\r\\n    function underlyingTokenBalance() external view returns (uint256);\\r\\n\\r\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(address to, uint256 amount) external;\\r\\n\\r\\n    function addCash(uint256 amount) external;\\r\\n\\r\\n    function removeCash(uint256 amount) external;\\r\\n\\r\\n    function addLiability(uint256 amount) external;\\r\\n\\r\\n    function removeLiability(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x422c0f5af1e3ee4db0a7baa912f8ed064bf92efc3ed761071abf8d991fe7120c\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/ICrossChainPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface ICrossChainPool {\\n    function swapTokensForTokensCrossChain(\\n        address fromToken,\\n        address toToken,\\n        uint256 toChain, // wormhole chain ID\\n        uint256 fromAmount,\\n        uint256 minimumCreditAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint256 receiverValue, // gas to receive at the designated contract\\n        uint256 gasLimit // gas limit for the relayed transaction\\n    ) external payable returns (uint256 creditAmount, uint256 haircut, uint256 id);\\n\\n    function swapCreditForTokens(\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function swapCreditForTokensCrossChain(\\n        address toToken,\\n        uint256 toChain, // wormhole chain ID\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint256 receiverValue, // gas to receive at the designated contract\\n        uint256 gasLimit // gas limit for the relayed transaction\\n    ) external payable returns (uint256 id);\\n\\n    /*\\n     * Permissioned Functions\\n     */\\n\\n    function completeSwapCreditForTokens(\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function mintCredit(uint256 creditAmount, address receiver) external;\\n}\\n\",\"keccak256\":\"0xdca34cd367a25cefe926cede91b305a7e04c5bf1e76798d52fc639208a7ba536\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IPoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPoolV3 {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(address token, uint256 amount) external view returns (uint256 liquidity);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity) external view returns (uint256 amount);\\n\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view returns (uint256 finalAmount, uint256 withdrewAmount);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0xde342cbf92dbecb1939d22da1afa18fc2dfcea6731ef9bf9c4f5224c58e7b007\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10 ** 18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10 ** (18 - d);\\n        } else if (d > 18) {\\n            return (x / (10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * 10 ** (d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xd6cacca5817b3c8820f60e203c1485ef19ebe8c07dfdda7df9c870f3dbffaaf5\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10 ** 18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10 ** (18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10 ** (d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), 'value must be positive');\\n        return int256(value);\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            return uint256(-value);\\n        } else {\\n            return uint256(value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ba2634809aee5021952707698358dc5531cf69ef8bf03c8f6afc6e1f9e40071\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../interfaces/IAsset.sol';\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV3\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n * Change log:\\n * - Move view functinos (quotes, high cov ratio fee) from the Pool contract to this contract\\n * - Add quote functions for cross chain swaps\\n */\\nlibrary CoreV3 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SignedSafeMath for uint256;\\n\\n    int256 internal constant WAD_I = 10 ** 18;\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    error CORE_UNDERFLOW();\\n    error CORE_INVALID_VALUE();\\n    error CORE_INVALID_HIGH_COV_RATIO_FEE();\\n    error CORE_ZERO_LIQUIDITY();\\n    error CORE_CASH_NOT_ENOUGH();\\n    error CORE_COV_RATIO_LIMIT_EXCEEDED();\\n\\n    /*\\n     * Public view functions\\n     */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function quoteDepositLiquidity(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 ampFactor,\\n        int256 _equilCovRatio\\n    ) external view returns (uint256 lpTokenToMint, uint256 liabilityToMint) {\\n        liabilityToMint = _equilCovRatio == WAD_I\\n            ? exactDepositLiquidityInEquilImpl(\\n                amount.toInt256(),\\n                int256(uint256(asset.cash())),\\n                int256(uint256(asset.liability())),\\n                ampFactor.toInt256()\\n            ).toUint256()\\n            : exactDepositLiquidityImpl(\\n                amount.toInt256(),\\n                int256(uint256(asset.cash())),\\n                int256(uint256(asset.liability())),\\n                ampFactor.toInt256(),\\n                _equilCovRatio\\n            ).toUint256();\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @param _equilCovRatio global equilibrium coverage ratio\\n     * @param withdrawalHaircutRate withdraw haircut rate\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return withdrawalHaircut Total withdrawal haircut\\n     */\\n    function quoteWithdrawAmount(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 ampFactor,\\n        int256 _equilCovRatio,\\n        uint256 withdrawalHaircutRate\\n    ) public view returns (uint256 amount, uint256 liabilityToBurn, uint256 withdrawalHaircut) {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        if (liabilityToBurn == 0) revert CORE_ZERO_LIQUIDITY();\\n\\n        amount = _equilCovRatio == WAD_I\\n            ? withdrawalAmountInEquilImpl(\\n                -liabilityToBurn.toInt256(),\\n                int256(uint256(asset.cash())),\\n                int256(uint256(asset.liability())),\\n                ampFactor.toInt256()\\n            ).toUint256()\\n            : withdrawalAmountImpl(\\n                -liabilityToBurn.toInt256(),\\n                int256(uint256(asset.cash())),\\n                int256(uint256(asset.liability())),\\n                ampFactor.toInt256(),\\n                _equilCovRatio\\n            ).toUint256();\\n\\n        // charge withdrawal haircut\\n        if (withdrawalHaircutRate > 0) {\\n            withdrawalHaircut = amount.wmul(withdrawalHaircutRate);\\n            amount -= withdrawalHaircut;\\n        }\\n    }\\n\\n    function quoteWithdrawAmountFromOtherAsset(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 liquidity,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio,\\n        int256 _equilCovRatio,\\n        uint256 withdrawalHaircutRate\\n    ) external view returns (uint256 finalAmount, uint256 withdrewAmount) {\\n        // quote withdraw\\n        uint256 withdrawalHaircut;\\n        uint256 liabilityToBurn;\\n        (withdrewAmount, liabilityToBurn, withdrawalHaircut) = quoteWithdrawAmount(\\n            fromAsset,\\n            liquidity,\\n            ampFactor,\\n            _equilCovRatio,\\n            withdrawalHaircutRate\\n        );\\n\\n        // quote swap\\n        uint256 fromCash = fromAsset.cash() - withdrewAmount - withdrawalHaircut;\\n        uint256 fromLiability = fromAsset.liability() - liabilityToBurn;\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            withdrewAmount = (withdrewAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapQuoteFunc(\\n            fromCash.toInt256(),\\n            int256(uint256(toAsset.cash())),\\n            fromLiability.toInt256(),\\n            int256(uint256(toAsset.liability())),\\n            withdrewAmount.toInt256(),\\n            ampFactor.toInt256()\\n        );\\n\\n        // remove haircut\\n        finalAmount = idealToAmount - idealToAmount.wmul(haircutRate);\\n\\n        if (startCovRatio > 0 || endCovRatio > 0) {\\n            // charge high cov ratio fee\\n            uint256 fee = highCovRatioFee(\\n                fromCash,\\n                fromLiability,\\n                withdrewAmount,\\n                finalAmount,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n\\n            finalAmount -= fee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function quoteSwap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate\\n    ) external view returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 fromCash = uint256(fromAsset.cash());\\n        uint256 fromLiability = uint256(fromAsset.liability());\\n        uint256 toCash = uint256(toAsset.cash());\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * scaleFactor.toInt256()) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapQuoteFunc(\\n            fromCash.toInt256(),\\n            toCash.toInt256(),\\n            fromLiability.toInt256(),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            ampFactor.toInt256()\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert CORE_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = uint256(-fromAmount).wmul(haircutRate);\\n        }\\n    }\\n\\n    /// @dev reverse quote is not supported\\n    /// haircut is calculated in the fromToken when swapping tokens for credit\\n    function quoteSwapTokensForCredit(\\n        IAsset fromAsset,\\n        uint256 fromAmount,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) external view returns (uint256 creditAmount, uint256 feeInFromToken) {\\n        if (fromAmount == 0) return (0, 0);\\n        // haircut\\n        feeInFromToken = fromAmount.wmul(haircutRate);\\n\\n        // high coverage ratio fee\\n\\n        uint256 fromCash = fromAsset.cash();\\n        uint256 fromLiability = fromAsset.liability();\\n        feeInFromToken += highCovRatioFee(\\n            fromCash,\\n            fromLiability,\\n            fromAmount,\\n            fromAmount - feeInFromToken, // calculate haircut in the fromAmount (exclude haircut)\\n            startCovRatio,\\n            endCovRatio\\n        );\\n\\n        fromAmount -= feeInFromToken;\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * scaleFactor) / 1e18;\\n        }\\n\\n        creditAmount = swapToCreditQuote(\\n            fromCash.toInt256(),\\n            fromLiability.toInt256(),\\n            fromAmount.toInt256(),\\n            ampFactor.toInt256()\\n        );\\n    }\\n\\n    /// @dev reverse quote is not supported\\n    function quoteSwapCreditForTokens(\\n        uint256 fromAmount,\\n        IAsset toAsset,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate\\n    ) external view returns (uint256 actualToAmount, uint256 haircut) {\\n        if (fromAmount == 0) return (0, 0);\\n        uint256 toCash = toAsset.cash();\\n        uint256 toLiability = toAsset.liability();\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromAmount = (fromAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapFromCreditQuote(\\n            toCash.toInt256(),\\n            toLiability.toInt256(),\\n            fromAmount.toInt256(),\\n            ampFactor.toInt256()\\n        );\\n        if (fromAmount > 0 && toCash < idealToAmount) {\\n            revert CORE_CASH_NOT_ENOUGH();\\n        }\\n\\n        // normal quote\\n        haircut = idealToAmount.wmul(haircutRate);\\n        actualToAmount = idealToAmount - haircut;\\n    }\\n\\n    function equilCovRatio(int256 D, int256 SL, int256 A) public pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    /*\\n     * Pure calculating functions\\n     */\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) public pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        return Dy.abs();\\n    }\\n\\n    /**\\n     * @dev Calculate the withdrawal amount for any r*\\n     */\\n    function withdrawalAmountImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A,\\n        int256 _equilCovRatio\\n    ) public pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 delta_D = delta_i.wmul(_equilCovRatio) - (delta_i * A) / _equilCovRatio; // The only line that is different\\n        int256 b = -(L_i.wmul(r_i - A.wdiv(r_i)) + delta_D);\\n        int256 c = A.wmul(L_i_.wmul(L_i_));\\n        int256 A_i_ = _solveQuad(b, c);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        // equilvalent to:\\n        // int256 delta_D = delta_i.wmul(WAD_I - A);\\n        // int256 b = -(L_i.wmul(r_i - A.wdiv(r_i)) + delta_D);\\n        // int256 c = A.wmul(L_i_.wmul(L_i_));\\n        // int256 A_i_ = _solveQuad(b, c);\\n\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A,\\n        int256 _equilCovRatio\\n    ) public pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(_equilCovRatio) - (k * A) / _equilCovRatio + 2 * A.wmul(L_i); // The only line that is different\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    /**\\n     * @notice quote swapping from tokens for credit\\n     * @dev This function always returns >= 0\\n     */\\n    function swapToCreditQuote(int256 Ax, int256 Lx, int256 Dx, int256 A) public pure returns (uint256 quote) {\\n        int256 rx = Ax.wdiv(Lx);\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 x = rx_ - A.wdiv(rx_);\\n        int256 y = rx - A.wdiv(rx);\\n\\n        // adjsut credit by 1 / (1 + A)\\n        return ((Lx * (x - y)) / (WAD_I + A)).abs();\\n    }\\n\\n    /**\\n     * @notice quote swapping from credit for tokens\\n     * @dev This function always returns >= 0\\n     */\\n    function swapFromCreditQuote(\\n        int256 Ax,\\n        int256 Lx,\\n        int256 delta_credit,\\n        int256 A\\n    ) public pure returns (uint256 quote) {\\n        int256 rx = Ax.wdiv(Lx);\\n        // adjsut credit by 1 + A\\n        int256 b = (delta_credit * (WAD_I + A)) / Lx - rx + A.wdiv(rx); // flattened _coefficientFunc\\n        int256 rx_ = _solveQuad(b, A);\\n        int256 Dx = Ax - Lx.wmul(rx_);\\n\\n        return Dx.abs();\\n    }\\n\\n    function highCovRatioFee(\\n        uint256 fromAssetCash,\\n        uint256 fromAssetLiability,\\n        uint256 fromAmount,\\n        uint256 quotedToAmount,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) public pure returns (uint256 fee) {\\n        uint256 finalFromAssetCovRatio = (fromAssetCash + fromAmount).wdiv(fromAssetLiability);\\n\\n        if (finalFromAssetCovRatio > startCovRatio) {\\n            // charge high cov ratio fee\\n            uint256 feeRatio = _highCovRatioFee(\\n                fromAssetCash.wdiv(fromAssetLiability),\\n                finalFromAssetCovRatio,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n\\n            if (feeRatio > WAD) revert CORE_INVALID_HIGH_COV_RATIO_FEE();\\n            fee = feeRatio.wmul(quotedToAmount);\\n        }\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(int256 Lx, int256 rx, int256 Ly, int256 ry, int256 A) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(int256 Lx, int256 Ly, int256 rx_, int256 D, int256 A) internal pure returns (int256) {\\n        return (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly);\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _newEquilCovRatio(int256 er, int256 SL, int256 delta_i) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(int256 er_, int256 A, int256 SL, int256 delta_i) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice Calculate the high cov ratio fee in the to-asset in a swap.\\n     * @dev When cov ratio is in the range [startCovRatio, endCovRatio], the marginal cov ratio is\\n     * (r - startCovRatio) / (endCovRatio - startCovRatio). Here we approximate the high cov ratio cut\\n     * by calculating the \\\"average\\\" fee.\\n     * Note: `finalCovRatio` should be greater than `initCovRatio`\\n     */\\n    function _highCovRatioFee(\\n        uint256 initCovRatio,\\n        uint256 finalCovRatio,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) internal pure returns (uint256 fee) {\\n        if (finalCovRatio > endCovRatio) {\\n            // invalid swap\\n            revert CORE_COV_RATIO_LIMIT_EXCEEDED();\\n        } else if (finalCovRatio <= startCovRatio || finalCovRatio <= initCovRatio) {\\n            return 0;\\n        }\\n\\n        // 1. Calculate the area of fee(r) = (r - startCovRatio) / (endCovRatio - startCovRatio)\\n        // when r increase from initCovRatio to finalCovRatio\\n        // 2. Then multiply it by (endCovRatio - startCovRatio) / (finalCovRatio - initCovRatio)\\n        // to get the average fee over the range\\n        uint256 a = initCovRatio <= startCovRatio ? 0 : (initCovRatio - startCovRatio) * (initCovRatio - startCovRatio);\\n        uint256 b = (finalCovRatio - startCovRatio) * (finalCovRatio - startCovRatio);\\n        fee = ((b - a) / (finalCovRatio - initCovRatio) / 2).wdiv(endCovRatio - startCovRatio);\\n    }\\n}\\n\",\"keccak256\":\"0x2f09ce5a77a220aa45c596c2e47e2c49f055ddca33b37a0056e29798d9068fd9\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/CrossChainPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport './HighCovRatioFeePoolV3.sol';\\nimport '../interfaces/IAdaptor.sol';\\nimport '../interfaces/ICrossChainPool.sol';\\n\\n/**\\n * @title Mega Pool\\n * @notice Mega Pool is able to handle cross-chain swaps in addition to ordinary swap within its own chain\\n * @dev Refer to note of `swapTokensForTokensCrossChain` for procedure of a cross-chain swap\\n * Note: All variables are 18 decimals, except from that of parameters of external functions and underlying tokens\\n */\\ncontract CrossChainPool is HighCovRatioFeePoolV3, ICrossChainPool {\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n    using SignedSafeMath for uint256;\\n\\n    /**\\n     * Storage\\n     */\\n\\n    IAdaptor public adaptor;\\n    bool public swapCreditForTokensEnabled;\\n    bool public swapTokensForCreditEnabled;\\n\\n    uint128 public creditForTokensHaircut;\\n    uint128 public tokensForCreditHaircut;\\n\\n    uint128 public totalCreditMinted;\\n    uint128 public totalCreditBurned;\\n\\n    /// @notice the maximum allowed amount of net mint credit. `totalCreditMinted - totalCreditBurned` should be smaller than this value\\n    uint128 public maximumOutboundCredit; // Upper limit of net minted credit\\n    uint128 public maximumInboundCredit; // Upper limit of net burned credit\\n\\n    mapping(address => uint256) public creditBalance;\\n\\n    uint256[50] private __gap;\\n\\n    /**\\n     * Events\\n     */\\n\\n    /**\\n     * @notice Event that is emitted when token is swapped into credit\\n     */\\n    event SwapTokensForCredit(\\n        address indexed sender,\\n        address indexed fromToken,\\n        uint256 fromAmount,\\n        uint256 fromTokenHaircut,\\n        uint256 creditAmount\\n    );\\n\\n    /**\\n     * @notice Event that is emitted when credit is swapped into token\\n     */\\n    event SwapCreditForTokens(\\n        uint256 creditAmount,\\n        address indexed toToken,\\n        uint256 toAmount,\\n        uint256 toTokenHaircut,\\n        address indexed receiver\\n    );\\n\\n    event MintCredit(address indexed receiver, uint256 creditAmount);\\n\\n    /**\\n     * Errors\\n     */\\n\\n    error POOL__CREDIT_NOT_ENOUGH();\\n    error POOL__REACH_MAXIMUM_MINTED_CREDIT();\\n    error POOL__REACH_MAXIMUM_BURNED_CREDIT();\\n    error POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED();\\n    error POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED();\\n\\n    /**\\n     * External/public functions\\n     */\\n\\n    /**\\n     * @notice Initiate a cross chain swap\\n     * @dev Steps:\\n     * 1. Swap `fromToken` for credit;\\n     * 2. Notify relayer to bridge credit to the `toChain`;\\n     * 3. Relayer invoke `completeSwapCreditForTokens` to swap credit for `toToken` in the `toChain`\\n     * Note: haircut returned here is just high cov ratio fee.\\n     * Delivery fee attached to the txn should be done off-chain via `WormholeAdaptor.estimateDeliveryFee` to reduce gas cost\\n     */\\n    function swapTokensForTokensCrossChain(\\n        address fromToken,\\n        address toToken,\\n        uint256 toChain,\\n        uint256 fromAmount,\\n        uint256 minimumCreditAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256 creditAmount, uint256 fromTokenHaircut, uint256 sequence)\\n    {\\n        // Assumption: the adaptor should check `toChain` and `toToken`\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        requireAssetNotPaused(fromToken);\\n        _checkAddress(receiver);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n\\n        (creditAmount, fromTokenHaircut) = _swapTokensForCredit(\\n            fromAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumCreditAmount\\n        );\\n\\n        emit SwapTokensForCredit(msg.sender, fromToken, fromAmount, fromTokenHaircut, creditAmount);\\n\\n        // Wormhole: computeBudget + applicationBudget + wormholeFee should equal the msg.value\\n        sequence = adaptor.bridgeCreditAndSwapForTokens{value: msg.value}(\\n            toToken,\\n            toChain,\\n            creditAmount,\\n            minimumToAmount,\\n            receiver,\\n            receiverValue,\\n            gasLimit\\n        );\\n    }\\n\\n    /**\\n     * @notice Swap credit for tokens (same chain)\\n     */\\n    function swapCreditForTokens(\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver\\n    ) external override nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _beforeSwapCreditForTokens(fromAmount, receiver);\\n        (actualToAmount, haircut) = _doSwapCreditForTokens(toToken, fromAmount, minimumToAmount, receiver);\\n    }\\n\\n    /**\\n     * @notice Bridge credit and swap it for `toToken` in the `toChain`\\n     * @dev Nonce must be non-zero, otherwise wormhole will revert the message\\n     * Delivery fee attached to the txn should be done off-chain via `WormholeAdaptor.estimateDeliveryFee` to reduce gas cost\\n     */\\n    function swapCreditForTokensCrossChain(\\n        address toToken,\\n        uint256 toChain,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver,\\n        uint256 receiverValue,\\n        uint256 gasLimit\\n    ) external payable override nonReentrant whenNotPaused returns (uint256 trackingId) {\\n        _beforeSwapCreditForTokens(fromAmount, receiver);\\n\\n        // Wormhole: computeBudget + applicationBudget + wormholeFee should equal the msg.value\\n        trackingId = adaptor.bridgeCreditAndSwapForTokens{value: msg.value}(\\n            toToken,\\n            toChain,\\n            fromAmount,\\n            minimumToAmount,\\n            receiver,\\n            receiverValue,\\n            gasLimit\\n        );\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    function _onlyAdaptor() internal view {\\n        if (msg.sender != address(adaptor)) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    function _swapTokensForCredit(\\n        IAsset fromAsset,\\n        uint256 fromAmount,\\n        uint256 minimumCreditAmount\\n    ) internal returns (uint256 creditAmount, uint256 feeInFromToken) {\\n        // Assume credit has 18 decimals\\n        if (!swapTokensForCreditEnabled) revert POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED();\\n        // TODO: implement _quoteFactor for credit if we would like to support dynamic asset (aka volatile / rather-volatile pools)\\n        // uint256 quoteFactor = IRelativePriceProvider(address(fromAsset)).getRelativePrice();\\n        (creditAmount, feeInFromToken) = CoreV3.quoteSwapTokensForCredit(\\n            fromAsset,\\n            fromAmount,\\n            ampFactor,\\n            WAD,\\n            tokensForCreditHaircut,\\n            startCovRatio,\\n            endCovRatio\\n        );\\n\\n        _checkAmount(minimumCreditAmount, creditAmount);\\n\\n        fromAsset.addCash(fromAmount - feeInFromToken);\\n        totalCreditMinted += _to128(creditAmount);\\n        _feeCollected[fromAsset] += feeInFromToken; // unlike other swaps, fee is collected in from token\\n\\n        // Check it doesn't exceed maximum out-going credits\\n        if (totalCreditMinted > maximumOutboundCredit + totalCreditBurned) revert POOL__REACH_MAXIMUM_MINTED_CREDIT();\\n    }\\n\\n    function _beforeSwapCreditForTokens(uint256 fromAmount, address receiver) internal {\\n        _checkAddress(receiver);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        if (creditBalance[msg.sender] < fromAmount) revert POOL__CREDIT_NOT_ENOUGH();\\n        unchecked {\\n            creditBalance[msg.sender] -= fromAmount;\\n        }\\n    }\\n\\n    function _doSwapCreditForTokens(\\n        address toToken,\\n        uint256 fromCreditAmount,\\n        uint256 minimumToAmount,\\n        address receiver\\n    ) internal returns (uint256 actualToAmount, uint256 toTokenHaircut) {\\n        if (fromCreditAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset toAsset = _assetOf(toToken);\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n        (actualToAmount, toTokenHaircut) = _swapCreditForTokens(\\n            toAsset,\\n            fromCreditAmount,\\n            minimumToAmount.toWad(toDecimal)\\n        );\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        toTokenHaircut = toTokenHaircut.fromWad(toDecimal);\\n\\n        toAsset.transferUnderlyingToken(receiver, actualToAmount);\\n        totalCreditBurned += _to128(fromCreditAmount);\\n\\n        // Check it doesn't exceed maximum in-coming credits\\n        if (totalCreditBurned > maximumInboundCredit + totalCreditMinted) revert POOL__REACH_MAXIMUM_BURNED_CREDIT();\\n\\n        emit SwapCreditForTokens(fromCreditAmount, toToken, actualToAmount, toTokenHaircut, receiver);\\n    }\\n\\n    function _swapCreditForTokens(\\n        IAsset toAsset,\\n        uint256 fromCreditAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        if (!swapCreditForTokensEnabled) revert POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED();\\n        // TODO: implement _quoteFactor for credit if we would like to support dynamic asset (aka volatile / rather-volatile pools)\\n        (actualToAmount, haircut) = CoreV3.quoteSwapCreditForTokens(\\n            fromCreditAmount,\\n            toAsset,\\n            ampFactor,\\n            WAD,\\n            creditForTokensHaircut\\n        );\\n\\n        _checkAmount(minimumToAmount, actualToAmount);\\n        _feeCollected[toAsset] += haircut;\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n        toAsset.removeCash(actualToAmount + haircut);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (DSMath.wdiv(toAsset.cash(), toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * Read-only functions\\n     */\\n\\n    function quoteSwapCreditForTokens(\\n        address toToken,\\n        uint256 fromCreditAmount\\n    ) external view returns (uint256 amount) {\\n        IAsset toAsset = _assetOf(toToken);\\n        if (!swapCreditForTokensEnabled) revert POOL__SWAP_CREDIT_FOR_TOKENS_DISABLED();\\n        // TODO: implement _quoteFactor for credit if we would like to support dynamic asset (aka volatile / rather-volatile pools)\\n        (uint256 actualToAmount, ) = CoreV3.quoteSwapCreditForTokens(\\n            fromCreditAmount,\\n            toAsset,\\n            ampFactor,\\n            WAD,\\n            creditForTokensHaircut\\n        );\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n        amount = actualToAmount.fromWad(toDecimal);\\n\\n        // Check it doesn't exceed maximum in-coming credits\\n        if (totalCreditBurned + fromCreditAmount > maximumInboundCredit + totalCreditMinted)\\n            revert POOL__REACH_MAXIMUM_BURNED_CREDIT();\\n    }\\n\\n    function quoteSwapTokensForCredit(\\n        address fromToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256 creditAmount, uint256 feeInFromToken) {\\n        IAsset fromAsset = _assetOf(fromToken);\\n\\n        // Assume credit has 18 decimals\\n        if (!swapTokensForCreditEnabled) revert POOL__SWAP_TOKENS_FOR_CREDIT_DISABLED();\\n        // TODO: implement _quoteFactor for credit if we would like to support dynamic asset (aka volatile / rather-volatile pools)\\n        // uint256 quoteFactor = IRelativePriceProvider(address(fromAsset)).getRelativePrice();\\n        (creditAmount, feeInFromToken) = CoreV3.quoteSwapTokensForCredit(\\n            fromAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            ampFactor,\\n            WAD,\\n            tokensForCreditHaircut,\\n            startCovRatio,\\n            endCovRatio\\n        );\\n\\n        // Check it doesn't exceed maximum out-going credits\\n        if (totalCreditMinted + creditAmount > maximumOutboundCredit + totalCreditBurned)\\n            revert POOL__REACH_MAXIMUM_MINTED_CREDIT();\\n    }\\n\\n    /**\\n     * @notice Calculate the r* and invariant when all credits are settled\\n     */\\n    function globalEquilCovRatioWithCredit() external view returns (uint256 equilCovRatio, uint256 invariantInUint) {\\n        int256 invariant;\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        // oustanding credit = totalCreditBurned - totalCreditMinted\\n        int256 creditOffset = (int256(uint256(totalCreditBurned)) - int256(uint256(totalCreditMinted))).wmul(\\n            (WAD + ampFactor).toInt256()\\n        );\\n        invariant += creditOffset;\\n        equilCovRatio = uint256(CoreV3.equilCovRatio(invariant, SL, ampFactor.toInt256()));\\n        invariantInUint = uint256(invariant);\\n    }\\n\\n    function _to128(uint256 val) internal pure returns (uint128) {\\n        require(val <= type(uint128).max, 'uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    /**\\n     * Permisioneed functions\\n     */\\n\\n    /**\\n     * @notice Swap credit to tokens; should be called by the adaptor\\n     */\\n    function completeSwapCreditForTokens(\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address receiver\\n    ) external override whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _onlyAdaptor();\\n        // Note: `_checkAddress(receiver)` could be skipped at it is called at the `fromChain`\\n        (actualToAmount, haircut) = _doSwapCreditForTokens(toToken, fromAmount, minimumToAmount, receiver);\\n    }\\n\\n    /**\\n     * @notice In case `completeSwapCreditForTokens` fails, adaptor should mint credit to the respective user\\n     * @dev This function is only for the case when `completeSwapCreditForTokens` fails, and should not be called otherwise\\n     * Also, this function should work even if the pool is paused\\n     */\\n    function mintCredit(uint256 creditAmount, address receiver) external override {\\n        _onlyAdaptor();\\n        creditBalance[receiver] += creditAmount;\\n        emit MintCredit(receiver, creditAmount);\\n    }\\n\\n    function setSwapTokensForCreditEnabled(bool enable) external onlyOwner {\\n        swapTokensForCreditEnabled = enable;\\n    }\\n\\n    function setSwapCreditForTokensEnabled(bool enable) external onlyOwner {\\n        swapCreditForTokensEnabled = enable;\\n    }\\n\\n    function setMaximumOutboundCredit(uint128 _maximumOutboundCredit) external onlyOwner {\\n        maximumOutboundCredit = _maximumOutboundCredit;\\n    }\\n\\n    function setMaximumInboundCredit(uint128 _maximumInboundCredit) external onlyOwner {\\n        maximumInboundCredit = _maximumInboundCredit;\\n    }\\n\\n    function setAdaptorAddr(IAdaptor _adaptor) external onlyOwner {\\n        adaptor = _adaptor;\\n    }\\n\\n    function setCrossChainHaircut(uint128 _tokensForCreditHaircut, uint128 _creditForTokensHaircut) external onlyOwner {\\n        require(_creditForTokensHaircut < 1e18 && _tokensForCreditHaircut < 1e18);\\n        creditForTokensHaircut = _creditForTokensHaircut;\\n        tokensForCreditHaircut = _tokensForCreditHaircut;\\n    }\\n}\\n\",\"keccak256\":\"0xf92998e0c7d6e7980b9a970bd5b0025691fc8a49ad197c26c20bbaf52d3cc767\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/HighCovRatioFeePoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\nimport './PoolV3.sol';\\n\\n/**\\n * @title HighCovRatioFeePoolV3\\n * @dev Pool with high cov ratio fee protection\\n * Change log:\\n * - V2: Add `gap` to prevent storage collision for future upgrades\\n * - V3: Contract size compression\\n */\\ncontract HighCovRatioFeePoolV3 is PoolV3 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for uint256;\\n\\n    uint128 public startCovRatio; // 1.5\\n    uint128 public endCovRatio; // 1.8\\n\\n    uint256[50] private gap;\\n\\n    error WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public virtual override {\\n        super.initialize(ampFactor_, haircutRate_);\\n        startCovRatio = 15e17;\\n        endCovRatio = 18e17;\\n    }\\n\\n    function setCovRatioFeeParam(uint128 startCovRatio_, uint128 endCovRatio_) external onlyOwner {\\n        if (startCovRatio_ < 1e18 || startCovRatio_ > endCovRatio_) revert WOMBAT_INVALID_VALUE();\\n\\n        startCovRatio = startCovRatio_;\\n        endCovRatio = endCovRatio_;\\n    }\\n\\n    /**\\n     * @dev Exact output swap (fromAmount < 0) should be only used by off-chain quoting function as it is a gas monster\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view override returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = super._quoteFrom(fromAsset, toAsset, fromAmount);\\n\\n        if (fromAmount >= 0) {\\n            uint256 highCovRatioFee = CoreV3.highCovRatioFee(\\n                fromAsset.cash(),\\n                fromAsset.liability(),\\n                uint256(fromAmount),\\n                actualToAmount,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n\\n            actualToAmount -= highCovRatioFee;\\n            haircut += highCovRatioFee;\\n        } else {\\n            // reverse quote\\n            uint256 toAssetCash = toAsset.cash();\\n            uint256 toAssetLiability = toAsset.liability();\\n            uint256 finalToAssetCovRatio = (toAssetCash + actualToAmount).wdiv(toAssetLiability);\\n            if (finalToAssetCovRatio <= startCovRatio) {\\n                // happy path: no high cov ratio fee is charged\\n                return (actualToAmount, haircut);\\n            } else if (toAssetCash.wdiv(toAssetLiability) >= endCovRatio) {\\n                // the to-asset exceeds it's cov ratio limit, further swap to increase cov ratio is impossible\\n                revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n            }\\n\\n            // reverse quote: cov ratio of the to-asset exceed endCovRatio. direct reverse quote is not supported\\n            // we binary search for a upper bound\\n            actualToAmount = _findUpperBound(toAsset, fromAsset, uint256(-fromAmount));\\n            (, haircut) = _quoteFrom(toAsset, fromAsset, actualToAmount.toInt256());\\n        }\\n    }\\n\\n    /**\\n     * @notice Binary search to find the upper bound of `fromAmount` required to swap `fromAsset` to `toAmount` of `toAsset`\\n     * @dev This function should only used as off-chain view function as it is a gas monster\\n     */\\n    function _findUpperBound(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 toAmount\\n    ) internal view returns (uint256 upperBound) {\\n        uint8 decimals = fromAsset.underlyingTokenDecimals();\\n        uint256 toWadFactor = DSMath.toWad(1, decimals);\\n        // the search value uses the same number of digits as the token\\n        uint256 high = (uint256(fromAsset.liability()).wmul(endCovRatio) - fromAsset.cash()).fromWad(decimals);\\n        uint256 low = 1;\\n\\n        // verify `high` is a valid upper bound\\n        uint256 quote;\\n        (quote, ) = _quoteFrom(fromAsset, toAsset, (high * toWadFactor).toInt256());\\n        if (quote < toAmount) revert WOMBAT_COV_RATIO_LIMIT_EXCEEDED();\\n\\n        // Note: we might limit the maximum number of rounds if the request is always rejected by the RPC server\\n        while (low < high) {\\n            uint256 mid = (low + high) / 2;\\n            (quote, ) = _quoteFrom(fromAsset, toAsset, (mid * toWadFactor).toInt256());\\n            if (quote >= toAmount) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high * toWadFactor;\\n    }\\n\\n    /**\\n     * @dev take into account high cov ratio fee\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual override returns (uint256 finalAmount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        (finalAmount, withdrewAmount) = CoreV3.quoteWithdrawAmountFromOtherAsset(\\n            fromAsset,\\n            toAsset,\\n            liquidity,\\n            ampFactor,\\n            scaleFactor,\\n            haircutRate,\\n            startCovRatio,\\n            endCovRatio,\\n            _getGlobalEquilCovRatioForDepositWithdrawal(),\\n            withdrawalHaircutRate\\n        );\\n\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        finalAmount = finalAmount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n}\\n\",\"keccak256\":\"0xa7b6642825149a901e55563c8a02f3994bf2f7606205f24612f031341201a76e\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PausableAssets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\n/**\\n * @title PausableAssets\\n * @notice Handles assets pause and unpause of Wombat protocol.\\n * @dev Allows pausing and unpausing of deposit and swap operations\\n */\\ncontract PausableAssets {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event PausedAsset(address token, address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event UnpausedAsset(address token, address account);\\n\\n    // We use the asset's underlying token as the key to check whether an asset is paused.\\n    // A pool will never have two assets with the same underlying token.\\n    mapping(address => bool) private _pausedAssets;\\n\\n    error WOMBAT_ASSET_ALREADY_PAUSED();\\n    error WOMBAT_ASSET_NOT_PAUSED();\\n\\n    /**\\n     * @dev Function to return if the asset is paused.\\n     * The return value is only useful when true.\\n     * When the return value is false, the asset can be either not paused or not exist.\\n     */\\n    function isPaused(address token) public view returns (bool) {\\n        return _pausedAssets[token];\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function requireAssetNotPaused(address token) internal view {\\n        if (_pausedAssets[token]) revert WOMBAT_ASSET_ALREADY_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Function to make a function callable only when the asset is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function requireAssetPaused(address token) internal view {\\n        if (!_pausedAssets[token]) revert WOMBAT_ASSET_NOT_PAUSED();\\n    }\\n\\n    /**\\n     * @dev Triggers paused state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must not be paused.\\n     */\\n    function _pauseAsset(address token) internal {\\n        requireAssetNotPaused(token);\\n        _pausedAssets[token] = true;\\n        emit PausedAsset(token, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The asset must be paused.\\n     */\\n    function _unpauseAsset(address token) internal {\\n        requireAssetPaused(token);\\n        _pausedAssets[token] = false;\\n        emit UnpausedAsset(token, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x4655cb4b2f70d304fe1f3cc0c9e70fa2594ae45a14479fcf7dfc349633553ef0\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-core/pool/PoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './CoreV3.sol';\\nimport '../interfaces/IAsset.sol';\\nimport './PausableAssets.sol';\\nimport '../../wombat-governance/interfaces/IMasterWombat.sol';\\nimport '../interfaces/IPoolV3.sol';\\n\\n/**\\n * @title Pool V3\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n * Note: All variables are 18 decimals, except from that of underlying tokens\\n * Change log:\\n * - V2: Add `gap` to prevent storage collision for future upgrades\\n * - V3:\\n *   - *Breaking change*: interface change for quotePotentialDeposit, quotePotentialWithdraw\\n *     and quotePotentialWithdrawFromOtherAsset, the reward/fee parameter is removed as it is\\n *     ambiguous in the context of volatile pools.\\n *   - Contract size compression\\n *   - `mintFee` ignores `mintFeeThreshold`\\n *   - `globalEquilCovRatio` returns int256 `instead` of `uint256`\\n */\\ncontract PoolV3 is\\n    Initializable,\\n    IPoolV3,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    PausableAssets\\n{\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SignedSafeMath for int256;\\n    using SignedSafeMath for uint256;\\n\\n    /// @notice Asset Map struct holds assets\\n    struct AssetMap {\\n        address[] keys;\\n        mapping(address => IAsset) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    int256 internal constant WAD_I = 10 ** 18;\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    /* Storage */\\n\\n    /// @notice Amplification factor\\n    uint256 public ampFactor;\\n\\n    /// @notice Haircut rate\\n    uint256 public haircutRate;\\n\\n    /// @notice Retention ratio: the ratio of haircut that should stay in the pool\\n    uint256 public retentionRatio;\\n\\n    /// @notice LP dividend ratio : the ratio of haircut that should distribute to LP\\n    uint256 public lpDividendRatio;\\n\\n    /// @notice The threshold to mint fee (unit: WAD)\\n    uint256 public mintFeeThreshold;\\n\\n    /// @notice Dev address\\n    address public dev;\\n\\n    address public feeTo;\\n\\n    address public masterWombat;\\n\\n    /// @notice Dividend collected by each asset (unit: WAD)\\n    mapping(IAsset => uint256) internal _feeCollected;\\n\\n    /// @notice A record of assets inside Pool\\n    AssetMap internal _assets;\\n\\n    // Slots reserved for future use\\n    uint128 internal _used1; // Remember to initialize before use.\\n    uint128 internal _used2; // Remember to initialize before use.\\n\\n    /// @notice Withdrawal haircut rate charged at the time of withdrawal\\n    uint256 public withdrawalHaircutRate;\\n    uint256[48] private gap;\\n\\n    /* Events */\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when asset is removed from Pool\\n    event AssetRemoved(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    event SetDev(address addr);\\n    event SetMasterWombat(address addr);\\n    event SetFeeTo(address addr);\\n\\n    event SetMintFeeThreshold(uint256 value);\\n    event SetFee(uint256 lpDividendRatio, uint256 retentionRatio);\\n    event SetAmpFactor(uint256 value);\\n    event SetHaircutRate(uint256 value);\\n    event SetWithdrawalHaircutRate(uint256 value);\\n\\n    event FillPool(address token, uint256 amount);\\n    event TransferTipBucket(address token, uint256 amount, address to);\\n\\n    /* Errors */\\n\\n    error WOMBAT_FORBIDDEN();\\n    error WOMBAT_EXPIRED();\\n\\n    error WOMBAT_ASSET_NOT_EXISTS();\\n    error WOMBAT_ASSET_ALREADY_EXIST();\\n\\n    error WOMBAT_ZERO_ADDRESS();\\n    error WOMBAT_ZERO_AMOUNT();\\n    error WOMBAT_ZERO_LIQUIDITY();\\n    error WOMBAT_INVALID_VALUE();\\n    error WOMBAT_SAME_ADDRESS();\\n    error WOMBAT_AMOUNT_TOO_LOW();\\n    error WOMBAT_CASH_NOT_ENOUGH();\\n\\n    /* Pesudo modifiers to safe gas */\\n\\n    function _checkLiquidity(uint256 liquidity) internal pure {\\n        if (liquidity == 0) revert WOMBAT_ZERO_LIQUIDITY();\\n    }\\n\\n    function _checkAddress(address to) internal pure {\\n        if (to == address(0)) revert WOMBAT_ZERO_ADDRESS();\\n    }\\n\\n    function _checkSameAddress(address from, address to) internal pure {\\n        if (from == to) revert WOMBAT_SAME_ADDRESS();\\n    }\\n\\n    function _checkAmount(uint256 minAmt, uint256 amt) internal pure {\\n        if (minAmt > amt) revert WOMBAT_AMOUNT_TOO_LOW();\\n    }\\n\\n    function _ensure(uint256 deadline) internal view {\\n        if (deadline < block.timestamp) revert WOMBAT_EXPIRED();\\n    }\\n\\n    function _onlyDev() internal view {\\n        if (dev != msg.sender) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /* Construtor and setters */\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(uint256 ampFactor_, uint256 haircutRate_) public virtual initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        if (ampFactor_ > WAD || haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        ampFactor = ampFactor_;\\n        haircutRate = haircutRate_;\\n\\n        lpDividendRatio = WAD;\\n\\n        dev = msg.sender;\\n    }\\n\\n    /**\\n     * Permisioneed functions\\n     */\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner {\\n        _checkAddress(asset);\\n        _checkAddress(token);\\n        _checkSameAddress(token, asset);\\n\\n        if (_containsAsset(token)) revert WOMBAT_ASSET_ALREADY_EXIST();\\n        _assets.values[token] = IAsset(asset);\\n        _assets.indexOf[token] = _assets.keys.length;\\n        _assets.keys.push(token);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Removes asset from asset struct\\n     * @dev Can only be called by owner\\n     * @param token The address of token to remove\\n     */\\n    function removeAsset(address token) external onlyOwner {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n\\n        address asset = address(_getAsset(token));\\n        delete _assets.values[token];\\n\\n        uint256 index = _assets.indexOf[token];\\n        uint256 lastIndex = _assets.keys.length - 1;\\n        address lastKey = _assets.keys[lastIndex];\\n\\n        _assets.indexOf[lastKey] = index;\\n        delete _assets.indexOf[token];\\n\\n        _assets.keys[index] = lastKey;\\n        _assets.keys.pop();\\n\\n        emit AssetRemoved(token, asset);\\n    }\\n\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev_ new contract dev address\\n     */\\n    function setDev(address dev_) external onlyOwner {\\n        _checkAddress(dev_);\\n        dev = dev_;\\n        emit SetDev(dev_);\\n    }\\n\\n    function setMasterWombat(address masterWombat_) external onlyOwner {\\n        _checkAddress(masterWombat_);\\n        masterWombat = masterWombat_;\\n        emit SetMasterWombat(masterWombat_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools amplification factor. Can only be set by the contract owner.\\n     * @param ampFactor_ new pool's amplification factor\\n     */\\n    function setAmpFactor(uint256 ampFactor_) external onlyOwner {\\n        if (ampFactor_ > WAD) revert WOMBAT_INVALID_VALUE(); // ampFactor_ should not be set bigger than 1\\n        ampFactor = ampFactor_;\\n        emit SetAmpFactor(ampFactor_);\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        if (haircutRate_ > WAD) revert WOMBAT_INVALID_VALUE(); // haircutRate_ should not be set bigger than 1\\n        haircutRate = haircutRate_;\\n        emit SetHaircutRate(haircutRate_);\\n    }\\n\\n    function setWithdrawalHaircutRate(uint256 withdrawalHaircutRate_) external onlyOwner {\\n        if (withdrawalHaircutRate_ > WAD) revert WOMBAT_INVALID_VALUE();\\n        withdrawalHaircutRate = withdrawalHaircutRate_;\\n        emit SetWithdrawalHaircutRate(withdrawalHaircutRate_);\\n    }\\n\\n    function setFee(uint256 lpDividendRatio_, uint256 retentionRatio_) external onlyOwner {\\n        if (retentionRatio_ + lpDividendRatio_ > WAD) revert WOMBAT_INVALID_VALUE();\\n\\n        _mintAllFees();\\n        retentionRatio = retentionRatio_;\\n        lpDividendRatio = lpDividendRatio_;\\n        emit SetFee(lpDividendRatio_, retentionRatio_);\\n    }\\n\\n    /**\\n     * @dev unit of amount should be in WAD\\n     */\\n    function transferTipBucket(address token, uint256 amount, address to) external onlyOwner {\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = tipBucketBalance(token);\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.transferUnderlyingToken(to, amount.fromWad(asset.underlyingTokenDecimals()));\\n        emit TransferTipBucket(token, amount, to);\\n    }\\n\\n    /**\\n     * @notice Changes the fee beneficiary. Can only be set by the contract owner.\\n     * This value cannot be set to 0 to avoid unsettled fee.\\n     * @param feeTo_ new fee beneficiary\\n     */\\n    function setFeeTo(address feeTo_) external onlyOwner {\\n        _checkAddress(feeTo_);\\n        feeTo = feeTo_;\\n        emit SetFeeTo(feeTo_);\\n    }\\n\\n    /**\\n     * @notice Set min fee to mint\\n     */\\n    function setMintFeeThreshold(uint256 mintFeeThreshold_) external onlyOwner {\\n        mintFeeThreshold = mintFeeThreshold_;\\n        emit SetMintFeeThreshold(mintFeeThreshold_);\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external {\\n        _onlyDev();\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external {\\n        _onlyDev();\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev pause asset, restricting deposit and swap operations\\n     */\\n    function pauseAsset(address token) external {\\n        _onlyDev();\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        _pauseAsset(token);\\n    }\\n\\n    /**\\n     * @dev unpause asset, enabling deposit and swap operations\\n     */\\n    function unpauseAsset(address token) external {\\n        _onlyDev();\\n        _unpauseAsset(token);\\n    }\\n\\n    /**\\n     * @notice Move fund from tip bucket to the pool to keep r* = 1 as error accumulates\\n     * unit of amount should be in WAD\\n     */\\n    function fillPool(address token, uint256 amount) external {\\n        _onlyDev();\\n        IAsset asset = _assetOf(token);\\n        uint256 tipBucketBal = tipBucketBalance(token);\\n\\n        if (amount > tipBucketBal) {\\n            // revert if there's not enough amount in the tip bucket\\n            revert WOMBAT_INVALID_VALUE();\\n        }\\n\\n        asset.addCash(amount);\\n        emit FillPool(token, amount);\\n    }\\n\\n    /* Assets */\\n\\n    /**\\n     * @notice Return list of tokens in the pool\\n     */\\n    function getTokens() external view override returns (address[] memory) {\\n        return _assets.keys;\\n    }\\n\\n    /**\\n     * @notice get length of asset list\\n     * @return the size of the asset list\\n     */\\n    function _sizeOfAssetList() internal view returns (uint256) {\\n        return _assets.keys.length;\\n    }\\n\\n    /**\\n     * @notice Gets asset with token address key\\n     * @param key The address of token\\n     * @return the corresponding asset in state\\n     */\\n    function _getAsset(address key) internal view returns (IAsset) {\\n        return _assets.values[key];\\n    }\\n\\n    /**\\n     * @notice Gets key (address) at index\\n     * @param index the index\\n     * @return the key of index\\n     */\\n    function _getKeyAtIndex(uint256 index) internal view returns (address) {\\n        return _assets.keys[index];\\n    }\\n\\n    /**\\n     * @notice Looks if the asset is contained by the list\\n     * @param token The address of token to look for\\n     * @return bool true if the asset is in asset list, false otherwise\\n     */\\n    function _containsAsset(address token) internal view returns (bool) {\\n        return _assets.values[token] != IAsset(address(0));\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) internal view returns (IAsset) {\\n        if (!_containsAsset(token)) revert WOMBAT_ASSET_NOT_EXISTS();\\n        return _assets.values[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function addressOfAsset(address token) external view override returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param minimumLiquidity The minimum amount of liquidity to receive\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        // collect fee before deposit\\n        _mintFeeIfNeeded(asset);\\n\\n        uint256 liabilityToMint;\\n        (liquidity, liabilityToMint) = CoreV3.quoteDepositLiquidity(\\n            asset,\\n            amount,\\n            ampFactor,\\n            _getGlobalEquilCovRatioForDepositWithdrawal()\\n        );\\n\\n        _checkLiquidity(liquidity);\\n        _checkAmount(minimumLiquidity, liquidity);\\n\\n        asset.addCash(amount);\\n        asset.addLiability(liabilityToMint);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation. This function assumes tax free token.\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param minimumLiquidity The minimum amount of liquidity to receive\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @param shouldStake Whether to stake LP tokens automatically after deposit\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external override nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        if (amount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(token);\\n\\n        IAsset asset = _assetOf(token);\\n        IERC20(token).safeTransferFrom(address(msg.sender), address(asset), amount);\\n\\n        if (!shouldStake) {\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, to);\\n        } else {\\n            _checkAddress(masterWombat);\\n            // deposit and stake on behalf of the user\\n            liquidity = _deposit(asset, amount.toWad(asset.underlyingTokenDecimals()), minimumLiquidity, address(this));\\n\\n            asset.approve(masterWombat, liquidity);\\n\\n            uint256 pid = IMasterWombat(masterWombat).getAssetPid(address(asset));\\n            IMasterWombat(masterWombat).depositFor(pid, liquidity, to);\\n        }\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential deposit from pool\\n     * @dev To be used by frontend\\n     * @param token The token to deposit by user\\n     * @param amount The amount to deposit\\n     * @return liquidity The potential liquidity user would receive\\n     */\\n    function quotePotentialDeposit(address token, uint256 amount) external view override returns (uint256 liquidity) {\\n        IAsset asset = _assetOf(token);\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        (liquidity, ) = CoreV3.quoteDepositLiquidity(\\n            asset,\\n            amount.toWad(decimals),\\n            ampFactor,\\n            _getGlobalEquilCovRatioForDepositWithdrawal()\\n        );\\n    }\\n\\n    /* Withdraw */\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @return amount The total amount withdrawn\\n     * @return withdrawalHaircut The amount of withdrawn haircut\\n     */\\n    function _withdraw(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 minimumAmount\\n    ) internal returns (uint256 amount, uint256 withdrawalHaircut) {\\n        // collect fee before withdraw\\n        _mintFeeIfNeeded(asset);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, withdrawalHaircut) = CoreV3.quoteWithdrawAmount(\\n            asset,\\n            liquidity,\\n            ampFactor,\\n            _getGlobalEquilCovRatioForDepositWithdrawal(),\\n            withdrawalHaircutRate\\n        );\\n        _checkAmount(minimumAmount, amount);\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount + withdrawalHaircut);\\n        asset.removeLiability(liabilityToBurn);\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (asset.liability() > 0 && uint256(asset.cash()).wdiv(asset.liability()) < WAD / 100)\\n            revert WOMBAT_FORBIDDEN();\\n\\n        if (withdrawalHaircut > 0) {\\n            _feeCollected[asset] += withdrawalHaircut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        _checkAddress(to);\\n        _ensure(deadline);\\n\\n        IAsset asset = _assetOf(token);\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        (amount, ) = _withdraw(asset, liquidity, minimumAmount.toWad(decimals));\\n        amount = amount.fromWad(decimals);\\n        asset.transferUnderlyingToken(to, amount);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Enables withdrawing liquidity from an asset using LP from a different asset\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity to be withdrawn (in fromToken decimal)\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return toAmount The total amount withdrawn\\n     */\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused returns (uint256 toAmount) {\\n        _checkAddress(to);\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        // Withdraw and swap\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        IERC20(fromAsset).safeTransferFrom(address(msg.sender), address(fromAsset), liquidity);\\n        (uint256 fromAmountInWad, ) = _withdraw(fromAsset, liquidity, 0);\\n        (toAmount, ) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmountInWad,\\n            minimumAmount.toWad(toAsset.underlyingTokenDecimals())\\n        );\\n\\n        toAmount = toAmount.fromWad(toAsset.underlyingTokenDecimals());\\n        toAsset.transferUnderlyingToken(to, toAmount);\\n\\n        uint256 fromAmount = fromAmountInWad.fromWad(fromAsset.underlyingTokenDecimals());\\n        emit Withdraw(msg.sender, fromToken, fromAmount, liquidity, to);\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, toAmount, to);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     */\\n    function quotePotentialWithdraw(address token, uint256 liquidity) external view override returns (uint256 amount) {\\n        _checkLiquidity(liquidity);\\n        IAsset asset = _assetOf(token);\\n        (amount, , ) = CoreV3.quoteWithdrawAmount(\\n            asset,\\n            liquidity,\\n            ampFactor,\\n            _getGlobalEquilCovRatioForDepositWithdrawal(),\\n            withdrawalHaircutRate\\n        );\\n\\n        uint8 decimals = asset.underlyingTokenDecimals();\\n        amount = amount.fromWad(decimals);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from other asset from the pool\\n     * @dev To be used by frontend\\n     * The startCovRatio and endCovRatio is set to 0, so no high cov ratio fee is charged\\n     * This is to be overriden by the HighCovRatioFeePool\\n     * @param fromToken The corresponding token user holds the LP (Asset) from\\n     * @param toToken The token wanting to be withdrawn (needs to be well covered)\\n     * @param liquidity The liquidity (amount of the lp assets) to be withdrawn\\n     * @return finalAmount The potential amount user would receive\\n     * @return withdrewAmount The amount of the from-token that is withdrew\\n     */\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual override returns (uint256 finalAmount, uint256 withdrewAmount) {\\n        _checkLiquidity(liquidity);\\n        _checkSameAddress(fromToken, toToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        (finalAmount, withdrewAmount) = CoreV3.quoteWithdrawAmountFromOtherAsset(\\n            fromAsset,\\n            toAsset,\\n            liquidity,\\n            ampFactor,\\n            scaleFactor,\\n            haircutRate,\\n            0,\\n            0,\\n            _getGlobalEquilCovRatioForDepositWithdrawal(),\\n            withdrawalHaircutRate\\n        );\\n\\n        withdrewAmount = withdrewAmount.fromWad(fromAsset.underlyingTokenDecimals());\\n        finalAmount = finalAmount.fromWad(toAsset.underlyingTokenDecimals());\\n    }\\n\\n    /* Swap */\\n\\n    /**\\n     * @notice Return the scale factor that should applied on from-amounts in a swap given\\n     * the from-asset and the to-asset.\\n     * @dev not applicable to a plain pool\\n     * All tokens are assumed to have the same intrinsic value\\n     * To be overriden by DynamicPool\\n     */\\n    function _quoteFactor(\\n        IAsset, // fromAsset\\n        IAsset // toAsset\\n    ) internal view virtual returns (uint256) {\\n        return 1e18;\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     * To be overriden by HighCovRatioFeePool for reverse-quote\\n     */\\n    function _quoteFrom(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount\\n    ) internal view virtual returns (uint256 actualToAmount, uint256 haircut) {\\n        uint256 scaleFactor = _quoteFactor(fromAsset, toAsset);\\n        return CoreV3.quoteSwap(fromAsset, toAsset, fromAmount, ampFactor, scaleFactor, haircutRate);\\n    }\\n\\n    /**\\n     * expect fromAmount and minimumToAmount to be in WAD\\n     */\\n    function _swap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount\\n    ) internal returns (uint256 actualToAmount, uint256 haircut) {\\n        (actualToAmount, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount.toInt256());\\n        _checkAmount(minimumToAmount, actualToAmount);\\n\\n        _feeCollected[toAsset] += haircut;\\n\\n        fromAsset.addCash(fromAmount);\\n\\n        // haircut is removed from cash to maintain r* = 1. It is distributed during _mintFee()\\n\\n        toAsset.removeCash(actualToAmount + haircut);\\n\\n        // mint fee is skipped for swap to save gas,\\n\\n        // revert if cov ratio < 1% to avoid precision error\\n        if (uint256(toAsset.cash()).wdiv(toAsset.liability()) < WAD / 100) revert WOMBAT_FORBIDDEN();\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @dev This function assumes tax free token.\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant whenNotPaused returns (uint256 actualToAmount, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n        _checkAddress(to);\\n        _ensure(deadline);\\n        requireAssetNotPaused(fromToken);\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        uint8 toDecimal = toAsset.underlyingTokenDecimals();\\n\\n        (actualToAmount, haircut) = _swap(\\n            fromAsset,\\n            toAsset,\\n            fromAmount.toWad(fromAsset.underlyingTokenDecimals()),\\n            minimumToAmount.toWad(toDecimal)\\n        );\\n\\n        actualToAmount = actualToAmount.fromWad(toDecimal);\\n        haircut = haircut.fromWad(toDecimal);\\n\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(fromAsset), fromAmount);\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @dev In reverse quote, the haircut is in the `fromAsset`\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The given input amount\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) public view override returns (uint256 potentialOutcome, uint256 haircut) {\\n        _checkSameAddress(fromToken, toToken);\\n        if (fromAmount == 0) revert WOMBAT_ZERO_AMOUNT();\\n\\n        IAsset fromAsset = _assetOf(fromToken);\\n        IAsset toAsset = _assetOf(toToken);\\n\\n        fromAmount = fromAmount.toWad(fromAsset.underlyingTokenDecimals());\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        potentialOutcome = potentialOutcome.fromWad(toAsset.underlyingTokenDecimals());\\n        if (fromAmount >= 0) {\\n            haircut = haircut.fromWad(toAsset.underlyingTokenDecimals());\\n        } else {\\n            haircut = haircut.fromWad(fromAsset.underlyingTokenDecimals());\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param toAmount The given output amount\\n     * @return amountIn The input amount required\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view override returns (uint256 amountIn, uint256 haircut) {\\n        return quotePotentialSwap(toToken, fromToken, -toAmount);\\n    }\\n\\n    /* Queries */\\n\\n    /**\\n     * @notice Returns the exchange rate of the LP token\\n     * @param token The address of the token\\n     * @return xr The exchange rate of LP token\\n     */\\n    function exchangeRate(address token) external view returns (uint256 xr) {\\n        IAsset asset = _assetOf(token);\\n        if (asset.totalSupply() == 0) return WAD;\\n        return xr = uint256(asset.liability()).wdiv(uint256(asset.totalSupply()));\\n    }\\n\\n    function globalEquilCovRatio() public view returns (int256 equilCovRatio, int256 invariant) {\\n        int256 SL;\\n        (invariant, SL) = _globalInvariantFunc();\\n        equilCovRatio = CoreV3.equilCovRatio(invariant, SL, ampFactor.toInt256());\\n    }\\n\\n    function tipBucketBalance(address token) public view returns (uint256 balance) {\\n        IAsset asset = _assetOf(token);\\n        return\\n            asset.underlyingTokenBalance().toWad(asset.underlyingTokenDecimals()) - asset.cash() - _feeCollected[asset];\\n    }\\n\\n    /* Utils */\\n\\n    /**\\n     * @dev to be overriden by DynamicPool to weight assets by the price of underlying token\\n     */\\n    function _globalInvariantFunc() internal view virtual returns (int256 D, int256 SL) {\\n        int256 A = ampFactor.toInt256();\\n\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n\\n            // overflow is unrealistic\\n            int256 A_i = int256(uint256(asset.cash()));\\n            int256 L_i = int256(uint256(asset.liability()));\\n\\n            // Assume when L_i == 0, A_i always == 0\\n            if (L_i == 0) {\\n                // avoid division of 0\\n                continue;\\n            }\\n\\n            int256 r_i = A_i.wdiv(L_i);\\n            SL += L_i;\\n            D += L_i.wmul(r_i - A.wdiv(r_i));\\n        }\\n    }\\n\\n    /**\\n     * For stable pools and rather-stable pools, r* is assumed to be 1 to simplify calculation\\n     */\\n    function _getGlobalEquilCovRatioForDepositWithdrawal() internal view virtual returns (int256 equilCovRatio) {\\n        return WAD_I;\\n    }\\n\\n    function _mintFeeIfNeeded(IAsset asset) internal {\\n        uint256 feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0 || feeCollected < mintFeeThreshold) {\\n            return;\\n        } else {\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Private function to send fee collected to the fee beneficiary\\n     * @param asset The address of the asset to collect fee\\n     */\\n    function _mintFee(IAsset asset) internal returns (uint256 feeCollected) {\\n        feeCollected = _feeCollected[asset];\\n        if (feeCollected == 0) {\\n            // early return\\n            return 0;\\n        }\\n        {\\n            // dividend to veWOM\\n            uint256 dividend = feeCollected.wmul(WAD - lpDividendRatio - retentionRatio);\\n\\n            if (dividend > 0) {\\n                asset.transferUnderlyingToken(feeTo, dividend.fromWad(asset.underlyingTokenDecimals()));\\n            }\\n        }\\n        {\\n            // dividend to LP\\n            uint256 lpDividend = feeCollected.wmul(lpDividendRatio);\\n            if (lpDividend > 0) {\\n                // exact deposit to maintain r* = 1\\n                // increase the value of the LP token, i.e. assetsPerShare\\n                (, uint256 liabilityToMint) = CoreV3.quoteDepositLiquidity(\\n                    asset,\\n                    lpDividend,\\n                    ampFactor,\\n                    _getGlobalEquilCovRatioForDepositWithdrawal()\\n                );\\n                asset.addLiability(liabilityToMint);\\n                asset.addCash(lpDividend);\\n            }\\n        }\\n        // remainings are sent to the tipbucket\\n\\n        _feeCollected[asset] = 0;\\n    }\\n\\n    function _mintAllFees() internal {\\n        for (uint256 i; i < _sizeOfAssetList(); ++i) {\\n            IAsset asset = _getAsset(_getKeyAtIndex(i));\\n            _mintFee(asset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send fee collected to the fee beneficiary\\n     * @param token The address of the token to collect fee\\n     */\\n    function mintFee(address token) external returns (uint256 feeCollected) {\\n        return _mintFee(_assetOf(token));\\n    }\\n}\\n\",\"keccak256\":\"0x5fa2ee3b7b3cb61ee449e6b02f90ba1cab82b4577f49f73bb4e3f437e153a7ce\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the MasterWombat\\n */\\ninterface IMasterWombat {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(\\n        uint256 _pid,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(\\n        uint256 _pid\\n    ) external view returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(\\n        uint256[] memory _pids\\n    ) external returns (uint256 transfered, uint256[] memory rewards, uint256[] memory additionalRewards);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n}\\n\",\"keccak256\":\"0x374ee1072672236959e8ec928ce63690ec3bcc18edcadfffce165a38dd7082ed\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001757615a1390816200001d8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908163017b82921461381b57508063017e7e58146137f45780630705999d14613781578063070f81d91461369357806307a237c51461362457806309a5fca31461316157806309f1fd3e1461311d5780630f91f06f14612b42578063148b1d3a14612b1a5780633753b14a14612a695780633bd61ba814612a425780633f4ba83a146129a55780634a5e42b1146128435780634a6fee0e146127c25780634ba2adfc146127a05780634d31a070146127785780634fdd64e51461276457806352f7c988146126a15780635326a8e71461259457806355667ca31461256c5780635b14f1831461252f5780635b6cfa61146124ba5780635c975abb146124975780635cfe092e146124795780635dceb851146123f557806361858e231461230d5780636281baef14611fad57806362fad13b14611f155780636922d5ca14611ef7578063715018a614611e9b57806374cbbdb914611e795780637629703f14611e5257806376ad859714611e085780637f809d2914611c83578063815bfd2914611c655780638456cb5914611c0a578063873e73c314611bc75780638a2dfe0914611aea5780638da5cb5b14611ac35780638de66a681461194b578063907448ed1461181b57806391cca3db146117f457806393aeea02146116b45780639630b660146116875780639908fc8b146114475780639abacb41146113815780639e4416b714611323578063a312ff2314610eba578063a4275ceb14610caf578063aa6ca80814610be9578063ac99415a14610bcb578063baf7e21b14610ba9578063c2cd9b2b14610b81578063c3a21fa714610b5a578063d043c56514610b0c578063d0dd0e5614610aee578063d30ffeda14610aca578063d477f05f14610a57578063da48999714610909578063dc3b7c8b146108e5578063e4a301161461071b578063e9249cc7146106eb578063e9740dd51461069c578063eb4007071461067a578063f2fde38b146105d3578063f46901ed14610560578063f57e84d514610502578063f89830e514610494578063f8b49e7214610460578063fb7f5cc214610438578063fc8b9c06146103ff578063fca8f308146103ce5763fd33d3881461034457600080fd5b346103cb5760203660031901126103cb57600435610360613981565b670de0b6b3a764000081116103a1576020817f1c18a912ced6b380386b05a39ae0c1326b69555d4ed8d13fd4d9c6896b0ea3799260d755604051908152a180f35b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b80fd5b50346103cb5760406103f36103ed6103e5366138fd565b929092614bb9565b91615157565b82519182526020820152f35b50346103cb5760203660031901126103cb5760406020916001600160a01b03610426613837565b16815261013f83522054604051908152f35b50346103cb57806003193601126103cb5760206001600160801b036101085416604051908152f35b50346103cb5760203660031901126103cb57602061048c610487610482613837565b614785565b6157bb565b604051908152f35b50346103cb5760203660031901126103cb576104ae613879565b6104b6613981565b61013b907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b16911617905580f35b50346103cb5760203660031901126103cb5760043561051f613981565b670de0b6b3a764000081116103a1576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a180f35b50346103cb5760203660031901126103cb577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206001600160a01b036105a5613837565b6105ad613981565b6105b68161460a565b16806001600160a01b031960d054161760d055604051908152a180f35b50346103cb5760203660031901126103cb576105ed613837565b6105f5613981565b6001600160a01b038116156106105761060d906139d9565b80f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346103cb57806003193601126103cb57602061013e5460801c604051908152f35b50346103cb5760203660031901126103cb576106b66138d1565b6106be613981565b61013e906001600160801b036fffffffffffffffffffffffffffffffff1983549260801b16911617905580f35b50346103cb5760203660031901126103cb5760206001600160a01b03610712610482613837565b16604051908152f35b50346103cb5761072a36613932565b82549160ff8360081c1615918280936108d8575b80156108c1575b156108575760ff1984811660011786559383610846575b5061077660ff865460081c16610771816146b3565b6146b3565b61077f336139d9565b84549361079f60ff8660081c16610795816146b3565b60016065556146b3565b60975416609755670de0b6b3a764000091828111801561083d575b6103a15760ca5560cb5560cd55336001600160a01b031960cf54161760cf55610805575b506101087718fae27693b40000000000000000000014d1120d7b1600008282541617905580f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1386107de565b508282116107ba565b61ffff19166101011785553861075c565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156107455750600160ff851614610745565b50600160ff85161061073e565b50346103cb5760203660031901126103cb57602061048c610904613837565b61530b565b50346103cb5760403660031901126103cb57610923613837565b61092b613863565b610933613981565b61093c8161460a565b6109458261460a565b61094f8183614644565b610972826001600160a01b0380911660005260d460205260406000205416151590565b610a2d576001600160a01b03809116911680835260d460205260408320826001600160a01b031982541617905560d35460d560205280604085205568010000000000000000811015610a19576109f06109d282600185940160d355614724565b819391549060031b916001600160a01b03809116831b921b19161790565b90557f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188380a380f35b602484634e487b7160e01b81526041600452fd5b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b50346103cb5760203660031901126103cb577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206001600160a01b03610a9c613837565b610aa4613981565b610aad8161460a565b16806001600160a01b031960cf54161760cf55604051908152a180f35b50346103cb5760203660031901126103cb57602061048c610ae9613837565b615469565b50346103cb57806003193601126103cb57602060cb54604051908152f35b50346103cb5760203660031901126103cb577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b7066020600435610b4c613981565b8060ce55604051908152a180f35b50346103cb57806003193601126103cb57602060ff61013b5460a81c166040519015158152f35b50346103cb57806003193601126103cb5760206001600160a01b0361013b5416604051908152f35b50346103cb57806003193601126103cb57602061013c5460801c604051908152f35b50346103cb57806003193601126103cb57602060d754604051908152f35b50346103cb57806003193601126103cb57604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b818110610c925750505084610c4b910385613a4b565b60405193838594850191818652518092526040850193925b828110610c7257505050500390f35b83516001600160a01b031685528695509381019392810192600101610c63565b82546001600160a01b031684529286019260019283019201610c35565b50346103cb5760603660031901126103cb57610cc9613837565b610cd1613863565b90610cf5610cef60443592610ce5846145d9565b6104828582614644565b92614785565b9060ca5460cb546101085460d75492604051967fefd7af770000000000000000000000000000000000000000000000000000000088526001600160a01b03809116968760048a0152169485602489015260448801526064870152670de0b6b3a76400009182608488015260a48701526001600160801b03811660c487015260801c60e48601526101048501526101248401526040836101448173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af4928315610eaf5784908594610e7b575b5060405193846339420b4560e11b9485825281600460209889935afa8015610e70578692610dea928992610e58575b50614376565b9360046040518095819382525afa918215610e4d5790610e13929160409692610e1e5750614376565b918351928352820152f35b610e3f919250853d8711610e46575b610e378183613a4b565b810190613a6d565b9038610de4565b503d610e2d565b6040513d87823e3d90fd5b610e3f919250843d8611610e4657610e378183613a4b565b6040513d89823e3d90fd5b9050610ea091935060403d604011610ea8575b610e988183613a4b565b810190613edf565b929038610db5565b503d610e8e565b6040513d86823e3d90fd5b506101203660031901126103cb57610ed0613837565b90610ed9613863565b6001600160a01b0360c4351660c4350361121f57610ef5613ae5565b610efd613a95565b606435156112f957610f0e8361458f565b610f1960c43561460a565b610f2283614785565b91610f436064356001600160a01b038516336001600160a01b038816613b3a565b6040516339420b4560e11b81526020816004816001600160a01b0388165afa9081156112ee5790610f7e9183916112cf575b50606435613e99565b9360ff61013b5460a81c16156112a55760ca5461013c546101085460408051630ef87a7960e11b81526001600160a01b0389166004820152602481018a90526044810194909452670de0b6b3a76400006064850152608092831c60848501526001600160801b0380831660a48601529190921c60c48401529195908660e48173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af4968715610eaf578496859861127e575b508761103b9161103689608435614682565b613ef5565b6001600160a01b0382163b1561127a576040519062b64f3d60e51b825260048201528481602481836001600160a01b0387165af18015610e4d57908591611262575b50506001600160a01b0361109087614522565b9161013d926fffffffffffffffffffffffffffffffff19856110b6865493828516613f02565b16911617835516845260d2602052604084206110d3888254613f2b565b90555490806110eb8161013e54168460801c90613f02565b169116116112385760408051606435815260208082018890529181018690526111b59491926001600160a01b03169033907f8900881feb21943c006d040b3a8510f7780104f915ac29f448cdaf220007887f90606090a36001600160a01b0361013b54166040518080968194637b91993f60e01b8352610104359060e4359060c435908c60a4359160443590600489019360c09591929897969360e08601996001600160a01b03809516875260208701526040860152606085015216608083015260a08201520152565b039134905af190811561122c57906111f3575b6111ef91506001606555604051938493846040919493926060820195825260208201520152565b0390f35b506020813d602011611224575b8161120d60209383613a4b565b8101031261121f576111ef90516111c8565b600080fd5b3d9150611200565b604051903d90823e3d90fd5b60046040517f8c68dbbe000000000000000000000000000000000000000000000000000000008152fd5b61126b90613a21565b61127657833861107d565b8380fd5b8480fd5b61129d91985061103b975060403d604011610ea857610e988183613a4b565b979096611024565b60046040517f7a44a0f5000000000000000000000000000000000000000000000000000000008152fd5b6112e8915060203d602011610e4657610e378183613a4b565b38610f75565b6040513d84823e3d90fd5b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b50346103cb5760203660031901126103cb57600435611340613981565b670de0b6b3a764000081116103a1576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a180f35b50346103cb5760203660031901126103cb5761139b613837565b6113a3614771565b6001600160a01b03811680835260c960205260ff6040842054161561141d57825260c960209081526040808420805460ff1916905580516001600160a01b03909316835233918301919091527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c9190819081015b0390a180f35b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b50346103cb5761145636613888565b61146595919395949294613ae5565b61146d613a95565b6114778383614644565b85156112f95761148f9061148a8561460a565b6147ca565b6114988161458f565b6114a181614785565b926114ab83614785565b95604051956339420b4560e11b8088526020886004816001600160a01b038d165afa97881561163b57600098611666575b506001600160a01b038716966040519182526020826004818b5afa92831561163b5761153a611533611540938c938e61152d866115276115519b8d9b600091611647575b508b613e99565b93613e99565b92614a08565b9b90614376565b99614376565b96336001600160a01b038716613b3a565b6001600160a01b0387163b1561121f5760006040518098639e79eaa560e01b825281836001600160a01b03826115a18d8a60048401602090939291936001600160a01b0360408201951681520152565b0393165af191821561163b57611618876001600160a01b039360409a7f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d19661162c575b508a519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a3600160655582519182526020820152f35b61163590613a21565b8b6115e4565b6040513d6000823e3d90fd5b611660915060203d602011610e4657610e378183613a4b565b38611520565b61168091985060203d602011610e4657610e378183613a4b565b96896114dc565b50346103cb5760406103f361169b36613948565b926116a7929192613a95565b6116af61457a565b613f9d565b50346103cb5760603660031901126103cb576116ce613837565b602435906044356001600160a01b038082169182810361121f576116f0613981565b6116f984614785565b9061170385615469565b86116103a15782879216906040516339420b4560e11b8152602081600481865afa8015610eaf5761173c9185916117d6575b5088614376565b823b1561127657604051639e79eaa560e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af180156112ee576117bc575b50927f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda692856060936040519316835260208301526040820152a180f35b6117c99094939294613a21565b61127a579091843861177f565b6117ee915060203d8111610e4657610e378183613a4b565b38611735565b50346103cb57806003193601126103cb5760206001600160a01b0360cf5416604051908152f35b50346103cb5760403660031901126103cb57611835613837565b61184560243591610482836145d9565b60ca5460d754604051639181079560e01b81526001600160a01b038416600482015260248101949094526044840191909152670de0b6b3a76400006064840152608483015260608260a48173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af490811561190b576001600160a01b03928492611916575b506020906004604051809581936339420b4560e11b8352165afa91821561190b579061048c9291602094926118f35750614376565b610e3f919250843d8111610e4657610e378183613a4b565b6040513d85823e3d90fd5b602091925061193b9060603d8111611944575b6119338183613a4b565b8101906149ed565b505091906118be565b503d611929565b50346103cb5760403660031901126103cb57611968610482613837565b9060ff61013b5460a81c16156112a5576040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156112ee57906119b3918391611aa5575b50602435613e99565b60ca5461013c546101085460408051630ef87a7960e11b81526001600160a01b0397909716600488015260248701949094526044860192909252670de0b6b3a76400006064860152608090811c60848601526001600160801b0380831660a487015291901c60c4850152908360e48173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af49283156112ee578293611a82575b5061013d5490611a6d611a5c84838516613f2b565b928261013e54169060801c90613f02565b16106112385760409182519182526020820152f35b909250611a9e915060403d604011610ea857610e988183613a4b565b9138611a47565b611abd915060203d8111610e4657610e378183613a4b565b386119aa565b50346103cb57806003193601126103cb5760206001600160a01b0360335416604051908152f35b50346103cb57806003193601126103cb57611b5d906020611b096155bf565b611b1760ca939293546144b4565b6040517fd7454c53000000000000000000000000000000000000000000000000000000008152600481018590526024810192909252604482015293849081906064820190565b038173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af491821561122c5791611b93575b6040809350519182526020820152f35b90506020823d8211611bbf575b81611bad60209383613a4b565b8101031261121f576040915190611b83565b3d9150611ba0565b50346103cb576040611bf9611bdb36613948565b92611be7929192613ae5565b611bef613a95565b6116af8483613f38565b600160655582519182526020820152f35b50346103cb57806003193601126103cb57611c23614771565b611c2b613a95565b600160ff1960975416176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b50346103cb57806003193601126103cb57602060cd54604051908152f35b50346103cb5760403660031901126103cb57611c9d613837565b611ca960243591614785565b9060ff61013b5460a01c1615611df75760ca5461013c54604080516367146f2960e01b8152600481018590526001600160a01b03861660248201526044810193909352670de0b6b3a764000060648401526001600160801b0391821660848401529093908260a48173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af4908115610e4d576001600160a01b03928692611dd2575b506020906004604051809581936339420b4560e11b8352165afa918215610e4d57611d7193949592611db95750614376565b91611d97611d8661013d54938460801c613f2b565b928261013e5460801c911690613f02565b1610611da857602090604051908152f35b60046040516332a9eed360e11b8152fd5b610e3f91925060203d8111610e4657610e378183613a4b565b6020919250611def9060403d604011610ea857610e988183613a4b565b509190611d3f565b6004604051633b26060360e11b8152fd5b50346103cb5760203660031901126103cb57611e226138d1565b611e2a613981565b6001600160801b0361013e91166fffffffffffffffffffffffffffffffff1982541617905580f35b50346103cb57806003193601126103cb57602060ff61013b5460a01c166040519015158152f35b50346103cb57806003193601126103cb5760206101085460801c604051908152f35b50346103cb57806003193601126103cb57611eb4613981565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346103cb57806003193601126103cb57602060cc54604051908152f35b50346103cb57806003193601126103cb57611f2e6155bf565b9190611f4a61013d546001600160801b0381169060801c614400565b9060ca5491670de0b6b3a764000090838201808311611f9957602093611b5d9793611f8c611f87611b1795611f81611f93966144b4565b90614476565b614419565b059061443d565b936144b4565b602486634e487b7160e01b81526011600452fd5b50346103cb5760c03660031901126103cb57611fc7613837565b60243560443591611fd661384d565b9260a4359081159182150361121f57611fed613ae5565b611ff5613a95565b83156112f9576120048561460a565b61200f6084356147ca565b6120188361458f565b61202183614785565b6001600160a01b03928382169061203c878333888a16613b3a565b1561210b576020600491604051928380926339420b4560e11b82525afa90811561210057926120a39261209d89937ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b979660209c916120e3575b5089613e99565b906147fc565b945b6120d38660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b0390a36001606555604051908152f35b6120fa91508c3d8111610e4657610e378183613a4b565b38612096565b6040513d8a823e3d90fd5b9061211e8460d19994989599541661460a565b604051966339420b4560e11b88526020978881600481875afa908115610e4d5761215c9392916121559187916122f6575089613e99565b30926147fc565b60d1546040517f095ea7b30000000000000000000000000000000000000000000000000000000081529089166001600160a01b0316600482015260248101829052909690818160448187875af18015610eaf576122c9575b508760d1541691604051907faf929a8000000000000000000000000000000000000000000000000000000000825260048201528181602481865afa918215610eaf57849261229b575b5050813b156122975782916064839260405194859384927f90210d7e00000000000000000000000000000000000000000000000000000000845260048401528b60248401528c891660448401525af180156112ee57612283575b50506020947ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b916120a5565b61228d8291613a21565b6103cb5780612257565b8280fd5b90809250813d83116122c2575b6122b28183613a4b565b8101031261121f575138806121fd565b503d6122a8565b6122e890823d84116122ef575b6122e08183613a4b565b810190613ce9565b50386121b4565b503d6122d6565b6120fa91508b3d8d11610e4657610e378183613a4b565b50346103cb5760403660031901126103cb5761232a610482613837565b6040516339420b4560e11b81526020816004816001600160a01b0386165afa90811561190b57604091612366918591611aa55750602435613e99565b60ca54825163176f358b60e21b81526001600160a01b0394909416600485015260248401919091526044830152670de0b6b3a764000060648301528160848173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af49081156112ee57602092916123d5575b50604051908152f35b6123ee915060403d604011610ea857610e988183613a4b565b50386123cc565b50346103cb5760403660031901126103cb5761240f6138d1565b6124176138e7565b90612420613981565b6001600160801b0380921691670de0b6b3a7640000808410918261246d575b5050156122975761013c91836fffffffffffffffffffffffffffffffff1984549360801b1692161717905580f35b8316109050388061243f565b50346103cb57806003193601126103cb57602060ce54604051908152f35b50346103cb57806003193601126103cb57602060ff609754166040519015158152f35b50346103cb5760403660031901126103cb576004357f223d3a15e21bdf204d6fa4a56f4ee7326dd6096a5c04ab76d3f5b53e31deadcc60206001600160a01b03612502613863565b61250a61457a565b169283855261013f825260408520612523828254613f2b565b9055604051908152a280f35b50346103cb5760203660031901126103cb5760ff60406020926001600160a01b03612558613837565b16815260c984522054166040519015158152f35b50346103cb57806003193601126103cb5760206001600160801b0361013c5416604051908152f35b5060e03660031901126103cb576125a9613837565b60443591906001600160a01b0390608435828116810361121f5761264c946020936125d2613ae5565b6125da613a95565b6125e48383613f38565b61013b54169160405196879485938493637b91993f60e01b855260c4359260a435926064359160243590600489019360c09591929897969360e08601996001600160a01b03809516875260208701526040860152606085015216608083015260a08201520152565b039134905af190811561122c579061266f575b6020906001606555604051908152f35b506020813d8211612699575b8161268860209383613a4b565b8101031261121f576020905161265f565b3d915061267b565b50346103cb576126b036613932565b906126b9613981565b670de0b6b3a76400006126cc8284613f2b565b116103a157825b60d354811015612728578061271d6104876001600160a01b036126f861272395614724565b90549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b506155b0565b6126d3565b506040907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5928060cc558160cd5582519182526020820152a180f35b50346103cb5760406103f36103ed366138fd565b50346103cb57806003193601126103cb5760206001600160801b0361013d5416604051908152f35b50346103cb57806003193601126103cb57602061013d5460801c604051908152f35b50346103cb5760403660031901126103cb576127dc6138d1565b6127e46138e7565b6127ec613981565b6001600160801b0380921691670de0b6b3a76400008310908115612837575b506103a15761010891836fffffffffffffffffffffffffffffffff1984549360801b1692161717905580f35b9050811682113861280b565b50346103cb5760203660031901126103cb5761285d613837565b612865613981565b612888816001600160a01b0380911660005260d460205260406000205416151590565b1561297b576001600160a01b038091169081835260d4602052604083208054906001600160a01b03198216905560d5602052604084205460d3549060001991828101908111612967576109d2856128e161290693614724565b90549060031b1c169283895260d56020528060408a2055878952886040812055614724565b905560d3548015612953570161291b81614724565b8482549160031b1b1916905560d35516907f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8380a380f35b602486634e487b7160e01b81526031600452fd5b602487634e487b7160e01b81526011600452fd5b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b50346103cb57806003193601126103cb576129be614771565b60975460ff8116156129fe5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b50346103cb57806003193601126103cb5760206001600160a01b0360d15416604051908152f35b50346103cb5760203660031901126103cb57612a83613837565b612a8b614771565b612aae816001600160a01b0380911660005260d460205260406000205416151590565b1561297b5761141781612ae17fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e9361458f565b6001600160a01b031680845260c960209081526040808620805460ff191660011790558051928352339183019190915290918291820190565b50346103cb57806003193601126103cb5760206001600160801b0361013e5416604051908152f35b50346103cb57612b86612b5436613888565b612b62969195939496613ae5565b612b6a613a95565b612b738661460a565b612b7c856145d9565b61148a8785614644565b612b8f8261458f565b612b9882614785565b93612ba286614785565b95612bb8856001600160a01b0388163381613b3a565b600092612bc487615778565b60ca5460d754604051639181079560e01b81526001600160a01b038a166004820152602481018990526044810192909252670de0b6b3a76400006064830152608482015260608160a48173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af4908115610e4d5785809181936130f9575b506001600160a01b038a163b156103cb57604051632770a7eb60e21b81526001600160a01b038b1660048201819052602482018b905282908290604490829084905af180156112ee576130ea575b5090612c908388613f2b565b6001600160a01b038b163b1561229757828b60246001600160a01b03938360405195869485936313f3df3160e31b85526004850152165af1801561190b579083916130d6575b50506001600160a01b038a163b156130d25760405163d8b8785360e01b815260048101919091528181602481836001600160a01b038f165af180156112ee579082916130be575b505060405163705727b560e01b81526020816004816001600160a01b038e165afa9081156112ee57906001600160781b0391839161309f575b5016151580612fcf575b612fbe5781612f95575b50506040516339420b4560e11b81526020816004816001600160a01b038d165afa801561163b57612daf92612da792600092612f74575b50613e99565b848989614a08565b50604051906339420b4560e11b82526020826004816001600160a01b038d165afa90811561163b57612de892600092612f535750614376565b956001600160a01b0388163b1561121f57604051639e79eaa560e01b81526001600160a01b0384811660048301526024820189905290986000918a9160449183918591165af190811561163b576001600160a01b0398602092612f44575b506004604051809a81936339420b4560e11b8352165afa92831561163b57612ea27f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d1946001600160a01b039260209a600092612f255750614376565b921680957ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad960405180612ef23394888b846040919493926001600160a01b03606083019616825260208201520152565b0390a3604080516001600160a01b03958616815294909116602085015283015260608201849052339180608081016120d3565b612f3d9192508b3d8d11610e4657610e378183613a4b565b908b610de4565b612f4d90613a21565b89612e46565b612f6d91925060203d602011610e4657610e378183613a4b565b908a610de4565b612f8e91925060203d602011610e4657610e378183613a4b565b908b612da1565b6040612fb5916001600160a01b038b16815260d260205220918254613f2b565b90558880612d6a565b60046040516316fde3bd60e21b8152fd5b5060405163961be39160e01b81526020816004816001600160a01b038e165afa9081156112ee578291613080575b5060405163705727b560e01b81526020816004816001600160a01b038f165afa90811561190b57916001600160781b038061304b93662386f26fc10000958791613051575b501691166143cf565b10612d60565b613073915060203d602011613079575b61306b8183613a4b565b8101906143b0565b38613042565b503d613061565b613099915060203d6020116130795761306b8183613a4b565b8b612ffd565b6130b8915060203d6020116130795761306b8183613a4b565b8c612d56565b6130c790613a21565b6103cb57808b612d1d565b5080fd5b6130df90613a21565b6130d257818c612cd6565b6130f390613a21565b8b612c84565b91509550613115915060603d8111611944576119338183613a4b565b91958b612c36565b50346103cb5760203660031901126103cb576004356001600160a01b0381168091036130d25761314b613981565b61013b906001600160a01b031982541617905580f35b50346103cb5760a03660031901126103cb5761317b613837565b61318361384d565b61318b613ae5565b613193613a95565b61319e6024356145d9565b6131a78161460a565b6131b26084356147ca565b6131bb82614785565b916131d36024356001600160a01b0385163381613b3a565b6040516339420b4560e11b81526020816004816001600160a01b0388165afa908115610e4d578591613605575b5061320d81604435613e99565b9061321785615778565b60ca5460d754604051639181079560e01b81526001600160a01b038816600482015260248035908201526044810192909252670de0b6b3a7640000606483015260848201526000929060608160a48173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af4908115610eaf578492859186936135da575b508361329a91614682565b6001600160a01b0388163b1561127a57604051632770a7eb60e21b81526001600160a01b03891660048201819052602480359083015286908290604490829084905af18015613552576135c7575b506132f38284613f2b565b6001600160a01b0389163b156135c3576040516313f3df3160e31b815260048101919091528581602481836001600160a01b038e165af18015613552579086916135af575b50506001600160a01b0388163b1561127a576040519063d8b8785360e01b825260048201528481602481836001600160a01b038d165af18015610e4d5790859161359b575b505060405163705727b560e01b81526020816004816001600160a01b038c165afa908115610e4d57906001600160781b0391869161357c575b50161515806134d1575b612fbe576133d593816134a8575b5050614376565b926001600160a01b0381163b1561127a57846040518092639e79eaa560e01b825281836001600160a01b03826134258b8b60048401602090939291936001600160a01b0360408201951681520152565b0393165af18015610e4d57613494575b50602093507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad96001600160a01b03604051931692806120d333948760243591846040919493926001600160a01b03606083019616825260208201520152565b61349e8591613a21565b6112765783613435565b60406134c8916001600160a01b038a16815260d260205220918254613f2b565b905538806133ce565b5060405163961be39160e01b81526020816004816001600160a01b038c165afa908115610e4d57859161355d575b5060405163705727b560e01b81526020816004816001600160a01b038d165afa90811561355257916001600160781b038061354c93662386f26fc10000958a9161305157501691166143cf565b106133c0565b6040513d88823e3d90fd5b613576915060203d6020116130795761306b8183613a4b565b386134ff565b613595915060203d6020116130795761306b8183613a4b565b386133b6565b6135a490613a21565b61127657833861337d565b6135b890613a21565b61127a578438613338565b8580fd5b6135d390959195613a21565b93386132e8565b90925061329a93506135fa915060603d8111611944576119338183613a4b565b91935090918361328f565b61361e915060203d602011610e4657610e378183613a4b565b38613200565b50346103cb5760203660031901126103cb5761363e613879565b613646613981565b61013b907fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff75ff000000000000000000000000000000000000000000835492151560a81b16911617905580f35b50346103cb5760403660031901126103cb576136ad613837565b906024356136b9614771565b6136c283614785565b6136cb84615469565b82116103a1576001600160a01b0316803b156122975782809160246040518094819362b64f3d60e51b83528760048401525af1801561190b57613750575b50604080516001600160a01b039094168452602084019190915290917f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379181908101611417565b9161377b7f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff13793613a21565b91613709565b50346103cb5760203660031901126103cb577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d60206001600160a01b036137c6613837565b6137ce613981565b6137d78161460a565b16806001600160a01b031960d154161760d155604051908152a180f35b50346103cb57806003193601126103cb5760206001600160a01b0360d05416604051908152f35b9050346130d257816003193601126130d25760209060ca548152f35b600435906001600160a01b038216820361121f57565b606435906001600160a01b038216820361121f57565b602435906001600160a01b038216820361121f57565b60043590811515820361121f57565b60c090600319011261121f576001600160a01b03600435818116810361121f5791602435828116810361121f57916044359160643591608435908116810361121f579060a43590565b600435906001600160801b038216820361121f57565b602435906001600160801b038216820361121f57565b606090600319011261121f576001600160a01b0390600435828116810361121f5791602435908116810361121f579060443590565b604090600319011261121f576004359060243590565b608090600319011261121f576001600160a01b0390600435828116810361121f57916024359160443591606435908116810361121f5790565b6001600160a01b0360335416330361399557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b67ffffffffffffffff8111613a3557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117613a3557604052565b9081602091031261121f575160ff8116810361121f5790565b9081602091031261121f575190565b60ff60975416613aa157565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b600260655414613af6576002606555565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b93929190604051602093848201927f23b872dd0000000000000000000000000000000000000000000000000000000084526001600160a01b039485809216602485015216604483015260648201526064815260a081019267ffffffffffffffff9682851088861117613a3557169060e0810184811088821117613a35576040528484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152600080938192519082855af1903d15613cd8573d968711613cc457613c2994959660405190613c1b88601f19601f8401160183613a4b565b81528093873d92013e613d01565b805190828215928315613cac575b50505015613c425750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b613cbc9350820181019101613ce9565b388281613c37565b602483634e487b7160e01b81526041600452fd5b9150613c2993949550606091613d01565b9081602091031261121f5751801515810361121f5790565b91929015613d625750815115613d15575090565b3b15613d1e5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015613d755750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510613dbb575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350613d98565b60ff6011199116019060ff8211613de757565b634e487b7160e01b600052601160045260246000fd5b60ff166012039060ff8211613de757565b60ff16604d8111613de757600a0a90565b8115613e29570490565b634e487b7160e01b600052601260045260246000fd5b81810292918115918404141715613de757565b60ff81166012811015613e745750613e6c613e7191613dfd565b613e0e565b90565b601210613e815750600190565b613e6c613e8d91613dd4565b8015613e295760010490565b9060ff81166012811015613ebe575090613eb8613e6c613e7193613dfd565b90613e3f565b601210613ec9575090565b90613ed9613e6c613e7193613dd4565b90613e1f565b919082604091031261121f576020825192015190565b91908203918211613de757565b9190916001600160801b0380809416911601918211613de757565b9060018201809211613de757565b91908201809211613de757565b90613f429061460a565b80156112f9573360005261013f806020528160406000205410613f7357336000526020526040600020908154039055565b60046040517fdb52be33000000000000000000000000000000000000000000000000000000008152fd5b9093919360009381156112f957613fb383614785565b906001600160a01b0391828116966040918251916339420b4560e11b83528260209b8c828d60049788915afa91821561436c578d8493614347575b505081613ffa91613e99565b9b60ff61013b5460a01c16156143385760ca5461013c5487516367146f2960e01b81528781018c81526001600160a01b0390971660208801526040870192909252670de0b6b3a764000060608701526001600160801b0390811660808701529490919087908390819060a001038173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af49d8e1561432e578492859f6142fa575b508e8e61409f856140bb94614682565b865260d283528886206140b3828254613f2b565b905583613f2b565b8d3b1561127a57848e602482938b5194859384926313f3df3160e31b84528d8401525af180156142dd578792918f916142e7575b50819089519384809263961be39160e01b82525afa9182156142dd578e889187946142bc575b5082908a519283809263705727b560e01b82525afa9182156142b25791662386f26fc10000939161415b938892614295575b50506001600160781b0380911691166143cf565b10614286579061416e8161417493614376565b9c614376565b99803b156130d257816141b481928e8851948580948193639e79eaa560e01b83528d8c8401602090939291936001600160a01b0360408201951681520152565b03925af1801561427c57614268575b50506141ce86614522565b9061421061013d92826fffffffffffffffffffffffffffffffff196141f88654938460801c613f02565b60801b16911690811780945561013e5460801c613f02565b169060801c1161425a575051928352602083018790526040830186905281169216907f506448513266ee822309810e439a9705992c367f989d959d01d94303cf5eed9c90606090a3565b90516332a9eed360e11b8152fd5b6142728291613a21565b6103cb57806141c3565b85513d84823e3d90fd5b8486516316fde3bd60e21b8152fd5b6142ab9250803d106130795761306b8183613a4b565b3880614147565b89513d88823e3d90fd5b839194506142d690823d84116130795761306b8183613a4b565b9390614115565b88513d87823e3d90fd5b956142f3839297613a21565b95906140ef565b9092508d9e50873d8911614327575b6143138183613a4b565b810161431e91613edf565b9e50918261408f565b503d614309565b87513d86823e3d90fd5b848651633b26060360e11b8152fd5b613ffa929350908161436492903d10610e4657610e378183613a4b565b91908d613fee565b86513d85823e3d90fd5b9060ff81166012811015614395575090613ed9613e6c613e7193613dfd565b6012106143a0575090565b90613eb8613e6c613e7193613dd4565b9081602091031261121f57516001600160781b038116810361121f5790565b90670de0b6b3a764000091828102928184041490151715613de7576143fb613e71928260011c90613f2b565b613e1f565b81810392916000138015828513169184121617613de757565b906706f05b59d3b200009160008382019384129112908015821691151617613de757565b91909160008382019384129112908015821691151617613de757565b90670de0b6b3a764000091828102928184051490151715613de757565b818102929160008212600160ff1b821416613de7578184051490151715613de757565b8115613e2957600160ff1b8114600019831416613de7570590565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116144de5790565b606460405162461bcd60e51b815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b6001600160801b0390818111614536571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b6001600160a01b0361013b54163303612fbe57565b6001600160a01b031660005260c960205260ff604060002054166145af57565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b156145e057565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03161561461a57565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b0390811691161461465857565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b1161468957565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b156146ba57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60d35481101561475b5760d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0360cf54163303612fbe57565b6147a8816001600160a01b0380911660005260d460205260406000205416151590565b1561297b576001600160a01b0380911660005260d46020526040600020541690565b42116147d257565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b9193929061485b9061480d84615778565b60ca54926000946040809581518096819263176f358b60e21b83528786600485016060919493670de0b6b3a7640000936001600160a01b036080840197168352602083015260408201520152565b038173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af490811561499657869487926149c1575b506001600160a01b03906148a286809b61489d826145d9565b614682565b1692833b156149bd5785519062b64f3d60e51b82526004820152868160248183885af180156149b3576149a0575b50823b156135c35784519063283c3d8160e21b82526004820152858160248183875af1801561499657908691614982575b5050813b1561127a5783517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019290925290919083908390604490829084905af19081156149795750614968575050565b6149728291613a21565b6103cb5750565b513d84823e3d90fd5b61498b90613a21565b61127a578438614901565b85513d88823e3d90fd5b6149ac90969196613a21565b94386148d0565b86513d89823e3d90fd5b8680fd5b6001600160a01b0395506149e3919250863d8811610ea857610e988183613a4b565b9490949190614884565b9081606091031261121f578051916040602083015192015190565b90929391614a1f614a18826144b4565b8584614bca565b9485614a2c838099614682565b6000926001600160a01b038093169485855260209360d28552604097888720614a56868254613f2b565b90551690813b156135c3578591602483928a51948593849262b64f3d60e51b845260048401525af18015614baf57614b98575b5090614a9491613f2b565b833b15612297578451906313f3df3160e31b82526004820152828160248183885af18015614b7a57908391614b84575b505083519263961be39160e01b84528184600481845afa938415614b7a578394614b54575b50908060049286519384809263705727b560e01b82525afa928315614b495791614b319391662386f26fc100009593926142955750506001600160781b0380911691166143cf565b10614b395750565b600490516316fde3bd60e21b8152fd5b8551903d90823e3d90fd5b8291945091614b71600493823d84116130795761306b8183613a4b565b94919250614ae9565b85513d85823e3d90fd5b614b8d90613a21565b6130d2578138614ac4565b93614ba7614a94939295613a21565b939091614a89565b87513d87823e3d90fd5b600160ff1b8114613de75760000390565b9291614bd78183866150a1565b9460009386908390868612614d6e575050506001600160a01b031660405163961be39160e01b81526020938482600481865afa918215614d265785908793614d4e575b50600492936040519384809263705727b560e01b82525afa8015614d2657849386938892614d2b575b50610108546040517f2f6599bb0000000000000000000000000000000000000000000000000000000081526001600160781b039283166004820152929091166024830152604482019290925260648101939093526001600160801b038116608484015260801c60a4830152818060c481015b038173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af4928315614d2657613e719493614cf1575b505081614ceb91613ef5565b93613f2b565b614ceb9293509081614d1792903d10614d1f575b614d0f8183613a4b565b810190613a86565b919038614cdf565b503d614d05565b61163b565b614cb5919250614d4790853d87116130795761306b8183613a4b565b9190614c43565b60049350614d6890823d84116130795761306b8183613a4b565b92614c1a565b6001600160a01b03919692985080945094929416906040519063961be39160e01b825260208083600481875afa928315614d26578293614e9e575b50806004916001600160781b03809516956040519384809263705727b560e01b82525afa928315614d265792614e81575b505016614df081614deb8885613f2b565b6143cf565b6101085492906001600160801b03841610614e0f575050505050509190565b9091939550614e20929497506143cf565b9060801c1115614e5757614e36614e3d91614bb9565b8483614ec0565b90614e529193614e4c856144b4565b91614bca565b905090565b60046040517f6158a9f8000000000000000000000000000000000000000000000000000000008152fd5b614e979250803d106130795761306b8183613a4b565b3880614dda565b819350614eb9906004923d86116130795761306b8183613a4b565b9290614da9565b6040516339420b4560e11b81529193926020926001600160a01b038316908481600481855afa908115614d265760009161505a575b50614eff81613e52565b946040519263705727b560e01b84528184600481845afa8015614d265760049460009161503d575b5082614f58614f48614f3c6101085460801c90565b6001600160801b031690565b6001600160781b03809416615077565b926040519687809263961be39160e01b82525afa8015614d2657614f9095614f8b94600092615020575b50501690613ef5565b614376565b9160019582614fb1614faa614fa58888613e3f565b6144b4565b8385614bca565b5010614e575791905b838710614fcf57505050613e71929350613e3f565b909192614fe5614fdf8289613f2b565b60011c90565b9083614ffe614ff7614fa58986613e3f565b8786614bca565b501061500e5750925b9190614fba565b93965061501a90613f1d565b95615007565b6150369250803d106130795761306b8183613a4b565b3880614f82565b6150549150833d85116130795761306b8183613a4b565b38614f27565b6150719150853d8711610e4657610e378183613a4b565b38614ef5565b9061508191613e3f565b6706f05b59d3b200008101809111613de757670de0b6b3a7640000900490565b90929160ca549060cb5492604051957fe02a44c60000000000000000000000000000000000000000000000000000000087526001600160a01b03809216600488015216602486015260448501526064840152670de0b6b3a7640000608484015260a483015260408260c48173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af491821561163b57600090819361513857509190565b905061515391925060403d8111610ea857610e988183613a4b565b9091565b929091926151658382614644565b83156112f957610cef61517791614785565b916001600160a01b03938482166040958651926339420b4560e11b908185526020958686600481885afa9586156152c05789966151c8936151c0926000926152a1575b506152cb565b988991614bca565b9092819516938951938385528785600481895afa9485156152965788956000926151f892849261527e5750614376565b9912615252575050600488518094819382525afa92831561524757613e7194959650600093615228575050614376565b61523f929350803d10610e4657610e378183613a4b565b9038806133ce565b86513d6000823e3d90fd5b93509350600488518094819382525afa92831561524757613e7194959650600093615228575050614376565b610e3f919250883d8a11610e4657610e378183613a4b565b8b513d6000823e3d90fd5b6152b99192508a3d8c11610e4657610e378183613a4b565b90386151ba565b8a513d6000823e3d90fd5b9060ff811660128110156152ea575090611f81613e6c613e7193613dfd565b6012106152f5575090565b90615305613e6c613e7193613dd4565b90614499565b61531c6001600160a01b0391614785565b1660408051917f18160ddd00000000000000000000000000000000000000000000000000000000928381526020908181600481865afa9081156154215760009161543c575b501561542c5782519363705727b560e01b85528185600481865afa94851561542157600095615400575b508190600485518095819382525afa9283156153f657506000926153be575b50506001600160781b03613e7192166143cf565b81819392933d83116153ef575b6153d58183613a4b565b810103126103cb5750516001600160781b03613e716153aa565b503d6153cb565b513d6000823e3d90fd5b8291955061541a90823d84116130795761306b8183613a4b565b949061538b565b84513d6000823e3d90fd5b50505050670de0b6b3a764000090565b908282813d8311615462575b6154528183613a4b565b810103126103cb57505138615361565b503d615448565b61547a6001600160a01b0391614785565b169060409182517f99c91a640000000000000000000000000000000000000000000000000000000081526020908181600481865afa9081156155a557600091615578575b508451906339420b4560e11b82528282600481875afa908115615247576154ec926000926155595750613e99565b845163961be39160e01b81528281600481875afa9081156152475760d2926001600160781b03613e719798959361552d9360009161553c575b501690613ef5565b93600052526000205490613ef5565b6155539150853d87116130795761306b8183613a4b565b38615525565b615571919250843d8611610e4657610e378183613a4b565b9038612da1565b908282813d831161559e575b61558e8183613a4b565b810103126103cb575051386154be565b503d615584565b85513d6000823e3d90fd5b6000198114613de75760010190565b600090600090816155d160ca546144b4565b60d35482915b8184106155e45750505050565b909192956156256155f488614724565b91906001600160a01b03928391549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b16604080519163961be39160e01b8352602060049181858481845afa94851561576e57899561574d575b50819084519384809263705727b560e01b82525afa92831561574457508792615727575b50506001600160781b0380911691821561571a571661569190614459565b9681806002998a82056156a39161443d565b906156ad91614499565b9182916156b99161443d565b986156c386614459565b9082056156cf9161443d565b906156d991614499565b6156e291614400565b6156eb91614476565b6156f490614419565b670de0b6b3a764000090056157089161443d565b95615712906155b0565b9291906155d7565b50505095615712906155b0565b61573d9250803d106130795761306b8183613a4b565b3880615673565b513d89823e3d90fd5b8291955061576790823d84116130795761306b8183613a4b565b949061564f565b84513d8b823e3d90fd5b6001600160a01b03811660005260d260205260406000205480159081156157af575b50156157a35750565b6157ac906157bb565b50565b905060ce54113861579a565b9060006001600160a01b0380931680825260d2602052604090818320549485156159d55760cd5490670de0b6b3a7640000918203828111611f995761580661580c9160cc5490613ef5565b88615077565b9081615947575b505061582160cd5487615077565b9081615836575b5050825260d2602052812055565b60ca549084519163176f358b60e21b835284600484015283602484015260448301526064820152838160848173860E5255B8Fcd598FEC10e15569215D5a0FC713a5af490811561591e578591615928575b50823b1561127a5783519063283c3d8160e21b82526004820152848160248183875af1801561591e5790859161590a575b5050813b156112765782519062b64f3d60e51b82526004820152838160248183865af180156158fd5790849115615828576158f290613a21565b612297578238615828565b50505051903d90823e3d90fd5b61591390613a21565b6112765783386158b8565b84513d87823e3d90fd5b61593f9150843d8611610ea857610e988183613a4b565b905038615887565b60d05416908451906339420b4560e11b8252602082600481885afa9182156149b3579061597b92918892611db95750614376565b90833b156135c3578451639e79eaa560e01b81526001600160a01b039190911660048201526024810191909152848160448183875af1801561591e576159c2575b80615813565b6159ce90949194613a21565b92386159bc565b50919350505056fea2646970667358221220002adc76938bf7826472dd82c592741f231a49bd4af55a35e1feb321987bac1064736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c908163017b82921461381b57508063017e7e58146137f45780630705999d14613781578063070f81d91461369357806307a237c51461362457806309a5fca31461316157806309f1fd3e1461311d5780630f91f06f14612b42578063148b1d3a14612b1a5780633753b14a14612a695780633bd61ba814612a425780633f4ba83a146129a55780634a5e42b1146128435780634a6fee0e146127c25780634ba2adfc146127a05780634d31a070146127785780634fdd64e51461276457806352f7c988146126a15780635326a8e71461259457806355667ca31461256c5780635b14f1831461252f5780635b6cfa61146124ba5780635c975abb146124975780635cfe092e146124795780635dceb851146123f557806361858e231461230d5780636281baef14611fad57806362fad13b14611f155780636922d5ca14611ef7578063715018a614611e9b57806374cbbdb914611e795780637629703f14611e5257806376ad859714611e085780637f809d2914611c83578063815bfd2914611c655780638456cb5914611c0a578063873e73c314611bc75780638a2dfe0914611aea5780638da5cb5b14611ac35780638de66a681461194b578063907448ed1461181b57806391cca3db146117f457806393aeea02146116b45780639630b660146116875780639908fc8b146114475780639abacb41146113815780639e4416b714611323578063a312ff2314610eba578063a4275ceb14610caf578063aa6ca80814610be9578063ac99415a14610bcb578063baf7e21b14610ba9578063c2cd9b2b14610b81578063c3a21fa714610b5a578063d043c56514610b0c578063d0dd0e5614610aee578063d30ffeda14610aca578063d477f05f14610a57578063da48999714610909578063dc3b7c8b146108e5578063e4a301161461071b578063e9249cc7146106eb578063e9740dd51461069c578063eb4007071461067a578063f2fde38b146105d3578063f46901ed14610560578063f57e84d514610502578063f89830e514610494578063f8b49e7214610460578063fb7f5cc214610438578063fc8b9c06146103ff578063fca8f308146103ce5763fd33d3881461034457600080fd5b346103cb5760203660031901126103cb57600435610360613981565b670de0b6b3a764000081116103a1576020817f1c18a912ced6b380386b05a39ae0c1326b69555d4ed8d13fd4d9c6896b0ea3799260d755604051908152a180f35b60046040517f12b019e1000000000000000000000000000000000000000000000000000000008152fd5b80fd5b50346103cb5760406103f36103ed6103e5366138fd565b929092614bb9565b91615157565b82519182526020820152f35b50346103cb5760203660031901126103cb5760406020916001600160a01b03610426613837565b16815261013f83522054604051908152f35b50346103cb57806003193601126103cb5760206001600160801b036101085416604051908152f35b50346103cb5760203660031901126103cb57602061048c610487610482613837565b614785565b6157bb565b604051908152f35b50346103cb5760203660031901126103cb576104ae613879565b6104b6613981565b61013b907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b16911617905580f35b50346103cb5760203660031901126103cb5760043561051f613981565b670de0b6b3a764000081116103a1576020817fc6e60196bbe5909add58d5ae8a27082013670bce0855321773c33085af5c32439260cb55604051908152a180f35b50346103cb5760203660031901126103cb577ff6b59ffc88fbb27f33470b919e00b41139ee340eb349521f0cbbc1504ce29c3e60206001600160a01b036105a5613837565b6105ad613981565b6105b68161460a565b16806001600160a01b031960d054161760d055604051908152a180f35b50346103cb5760203660031901126103cb576105ed613837565b6105f5613981565b6001600160a01b038116156106105761060d906139d9565b80f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50346103cb57806003193601126103cb57602061013e5460801c604051908152f35b50346103cb5760203660031901126103cb576106b66138d1565b6106be613981565b61013e906001600160801b036fffffffffffffffffffffffffffffffff1983549260801b16911617905580f35b50346103cb5760203660031901126103cb5760206001600160a01b03610712610482613837565b16604051908152f35b50346103cb5761072a36613932565b82549160ff8360081c1615918280936108d8575b80156108c1575b156108575760ff1984811660011786559383610846575b5061077660ff865460081c16610771816146b3565b6146b3565b61077f336139d9565b84549361079f60ff8660081c16610795816146b3565b60016065556146b3565b60975416609755670de0b6b3a764000091828111801561083d575b6103a15760ca5560cb5560cd55336001600160a01b031960cf54161760cf55610805575b506101087718fae27693b40000000000000000000014d1120d7b1600008282541617905580f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1386107de565b508282116107ba565b61ffff19166101011785553861075c565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156107455750600160ff851614610745565b50600160ff85161061073e565b50346103cb5760203660031901126103cb57602061048c610904613837565b61530b565b50346103cb5760403660031901126103cb57610923613837565b61092b613863565b610933613981565b61093c8161460a565b6109458261460a565b61094f8183614644565b610972826001600160a01b0380911660005260d460205260406000205416151590565b610a2d576001600160a01b03809116911680835260d460205260408320826001600160a01b031982541617905560d35460d560205280604085205568010000000000000000811015610a19576109f06109d282600185940160d355614724565b819391549060031b916001600160a01b03809116831b921b19161790565b90557f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909188380a380f35b602484634e487b7160e01b81526041600452fd5b60046040517f8991c4c4000000000000000000000000000000000000000000000000000000008152fd5b50346103cb5760203660031901126103cb577f8daa6bb00de042a7d51816fcee4a3d5c1e91a2128fd64fa1a9a38afa0d26beb560206001600160a01b03610a9c613837565b610aa4613981565b610aad8161460a565b16806001600160a01b031960cf54161760cf55604051908152a180f35b50346103cb5760203660031901126103cb57602061048c610ae9613837565b615469565b50346103cb57806003193601126103cb57602060cb54604051908152f35b50346103cb5760203660031901126103cb577f935ce123b6388f8dbf76890f8240a48198f1e0a884f26939aa604a46bb65b7066020600435610b4c613981565b8060ce55604051908152a180f35b50346103cb57806003193601126103cb57602060ff61013b5460a81c166040519015158152f35b50346103cb57806003193601126103cb5760206001600160a01b0361013b5416604051908152f35b50346103cb57806003193601126103cb57602061013c5460801c604051908152f35b50346103cb57806003193601126103cb57602060d754604051908152f35b50346103cb57806003193601126103cb57604051809160d354908183526020809301809260d383527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a690835b818110610c925750505084610c4b910385613a4b565b60405193838594850191818652518092526040850193925b828110610c7257505050500390f35b83516001600160a01b031685528695509381019392810192600101610c63565b82546001600160a01b031684529286019260019283019201610c35565b50346103cb5760603660031901126103cb57610cc9613837565b610cd1613863565b90610cf5610cef60443592610ce5846145d9565b6104828582614644565b92614785565b9060ca5460cb546101085460d75492604051967fefd7af770000000000000000000000000000000000000000000000000000000088526001600160a01b03809116968760048a0152169485602489015260448801526064870152670de0b6b3a76400009182608488015260a48701526001600160801b03811660c487015260801c60e48601526101048501526101248401526040836101448173__$64c1823877363665b8c9607be5e0799ede$__5af4928315610eaf5784908594610e7b575b5060405193846339420b4560e11b9485825281600460209889935afa8015610e70578692610dea928992610e58575b50614376565b9360046040518095819382525afa918215610e4d5790610e13929160409692610e1e5750614376565b918351928352820152f35b610e3f919250853d8711610e46575b610e378183613a4b565b810190613a6d565b9038610de4565b503d610e2d565b6040513d87823e3d90fd5b610e3f919250843d8611610e4657610e378183613a4b565b6040513d89823e3d90fd5b9050610ea091935060403d604011610ea8575b610e988183613a4b565b810190613edf565b929038610db5565b503d610e8e565b6040513d86823e3d90fd5b506101203660031901126103cb57610ed0613837565b90610ed9613863565b6001600160a01b0360c4351660c4350361121f57610ef5613ae5565b610efd613a95565b606435156112f957610f0e8361458f565b610f1960c43561460a565b610f2283614785565b91610f436064356001600160a01b038516336001600160a01b038816613b3a565b6040516339420b4560e11b81526020816004816001600160a01b0388165afa9081156112ee5790610f7e9183916112cf575b50606435613e99565b9360ff61013b5460a81c16156112a55760ca5461013c546101085460408051630ef87a7960e11b81526001600160a01b0389166004820152602481018a90526044810194909452670de0b6b3a76400006064850152608092831c60848501526001600160801b0380831660a48601529190921c60c48401529195908660e48173__$64c1823877363665b8c9607be5e0799ede$__5af4968715610eaf578496859861127e575b508761103b9161103689608435614682565b613ef5565b6001600160a01b0382163b1561127a576040519062b64f3d60e51b825260048201528481602481836001600160a01b0387165af18015610e4d57908591611262575b50506001600160a01b0361109087614522565b9161013d926fffffffffffffffffffffffffffffffff19856110b6865493828516613f02565b16911617835516845260d2602052604084206110d3888254613f2b565b90555490806110eb8161013e54168460801c90613f02565b169116116112385760408051606435815260208082018890529181018690526111b59491926001600160a01b03169033907f8900881feb21943c006d040b3a8510f7780104f915ac29f448cdaf220007887f90606090a36001600160a01b0361013b54166040518080968194637b91993f60e01b8352610104359060e4359060c435908c60a4359160443590600489019360c09591929897969360e08601996001600160a01b03809516875260208701526040860152606085015216608083015260a08201520152565b039134905af190811561122c57906111f3575b6111ef91506001606555604051938493846040919493926060820195825260208201520152565b0390f35b506020813d602011611224575b8161120d60209383613a4b565b8101031261121f576111ef90516111c8565b600080fd5b3d9150611200565b604051903d90823e3d90fd5b60046040517f8c68dbbe000000000000000000000000000000000000000000000000000000008152fd5b61126b90613a21565b61127657833861107d565b8380fd5b8480fd5b61129d91985061103b975060403d604011610ea857610e988183613a4b565b979096611024565b60046040517f7a44a0f5000000000000000000000000000000000000000000000000000000008152fd5b6112e8915060203d602011610e4657610e378183613a4b565b38610f75565b6040513d84823e3d90fd5b60046040517fb483c10f000000000000000000000000000000000000000000000000000000008152fd5b50346103cb5760203660031901126103cb57600435611340613981565b670de0b6b3a764000081116103a1576020817f294c562dcfcd9be941287844539aeba4ae641cd1fc9a2883337c6b2e87cbd98a9260ca55604051908152a180f35b50346103cb5760203660031901126103cb5761139b613837565b6113a3614771565b6001600160a01b03811680835260c960205260ff6040842054161561141d57825260c960209081526040808420805460ff1916905580516001600160a01b03909316835233918301919091527fdb198487a4c70aa000c3b1020f52688b4b86d3ebcedc84a793e03ed3b480902c9190819081015b0390a180f35b60046040517f855b7373000000000000000000000000000000000000000000000000000000008152fd5b50346103cb5761145636613888565b61146595919395949294613ae5565b61146d613a95565b6114778383614644565b85156112f95761148f9061148a8561460a565b6147ca565b6114988161458f565b6114a181614785565b926114ab83614785565b95604051956339420b4560e11b8088526020886004816001600160a01b038d165afa97881561163b57600098611666575b506001600160a01b038716966040519182526020826004818b5afa92831561163b5761153a611533611540938c938e61152d866115276115519b8d9b600091611647575b508b613e99565b93613e99565b92614a08565b9b90614376565b99614376565b96336001600160a01b038716613b3a565b6001600160a01b0387163b1561121f5760006040518098639e79eaa560e01b825281836001600160a01b03826115a18d8a60048401602090939291936001600160a01b0360408201951681520152565b0393165af191821561163b57611618876001600160a01b039360409a7f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d19661162c575b508a519485941697339785909260609295949360808301966001600160a01b03809216845216602083015260408201520152565b0390a3600160655582519182526020820152f35b61163590613a21565b8b6115e4565b6040513d6000823e3d90fd5b611660915060203d602011610e4657610e378183613a4b565b38611520565b61168091985060203d602011610e4657610e378183613a4b565b96896114dc565b50346103cb5760406103f361169b36613948565b926116a7929192613a95565b6116af61457a565b613f9d565b50346103cb5760603660031901126103cb576116ce613837565b602435906044356001600160a01b038082169182810361121f576116f0613981565b6116f984614785565b9061170385615469565b86116103a15782879216906040516339420b4560e11b8152602081600481865afa8015610eaf5761173c9185916117d6575b5088614376565b823b1561127657604051639e79eaa560e01b81526001600160a01b0392909216600483015260248201529082908290604490829084905af180156112ee576117bc575b50927f5f22a22ebe30686f71d42a70ccacf870a335e22ee2ac6d257af1b2551582eda692856060936040519316835260208301526040820152a180f35b6117c99094939294613a21565b61127a579091843861177f565b6117ee915060203d8111610e4657610e378183613a4b565b38611735565b50346103cb57806003193601126103cb5760206001600160a01b0360cf5416604051908152f35b50346103cb5760403660031901126103cb57611835613837565b61184560243591610482836145d9565b60ca5460d754604051639181079560e01b81526001600160a01b038416600482015260248101949094526044840191909152670de0b6b3a76400006064840152608483015260608260a48173__$64c1823877363665b8c9607be5e0799ede$__5af490811561190b576001600160a01b03928492611916575b506020906004604051809581936339420b4560e11b8352165afa91821561190b579061048c9291602094926118f35750614376565b610e3f919250843d8111610e4657610e378183613a4b565b6040513d85823e3d90fd5b602091925061193b9060603d8111611944575b6119338183613a4b565b8101906149ed565b505091906118be565b503d611929565b50346103cb5760403660031901126103cb57611968610482613837565b9060ff61013b5460a81c16156112a5576040516339420b4560e11b81526020816004816001600160a01b0387165afa9081156112ee57906119b3918391611aa5575b50602435613e99565b60ca5461013c546101085460408051630ef87a7960e11b81526001600160a01b0397909716600488015260248701949094526044860192909252670de0b6b3a76400006064860152608090811c60848601526001600160801b0380831660a487015291901c60c4850152908360e48173__$64c1823877363665b8c9607be5e0799ede$__5af49283156112ee578293611a82575b5061013d5490611a6d611a5c84838516613f2b565b928261013e54169060801c90613f02565b16106112385760409182519182526020820152f35b909250611a9e915060403d604011610ea857610e988183613a4b565b9138611a47565b611abd915060203d8111610e4657610e378183613a4b565b386119aa565b50346103cb57806003193601126103cb5760206001600160a01b0360335416604051908152f35b50346103cb57806003193601126103cb57611b5d906020611b096155bf565b611b1760ca939293546144b4565b6040517fd7454c53000000000000000000000000000000000000000000000000000000008152600481018590526024810192909252604482015293849081906064820190565b038173__$64c1823877363665b8c9607be5e0799ede$__5af491821561122c5791611b93575b6040809350519182526020820152f35b90506020823d8211611bbf575b81611bad60209383613a4b565b8101031261121f576040915190611b83565b3d9150611ba0565b50346103cb576040611bf9611bdb36613948565b92611be7929192613ae5565b611bef613a95565b6116af8483613f38565b600160655582519182526020820152f35b50346103cb57806003193601126103cb57611c23614771565b611c2b613a95565b600160ff1960975416176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b50346103cb57806003193601126103cb57602060cd54604051908152f35b50346103cb5760403660031901126103cb57611c9d613837565b611ca960243591614785565b9060ff61013b5460a01c1615611df75760ca5461013c54604080516367146f2960e01b8152600481018590526001600160a01b03861660248201526044810193909352670de0b6b3a764000060648401526001600160801b0391821660848401529093908260a48173__$64c1823877363665b8c9607be5e0799ede$__5af4908115610e4d576001600160a01b03928692611dd2575b506020906004604051809581936339420b4560e11b8352165afa918215610e4d57611d7193949592611db95750614376565b91611d97611d8661013d54938460801c613f2b565b928261013e5460801c911690613f02565b1610611da857602090604051908152f35b60046040516332a9eed360e11b8152fd5b610e3f91925060203d8111610e4657610e378183613a4b565b6020919250611def9060403d604011610ea857610e988183613a4b565b509190611d3f565b6004604051633b26060360e11b8152fd5b50346103cb5760203660031901126103cb57611e226138d1565b611e2a613981565b6001600160801b0361013e91166fffffffffffffffffffffffffffffffff1982541617905580f35b50346103cb57806003193601126103cb57602060ff61013b5460a01c166040519015158152f35b50346103cb57806003193601126103cb5760206101085460801c604051908152f35b50346103cb57806003193601126103cb57611eb4613981565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346103cb57806003193601126103cb57602060cc54604051908152f35b50346103cb57806003193601126103cb57611f2e6155bf565b9190611f4a61013d546001600160801b0381169060801c614400565b9060ca5491670de0b6b3a764000090838201808311611f9957602093611b5d9793611f8c611f87611b1795611f81611f93966144b4565b90614476565b614419565b059061443d565b936144b4565b602486634e487b7160e01b81526011600452fd5b50346103cb5760c03660031901126103cb57611fc7613837565b60243560443591611fd661384d565b9260a4359081159182150361121f57611fed613ae5565b611ff5613a95565b83156112f9576120048561460a565b61200f6084356147ca565b6120188361458f565b61202183614785565b6001600160a01b03928382169061203c878333888a16613b3a565b1561210b576020600491604051928380926339420b4560e11b82525afa90811561210057926120a39261209d89937ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b979660209c916120e3575b5089613e99565b906147fc565b945b6120d38660405193849316963396846040919493926001600160a01b03606083019616825260208201520152565b0390a36001606555604051908152f35b6120fa91508c3d8111610e4657610e378183613a4b565b38612096565b6040513d8a823e3d90fd5b9061211e8460d19994989599541661460a565b604051966339420b4560e11b88526020978881600481875afa908115610e4d5761215c9392916121559187916122f6575089613e99565b30926147fc565b60d1546040517f095ea7b30000000000000000000000000000000000000000000000000000000081529089166001600160a01b0316600482015260248101829052909690818160448187875af18015610eaf576122c9575b508760d1541691604051907faf929a8000000000000000000000000000000000000000000000000000000000825260048201528181602481865afa918215610eaf57849261229b575b5050813b156122975782916064839260405194859384927f90210d7e00000000000000000000000000000000000000000000000000000000845260048401528b60248401528c891660448401525af180156112ee57612283575b50506020947ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b916120a5565b61228d8291613a21565b6103cb5780612257565b8280fd5b90809250813d83116122c2575b6122b28183613a4b565b8101031261121f575138806121fd565b503d6122a8565b6122e890823d84116122ef575b6122e08183613a4b565b810190613ce9565b50386121b4565b503d6122d6565b6120fa91508b3d8d11610e4657610e378183613a4b565b50346103cb5760403660031901126103cb5761232a610482613837565b6040516339420b4560e11b81526020816004816001600160a01b0386165afa90811561190b57604091612366918591611aa55750602435613e99565b60ca54825163176f358b60e21b81526001600160a01b0394909416600485015260248401919091526044830152670de0b6b3a764000060648301528160848173__$64c1823877363665b8c9607be5e0799ede$__5af49081156112ee57602092916123d5575b50604051908152f35b6123ee915060403d604011610ea857610e988183613a4b565b50386123cc565b50346103cb5760403660031901126103cb5761240f6138d1565b6124176138e7565b90612420613981565b6001600160801b0380921691670de0b6b3a7640000808410918261246d575b5050156122975761013c91836fffffffffffffffffffffffffffffffff1984549360801b1692161717905580f35b8316109050388061243f565b50346103cb57806003193601126103cb57602060ce54604051908152f35b50346103cb57806003193601126103cb57602060ff609754166040519015158152f35b50346103cb5760403660031901126103cb576004357f223d3a15e21bdf204d6fa4a56f4ee7326dd6096a5c04ab76d3f5b53e31deadcc60206001600160a01b03612502613863565b61250a61457a565b169283855261013f825260408520612523828254613f2b565b9055604051908152a280f35b50346103cb5760203660031901126103cb5760ff60406020926001600160a01b03612558613837565b16815260c984522054166040519015158152f35b50346103cb57806003193601126103cb5760206001600160801b0361013c5416604051908152f35b5060e03660031901126103cb576125a9613837565b60443591906001600160a01b0390608435828116810361121f5761264c946020936125d2613ae5565b6125da613a95565b6125e48383613f38565b61013b54169160405196879485938493637b91993f60e01b855260c4359260a435926064359160243590600489019360c09591929897969360e08601996001600160a01b03809516875260208701526040860152606085015216608083015260a08201520152565b039134905af190811561122c579061266f575b6020906001606555604051908152f35b506020813d8211612699575b8161268860209383613a4b565b8101031261121f576020905161265f565b3d915061267b565b50346103cb576126b036613932565b906126b9613981565b670de0b6b3a76400006126cc8284613f2b565b116103a157825b60d354811015612728578061271d6104876001600160a01b036126f861272395614724565b90549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b506155b0565b6126d3565b506040907f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5928060cc558160cd5582519182526020820152a180f35b50346103cb5760406103f36103ed366138fd565b50346103cb57806003193601126103cb5760206001600160801b0361013d5416604051908152f35b50346103cb57806003193601126103cb57602061013d5460801c604051908152f35b50346103cb5760403660031901126103cb576127dc6138d1565b6127e46138e7565b6127ec613981565b6001600160801b0380921691670de0b6b3a76400008310908115612837575b506103a15761010891836fffffffffffffffffffffffffffffffff1984549360801b1692161717905580f35b9050811682113861280b565b50346103cb5760203660031901126103cb5761285d613837565b612865613981565b612888816001600160a01b0380911660005260d460205260406000205416151590565b1561297b576001600160a01b038091169081835260d4602052604083208054906001600160a01b03198216905560d5602052604084205460d3549060001991828101908111612967576109d2856128e161290693614724565b90549060031b1c169283895260d56020528060408a2055878952886040812055614724565b905560d3548015612953570161291b81614724565b8482549160031b1b1916905560d35516907f0fa1e4606af435f32f05b3804033d2933e691fab32ee74d2db6fa82d2741f1ea8380a380f35b602486634e487b7160e01b81526031600452fd5b602487634e487b7160e01b81526011600452fd5b60046040517fecb004d4000000000000000000000000000000000000000000000000000000008152fd5b50346103cb57806003193601126103cb576129be614771565b60975460ff8116156129fe5760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b50346103cb57806003193601126103cb5760206001600160a01b0360d15416604051908152f35b50346103cb5760203660031901126103cb57612a83613837565b612a8b614771565b612aae816001600160a01b0380911660005260d460205260406000205416151590565b1561297b5761141781612ae17fdcb65c0553aaa433aadd180404ff195259c48f78aa50f877ebcb4bb215129a4e9361458f565b6001600160a01b031680845260c960209081526040808620805460ff191660011790558051928352339183019190915290918291820190565b50346103cb57806003193601126103cb5760206001600160801b0361013e5416604051908152f35b50346103cb57612b86612b5436613888565b612b62969195939496613ae5565b612b6a613a95565b612b738661460a565b612b7c856145d9565b61148a8785614644565b612b8f8261458f565b612b9882614785565b93612ba286614785565b95612bb8856001600160a01b0388163381613b3a565b600092612bc487615778565b60ca5460d754604051639181079560e01b81526001600160a01b038a166004820152602481018990526044810192909252670de0b6b3a76400006064830152608482015260608160a48173__$64c1823877363665b8c9607be5e0799ede$__5af4908115610e4d5785809181936130f9575b506001600160a01b038a163b156103cb57604051632770a7eb60e21b81526001600160a01b038b1660048201819052602482018b905282908290604490829084905af180156112ee576130ea575b5090612c908388613f2b565b6001600160a01b038b163b1561229757828b60246001600160a01b03938360405195869485936313f3df3160e31b85526004850152165af1801561190b579083916130d6575b50506001600160a01b038a163b156130d25760405163d8b8785360e01b815260048101919091528181602481836001600160a01b038f165af180156112ee579082916130be575b505060405163705727b560e01b81526020816004816001600160a01b038e165afa9081156112ee57906001600160781b0391839161309f575b5016151580612fcf575b612fbe5781612f95575b50506040516339420b4560e11b81526020816004816001600160a01b038d165afa801561163b57612daf92612da792600092612f74575b50613e99565b848989614a08565b50604051906339420b4560e11b82526020826004816001600160a01b038d165afa90811561163b57612de892600092612f535750614376565b956001600160a01b0388163b1561121f57604051639e79eaa560e01b81526001600160a01b0384811660048301526024820189905290986000918a9160449183918591165af190811561163b576001600160a01b0398602092612f44575b506004604051809a81936339420b4560e11b8352165afa92831561163b57612ea27f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d1946001600160a01b039260209a600092612f255750614376565b921680957ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad960405180612ef23394888b846040919493926001600160a01b03606083019616825260208201520152565b0390a3604080516001600160a01b03958616815294909116602085015283015260608201849052339180608081016120d3565b612f3d9192508b3d8d11610e4657610e378183613a4b565b908b610de4565b612f4d90613a21565b89612e46565b612f6d91925060203d602011610e4657610e378183613a4b565b908a610de4565b612f8e91925060203d602011610e4657610e378183613a4b565b908b612da1565b6040612fb5916001600160a01b038b16815260d260205220918254613f2b565b90558880612d6a565b60046040516316fde3bd60e21b8152fd5b5060405163961be39160e01b81526020816004816001600160a01b038e165afa9081156112ee578291613080575b5060405163705727b560e01b81526020816004816001600160a01b038f165afa90811561190b57916001600160781b038061304b93662386f26fc10000958791613051575b501691166143cf565b10612d60565b613073915060203d602011613079575b61306b8183613a4b565b8101906143b0565b38613042565b503d613061565b613099915060203d6020116130795761306b8183613a4b565b8b612ffd565b6130b8915060203d6020116130795761306b8183613a4b565b8c612d56565b6130c790613a21565b6103cb57808b612d1d565b5080fd5b6130df90613a21565b6130d257818c612cd6565b6130f390613a21565b8b612c84565b91509550613115915060603d8111611944576119338183613a4b565b91958b612c36565b50346103cb5760203660031901126103cb576004356001600160a01b0381168091036130d25761314b613981565b61013b906001600160a01b031982541617905580f35b50346103cb5760a03660031901126103cb5761317b613837565b61318361384d565b61318b613ae5565b613193613a95565b61319e6024356145d9565b6131a78161460a565b6131b26084356147ca565b6131bb82614785565b916131d36024356001600160a01b0385163381613b3a565b6040516339420b4560e11b81526020816004816001600160a01b0388165afa908115610e4d578591613605575b5061320d81604435613e99565b9061321785615778565b60ca5460d754604051639181079560e01b81526001600160a01b038816600482015260248035908201526044810192909252670de0b6b3a7640000606483015260848201526000929060608160a48173__$64c1823877363665b8c9607be5e0799ede$__5af4908115610eaf578492859186936135da575b508361329a91614682565b6001600160a01b0388163b1561127a57604051632770a7eb60e21b81526001600160a01b03891660048201819052602480359083015286908290604490829084905af18015613552576135c7575b506132f38284613f2b565b6001600160a01b0389163b156135c3576040516313f3df3160e31b815260048101919091528581602481836001600160a01b038e165af18015613552579086916135af575b50506001600160a01b0388163b1561127a576040519063d8b8785360e01b825260048201528481602481836001600160a01b038d165af18015610e4d5790859161359b575b505060405163705727b560e01b81526020816004816001600160a01b038c165afa908115610e4d57906001600160781b0391869161357c575b50161515806134d1575b612fbe576133d593816134a8575b5050614376565b926001600160a01b0381163b1561127a57846040518092639e79eaa560e01b825281836001600160a01b03826134258b8b60048401602090939291936001600160a01b0360408201951681520152565b0393165af18015610e4d57613494575b50602093507ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad96001600160a01b03604051931692806120d333948760243591846040919493926001600160a01b03606083019616825260208201520152565b61349e8591613a21565b6112765783613435565b60406134c8916001600160a01b038a16815260d260205220918254613f2b565b905538806133ce565b5060405163961be39160e01b81526020816004816001600160a01b038c165afa908115610e4d57859161355d575b5060405163705727b560e01b81526020816004816001600160a01b038d165afa90811561355257916001600160781b038061354c93662386f26fc10000958a9161305157501691166143cf565b106133c0565b6040513d88823e3d90fd5b613576915060203d6020116130795761306b8183613a4b565b386134ff565b613595915060203d6020116130795761306b8183613a4b565b386133b6565b6135a490613a21565b61127657833861337d565b6135b890613a21565b61127a578438613338565b8580fd5b6135d390959195613a21565b93386132e8565b90925061329a93506135fa915060603d8111611944576119338183613a4b565b91935090918361328f565b61361e915060203d602011610e4657610e378183613a4b565b38613200565b50346103cb5760203660031901126103cb5761363e613879565b613646613981565b61013b907fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff75ff000000000000000000000000000000000000000000835492151560a81b16911617905580f35b50346103cb5760403660031901126103cb576136ad613837565b906024356136b9614771565b6136c283614785565b6136cb84615469565b82116103a1576001600160a01b0316803b156122975782809160246040518094819362b64f3d60e51b83528760048401525af1801561190b57613750575b50604080516001600160a01b039094168452602084019190915290917f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff1379181908101611417565b9161377b7f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff13793613a21565b91613709565b50346103cb5760203660031901126103cb577ffeb9010869b6ccec4557ddbbce947afeace5efc66cdff52c5e533c09336a8f2d60206001600160a01b036137c6613837565b6137ce613981565b6137d78161460a565b16806001600160a01b031960d154161760d155604051908152a180f35b50346103cb57806003193601126103cb5760206001600160a01b0360d05416604051908152f35b9050346130d257816003193601126130d25760209060ca548152f35b600435906001600160a01b038216820361121f57565b606435906001600160a01b038216820361121f57565b602435906001600160a01b038216820361121f57565b60043590811515820361121f57565b60c090600319011261121f576001600160a01b03600435818116810361121f5791602435828116810361121f57916044359160643591608435908116810361121f579060a43590565b600435906001600160801b038216820361121f57565b602435906001600160801b038216820361121f57565b606090600319011261121f576001600160a01b0390600435828116810361121f5791602435908116810361121f579060443590565b604090600319011261121f576004359060243590565b608090600319011261121f576001600160a01b0390600435828116810361121f57916024359160443591606435908116810361121f5790565b6001600160a01b0360335416330361399557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b67ffffffffffffffff8111613a3557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117613a3557604052565b9081602091031261121f575160ff8116810361121f5790565b9081602091031261121f575190565b60ff60975416613aa157565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b600260655414613af6576002606555565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b93929190604051602093848201927f23b872dd0000000000000000000000000000000000000000000000000000000084526001600160a01b039485809216602485015216604483015260648201526064815260a081019267ffffffffffffffff9682851088861117613a3557169060e0810184811088821117613a35576040528484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152600080938192519082855af1903d15613cd8573d968711613cc457613c2994959660405190613c1b88601f19601f8401160183613a4b565b81528093873d92013e613d01565b805190828215928315613cac575b50505015613c425750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b613cbc9350820181019101613ce9565b388281613c37565b602483634e487b7160e01b81526041600452fd5b9150613c2993949550606091613d01565b9081602091031261121f5751801515810361121f5790565b91929015613d625750815115613d15575090565b3b15613d1e5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015613d755750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510613dbb575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350613d98565b60ff6011199116019060ff8211613de757565b634e487b7160e01b600052601160045260246000fd5b60ff166012039060ff8211613de757565b60ff16604d8111613de757600a0a90565b8115613e29570490565b634e487b7160e01b600052601260045260246000fd5b81810292918115918404141715613de757565b60ff81166012811015613e745750613e6c613e7191613dfd565b613e0e565b90565b601210613e815750600190565b613e6c613e8d91613dd4565b8015613e295760010490565b9060ff81166012811015613ebe575090613eb8613e6c613e7193613dfd565b90613e3f565b601210613ec9575090565b90613ed9613e6c613e7193613dd4565b90613e1f565b919082604091031261121f576020825192015190565b91908203918211613de757565b9190916001600160801b0380809416911601918211613de757565b9060018201809211613de757565b91908201809211613de757565b90613f429061460a565b80156112f9573360005261013f806020528160406000205410613f7357336000526020526040600020908154039055565b60046040517fdb52be33000000000000000000000000000000000000000000000000000000008152fd5b9093919360009381156112f957613fb383614785565b906001600160a01b0391828116966040918251916339420b4560e11b83528260209b8c828d60049788915afa91821561436c578d8493614347575b505081613ffa91613e99565b9b60ff61013b5460a01c16156143385760ca5461013c5487516367146f2960e01b81528781018c81526001600160a01b0390971660208801526040870192909252670de0b6b3a764000060608701526001600160801b0390811660808701529490919087908390819060a001038173__$64c1823877363665b8c9607be5e0799ede$__5af49d8e1561432e578492859f6142fa575b508e8e61409f856140bb94614682565b865260d283528886206140b3828254613f2b565b905583613f2b565b8d3b1561127a57848e602482938b5194859384926313f3df3160e31b84528d8401525af180156142dd578792918f916142e7575b50819089519384809263961be39160e01b82525afa9182156142dd578e889187946142bc575b5082908a519283809263705727b560e01b82525afa9182156142b25791662386f26fc10000939161415b938892614295575b50506001600160781b0380911691166143cf565b10614286579061416e8161417493614376565b9c614376565b99803b156130d257816141b481928e8851948580948193639e79eaa560e01b83528d8c8401602090939291936001600160a01b0360408201951681520152565b03925af1801561427c57614268575b50506141ce86614522565b9061421061013d92826fffffffffffffffffffffffffffffffff196141f88654938460801c613f02565b60801b16911690811780945561013e5460801c613f02565b169060801c1161425a575051928352602083018790526040830186905281169216907f506448513266ee822309810e439a9705992c367f989d959d01d94303cf5eed9c90606090a3565b90516332a9eed360e11b8152fd5b6142728291613a21565b6103cb57806141c3565b85513d84823e3d90fd5b8486516316fde3bd60e21b8152fd5b6142ab9250803d106130795761306b8183613a4b565b3880614147565b89513d88823e3d90fd5b839194506142d690823d84116130795761306b8183613a4b565b9390614115565b88513d87823e3d90fd5b956142f3839297613a21565b95906140ef565b9092508d9e50873d8911614327575b6143138183613a4b565b810161431e91613edf565b9e50918261408f565b503d614309565b87513d86823e3d90fd5b848651633b26060360e11b8152fd5b613ffa929350908161436492903d10610e4657610e378183613a4b565b91908d613fee565b86513d85823e3d90fd5b9060ff81166012811015614395575090613ed9613e6c613e7193613dfd565b6012106143a0575090565b90613eb8613e6c613e7193613dd4565b9081602091031261121f57516001600160781b038116810361121f5790565b90670de0b6b3a764000091828102928184041490151715613de7576143fb613e71928260011c90613f2b565b613e1f565b81810392916000138015828513169184121617613de757565b906706f05b59d3b200009160008382019384129112908015821691151617613de757565b91909160008382019384129112908015821691151617613de757565b90670de0b6b3a764000091828102928184051490151715613de757565b818102929160008212600160ff1b821416613de7578184051490151715613de757565b8115613e2957600160ff1b8114600019831416613de7570590565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116144de5790565b606460405162461bcd60e51b815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b6001600160801b0390818111614536571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b6001600160a01b0361013b54163303612fbe57565b6001600160a01b031660005260c960205260ff604060002054166145af57565b60046040517f8654830a000000000000000000000000000000000000000000000000000000008152fd5b156145e057565b60046040517f3f3835e7000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b03161561461a57565b60046040517f0bd3e3ed000000000000000000000000000000000000000000000000000000008152fd5b6001600160a01b0390811691161461465857565b60046040517feeb7911f000000000000000000000000000000000000000000000000000000008152fd5b1161468957565b60046040517ff512a720000000000000000000000000000000000000000000000000000000008152fd5b156146ba57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60d35481101561475b5760d36000527f915c3eb987b20e1af620c1403197bf687fb7f18513b3a73fde6e78c7072c41a60190600090565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0360cf54163303612fbe57565b6147a8816001600160a01b0380911660005260d460205260406000205416151590565b1561297b576001600160a01b0380911660005260d46020526040600020541690565b42116147d257565b60046040517f549b6335000000000000000000000000000000000000000000000000000000008152fd5b9193929061485b9061480d84615778565b60ca54926000946040809581518096819263176f358b60e21b83528786600485016060919493670de0b6b3a7640000936001600160a01b036080840197168352602083015260408201520152565b038173__$64c1823877363665b8c9607be5e0799ede$__5af490811561499657869487926149c1575b506001600160a01b03906148a286809b61489d826145d9565b614682565b1692833b156149bd5785519062b64f3d60e51b82526004820152868160248183885af180156149b3576149a0575b50823b156135c35784519063283c3d8160e21b82526004820152858160248183875af1801561499657908691614982575b5050813b1561127a5783517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602481019290925290919083908390604490829084905af19081156149795750614968575050565b6149728291613a21565b6103cb5750565b513d84823e3d90fd5b61498b90613a21565b61127a578438614901565b85513d88823e3d90fd5b6149ac90969196613a21565b94386148d0565b86513d89823e3d90fd5b8680fd5b6001600160a01b0395506149e3919250863d8811610ea857610e988183613a4b565b9490949190614884565b9081606091031261121f578051916040602083015192015190565b90929391614a1f614a18826144b4565b8584614bca565b9485614a2c838099614682565b6000926001600160a01b038093169485855260209360d28552604097888720614a56868254613f2b565b90551690813b156135c3578591602483928a51948593849262b64f3d60e51b845260048401525af18015614baf57614b98575b5090614a9491613f2b565b833b15612297578451906313f3df3160e31b82526004820152828160248183885af18015614b7a57908391614b84575b505083519263961be39160e01b84528184600481845afa938415614b7a578394614b54575b50908060049286519384809263705727b560e01b82525afa928315614b495791614b319391662386f26fc100009593926142955750506001600160781b0380911691166143cf565b10614b395750565b600490516316fde3bd60e21b8152fd5b8551903d90823e3d90fd5b8291945091614b71600493823d84116130795761306b8183613a4b565b94919250614ae9565b85513d85823e3d90fd5b614b8d90613a21565b6130d2578138614ac4565b93614ba7614a94939295613a21565b939091614a89565b87513d87823e3d90fd5b600160ff1b8114613de75760000390565b9291614bd78183866150a1565b9460009386908390868612614d6e575050506001600160a01b031660405163961be39160e01b81526020938482600481865afa918215614d265785908793614d4e575b50600492936040519384809263705727b560e01b82525afa8015614d2657849386938892614d2b575b50610108546040517f2f6599bb0000000000000000000000000000000000000000000000000000000081526001600160781b039283166004820152929091166024830152604482019290925260648101939093526001600160801b038116608484015260801c60a4830152818060c481015b038173__$64c1823877363665b8c9607be5e0799ede$__5af4928315614d2657613e719493614cf1575b505081614ceb91613ef5565b93613f2b565b614ceb9293509081614d1792903d10614d1f575b614d0f8183613a4b565b810190613a86565b919038614cdf565b503d614d05565b61163b565b614cb5919250614d4790853d87116130795761306b8183613a4b565b9190614c43565b60049350614d6890823d84116130795761306b8183613a4b565b92614c1a565b6001600160a01b03919692985080945094929416906040519063961be39160e01b825260208083600481875afa928315614d26578293614e9e575b50806004916001600160781b03809516956040519384809263705727b560e01b82525afa928315614d265792614e81575b505016614df081614deb8885613f2b565b6143cf565b6101085492906001600160801b03841610614e0f575050505050509190565b9091939550614e20929497506143cf565b9060801c1115614e5757614e36614e3d91614bb9565b8483614ec0565b90614e529193614e4c856144b4565b91614bca565b905090565b60046040517f6158a9f8000000000000000000000000000000000000000000000000000000008152fd5b614e979250803d106130795761306b8183613a4b565b3880614dda565b819350614eb9906004923d86116130795761306b8183613a4b565b9290614da9565b6040516339420b4560e11b81529193926020926001600160a01b038316908481600481855afa908115614d265760009161505a575b50614eff81613e52565b946040519263705727b560e01b84528184600481845afa8015614d265760049460009161503d575b5082614f58614f48614f3c6101085460801c90565b6001600160801b031690565b6001600160781b03809416615077565b926040519687809263961be39160e01b82525afa8015614d2657614f9095614f8b94600092615020575b50501690613ef5565b614376565b9160019582614fb1614faa614fa58888613e3f565b6144b4565b8385614bca565b5010614e575791905b838710614fcf57505050613e71929350613e3f565b909192614fe5614fdf8289613f2b565b60011c90565b9083614ffe614ff7614fa58986613e3f565b8786614bca565b501061500e5750925b9190614fba565b93965061501a90613f1d565b95615007565b6150369250803d106130795761306b8183613a4b565b3880614f82565b6150549150833d85116130795761306b8183613a4b565b38614f27565b6150719150853d8711610e4657610e378183613a4b565b38614ef5565b9061508191613e3f565b6706f05b59d3b200008101809111613de757670de0b6b3a7640000900490565b90929160ca549060cb5492604051957fe02a44c60000000000000000000000000000000000000000000000000000000087526001600160a01b03809216600488015216602486015260448501526064840152670de0b6b3a7640000608484015260a483015260408260c48173__$64c1823877363665b8c9607be5e0799ede$__5af491821561163b57600090819361513857509190565b905061515391925060403d8111610ea857610e988183613a4b565b9091565b929091926151658382614644565b83156112f957610cef61517791614785565b916001600160a01b03938482166040958651926339420b4560e11b908185526020958686600481885afa9586156152c05789966151c8936151c0926000926152a1575b506152cb565b988991614bca565b9092819516938951938385528785600481895afa9485156152965788956000926151f892849261527e5750614376565b9912615252575050600488518094819382525afa92831561524757613e7194959650600093615228575050614376565b61523f929350803d10610e4657610e378183613a4b565b9038806133ce565b86513d6000823e3d90fd5b93509350600488518094819382525afa92831561524757613e7194959650600093615228575050614376565b610e3f919250883d8a11610e4657610e378183613a4b565b8b513d6000823e3d90fd5b6152b99192508a3d8c11610e4657610e378183613a4b565b90386151ba565b8a513d6000823e3d90fd5b9060ff811660128110156152ea575090611f81613e6c613e7193613dfd565b6012106152f5575090565b90615305613e6c613e7193613dd4565b90614499565b61531c6001600160a01b0391614785565b1660408051917f18160ddd00000000000000000000000000000000000000000000000000000000928381526020908181600481865afa9081156154215760009161543c575b501561542c5782519363705727b560e01b85528185600481865afa94851561542157600095615400575b508190600485518095819382525afa9283156153f657506000926153be575b50506001600160781b03613e7192166143cf565b81819392933d83116153ef575b6153d58183613a4b565b810103126103cb5750516001600160781b03613e716153aa565b503d6153cb565b513d6000823e3d90fd5b8291955061541a90823d84116130795761306b8183613a4b565b949061538b565b84513d6000823e3d90fd5b50505050670de0b6b3a764000090565b908282813d8311615462575b6154528183613a4b565b810103126103cb57505138615361565b503d615448565b61547a6001600160a01b0391614785565b169060409182517f99c91a640000000000000000000000000000000000000000000000000000000081526020908181600481865afa9081156155a557600091615578575b508451906339420b4560e11b82528282600481875afa908115615247576154ec926000926155595750613e99565b845163961be39160e01b81528281600481875afa9081156152475760d2926001600160781b03613e719798959361552d9360009161553c575b501690613ef5565b93600052526000205490613ef5565b6155539150853d87116130795761306b8183613a4b565b38615525565b615571919250843d8611610e4657610e378183613a4b565b9038612da1565b908282813d831161559e575b61558e8183613a4b565b810103126103cb575051386154be565b503d615584565b85513d6000823e3d90fd5b6000198114613de75760010190565b600090600090816155d160ca546144b4565b60d35482915b8184106155e45750505050565b909192956156256155f488614724565b91906001600160a01b03928391549060031b1c166001600160a01b0380911660005260d46020526040600020541690565b16604080519163961be39160e01b8352602060049181858481845afa94851561576e57899561574d575b50819084519384809263705727b560e01b82525afa92831561574457508792615727575b50506001600160781b0380911691821561571a571661569190614459565b9681806002998a82056156a39161443d565b906156ad91614499565b9182916156b99161443d565b986156c386614459565b9082056156cf9161443d565b906156d991614499565b6156e291614400565b6156eb91614476565b6156f490614419565b670de0b6b3a764000090056157089161443d565b95615712906155b0565b9291906155d7565b50505095615712906155b0565b61573d9250803d106130795761306b8183613a4b565b3880615673565b513d89823e3d90fd5b8291955061576790823d84116130795761306b8183613a4b565b949061564f565b84513d8b823e3d90fd5b6001600160a01b03811660005260d260205260406000205480159081156157af575b50156157a35750565b6157ac906157bb565b50565b905060ce54113861579a565b9060006001600160a01b0380931680825260d2602052604090818320549485156159d55760cd5490670de0b6b3a7640000918203828111611f995761580661580c9160cc5490613ef5565b88615077565b9081615947575b505061582160cd5487615077565b9081615836575b5050825260d2602052812055565b60ca549084519163176f358b60e21b835284600484015283602484015260448301526064820152838160848173__$64c1823877363665b8c9607be5e0799ede$__5af490811561591e578591615928575b50823b1561127a5783519063283c3d8160e21b82526004820152848160248183875af1801561591e5790859161590a575b5050813b156112765782519062b64f3d60e51b82526004820152838160248183865af180156158fd5790849115615828576158f290613a21565b612297578238615828565b50505051903d90823e3d90fd5b61591390613a21565b6112765783386158b8565b84513d87823e3d90fd5b61593f9150843d8611610ea857610e988183613a4b565b905038615887565b60d05416908451906339420b4560e11b8252602082600481885afa9182156149b3579061597b92918892611db95750614376565b90833b156135c3578451639e79eaa560e01b81526001600160a01b039190911660048201526024810191909152848160448183875af1801561591e576159c2575b80615813565b6159ce90949194613a21565b92386159bc565b50919350505056fea2646970667358221220002adc76938bf7826472dd82c592741f231a49bd4af55a35e1feb321987bac1064736f6c63430008120033",
  "libraries": {
    "CoreV3": "0x860E5255B8Fcd598FEC10e15569215D5a0FC713a"
  },
  "devdoc": {
    "details": "Refer to note of `swapTokensForTokensCrossChain` for procedure of a cross-chain swap Note: All variables are 18 decimals, except from that of parameters of external functions and underlying tokens",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "PausedAsset(address,address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "UnpausedAsset(address,address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "addressOfAsset(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "details": "Asset needs to be created and added to pool before any operation. This function assumes tax free token.",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "minimumLiquidity": "The minimum amount of liquidity to receive",
          "shouldStake": "Whether to stake LP tokens automatically after deposit",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "exchangeRate(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "xr": "The exchange rate of LP token"
        }
      },
      "isPaused(address)": {
        "details": "Function to return if the asset is paused. The return value is only useful when true. When the return value is false, the asset can be either not paused or not exist."
      },
      "mintCredit(uint256,address)": {
        "details": "This function is only for the case when `completeSwapCreditForTokens` fails, and should not be called otherwise Also, this function should work even if the pool is paused"
      },
      "mintFee(address)": {
        "params": {
          "token": "The address of the token to collect fee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "pauseAsset(address)": {
        "details": "pause asset, restricting deposit and swap operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quoteAmountIn(address,address,int256)": {
        "details": "To be used by frontend",
        "params": {
          "fromToken": "The initial ERC20 token",
          "toAmount": "The given output amount",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "amountIn": "The input amount required",
          "haircut": "The haircut that would be applied"
        }
      },
      "quotePotentialDeposit(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "amount": "The amount to deposit",
          "token": "The token to deposit by user"
        },
        "returns": {
          "liquidity": "The potential liquidity user would receive"
        }
      },
      "quotePotentialSwap(address,address,int256)": {
        "details": "In reverse quote, the haircut is in the `fromAsset`",
        "params": {
          "fromAmount": "The given input amount",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": {
        "details": "take into account high cov ratio fee"
      },
      "removeAsset(address)": {
        "details": "Can only be called by owner",
        "params": {
          "token": "The address of token to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAmpFactor(uint256)": {
        "params": {
          "ampFactor_": "new pool's amplification factor"
        }
      },
      "setDev(address)": {
        "params": {
          "dev_": "new contract dev address"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "feeTo_": "new fee beneficiary"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "details": "This function assumes tax free token.",
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "swapCreditForTokensCrossChain(address,uint256,uint256,uint256,address,uint256,uint256)": {
        "details": "Nonce must be non-zero, otherwise wormhole will revert the message Delivery fee attached to the txn should be done off-chain via `WormholeAdaptor.estimateDeliveryFee` to reduce gas cost"
      },
      "swapTokensForTokensCrossChain(address,address,uint256,uint256,uint256,uint256,address,uint256,uint256)": {
        "details": "Steps: 1. Swap `fromToken` for credit; 2. Notify relayer to bridge credit to the `toChain`; 3. Relayer invoke `completeSwapCreditForTokens` to swap credit for `toToken` in the `toChain` Note: haircut returned here is just high cov ratio fee. Delivery fee attached to the txn should be done off-chain via `WormholeAdaptor.estimateDeliveryFee` to reduce gas cost"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTipBucket(address,uint256,address)": {
        "details": "unit of amount should be in WAD"
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "unpauseAsset(address)": {
        "details": "unpause asset, enabling deposit and swap operations"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromToken": "The corresponding token user holds the LP (Asset) from",
          "liquidity": "The liquidity to be withdrawn (in fromToken decimal)",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "toToken": "The token wanting to be withdrawn (needs to be well covered)"
        },
        "returns": {
          "toAmount": "The total amount withdrawn"
        }
      }
    },
    "title": "Mega Pool",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "POOL__CREDIT_NOT_ENOUGH()": [
        {
          "notice": "Errors"
        }
      ]
    },
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "AssetRemoved(address,address)": {
        "notice": "An event thats emitted when asset is removed from Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "SwapCreditForTokens(uint256,address,uint256,uint256,address)": {
        "notice": "Event that is emitted when credit is swapped into token"
      },
      "SwapTokensForCredit(address,address,uint256,uint256,uint256)": {
        "notice": "Event that is emitted when token is swapped into credit"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "adaptor()": {
        "notice": "Storage"
      },
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "addressOfAsset(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "ampFactor()": {
        "notice": "Amplification factor"
      },
      "completeSwapCreditForTokens(address,uint256,uint256,address)": {
        "notice": "Swap credit to tokens; should be called by the adaptor"
      },
      "deposit(address,uint256,uint256,address,uint256,bool)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "dev()": {
        "notice": "Dev address"
      },
      "exchangeRate(address)": {
        "notice": "Returns the exchange rate of the LP token"
      },
      "fillPool(address,uint256)": {
        "notice": "Move fund from tip bucket to the pool to keep r* = 1 as error accumulates unit of amount should be in WAD"
      },
      "getTokens()": {
        "notice": "Return list of tokens in the pool"
      },
      "globalEquilCovRatioWithCredit()": {
        "notice": "Calculate the r* and invariant when all credits are settled"
      },
      "haircutRate()": {
        "notice": "Haircut rate"
      },
      "initialize(uint256,uint256)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpDividendRatio()": {
        "notice": "LP dividend ratio : the ratio of haircut that should distribute to LP"
      },
      "maximumOutboundCredit()": {
        "notice": "the maximum allowed amount of net mint credit. `totalCreditMinted - totalCreditBurned` should be smaller than this value"
      },
      "mintCredit(uint256,address)": {
        "notice": "In case `completeSwapCreditForTokens` fails, adaptor should mint credit to the respective user"
      },
      "mintFee(address)": {
        "notice": "Send fee collected to the fee beneficiary"
      },
      "mintFeeThreshold()": {
        "notice": "The threshold to mint fee (unit: WAD)"
      },
      "quoteAmountIn(address,address,int256)": {
        "notice": "Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage)"
      },
      "quotePotentialDeposit(address,uint256)": {
        "notice": "Quotes potential deposit from pool"
      },
      "quotePotentialSwap(address,address,int256)": {
        "notice": "Given an input asset amount and token addresses, calculates the maximum output token amount (accounting for fees and slippage)."
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "quoteSwapCreditForTokens(address,uint256)": {
        "notice": "Read-only functions"
      },
      "removeAsset(address)": {
        "notice": "Removes asset from asset struct"
      },
      "retentionRatio()": {
        "notice": "Retention ratio: the ratio of haircut that should stay in the pool"
      },
      "setAmpFactor(uint256)": {
        "notice": "Changes the pools amplification factor. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setFeeTo(address)": {
        "notice": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setMintFeeThreshold(uint256)": {
        "notice": "Set min fee to mint"
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "swapCreditForTokens(address,uint256,uint256,address)": {
        "notice": "Swap credit for tokens (same chain)"
      },
      "swapCreditForTokensCrossChain(address,uint256,uint256,uint256,address,uint256,uint256)": {
        "notice": "Bridge credit and swap it for `toToken` in the `toChain`"
      },
      "swapTokensForTokensCrossChain(address,address,uint256,uint256,uint256,uint256,address,uint256,uint256)": {
        "notice": "Initiate a cross chain swap"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      },
      "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": {
        "notice": "Enables withdrawing liquidity from an asset using LP from a different asset"
      },
      "withdrawalHaircutRate()": {
        "notice": "Withdrawal haircut rate charged at the time of withdrawal"
      }
    },
    "notice": "Mega Pool is able to handle cross-chain swaps in addition to ordinary swap within its own chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 717,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 720,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1461,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 589,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 709,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1020,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1089,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 900,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 1005,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14412,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_pausedAssets",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14570,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "ampFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 14573,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "haircutRate",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 14576,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "retentionRatio",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 14579,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "lpDividendRatio",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 14582,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "mintFeeThreshold",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 14585,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "dev",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 14587,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "feeTo",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 14589,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "masterWombat",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 14595,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_feeCollected",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_contract(IAsset)8919,t_uint256)"
      },
      {
        "astId": 14599,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_assets",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(AssetMap)14557_storage"
      },
      {
        "astId": 14601,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_used1",
        "offset": 0,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 14603,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "_used2",
        "offset": 16,
        "slot": "214",
        "type": "t_uint128"
      },
      {
        "astId": 14606,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "withdrawalHaircutRate",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 14610,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "gap",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 13994,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "startCovRatio",
        "offset": 0,
        "slot": "264",
        "type": "t_uint128"
      },
      {
        "astId": 13996,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "endCovRatio",
        "offset": 16,
        "slot": "264",
        "type": "t_uint128"
      },
      {
        "astId": 14000,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "gap",
        "offset": 0,
        "slot": "265",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12896,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "adaptor",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IAdaptor)8830"
      },
      {
        "astId": 12898,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "swapCreditForTokensEnabled",
        "offset": 20,
        "slot": "315",
        "type": "t_bool"
      },
      {
        "astId": 12900,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "swapTokensForCreditEnabled",
        "offset": 21,
        "slot": "315",
        "type": "t_bool"
      },
      {
        "astId": 12902,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "creditForTokensHaircut",
        "offset": 0,
        "slot": "316",
        "type": "t_uint128"
      },
      {
        "astId": 12904,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "tokensForCreditHaircut",
        "offset": 16,
        "slot": "316",
        "type": "t_uint128"
      },
      {
        "astId": 12906,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "totalCreditMinted",
        "offset": 0,
        "slot": "317",
        "type": "t_uint128"
      },
      {
        "astId": 12908,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "totalCreditBurned",
        "offset": 16,
        "slot": "317",
        "type": "t_uint128"
      },
      {
        "astId": 12911,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "maximumOutboundCredit",
        "offset": 0,
        "slot": "318",
        "type": "t_uint128"
      },
      {
        "astId": 12913,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "maximumInboundCredit",
        "offset": 16,
        "slot": "318",
        "type": "t_uint128"
      },
      {
        "astId": 12917,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "creditBalance",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12921,
        "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
        "label": "__gap",
        "offset": 0,
        "slot": "320",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAdaptor)8830": {
        "encoding": "inplace",
        "label": "contract IAdaptor",
        "numberOfBytes": "20"
      },
      "t_contract(IAsset)8919": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IAsset)8919)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IAsset)",
        "numberOfBytes": "32",
        "value": "t_contract(IAsset)8919"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IAsset)8919,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAsset)8919",
        "label": "mapping(contract IAsset => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetMap)14557_storage": {
        "encoding": "inplace",
        "label": "struct PoolV3.AssetMap",
        "members": [
          {
            "astId": 14547,
            "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 14552,
            "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_contract(IAsset)8919)"
          },
          {
            "astId": 14556,
            "contract": "contracts/wombat-core/pool/CrossChainPool.sol:CrossChainPool",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}