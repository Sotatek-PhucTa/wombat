{
  "address": "0x9A65781bFff8E43E4345D6B1b5157B2657F2735D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWNative",
          "name": "_wNative",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "name": "addLiquidityNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "approveSpendingByPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "haircuts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "int256",
          "name": "amountIn",
          "type": "int256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "haircuts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityFromOtherAssetAsNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minimumamountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumamountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenPath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "poolPath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumamountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wNative",
      "outputs": [
        {
          "internalType": "contract IWNative",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x66af3addedabf15a8e5dab434eb78940e111257d8e0d881c3f62cc893c33392a",
  "receipt": {
    "to": null,
    "from": "0xcB3Bb767104e0b3235520fafB182e005D7efD045",
    "contractAddress": "0x9A65781bFff8E43E4345D6B1b5157B2657F2735D",
    "transactionIndex": 0,
    "gasUsed": "1554329",
    "logsBloom": "0x
    "blockHash": "0xa826df609bc2918e9dc0fcd54a8d9d6072f63b7c4383b9047c5bc21d6cf6b491",
    "transactionHash": "0x66af3addedabf15a8e5dab434eb78940e111257d8e0d881c3f62cc893c33392a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 97776044,
        "transactionHash": "0x66af3addedabf15a8e5dab434eb78940e111257d8e0d881c3f62cc893c33392a",
        "address": "0x9A65781bFff8E43E4345D6B1b5157B2657F2735D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cb3bb767104e0b3235520fafb182e005d7efd045"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa826df609bc2918e9dc0fcd54a8d9d6072f63b7c4383b9047c5bc21d6cf6b491"
      }
    ],
    "blockNumber": 97776044,
    "cumulativeGasUsed": "1554329",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "f69478c090fcdc72c3ea9798b655ba5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWNative\",\"name\":\"_wNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"addLiquidityNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"approveSpendingByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"haircuts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"int256\",\"name\":\"amountIn\",\"type\":\"int256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"haircuts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromOtherAssetAsNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNative\",\"outputs\":[{\"internalType\":\"contract IWNative\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Owner is allowed and required to approve token spending by pools via approveSpendingByPool function. With great thanks to the uniswap team for your contribution to the opensource community reference: https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol\",\"kind\":\"dev\",\"methods\":{\"approveSpendingByPool(address[],address)\":{\"details\":\"needs to be done after asset deployment for router to be able to support the tokens\",\"params\":{\"pool\":\"to be approved to spend\",\"tokens\":\"array of tokens to be approved\"}},\"getAmountIn(address[],address[],uint256)\":{\"params\":{\"amountOut\":\"The to amount\",\"poolPath\":\"The token pool path\",\"tokenPath\":\"The token swap path\"},\"returns\":{\"amountIn\":\"The potential final amount user would receive\"}},\"getAmountOut(address[],address[],int256)\":{\"params\":{\"amountIn\":\"The from amount\",\"poolPath\":\"The token pool path\",\"tokenPath\":\"The token swap path\"},\"returns\":{\"amountOut\":\"The potential final amount user would receive\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)\":{\"params\":{\"amountIn\":\"the amount in\",\"deadline\":\"the deadline to respect\",\"minimumamountOut\":\"the minimum amount to get for user\",\"poolPath\":\"An array of pool addresses. The pools where the pathTokens are contained in order.\",\"to\":\"the user to send the tokens to\",\"tokenPath\":\"The first element of the path is the input token, the last element is the output token.\"},\"returns\":{\"amountOut\":\"received by user\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"WombatRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveSpendingByPool(address[],address)\":{\"notice\":\"approve spending of router tokens by pool\"},\"getAmountIn(address[],address[],uint256)\":{\"notice\":\"Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage) Note: This function should be used as estimation only. The actual swap amount might be different due to precision error (the error is typically under 1e-6)\"},\"getAmountOut(address[],address[],int256)\":{\"notice\":\"Given an input asset amount and an array of token addresses, calculates the maximum output token amount (accounting for fees and slippage).\"},\"swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path\"}},\"notice\":\"Allows routing on different wombat pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/libraries/WombatRouter.sol\":\"WombatRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x97f61115b32d97ee057cea0c3a7a28ab516927da9cb65d79cf77382f30bcfe8d\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/interfaces/IWombatRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport './IPool.sol';\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath, // the first address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath, // the last address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable returns (uint256 liquidity);\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x095ba57d6fff4df84dbadca9600114bcb3cb7f29196ae32323d87c1147023152\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/WombatRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/IWombatRouter.sol';\\n\\ninterface IWNative {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\\n/**\\n * @title WombatRouter\\n * @notice Allows routing on different wombat pools\\n * @dev Owner is allowed and required to approve token spending by pools via approveSpendingByPool function.\\n * With great thanks to the uniswap team for your contribution to the opensource community\\n * reference: https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol\\n */\\ncontract WombatRouter is Ownable, IWombatRouter {\\n    using SafeERC20 for IERC20;\\n\\n    IWNative public immutable wNative;\\n\\n    constructor(IWNative _wNative) {\\n        require(address(_wNative) != address(0), 'WombatRouter: wNative is zero address');\\n        wNative = _wNative;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(wNative));\\n    }\\n\\n    /// @notice approve spending of router tokens by pool\\n    /// @param tokens array of tokens to be approved\\n    /// @param pool to be approved to spend\\n    /// @dev needs to be done after asset deployment for router to be able to support the tokens\\n    function approveSpendingByPool(address[] calldata tokens, address pool) external onlyOwner {\\n        for (uint256 i; i < tokens.length; ++i) {\\n            IERC20(tokens[i]).safeApprove(pool, 0);\\n            IERC20(tokens[i]).safeApprove(pool, type(uint256).max);\\n        }\\n    }\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable override returns (uint256 liquidity) {\\n        wNative.deposit{value: msg.value}();\\n        return pool.deposit(address(wNative), msg.value, minimumLiquidity, to, deadline, shouldStake);\\n    }\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amount) {\\n        address asset = pool.addressOfAsset(address(wNative));\\n        IERC20(asset).transferFrom(address(msg.sender), address(this), liquidity);\\n\\n        amount = pool.withdraw(address(wNative), liquidity, minimumAmount, address(this), deadline);\\n        wNative.withdraw(amount);\\n        _safeTransferNative(to, amount);\\n    }\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount) {\\n        address asset = pool.addressOfAsset(fromToken);\\n        IERC20(asset).transferFrom(address(msg.sender), address(this), liquidity);\\n\\n        amount = pool.withdrawFromOtherAsset(\\n            fromToken,\\n            address(wNative),\\n            liquidity,\\n            minimumAmount,\\n            address(this),\\n            deadline\\n        );\\n        wNative.withdraw(amount);\\n        _safeTransferNative(to, amount);\\n    }\\n\\n    /// @notice Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path\\n    /// @param tokenPath An array of token addresses. path.length must be >= 2.\\n    /// @param tokenPath The first element of the path is the input token, the last element is the output token.\\n    /// @param poolPath An array of pool addresses. The pools where the pathTokens are contained in order.\\n    /// @param amountIn the amount in\\n    /// @param minimumamountOut the minimum amount to get for user\\n    /// @param to the user to send the tokens to\\n    /// @param deadline the deadline to respect\\n    /// @return amountOut received by user\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amountOut) {\\n        require(deadline >= block.timestamp, 'expired');\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get from token from users\\n        IERC20(tokenPath[0]).safeTransferFrom(address(msg.sender), address(this), amountIn);\\n\\n        amountOut = _swap(tokenPath, poolPath, amountIn, to);\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n    }\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable override returns (uint256 amountOut) {\\n        require(tokenPath[0] == address(wNative), 'the first address should be wrapped token');\\n        require(deadline >= block.timestamp, 'expired');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get wrapped tokens\\n        wNative.deposit{value: msg.value}();\\n\\n        amountOut = _swap(tokenPath, poolPath, msg.value, to);\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n    }\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amountOut) {\\n        require(tokenPath[tokenPath.length - 1] == address(wNative), 'the last address should be wrapped token');\\n        require(deadline >= block.timestamp, 'expired');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get from token from users\\n        IERC20(tokenPath[0]).safeTransferFrom(address(msg.sender), address(this), amountIn);\\n\\n        amountOut = _swap(tokenPath, poolPath, amountIn, address(this));\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n\\n        wNative.withdraw(amountOut);\\n        _safeTransferNative(to, amountOut);\\n    }\\n\\n    /// @notice Private function to swap alone the token path\\n    /// @dev Assumes router has initial amountIn in balance.\\n    /// Assumes tokens being swapped have been approve via the approveSpendingByPool function\\n    /// @param tokenPath An array of token addresses. path.length must be >= 2.\\n    /// @param tokenPath The first element of the path is the input token, the last element is the output token.\\n    /// @param poolPath An array of pool addresses. The pools where the pathTokens are contained in order.\\n    /// @param amountIn the amount in\\n    /// @param to the user to send the tokens to\\n    /// @return amountOut received by user\\n    function _swap(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        address to\\n    ) internal returns (uint256 amountOut) {\\n        // next from amount, starts with amountIn in arg\\n        uint256 nextamountIn = amountIn;\\n\\n        // first n - 1 swaps\\n        for (uint256 i; i < poolPath.length - 1; ++i) {\\n            // make the swap with the correct arguments\\n            (amountOut, ) = IPool(poolPath[i]).swap(\\n                tokenPath[i],\\n                tokenPath[i + 1],\\n                nextamountIn,\\n                0, // minimum amount received is ensured on calling function\\n                address(this),\\n                type(uint256).max // deadline is ensured on calling function\\n            );\\n            nextamountIn = amountOut;\\n        }\\n\\n        // last swap\\n        uint256 i = poolPath.length - 1;\\n        (amountOut, ) = IPool(poolPath[i]).swap(\\n            tokenPath[i],\\n            tokenPath[i + 1],\\n            nextamountIn,\\n            0, // minimum amount received is ensured on calling function\\n            to,\\n            type(uint256).max // deadline is ensured on calling function\\n        );\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and an array of token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @param tokenPath The token swap path\\n     * @param poolPath The token pool path\\n     * @param amountIn The from amount\\n     * @return amountOut The potential final amount user would receive\\n     */\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view override returns (uint256 amountOut, uint256[] memory haircuts) {\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // next from amount, starts with amountIn in arg\\n        int256 nextamountIn = amountIn;\\n        haircuts = new uint256[](poolPath.length);\\n\\n        for (uint256 i; i < poolPath.length; ++i) {\\n            // make the swap with the correct arguments\\n            (amountOut, haircuts[i]) = IPool(poolPath[i]).quotePotentialSwap(\\n                tokenPath[i],\\n                tokenPath[i + 1],\\n                nextamountIn\\n            );\\n            nextamountIn = int256(amountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     * @param tokenPath The token swap path\\n     * @param poolPath The token pool path\\n     * @param amountOut The to amount\\n     * @return amountIn The potential final amount user would receive\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view override returns (uint256 amountIn, uint256[] memory haircuts) {\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // next from amount, starts with amountIn in arg\\n        int256 nextAmountOut = int256(amountOut);\\n        haircuts = new uint256[](poolPath.length);\\n\\n        for (uint256 i = poolPath.length; i > 0; --i) {\\n            (amountIn, haircuts[i - 1]) = IPool(poolPath[i - 1]).quoteAmountIn(\\n                tokenPath[i - 1],\\n                tokenPath[i],\\n                nextAmountOut\\n            );\\n            nextAmountOut = int256(amountIn);\\n        }\\n    }\\n\\n    function _safeTransferNative(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, '_safeTransferNative fails');\\n    }\\n}\\n\",\"keccak256\":\"0x2a63e0f3f50ec9339aaa73ce5b23f1fbef9c69196acf5bbe92cfc16f79d10025\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a03461012957601f611c0338819003918201601f19168301916001600160401b0383118484101761012e5780849260209460405283398101031261012957516001600160a01b03808216808303610129576000543360018060a01b0319821617600055604051923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3156100d95750608052604051611abe908161014582396080518181816029015281816102110152818161090c01528181610b2001528181610cc601528181610fe401526110780152f35b62461bcd60e51b815260206004820152602560248201527f576f6d626174526f757465723a20774e6174697665206973207a65726f206164604482015264647265737360d81b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600480361015610056575b505050361561001f57600080fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361005157005b600080fd5b600092833560e01c908163018ad00114611008575080632d68efc914610fc45780633226288e14610de75780636248fced14610c88578063715018a614610c215780637eeb195514610a6457806385335cc0146108ca5780638d8f82e6146106e25780638da5cb5b146106bc578063b9e598c1146104cc578063d44107a414610417578063f048d48f146101da5763f2fde38b0361001157346101d65760203660031901126101d657610107611218565b906101106112dd565b6001600160a01b0380921692831561016d5750506000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b509190346104135760a0366003190112610413576101f6611218565b926024356102026111ec565b916001600160a01b03809616867f0000000000000000000000000000000000000000000000000000000000000000169285519763e9249cc760e01b895284848a01526020988981602481875afa90811561040957918a918a9384916103dc575b5089516323b872dd60e01b8152338882019081523060208201526040810187905290948593849283906060010393165af180156103d2578992899695949260a4926103a5575b508851998a9384927f09a5fca300000000000000000000000000000000000000000000000000000000845288888501526024840152604435604484015230606484015260843560848401525af195861561039b57839661036c575b50813b156101d65785602484928388519586948593632e1a7d4d60e01b85528401525af180156103625790859291610347575b505061034191611a08565b51908152f35b81925061035390611394565b61035f57808491610336565b80fd5b84513d84823e3d90fd5b9095508681813d8311610394575b61038481836113da565b8101031261005157519438610303565b503d61037a565b85513d85823e3d90fd5b6103c490853d87116103cb575b6103bc81836113da565b8101906113fc565b50386102a8565b503d6103b2565b87513d8a823e3d90fd5b6103fc9150833d8511610402575b6103f481836113da565b810190611626565b38610262565b503d6103ea565b88513d8b823e3d90fd5b5080fd5b509190346104135761043f61042b36611272565b999199979097969296959395421115611645565b61044c6002841015611690565b60001983018381116104b9576104639086146116db565b82156104a6576020898961034161049d8b8b8b8b8b8b610498856001600160a01b0361048e84611380565b1630903390611771565b6117cd565b92831015611726565b8060328b634e487b7160e01b6024945252fd5b60248260118d634e487b7160e01b835252fd5b509190346104135760603660031901126104135767ffffffffffffffff9083358281116106b85761050090369086016111bb565b93909260249081359081116101d65761051c90369088016111bb565b969095839561052e6002831015611690565b60001982018281116106a65761054d908a9493929a99969599146116db565b6044359861055a846119c2565b9885945b808610610577578851806105738d8d8361122e565b0390f35b9091929394959698506001600160a01b0361059b61059688848d61135a565b611380565b166105aa61059688878761135a565b60018801808911610694579161061f9b9c9d916105cc6105968d958a8a61135a565b9084519d8e94859384937f4fdd64e50000000000000000000000000000000000000000000000000000000085528d85016040919493929460608201956001600160a01b0380921683521660208201520152565b03915afa801561068a5787998891610657575b5061063d878d6119f4565b526106488996611335565b94939291909a9996959a61055e565b905061067a919950883d8a11610683575b61067281836113da565b8101906117b7565b98909838610632565b503d610668565b88513d89823e3d90fd5b848a60118a634e487b7160e01b835252fd5b8486601186634e487b7160e01b835252fd5b8380fd5b5050346104135781600319360112610413576001600160a01b0360209254169051908152f35b5090346101d657806003193601126101d657813567ffffffffffffffff81116106b85761071290369084016111bb565b92909161071d611202565b906107266112dd565b6001600160a01b0391821690865b86811061073f578780f35b86868561075061059685858561135a565b1685876107b0610596878951977f095ea7b300000000000000000000000000000000000000000000000000000000976107ab60209a8a8c8201526024988982015260449960008b8301528a82526107a6826113be565b611414565b61135a565b169286517fdd62ed3e000000000000000000000000000000000000000000000000000000008152308b820152888382015285818581885afa9081156108bf57600091610892575b5061082c5786519485015283018690526000198382015282526108279291610822916107a6826113be565b611335565b610734565b60848a7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f856036868a8d519562461bcd60e51b87528601528401528201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152fd5b908682813d83116108b8575b6108a881836113da565b8101031261035f575051386107f7565b503d61089e565b88513d6000823e3d90fd5b5090346101d6576108da36611272565b9560009a9794929995919a198101818111610a51576108fd61059682848961135a565b906001600160a01b03988992837f0000000000000000000000000000000000000000000000000000000000000000169a8b9116036109e8579061094561094c92421115611645565b85146116db565b81156109d5579185939161096b86610972979561048e61097b9a611380565b30946117cd565b95861015611726565b813b156101d65784602484928387519586948593632e1a7d4d60e01b85528401525af180156109cb576109b7575b505061034182602094611a08565b6109c18291611394565b61035f57806109a9565b83513d84823e3d90fd5b602489603289634e487b7160e01b835252fd5b60848960208e519162461bcd60e51b8352820152602860248201527f746865206c61737420616464726573732073686f756c6420626520777261707060448201527f656420746f6b656e0000000000000000000000000000000000000000000000006064820152fd5b602489601189634e487b7160e01b835252fd5b5090346101d65760c03660031901126101d657610a7f611218565b91610a88611202565b9360443593608435926001600160a01b03918285168503610051578216958286519863e9249cc760e01b8a52169283838a015260209889816024818c5afa908115610bfa578691610c04575b5087516323b872dd60e01b8152338582019081523060208201526040810185905290918b918391908290036060019082908a9087165af18015610bfa579160c4918b9493610bdd575b507f000000000000000000000000000000000000000000000000000000000000000016948689519a8b9485937f0f91f06f000000000000000000000000000000000000000000000000000000008552888501528860248501526044840152606435606484015230608484015260a43560a48401525af195861561039b57839661036c5750813b156101d65785602484928388519586948593632e1a7d4d60e01b85528401525af18015610362579085929161034757505061034191611a08565b610bf390853d87116103cb576103bc81836113da565b5038610b1d565b88513d88823e3d90fd5b610c1b91508a3d8c11610402576103f481836113da565b38610ad4565b833461035f578060031936011261035f57610c3a6112dd565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50919060a036600319011261041357610c9f611218565b604435936001600160a01b03808616809603610de35760843592831515809403610ddf57817f00000000000000000000000000000000000000000000000000000000000000001693843b15610ddb578551630d0e30db60e41b815287818681348a5af180156103d257610dbe575b5060c4926020959492889288519a8b9788967f6281baef00000000000000000000000000000000000000000000000000000000885287015234602487015260243560448701526064860152606435608486015260a4850152165af1918215610db35791610d7f575b6020925051908152f35b90506020823d8211610dab575b81610d99602093836113da565b81010312610051576020915190610d75565b3d9150610d8c565b9051903d90823e3d90fd5b92602095949297610dd060c495611394565b979294955092610d0d565b8680fd5b8580fd5b8480fd5b5090346101d65760603660031901126101d65767ffffffffffffffff92823584811161041357610e1a90369085016111bb565b91909460243590811161041357610e3490369086016111bb565b91948591610e456002861015611690565b60001994808601818111610fb157610e659086959493929a9796146116db565b60443595610e72856119c2565b998591825b610e89578951806105738e8e8361122e565b9091929394959680989a508301838111610f6d5789610ea9828a8861135a565b610eb290611380565b6001600160a01b0316610ec683868661135a565b610ecf90611380565b90610edb87878761135a565b610ee490611380565b83517ffca8f3080000000000000000000000000000000000000000000000000000000081526001600160a01b039384168b8201908152939091166020840152604083019e909e528d918290819060600103915afa908115610fa757879b8892610f80575b50610f53908d6119f4565b5289928015610f6d57880191908298979695949398610e77565b602487601188634e487b7160e01b835252fd5b610f539c50610f9d9192508b3d8d116106835761067281836113da565b9b909b9190610f48565b8a513d89823e3d90fd5b602485601186634e487b7160e01b835252fd5b505034610413578160031936011261041357602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b83858460a03660031901126104135767ffffffffffffffff9181358381116104135761103790369084016111bb565b90936024359081116101d65761105090369085016111bb565b93909261105b6111ec565b9783156111a85761106b87611380565b906001600160a01b0391827f000000000000000000000000000000000000000000000000000000000000000016928391160361114157506110b0426084351015611645565b600019840184811161112e576110c79087146116db565b803b15610413578190885193848092630d0e30db60e41b825234905af19081156111235750916111059593916020989593611114575b5034936117cd565b90610341604435831015611726565b61111d90611394565b886110fd565b8751903d90823e3d90fd5b602483601186634e487b7160e01b835252fd5b8060208562461bcd60e51b60849452820152602960248201527f74686520666972737420616464726573732073686f756c64206265207772617060448201527f70656420746f6b656e00000000000000000000000000000000000000000000006064820152fd5b506032602492634e487b7160e01b835252fd5b9181601f840112156100515782359167ffffffffffffffff8311610051576020808501948460051b01011161005157565b606435906001600160a01b038216820361005157565b602435906001600160a01b038216820361005157565b600435906001600160a01b038216820361005157565b9060609160408101918152602092816040858094015285518094520193019160005b82811061125e575050505090565b835185529381019392810192600101611250565b60c06003198201126100515767ffffffffffffffff91600435838111610051578261129f916004016111bb565b93909392602435918211610051576112b9916004016111bb565b909160443590606435906084356001600160a01b0381168103610051579060a43590565b6001600160a01b036000541633036112f157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146113445760010190565b634e487b7160e01b600052601160045260246000fd5b919081101561136a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036100515790565b67ffffffffffffffff81116113a857604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176113a857604052565b90601f8019910116810190811067ffffffffffffffff8211176113a857604052565b90816020910312610051575180151581036100515790565b6001600160a01b0316604051604081019181831067ffffffffffffffff8411176113a857611484926040526000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161147e611513565b91611553565b8051908161149157505050565b82806114a19383010191016113fc565b156114a95750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b3d1561154e573d9067ffffffffffffffff82116113a85760405191611542601f8201601f1916602001846113da565b82523d6000602084013e565b606090565b919290156115b45750815115611567575090565b3b156115705790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156115c75750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061160d575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506115ea565b9081602091031261005157516001600160a01b03811681036100515790565b1561164c57565b606460405162461bcd60e51b815260206004820152600760248201527f65787069726564000000000000000000000000000000000000000000000000006044820152fd5b1561169757565b606460405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f6b656e207061746800000000000000000000000000006044820152fd5b156116e257565b606460405162461bcd60e51b815260206004820152601160248201527f696e76616c696420706f6f6c20706174680000000000000000000000000000006044820152fd5b1561172d57565b606460405162461bcd60e51b815260206004820152601160248201527f616d6f756e744f757420746f6f206c6f770000000000000000000000000000006044820152fd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526117b5916107a66084836113da565b565b9190826040910312610051576020825192015190565b9592919093926000935b6000198401848111611344578510156118d9576001600160a01b0361180061059687878761135a565b169061181061059687898c61135a565b9060018701918288116113445760009361183161059661188a958c8f61135a565b60408051639908fc8b60e01b81526001600160a01b03948516600482015291909316602482015260448101939093526000606484015230608484015260001960a4840152909391928492849291839190829060c4820190565b03925af19182156118cf57906118ab92916000926118b1575b505094611335565b936117d7565b6118c79250803d106106835761067281836113da565b5038806118a3565b513d6000823e3d90fd5b93509590939160001981019281841161134457610596826119239261191d6105966001600160a01b036119146105968b60009a60409f61135a565b1698838961135a565b9561135a565b8551639908fc8b60e01b81526001600160a01b03938416600482015290831660248201526044810194909452600060648501529416608483015260001960a48301529092839160c49183915af190811561199e57600091611982575090565b61199a915060403d81116106835761067281836113da565b5090565b6040513d6000823e3d90fd5b67ffffffffffffffff81116113a85760051b60200190565b906119cc826119aa565b6119d960405191826113da565b82815280926119ea601f19916119aa565b0190602036910137565b805182101561136a5760209160051b010190565b604051602081019080821067ffffffffffffffff8311176113a8576000938493848094938194604052525af1611a3c611513565b5015611a4457565b606460405162461bcd60e51b815260206004820152601960248201527f5f736166655472616e736665724e6174697665206661696c73000000000000006044820152fdfea2646970667358221220633a2109b82b0aef6e9bc073190a88354dac1c31e81185fc0f134af7194120d064736f6c63430008120033",
  "deployedBytecode": "0x60806040818152600480361015610056575b505050361561001f57600080fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361005157005b600080fd5b600092833560e01c908163018ad00114611008575080632d68efc914610fc45780633226288e14610de75780636248fced14610c88578063715018a614610c215780637eeb195514610a6457806385335cc0146108ca5780638d8f82e6146106e25780638da5cb5b146106bc578063b9e598c1146104cc578063d44107a414610417578063f048d48f146101da5763f2fde38b0361001157346101d65760203660031901126101d657610107611218565b906101106112dd565b6001600160a01b0380921692831561016d5750506000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b509190346104135760a0366003190112610413576101f6611218565b926024356102026111ec565b916001600160a01b03809616867f0000000000000000000000000000000000000000000000000000000000000000169285519763e9249cc760e01b895284848a01526020988981602481875afa90811561040957918a918a9384916103dc575b5089516323b872dd60e01b8152338882019081523060208201526040810187905290948593849283906060010393165af180156103d2578992899695949260a4926103a5575b508851998a9384927f09a5fca300000000000000000000000000000000000000000000000000000000845288888501526024840152604435604484015230606484015260843560848401525af195861561039b57839661036c575b50813b156101d65785602484928388519586948593632e1a7d4d60e01b85528401525af180156103625790859291610347575b505061034191611a08565b51908152f35b81925061035390611394565b61035f57808491610336565b80fd5b84513d84823e3d90fd5b9095508681813d8311610394575b61038481836113da565b8101031261005157519438610303565b503d61037a565b85513d85823e3d90fd5b6103c490853d87116103cb575b6103bc81836113da565b8101906113fc565b50386102a8565b503d6103b2565b87513d8a823e3d90fd5b6103fc9150833d8511610402575b6103f481836113da565b810190611626565b38610262565b503d6103ea565b88513d8b823e3d90fd5b5080fd5b509190346104135761043f61042b36611272565b999199979097969296959395421115611645565b61044c6002841015611690565b60001983018381116104b9576104639086146116db565b82156104a6576020898961034161049d8b8b8b8b8b8b610498856001600160a01b0361048e84611380565b1630903390611771565b6117cd565b92831015611726565b8060328b634e487b7160e01b6024945252fd5b60248260118d634e487b7160e01b835252fd5b509190346104135760603660031901126104135767ffffffffffffffff9083358281116106b85761050090369086016111bb565b93909260249081359081116101d65761051c90369088016111bb565b969095839561052e6002831015611690565b60001982018281116106a65761054d908a9493929a99969599146116db565b6044359861055a846119c2565b9885945b808610610577578851806105738d8d8361122e565b0390f35b9091929394959698506001600160a01b0361059b61059688848d61135a565b611380565b166105aa61059688878761135a565b60018801808911610694579161061f9b9c9d916105cc6105968d958a8a61135a565b9084519d8e94859384937f4fdd64e50000000000000000000000000000000000000000000000000000000085528d85016040919493929460608201956001600160a01b0380921683521660208201520152565b03915afa801561068a5787998891610657575b5061063d878d6119f4565b526106488996611335565b94939291909a9996959a61055e565b905061067a919950883d8a11610683575b61067281836113da565b8101906117b7565b98909838610632565b503d610668565b88513d89823e3d90fd5b848a60118a634e487b7160e01b835252fd5b8486601186634e487b7160e01b835252fd5b8380fd5b5050346104135781600319360112610413576001600160a01b0360209254169051908152f35b5090346101d657806003193601126101d657813567ffffffffffffffff81116106b85761071290369084016111bb565b92909161071d611202565b906107266112dd565b6001600160a01b0391821690865b86811061073f578780f35b86868561075061059685858561135a565b1685876107b0610596878951977f095ea7b300000000000000000000000000000000000000000000000000000000976107ab60209a8a8c8201526024988982015260449960008b8301528a82526107a6826113be565b611414565b61135a565b169286517fdd62ed3e000000000000000000000000000000000000000000000000000000008152308b820152888382015285818581885afa9081156108bf57600091610892575b5061082c5786519485015283018690526000198382015282526108279291610822916107a6826113be565b611335565b610734565b60848a7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f856036868a8d519562461bcd60e51b87528601528401528201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152fd5b908682813d83116108b8575b6108a881836113da565b8101031261035f575051386107f7565b503d61089e565b88513d6000823e3d90fd5b5090346101d6576108da36611272565b9560009a9794929995919a198101818111610a51576108fd61059682848961135a565b906001600160a01b03988992837f0000000000000000000000000000000000000000000000000000000000000000169a8b9116036109e8579061094561094c92421115611645565b85146116db565b81156109d5579185939161096b86610972979561048e61097b9a611380565b30946117cd565b95861015611726565b813b156101d65784602484928387519586948593632e1a7d4d60e01b85528401525af180156109cb576109b7575b505061034182602094611a08565b6109c18291611394565b61035f57806109a9565b83513d84823e3d90fd5b602489603289634e487b7160e01b835252fd5b60848960208e519162461bcd60e51b8352820152602860248201527f746865206c61737420616464726573732073686f756c6420626520777261707060448201527f656420746f6b656e0000000000000000000000000000000000000000000000006064820152fd5b602489601189634e487b7160e01b835252fd5b5090346101d65760c03660031901126101d657610a7f611218565b91610a88611202565b9360443593608435926001600160a01b03918285168503610051578216958286519863e9249cc760e01b8a52169283838a015260209889816024818c5afa908115610bfa578691610c04575b5087516323b872dd60e01b8152338582019081523060208201526040810185905290918b918391908290036060019082908a9087165af18015610bfa579160c4918b9493610bdd575b507f000000000000000000000000000000000000000000000000000000000000000016948689519a8b9485937f0f91f06f000000000000000000000000000000000000000000000000000000008552888501528860248501526044840152606435606484015230608484015260a43560a48401525af195861561039b57839661036c5750813b156101d65785602484928388519586948593632e1a7d4d60e01b85528401525af18015610362579085929161034757505061034191611a08565b610bf390853d87116103cb576103bc81836113da565b5038610b1d565b88513d88823e3d90fd5b610c1b91508a3d8c11610402576103f481836113da565b38610ad4565b833461035f578060031936011261035f57610c3a6112dd565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50919060a036600319011261041357610c9f611218565b604435936001600160a01b03808616809603610de35760843592831515809403610ddf57817f00000000000000000000000000000000000000000000000000000000000000001693843b15610ddb578551630d0e30db60e41b815287818681348a5af180156103d257610dbe575b5060c4926020959492889288519a8b9788967f6281baef00000000000000000000000000000000000000000000000000000000885287015234602487015260243560448701526064860152606435608486015260a4850152165af1918215610db35791610d7f575b6020925051908152f35b90506020823d8211610dab575b81610d99602093836113da565b81010312610051576020915190610d75565b3d9150610d8c565b9051903d90823e3d90fd5b92602095949297610dd060c495611394565b979294955092610d0d565b8680fd5b8580fd5b8480fd5b5090346101d65760603660031901126101d65767ffffffffffffffff92823584811161041357610e1a90369085016111bb565b91909460243590811161041357610e3490369086016111bb565b91948591610e456002861015611690565b60001994808601818111610fb157610e659086959493929a9796146116db565b60443595610e72856119c2565b998591825b610e89578951806105738e8e8361122e565b9091929394959680989a508301838111610f6d5789610ea9828a8861135a565b610eb290611380565b6001600160a01b0316610ec683868661135a565b610ecf90611380565b90610edb87878761135a565b610ee490611380565b83517ffca8f3080000000000000000000000000000000000000000000000000000000081526001600160a01b039384168b8201908152939091166020840152604083019e909e528d918290819060600103915afa908115610fa757879b8892610f80575b50610f53908d6119f4565b5289928015610f6d57880191908298979695949398610e77565b602487601188634e487b7160e01b835252fd5b610f539c50610f9d9192508b3d8d116106835761067281836113da565b9b909b9190610f48565b8a513d89823e3d90fd5b602485601186634e487b7160e01b835252fd5b505034610413578160031936011261041357602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b83858460a03660031901126104135767ffffffffffffffff9181358381116104135761103790369084016111bb565b90936024359081116101d65761105090369085016111bb565b93909261105b6111ec565b9783156111a85761106b87611380565b906001600160a01b0391827f000000000000000000000000000000000000000000000000000000000000000016928391160361114157506110b0426084351015611645565b600019840184811161112e576110c79087146116db565b803b15610413578190885193848092630d0e30db60e41b825234905af19081156111235750916111059593916020989593611114575b5034936117cd565b90610341604435831015611726565b61111d90611394565b886110fd565b8751903d90823e3d90fd5b602483601186634e487b7160e01b835252fd5b8060208562461bcd60e51b60849452820152602960248201527f74686520666972737420616464726573732073686f756c64206265207772617060448201527f70656420746f6b656e00000000000000000000000000000000000000000000006064820152fd5b506032602492634e487b7160e01b835252fd5b9181601f840112156100515782359167ffffffffffffffff8311610051576020808501948460051b01011161005157565b606435906001600160a01b038216820361005157565b602435906001600160a01b038216820361005157565b600435906001600160a01b038216820361005157565b9060609160408101918152602092816040858094015285518094520193019160005b82811061125e575050505090565b835185529381019392810192600101611250565b60c06003198201126100515767ffffffffffffffff91600435838111610051578261129f916004016111bb565b93909392602435918211610051576112b9916004016111bb565b909160443590606435906084356001600160a01b0381168103610051579060a43590565b6001600160a01b036000541633036112f157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60001981146113445760010190565b634e487b7160e01b600052601160045260246000fd5b919081101561136a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036100515790565b67ffffffffffffffff81116113a857604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176113a857604052565b90601f8019910116810190811067ffffffffffffffff8211176113a857604052565b90816020910312610051575180151581036100515790565b6001600160a01b0316604051604081019181831067ffffffffffffffff8411176113a857611484926040526000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161147e611513565b91611553565b8051908161149157505050565b82806114a19383010191016113fc565b156114a95750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b3d1561154e573d9067ffffffffffffffff82116113a85760405191611542601f8201601f1916602001846113da565b82523d6000602084013e565b606090565b919290156115b45750815115611567575090565b3b156115705790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156115c75750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061160d575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506115ea565b9081602091031261005157516001600160a01b03811681036100515790565b1561164c57565b606460405162461bcd60e51b815260206004820152600760248201527f65787069726564000000000000000000000000000000000000000000000000006044820152fd5b1561169757565b606460405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f6b656e207061746800000000000000000000000000006044820152fd5b156116e257565b606460405162461bcd60e51b815260206004820152601160248201527f696e76616c696420706f6f6c20706174680000000000000000000000000000006044820152fd5b1561172d57565b606460405162461bcd60e51b815260206004820152601160248201527f616d6f756e744f757420746f6f206c6f770000000000000000000000000000006044820152fd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526117b5916107a66084836113da565b565b9190826040910312610051576020825192015190565b9592919093926000935b6000198401848111611344578510156118d9576001600160a01b0361180061059687878761135a565b169061181061059687898c61135a565b9060018701918288116113445760009361183161059661188a958c8f61135a565b60408051639908fc8b60e01b81526001600160a01b03948516600482015291909316602482015260448101939093526000606484015230608484015260001960a4840152909391928492849291839190829060c4820190565b03925af19182156118cf57906118ab92916000926118b1575b505094611335565b936117d7565b6118c79250803d106106835761067281836113da565b5038806118a3565b513d6000823e3d90fd5b93509590939160001981019281841161134457610596826119239261191d6105966001600160a01b036119146105968b60009a60409f61135a565b1698838961135a565b9561135a565b8551639908fc8b60e01b81526001600160a01b03938416600482015290831660248201526044810194909452600060648501529416608483015260001960a48301529092839160c49183915af190811561199e57600091611982575090565b61199a915060403d81116106835761067281836113da565b5090565b6040513d6000823e3d90fd5b67ffffffffffffffff81116113a85760051b60200190565b906119cc826119aa565b6119d960405191826113da565b82815280926119ea601f19916119aa565b0190602036910137565b805182101561136a5760209160051b010190565b604051602081019080821067ffffffffffffffff8311176113a8576000938493848094938194604052525af1611a3c611513565b5015611a4457565b606460405162461bcd60e51b815260206004820152601960248201527f5f736166655472616e736665724e6174697665206661696c73000000000000006044820152fdfea2646970667358221220633a2109b82b0aef6e9bc073190a88354dac1c31e81185fc0f134af7194120d064736f6c63430008120033",
  "devdoc": {
    "details": "Owner is allowed and required to approve token spending by pools via approveSpendingByPool function. With great thanks to the uniswap team for your contribution to the opensource community reference: https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol",
    "kind": "dev",
    "methods": {
      "approveSpendingByPool(address[],address)": {
        "details": "needs to be done after asset deployment for router to be able to support the tokens",
        "params": {
          "pool": "to be approved to spend",
          "tokens": "array of tokens to be approved"
        }
      },
      "getAmountIn(address[],address[],uint256)": {
        "params": {
          "amountOut": "The to amount",
          "poolPath": "The token pool path",
          "tokenPath": "The token swap path"
        },
        "returns": {
          "amountIn": "The potential final amount user would receive"
        }
      },
      "getAmountOut(address[],address[],int256)": {
        "params": {
          "amountIn": "The from amount",
          "poolPath": "The token pool path",
          "tokenPath": "The token swap path"
        },
        "returns": {
          "amountOut": "The potential final amount user would receive"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)": {
        "params": {
          "amountIn": "the amount in",
          "deadline": "the deadline to respect",
          "minimumamountOut": "the minimum amount to get for user",
          "poolPath": "An array of pool addresses. The pools where the pathTokens are contained in order.",
          "to": "the user to send the tokens to",
          "tokenPath": "The first element of the path is the input token, the last element is the output token."
        },
        "returns": {
          "amountOut": "received by user"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "WombatRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveSpendingByPool(address[],address)": {
        "notice": "approve spending of router tokens by pool"
      },
      "getAmountIn(address[],address[],uint256)": {
        "notice": "Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees and slippage) Note: This function should be used as estimation only. The actual swap amount might be different due to precision error (the error is typically under 1e-6)"
      },
      "getAmountOut(address[],address[],int256)": {
        "notice": "Given an input asset amount and an array of token addresses, calculates the maximum output token amount (accounting for fees and slippage)."
      },
      "swapExactTokensForTokens(address[],address[],uint256,uint256,address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path"
      }
    },
    "notice": "Allows routing on different wombat pools",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1419,
        "contract": "contracts/wombat-core/libraries/WombatRouter.sol:WombatRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}