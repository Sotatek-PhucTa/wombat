{
  "address": "0x51AbD2A24d225C80108252fb73AEd819f1Ef52Bd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDeprecated",
          "type": "bool"
        }
      ],
      "name": "IsDeprecatedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "newStartTime",
          "type": "uint40"
        }
      ],
      "name": "StartTimeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_TOKEN_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REWARD_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_OPERATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "_startTimestampOrNow",
          "type": "uint40"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bribeFactory",
      "outputs": [
        {
          "internalType": "contract IBribeRewarderFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyClaimReward",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergencyTokenWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBribeRewarderFactory",
          "name": "_bribeFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_master",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEmissionActive",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "isActive_",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "master",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onReward",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newVote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_originalTotalVotes",
          "type": "uint256"
        }
      ],
      "name": "onVote",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokens",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "rewardInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "tokenPerSec",
              "type": "uint96"
            },
            {
              "internalType": "uint128",
              "name": "accTokenPerShare",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "distributedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "claimedAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastRewardTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct MultiRewarderPerSecV2.RewardInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardInfos",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tokenPerSec",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "accTokenPerShare",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "distributedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "claimedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint40",
          "name": "lastRewardTimestamp",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenSurpluses",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "surpluses_",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToDistribute",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "runoutTimestamps",
      "outputs": [
        {
          "internalType": "uint40[]",
          "name": "timestamps_",
          "type": "uint40[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isDeprecated",
          "type": "bool"
        }
      ],
      "name": "setIsDeprecated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_tokenPerSec",
          "type": "uint96"
        },
        {
          "internalType": "uint40",
          "name": "_startTimestampToOverride",
          "type": "uint40"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalanceInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "rewardDebt",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "unpaidRewards",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5e3d30580a7a474bc2ef6e81b845226cb77d6c59ceada8f93305984c7f4a196c",
  "receipt": {
    "to": null,
    "from": "0xcB3Bb767104e0b3235520fafB182e005D7efD045",
    "contractAddress": "0x51AbD2A24d225C80108252fb73AEd819f1Ef52Bd",
    "transactionIndex": 3,
    "gasUsed": "3167035",
    "logsBloom": "0x
    "blockHash": "0xfc216ba75287ee9eed161f752e1f287e8ef9c436220209cfc571a2d80228e97a",
    "transactionHash": "0x5e3d30580a7a474bc2ef6e81b845226cb77d6c59ceada8f93305984c7f4a196c",
    "logs": [],
    "blockNumber": 112297247,
    "cumulativeGasUsed": "4572495",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5aa0658b19e47c08420cb7184d9dedb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"}],\"name\":\"IsDeprecatedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"newStartTime\",\"type\":\"uint40\"}],\"name\":\"StartTimeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_TOKEN_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_OPERATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"_startTimestampOrNow\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFactory\",\"outputs\":[{\"internalType\":\"contract IBribeRewarderFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyClaimReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBribeRewarderFactory\",\"name\":\"_bribeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmissionActive\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isActive_\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_originalTotalVotes\",\"type\":\"uint256\"}],\"name\":\"onVote\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"rewardInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenPerSec\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"accTokenPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"distributedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct MultiRewarderPerSecV2.RewardInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardInfos\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenPerSec\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"accTokenPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"distributedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenSurpluses\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"surpluses_\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToDistribute\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runoutTimestamps\",\"outputs\":[{\"internalType\":\"uint40[]\",\"name\":\"timestamps_\",\"type\":\"uint40[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDeprecated\",\"type\":\"bool\"}],\"name\":\"setIsDeprecated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_tokenPerSec\",\"type\":\"uint96\"},{\"internalType\":\"uint40\",\"name\":\"_startTimestampToOverride\",\"type\":\"uint40\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalanceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unpaidRewards\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"emergencyTokenWithdraw(address)\":{\"details\":\"only to be called by owner\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"rewardTokenSurpluses()\":{\"returns\":{\"surpluses_\":\"surpluses of the reward tokens.\"}},\"setRewardRate(uint256,uint96,uint40)\":{\"params\":{\"_startTimestampToOverride\":\"the start time for the token emission.        A value of 0 indicates no changes, while a future timestamp starts the emission at the specified time.\",\"_tokenId\":\"The token id\",\"_tokenPerSec\":\"The number of tokens to distribute per second\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balances()\":{\"notice\":\"View function to see balances of reward token.\"},\"emergencyTokenWithdraw(address)\":{\"notice\":\"avoids loosing funds in case there is any tokens sent to this contract the reward token will not be stopped and keep accumulating debts\"},\"emergencyWithdraw()\":{\"notice\":\"In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens. there will be deficit which is equal to the unclaimed amount\"},\"initialize(address,address,address,uint256,address,uint96)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"lpToken()\":{\"notice\":\"Visualization of the relationship between distributedAmount, claimedAmount, rewardToDistribute, availableReward, surplus and balance: Case: emission is active. rewardToDistribute is growing at the rate of tokenPerSec. |<--------------distributedAmount------------->|<--rewardToDistribute*-->| |<-----claimedAmount----->|<-------------------------balance------------------------->|                                                |<-----------availableReward*--------->|                           |<-unclaimedAmount*->|                         |<-surplus*->| Case: reward running out. rewardToDistribute stopped growing. it is capped at availableReward. |<--------------distributedAmount------------->|<---------rewardToDistribute*-------->| |<-----claimedAmount----->|<-------------------------balance------------------------->|                                                |<-----------availableReward*--------->|                           |<-unclaimedAmount*->|                                       surplus* = 0 Case: balance emptied after emergencyWithdraw. |<--------------distributedAmount------------->| rewardToDistribute* = 0 |<-----claimedAmount----->|                      balance = 0, availableReward* = 0                           |<-unclaimedAmount*->| surplus* = - unclaimedAmount* (negative to indicate deficit) (Variables with * are not in the RewardInfo state, but can be derived from it.) balance, is the amount of reward token in this contract. Not all of them are available for distribution as some are reserved for unclaimed rewards. distributedAmount, is the amount of reward token that has been distributed up to lastRewardTimestamp. claimedAmount, is the amount of reward token that has been claimed by users. claimedAmount always <= distributedAmount. unclaimedAmount = distributedAmount - claimedAmount, is the amount of reward token in balance that is reserved to be claimed by users. availableReward = balance - unclaimedAmount, is the amount inside balance that is available for distribution (not reserved for unclaimed rewards). rewardToDistribute is the accumulated reward from [lastRewardTimestamp, now] that is yet to be distributed. as distributedAmount only accounts for the distributed amount up to lastRewardTimestamp. it is used in _updateReward(), and to be added to distributedAmount. to prevent bad debt, rewardToDistribute is capped at availableReward. as we cannot distribute more than the availableReward. rewardToDistribute = min(tokenPerSec * (now - lastRewardTimestamp), availableReward) surplus = availableReward - rewardToDistribute, is the amount inside balance that is available for future distribution.\"},\"rewardInfo(uint256)\":{\"notice\":\"View function to preserve backward compatibility, as the previous version uses rewardInfo instead of rewardInfos\"},\"rewardInfos(uint256)\":{\"notice\":\"Info of the reward tokens.\"},\"rewardTokenSurpluses()\":{\"notice\":\"View function to see surplus of each reward, i.e. reward balance - unclaimed amount it would be negative if there's bad debt/deficit, which would happend only if some token was emergencyWithdrawn.\"},\"rewardsToDistribute()\":{\"notice\":\"the amount of reward accumulated since the lastRewardTimestamp and is to be distributed. the case that lastRewardTimestamp is in the future is also handled\"},\"runoutTimestamps()\":{\"notice\":\"View function to see the timestamp when the reward will runout based on current emission rate and balance left. a timestamp of 0 indicates that the token is not emitting or already run out. also works for the case that emission start time (lastRewardTimestamp) is in the future.\"},\"setRewardRate(uint256,uint96,uint40)\":{\"notice\":\"Sets the distribution reward rate, and updates the emission start time if specified.\"},\"userBalanceInfo(address)\":{\"notice\":\"userAddr => UserBalanceInfo\"},\"userRewardInfo(uint256,address)\":{\"notice\":\"tokenId => userId => UserRewardInfo\"}},\"notice\":\"Simple bribe per sec. Distribute bribe rewards to voters Bribe.onVote->updateReward() is a bit different from SimpleRewarder. Here we reduce the original total amount of share\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/gauge/BribeV2.sol\":\"BribeV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/wombat-governance/gauge/BribeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/IBribeRewarderFactory.sol';\\nimport '../interfaces/IBribe.sol';\\nimport '../interfaces/IVoter.sol';\\nimport '../rewarders/MultiRewarderPerSecV2.sol';\\n\\n/**\\n * Simple bribe per sec. Distribute bribe rewards to voters\\n * Bribe.onVote->updateReward() is a bit different from SimpleRewarder.\\n * Here we reduce the original total amount of share\\n */\\ncontract BribeV2 is IBribe, MultiRewarderPerSecV2 {\\n    using SafeERC20 for IERC20;\\n\\n    function onVote(\\n        address _user,\\n        uint256 _newVote,\\n        uint256 _originalTotalVotes\\n    ) external override onlyMaster nonReentrant returns (uint256[] memory rewards) {\\n        _updateReward(_originalTotalVotes);\\n        return _onReward(_user, _newVote);\\n    }\\n\\n    function onReward(address, uint256) external override onlyMaster nonReentrant returns (uint256[] memory) {\\n        revert('Call BribeV2.onVote instead');\\n    }\\n\\n    function _getTotalShare() internal view override returns (uint256 voteWeight) {\\n        (, voteWeight) = IVoter(master).weights(lpToken);\\n    }\\n\\n    function rewardLength() public view override(IBribe, MultiRewarderPerSecV2) returns (uint256) {\\n        return MultiRewarderPerSecV2.rewardLength();\\n    }\\n\\n    function rewardTokens() public view override(IBribe, MultiRewarderPerSecV2) returns (IERC20[] memory tokens) {\\n        return MultiRewarderPerSecV2.rewardTokens();\\n    }\\n\\n    function pendingTokens(\\n        address _user\\n    ) public view override(IBribe, MultiRewarderPerSecV2) returns (uint256[] memory tokens) {\\n        return MultiRewarderPerSecV2.pendingTokens(_user);\\n    }\\n}\\n\",\"keccak256\":\"0x9efca2e1a122c29cf272e2b946108bb1533d1d53856cad3df70c2224391a51e2\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4e608dfd8e58a597cee1864154092b199ceb623aad70eb62887275d124b1e6f\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IBribeRewarderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBribeRewarderFactory {\\n    function isRewardTokenWhitelisted(IERC20 _token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6d54ecd2f6b07a0697828d567990c0abcfbd649e56fc0bdf7de7b2a09fbac132\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IMultiRewarderV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMultiRewarderV2 {\\n    function lpToken() external view returns (IERC20 lpToken);\\n\\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\\n\\n    function addRewardToken(IERC20 _rewardToken, uint40 _startTimestamp, uint96 _tokenPerSec) external;\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7cea6d4dbc9502e3050fae2e4449ce5869ecaf31cecf85a93b0b8320faa2fe74\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './IBribe.sol';\\n\\ninterface IGauge {\\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IVoter {\\n    struct GaugeWeight {\\n        uint128 allocPoint;\\n        uint128 voteWeight; // total amount of votes for an LP-token\\n    }\\n\\n    function infos(\\n        IERC20 _lpToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint104 supplyBaseIndex,\\n            uint104 supplyVoteIndex,\\n            uint40 nextEpochStartTime,\\n            uint128 claimable,\\n            bool whitelist,\\n            IGauge gaugeManager,\\n            IBribe bribe\\n        );\\n\\n    // lpToken => weight, equals to sum of votes for a LP token\\n    function weights(IERC20 _lpToken) external view returns (uint128 allocPoint, uint128 voteWeight);\\n\\n    // user address => lpToken => votes\\n    function votes(address _user, IERC20 _lpToken) external view returns (uint256);\\n\\n    function setBribe(IERC20 _lpToken, IBribe _bribe) external;\\n\\n    function distribute(IERC20 _lpToken) external;\\n}\\n\",\"keccak256\":\"0x7a5e4cd7b77da9d8882bb0b1676db2b1ccce674f2a69df950ca866621cebe9be\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/rewarders/MultiRewarderPerSecV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/IBribeRewarderFactory.sol';\\nimport '../interfaces/IMultiRewarderV2.sol';\\n\\n/**\\n * This is a sample contract to be used in the Master contract for partners to reward\\n * stakers with their native token alongside WOM.\\n *\\n * It assumes no minting rights, so requires a set amount of reward tokens to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the WOM-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n *\\n * - This contract has no knowledge on the LP amount and Master is\\n *   responsible to pass the amount into this contract\\n * - Supports multiple reward tokens\\n * - Supports bribe rewarder factory\\n */\\ncontract MultiRewarderPerSecV2 is\\n    IMultiRewarderV2,\\n    Initializable,\\n    OwnableUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant ROLE_OPERATOR = keccak256('operator');\\n    uint256 public constant ACC_TOKEN_PRECISION = 1e18;\\n    uint256 public constant MAX_REWARD_TOKENS = 10;\\n\\n    struct UserBalanceInfo {\\n        uint256 amount;\\n    }\\n\\n    struct UserRewardInfo {\\n        // if the pool is activated, rewardDebt should be > 0\\n        uint128 rewardDebt; // 20.18 fixed point. distributed reward per weight\\n        uint128 unpaidRewards; // 20.18 fixed point.\\n    }\\n\\n    /// @notice Info of each reward token.\\n    struct RewardInfo {\\n        /// slot\\n        IERC20 rewardToken; // if rewardToken is 0, native token is used as reward token\\n        uint96 tokenPerSec; // 10.18 fixed point. The emission rate in tokens per second.\\n        // This rate may not reflect the current rate in cases where emission has not started or has stopped due to surplus <= 0.\\n\\n        /// slot\\n        uint128 accTokenPerShare; // 26.12 fixed point. Amount of reward token each LP token is worth.\\n        // This value increases when rewards are being distributed.\\n        uint128 distributedAmount; // 20.18 fixed point, depending on the decimals of the reward token. This value is used to\\n        // track the amount of distributed tokens. If `distributedAmount` is closed to the amount of total received\\n        // tokens, we should refill reward or prepare to stop distributing reward.\\n\\n        /// slot\\n        uint128 claimedAmount; // 20.18 fixed point. Total amount claimed by all users.\\n        // We can derive the unclaimed amount: distributedAmount - claimedAmount\\n        uint40 lastRewardTimestamp; // The timestamp up to which rewards have already been distributed.\\n        // If set to a future value, it indicates that the emission has not started yet.\\n    }\\n\\n    /**\\n     * Visualization of the relationship between distributedAmount, claimedAmount, rewardToDistribute, availableReward, surplus and balance:\\n     *\\n     * Case: emission is active. rewardToDistribute is growing at the rate of tokenPerSec.\\n     * |<--------------distributedAmount------------->|<--rewardToDistribute*-->|\\n     * |<-----claimedAmount----->|<-------------------------balance------------------------->|\\n     *                                                |<-----------availableReward*--------->|\\n     *                           |<-unclaimedAmount*->|                         |<-surplus*->|\\n     *\\n     * Case: reward running out. rewardToDistribute stopped growing. it is capped at availableReward.\\n     * |<--------------distributedAmount------------->|<---------rewardToDistribute*-------->|\\n     * |<-----claimedAmount----->|<-------------------------balance------------------------->|\\n     *                                                |<-----------availableReward*--------->|\\n     *                           |<-unclaimedAmount*->|                                       surplus* = 0\\n     *\\n     * Case: balance emptied after emergencyWithdraw.\\n     * |<--------------distributedAmount------------->| rewardToDistribute* = 0\\n     * |<-----claimedAmount----->|                      balance = 0, availableReward* = 0\\n     *                           |<-unclaimedAmount*->| surplus* = - unclaimedAmount* (negative to indicate deficit)\\n     *\\n     * (Variables with * are not in the RewardInfo state, but can be derived from it.)\\n     *\\n     * balance, is the amount of reward token in this contract. Not all of them are available for distribution as some are reserved\\n     * for unclaimed rewards.\\n     * distributedAmount, is the amount of reward token that has been distributed up to lastRewardTimestamp.\\n     * claimedAmount, is the amount of reward token that has been claimed by users. claimedAmount always <= distributedAmount.\\n     * unclaimedAmount = distributedAmount - claimedAmount, is the amount of reward token in balance that is reserved to be claimed by users.\\n     * availableReward = balance - unclaimedAmount, is the amount inside balance that is available for distribution (not reserved for\\n     * unclaimed rewards).\\n     * rewardToDistribute is the accumulated reward from [lastRewardTimestamp, now] that is yet to be distributed. as distributedAmount only\\n     * accounts for the distributed amount up to lastRewardTimestamp. it is used in _updateReward(), and to be added to distributedAmount.\\n     * to prevent bad debt, rewardToDistribute is capped at availableReward. as we cannot distribute more than the availableReward.\\n     * rewardToDistribute = min(tokenPerSec * (now - lastRewardTimestamp), availableReward)\\n     * surplus = availableReward - rewardToDistribute, is the amount inside balance that is available for future distribution.\\n     */\\n\\n    IERC20 public lpToken;\\n    address public master;\\n\\n    /// @notice Info of the reward tokens.\\n    RewardInfo[] public rewardInfos;\\n    /// @notice userAddr => UserBalanceInfo\\n    mapping(address => UserBalanceInfo) public userBalanceInfo;\\n    /// @notice tokenId => userId => UserRewardInfo\\n    mapping(uint256 => mapping(address => UserRewardInfo)) public userRewardInfo;\\n\\n    IBribeRewarderFactory public bribeFactory;\\n    bool public isDeprecated;\\n\\n    event OnReward(address indexed rewardToken, address indexed user, uint256 amount);\\n    event RewardRateUpdated(address indexed rewardToken, uint256 oldRate, uint256 newRate);\\n    event StartTimeUpdated(address indexed rewardToken, uint40 newStartTime);\\n    event IsDeprecatedUpdated(bool isDeprecated);\\n\\n    modifier onlyMaster() {\\n        require(msg.sender == address(master), 'onlyMaster: only Master can call this function');\\n        _;\\n    }\\n\\n    /// @notice payable function needed to receive BNB\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     */\\n    function initialize(\\n        IBribeRewarderFactory _bribeFactory,\\n        address _master,\\n        IERC20 _lpToken,\\n        uint256 _startTimestamp,\\n        IERC20 _rewardToken,\\n        uint96 _tokenPerSec\\n    ) public virtual initializer {\\n        require(\\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\\n            'constructor: reward token must be a valid contract'\\n        );\\n        require(Address.isContract(address(_lpToken)), 'constructor: LP token must be a valid contract');\\n        require(Address.isContract(address(_master)), 'constructor: Master must be a valid contract');\\n        require(_startTimestamp >= block.timestamp, 'constructor: invalid _startTimestamp');\\n\\n        __Ownable_init();\\n        __AccessControlEnumerable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        bribeFactory = _bribeFactory; // bribeFactory can be 0 address\\n        master = _master;\\n        lpToken = _lpToken;\\n\\n        // use non-zero amount for accTokenPerShare as we want to check if user\\n        // has activated the pool by checking rewardDebt > 0\\n        RewardInfo memory reward = RewardInfo({\\n            rewardToken: _rewardToken,\\n            tokenPerSec: _tokenPerSec,\\n            accTokenPerShare: 1e18,\\n            distributedAmount: 0,\\n            claimedAmount: 0,\\n            lastRewardTimestamp: uint40(_startTimestamp)\\n        });\\n        emit RewardRateUpdated(address(reward.rewardToken), 0, _tokenPerSec);\\n        emit StartTimeUpdated(address(reward.rewardToken), uint40(_startTimestamp));\\n        rewardInfos.push(reward);\\n    }\\n\\n    function addOperator(address _operator) external onlyOwner {\\n        _grantRole(ROLE_OPERATOR, _operator);\\n    }\\n\\n    function removeOperator(address _operator) external onlyOwner {\\n        _revokeRole(ROLE_OPERATOR, _operator);\\n    }\\n\\n    function setIsDeprecated(bool _isDeprecated) external onlyOwner {\\n        isDeprecated = _isDeprecated;\\n        emit IsDeprecatedUpdated(_isDeprecated);\\n    }\\n\\n    function addRewardToken(IERC20 _rewardToken, uint40 _startTimestampOrNow, uint96 _tokenPerSec) external virtual {\\n        require(hasRole(ROLE_OPERATOR, msg.sender) || msg.sender == owner(), 'not authorized');\\n        // Check `bribeFactory.isRewardTokenWhitelisted` if needed\\n        require(\\n            address(bribeFactory) == address(0) || bribeFactory.isRewardTokenWhitelisted(_rewardToken),\\n            'reward token must be whitelisted by bribe factory'\\n        );\\n\\n        _addRewardToken(_rewardToken, _startTimestampOrNow, _tokenPerSec);\\n    }\\n\\n    function _addRewardToken(IERC20 _rewardToken, uint40 _startTimestampOrNow, uint96 _tokenPerSec) internal {\\n        require(\\n            Address.isContract(address(_rewardToken)) || address(_rewardToken) == address(0),\\n            'reward token must be a valid contract'\\n        );\\n        require(_startTimestampOrNow == 0 || _startTimestampOrNow >= block.timestamp, 'invalid _startTimestamp');\\n        uint256 length = rewardInfos.length;\\n        require(length < MAX_REWARD_TOKENS, 'reward token length exceeded');\\n        for (uint256 i; i < length; ++i) {\\n            require(rewardInfos[i].rewardToken != _rewardToken, 'token has already been added');\\n        }\\n        _updateReward();\\n        uint40 startTimestamp = _startTimestampOrNow == 0 ? uint40(block.timestamp) : _startTimestampOrNow;\\n        // use non-zero amount for accTokenPerShare as we want to check if user\\n        // has activated the pool by checking rewardDebt > 0\\n        RewardInfo memory reward = RewardInfo({\\n            rewardToken: _rewardToken,\\n            tokenPerSec: _tokenPerSec,\\n            accTokenPerShare: 1e18,\\n            distributedAmount: 0,\\n            claimedAmount: 0,\\n            lastRewardTimestamp: startTimestamp\\n        });\\n        rewardInfos.push(reward);\\n        emit StartTimeUpdated(address(reward.rewardToken), startTimestamp);\\n        emit RewardRateUpdated(address(reward.rewardToken), 0, _tokenPerSec);\\n    }\\n\\n    function updateReward() public {\\n        _updateReward();\\n    }\\n\\n    /// @dev This function should be called before lpSupply and sumOfFactors update\\n    function _updateReward() internal {\\n        _updateReward(_getTotalShare());\\n    }\\n\\n    function _updateReward(uint256 totalShare) internal {\\n        uint256 length = rewardInfos.length;\\n        uint256[] memory toDistribute = rewardsToDistribute();\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage info = rewardInfos[i];\\n            uint256 rewardToDistribute = toDistribute[i];\\n            if (rewardToDistribute > 0) {\\n                // use `max(totalShare, 1e18)` in case of overflow\\n                info.accTokenPerShare += toUint128((rewardToDistribute * ACC_TOKEN_PRECISION) / max(totalShare, 1e18));\\n                info.distributedAmount += toUint128(rewardToDistribute);\\n            }\\n            // update lastRewardTimestamp even if no reward is distributed.\\n            if (info.lastRewardTimestamp < block.timestamp) {\\n                // but don't update if info.lastRewardTimestamp is set in the future,\\n                // otherwise we would be starting the emission earlier than it's supposed to.\\n                info.lastRewardTimestamp = uint40(block.timestamp);\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets the distribution reward rate, and updates the emission start time if specified.\\n    /// @param _tokenId The token id\\n    /// @param _tokenPerSec The number of tokens to distribute per second\\n    /// @param _startTimestampToOverride the start time for the token emission.\\n    ///        A value of 0 indicates no changes, while a future timestamp starts the emission at the specified time.\\n    function setRewardRate(uint256 _tokenId, uint96 _tokenPerSec, uint40 _startTimestampToOverride) external {\\n        require(hasRole(ROLE_OPERATOR, msg.sender) || msg.sender == owner(), 'not authorized');\\n        require(_tokenId < rewardInfos.length, 'invalid _tokenId');\\n        require(\\n            _startTimestampToOverride == 0 || _startTimestampToOverride >= block.timestamp,\\n            'invalid _startTimestampToOverride'\\n        );\\n        require(_tokenPerSec <= 10000e18, 'reward rate too high'); // in case of accTokenPerShare overflow\\n        _updateReward();\\n        RewardInfo storage info = rewardInfos[_tokenId];\\n        uint256 oldRate = info.tokenPerSec;\\n        info.tokenPerSec = _tokenPerSec;\\n        if (_startTimestampToOverride > 0) {\\n            info.lastRewardTimestamp = _startTimestampToOverride;\\n            emit StartTimeUpdated(address(info.rewardToken), _startTimestampToOverride);\\n        }\\n        emit RewardRateUpdated(address(rewardInfos[_tokenId].rewardToken), oldRate, _tokenPerSec);\\n    }\\n\\n    /// @notice Function called by Master whenever staker claims WOM harvest.\\n    /// @notice Allows staker to also receive a 2nd reward token.\\n    /// @dev Assume `_getTotalShare` isn't updated yet when this function is called\\n    /// @param _user Address of user\\n    /// @param _lpAmount The new amount of LP\\n    function onReward(\\n        address _user,\\n        uint256 _lpAmount\\n    ) external virtual override onlyMaster nonReentrant returns (uint256[] memory rewards) {\\n        _updateReward();\\n        return _onReward(_user, _lpAmount);\\n    }\\n\\n    function _onReward(address _user, uint256 _lpAmount) internal virtual returns (uint256[] memory rewards) {\\n        uint256 length = rewardInfos.length;\\n        rewards = new uint256[](length);\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage info = rewardInfos[i];\\n            UserRewardInfo storage user = userRewardInfo[i][_user];\\n            IERC20 rewardToken = info.rewardToken;\\n\\n            if (user.rewardDebt > 0 || user.unpaidRewards > 0) {\\n                // rewardDebt > 0 indicates the user has activated the pool and we should distribute rewards\\n                uint256 pending = ((userBalanceInfo[_user].amount * uint256(info.accTokenPerShare)) /\\n                    ACC_TOKEN_PRECISION) +\\n                    user.unpaidRewards -\\n                    user.rewardDebt;\\n\\n                if (address(rewardToken) == address(0)) {\\n                    // is native token\\n                    uint256 tokenBalance = address(this).balance;\\n                    if (pending > tokenBalance) {\\n                        // Note: this line may fail if the receiver is a contract and refuse to receive BNB\\n                        (bool success, ) = _user.call{value: tokenBalance}('');\\n                        require(success, 'Transfer failed');\\n                        rewards[i] = tokenBalance;\\n                        info.claimedAmount += toUint128(tokenBalance);\\n                        user.unpaidRewards = toUint128(pending - tokenBalance);\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}('');\\n                        require(success, 'Transfer failed');\\n                        rewards[i] = pending;\\n                        info.claimedAmount += toUint128(pending);\\n                        user.unpaidRewards = 0;\\n                    }\\n                } else {\\n                    // ERC20 token\\n                    uint256 tokenBalance = rewardToken.balanceOf(address(this));\\n                    if (pending > tokenBalance) {\\n                        rewardToken.safeTransfer(_user, tokenBalance);\\n                        rewards[i] = tokenBalance;\\n                        info.claimedAmount += toUint128(tokenBalance);\\n                        user.unpaidRewards = toUint128(pending - tokenBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                        rewards[i] = pending;\\n                        info.claimedAmount += toUint128(pending);\\n                        user.unpaidRewards = 0;\\n                    }\\n                }\\n            }\\n\\n            user.rewardDebt = toUint128((_lpAmount * info.accTokenPerShare) / ACC_TOKEN_PRECISION);\\n            emit OnReward(address(rewardToken), _user, rewards[i]);\\n        }\\n        userBalanceInfo[_user].amount = toUint128(_lpAmount);\\n    }\\n\\n    function emergencyClaimReward() external nonReentrant returns (uint256[] memory rewards) {\\n        _updateReward();\\n        require(isDeprecated, 'rewarder / bribe is not deprecated');\\n        return _onReward(msg.sender, 0);\\n    }\\n\\n    /// @notice returns reward length\\n    function rewardLength() public view virtual override returns (uint256) {\\n        return rewardInfos.length;\\n    }\\n\\n    /// @notice View function to see pending tokens that have been distributed but not claimed by the user yet.\\n    /// @param _user Address of user.\\n    /// @return rewards_ reward for a given user.\\n    function pendingTokens(address _user) public view virtual override returns (uint256[] memory rewards_) {\\n        uint256 length = rewardInfos.length;\\n        rewards_ = new uint256[](length);\\n\\n        uint256[] memory toDistribute = rewardsToDistribute();\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory info = rewardInfos[i];\\n            UserRewardInfo storage user = userRewardInfo[i][_user];\\n\\n            uint256 accTokenPerShare = info.accTokenPerShare;\\n            uint256 totalShare = _getTotalShare();\\n            if (totalShare > 0) {\\n                uint256 rewardToDistribute = toDistribute[i];\\n                // use `max(totalShare, 1e18)` in case of overflow\\n                accTokenPerShare += (rewardToDistribute * ACC_TOKEN_PRECISION) / max(totalShare, 1e18);\\n            }\\n\\n            rewards_[i] =\\n                ((userBalanceInfo[_user].amount * uint256(accTokenPerShare)) / ACC_TOKEN_PRECISION) -\\n                user.rewardDebt +\\n                user.unpaidRewards;\\n        }\\n    }\\n\\n    /// @notice the amount of reward accumulated since the lastRewardTimestamp and is to be distributed.\\n    /// the case that lastRewardTimestamp is in the future is also handled\\n    function rewardsToDistribute() public view returns (uint256[] memory rewards_) {\\n        uint256 length = rewardInfos.length;\\n        rewards_ = new uint256[](length);\\n\\n        uint256[] memory rewardBalances = balances();\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory info = rewardInfos[i];\\n            // if (block.timestamp < info.lastRewardTimestamp), then emission has not started yet.\\n            if (block.timestamp < info.lastRewardTimestamp) continue;\\n\\n            uint40 timeElapsed = uint40(block.timestamp) - info.lastRewardTimestamp;\\n            uint256 accumulatedReward = uint256(info.tokenPerSec) * timeElapsed;\\n\\n            // To prevent bad debt, need to cap at availableReward\\n            uint256 availableReward;\\n            // this is to handle the underflow case if claimedAmount + balance < distributedAmount,\\n            // which could happend only if balance was emergencyWithdrawn.\\n            if (info.claimedAmount + rewardBalances[i] > info.distributedAmount) {\\n                availableReward = info.claimedAmount + rewardBalances[i] - info.distributedAmount;\\n            }\\n            rewards_[i] = min(accumulatedReward, availableReward);\\n        }\\n    }\\n\\n    function _getTotalShare() internal view virtual returns (uint256) {\\n        return lpToken.balanceOf(address(master));\\n    }\\n\\n    /// @notice return an array of reward tokens\\n    function rewardTokens() public view virtual override returns (IERC20[] memory tokens_) {\\n        uint256 length = rewardInfos.length;\\n        tokens_ = new IERC20[](length);\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory info = rewardInfos[i];\\n            tokens_[i] = info.rewardToken;\\n        }\\n    }\\n\\n    /// @notice View function to see surplus of each reward, i.e. reward balance - unclaimed amount\\n    /// it would be negative if there's bad debt/deficit, which would happend only if some token was emergencyWithdrawn.\\n    /// @return surpluses_ surpluses of the reward tokens.\\n    // override.\\n    function rewardTokenSurpluses() external view virtual returns (int256[] memory surpluses_) {\\n        return _rewardTokenSurpluses();\\n    }\\n\\n    /// @notice View function to see surplus of each reward, i.e. reward balance - unclaimed amount\\n    /// surplus = claimed amount + balance - distributed amount - rewardToDistribute\\n    /// @return surpluses_ surpluses of the reward tokens.\\n    function _rewardTokenSurpluses() internal view returns (int256[] memory surpluses_) {\\n        uint256 length = rewardInfos.length;\\n        surpluses_ = new int256[](length);\\n        uint256[] memory toDistribute = rewardsToDistribute();\\n        uint256[] memory rewardBalances = balances();\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory info = rewardInfos[i];\\n\\n            surpluses_[i] =\\n                int256(uint256(info.claimedAmount)) +\\n                int256(rewardBalances[i]) -\\n                int256(uint256(info.distributedAmount)) -\\n                int256(toDistribute[i]);\\n        }\\n    }\\n\\n    function isEmissionActive() external view returns (bool[] memory isActive_) {\\n        return _isEmissionActive();\\n    }\\n\\n    function _isEmissionActive() internal view returns (bool[] memory isActive_) {\\n        uint256 length = rewardInfos.length;\\n        isActive_ = new bool[](length);\\n        int256[] memory surpluses = _rewardTokenSurpluses();\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory info = rewardInfos[i];\\n\\n            // conditions for emission to be active:\\n            // 1. surplus > 0\\n            // 2. tokenPerSec > 0\\n            // 3. lastRewardTimestamp <= block.timestamp\\n            isActive_[i] = surpluses[i] > 0 && info.tokenPerSec > 0 && info.lastRewardTimestamp <= block.timestamp;\\n        }\\n    }\\n\\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\\n    /// withdrawal of remaining tokens.\\n    /// there will be deficit which is equal to the unclaimed amount\\n    function emergencyWithdraw() external onlyOwner {\\n        uint256 length = rewardInfos.length;\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage info = rewardInfos[i];\\n            info.tokenPerSec = 0;\\n            info.lastRewardTimestamp = uint40(block.timestamp);\\n            emergencyTokenWithdraw(address(info.rewardToken));\\n        }\\n    }\\n\\n    /// @notice avoids loosing funds in case there is any tokens sent to this contract\\n    /// the reward token will not be stopped and keep accumulating debts\\n    /// @dev only to be called by owner\\n    function emergencyTokenWithdraw(address token) public onlyOwner {\\n        // send that balance back to owner\\n        if (token == address(0)) {\\n            // is native token\\n            (bool success, ) = msg.sender.call{value: address(this).balance}('');\\n            require(success, 'Transfer failed');\\n        } else {\\n            IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// @notice View function to see the timestamp when the reward will runout based on current emission rate and balance left.\\n    /// a timestamp of 0 indicates that the token is not emitting or already run out.\\n    /// also works for the case that emission start time (lastRewardTimestamp) is in the future.\\n    function runoutTimestamps() external view returns (uint40[] memory timestamps_) {\\n        uint256 length = rewardInfos.length;\\n        timestamps_ = new uint40[](length);\\n        uint256[] memory rewardBalances = balances();\\n        int256[] memory surpluses = _rewardTokenSurpluses();\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo memory info = rewardInfos[i];\\n\\n            if (surpluses[i] > 0 && info.tokenPerSec > 0) {\\n                // we have: surplus = claimedAmount + balance - distributedAmount - tokenPerSec * (block.timestamp - lastRewardTimestamp)\\n                // surplus would reach 0 at runoutTimestamp. therefore, we have the formula:\\n                // 0 = claimedAmount + balance - distributedAmount - tokenPerSec * (runoutTimestamp - lastRewardTimestamp)\\n                // Solving for runoutTimestamp:\\n                // runoutTimestamp = (claimedAmount + balance - distributedAmount + tokenPerSec * lastRewardTimestamp) / tokenPerSec\\n\\n                timestamps_[i] = uint40(\\n                    (info.claimedAmount +\\n                        rewardBalances[i] -\\n                        info.distributedAmount +\\n                        info.tokenPerSec *\\n                        info.lastRewardTimestamp) / info.tokenPerSec\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice View function to preserve backward compatibility, as the previous version uses rewardInfo instead of rewardInfos\\n    function rewardInfo(uint256 i) external view returns (RewardInfo memory info) {\\n        return rewardInfos[i];\\n    }\\n\\n    /// @notice View function to see balances of reward token.\\n    function balances() public view returns (uint256[] memory balances_) {\\n        uint256 length = rewardInfos.length;\\n        balances_ = new uint256[](length);\\n\\n        for (uint256 i; i < length; ++i) {\\n            RewardInfo storage info = rewardInfos[i];\\n            if (address(info.rewardToken) == address(0)) {\\n                // is native token\\n                balances_[i] = address(this).balance;\\n            } else {\\n                balances_[i] = info.rewardToken.balanceOf(address(this));\\n            }\\n        }\\n    }\\n\\n    function toUint128(uint256 val) internal pure returns (uint128) {\\n        if (val > type(uint128).max) revert('uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x16fa39b70a064d1eafa98d6fbb359deb3d1288fb1cb4c10d3a17d5ea0b3eb71c\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613874908161001c8239f35b600080fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a7146124d457508063112a5d581461249957806312bc7bfd146121645780632474e18114611eb1578063248a9ca314611e825780632f2ff15d14611e0a57806336568abe14611d6b5780634e8a947e14611c575780635d0cde9714611c3b5780635fcbd28514611c1357806365d9aa4a14611858578063715018a6146117fd578063731994fc146113a95780637bb98a681461138d57806381a00f83146112d9578063858ce1a41461115157806389d6517f146110cf5780638bab3786146110735780638da5cb5b1461104c5780639010d07c1461100657806391d1485414610fb85780639870d7fe14610ee357806398a1b39714610ea8578063a217fddf14610e8c578063a5eceb1b14610a7a578063ac8a584a146109a9578063ad568827146108f8578063b95c5746146108d9578063c031a66f1461075c578063c2b18aa01461068b578063c37232881461060e578063c7178230146105e7578063ca15c873146105bb578063ccbd9b7514610522578063d547741f146104e3578063d5dd2c4f146104b7578063db2e21bc14610399578063eb4a78e014610371578063ee97f7f314610349578063eea0160414610326578063f2fde38b14610283578063f36c0a72146102625763f709f23b14610203573861000f565b3461025d57604036600319011261025d5761021c6125bb565b6004356000526101316020526001600160a01b0360406000209116600052602052604080600020548151906001600160801b038116825260801c6020820152f35b600080fd5b3461025d57600036600319011261025d5761001b61027e612fcb565b6130d7565b3461025d57602036600319011261025d5761029c6125a5565b6102a4612ae0565b6001600160a01b038116156102bc5761001b90612b38565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461025d57600036600319011261025d576020604051670de0b6b3a76400008152f35b3461025d57600036600319011261025d5760206001600160a01b0361012e5416604051908152f35b3461025d57600036600319011261025d5760206001600160a01b036101325416604051908152f35b3461025d57600036600319011261025d576103b2612ae0565b61012f544264ffffffffff1660005b8281106103ca57005b6103d38161260c565b5080546001600160a01b03168082556002909101805464ffffffffff60801b1916608085901b64ffffffffff60801b161790559061040f612ae0565b8161043d576104389150610433600080808047335af161042d613261565b506132a1565b612fa8565b6103c1565b6040516370a0823160e01b81523060048201526020908181602481875afa9182156104ab5760009261047b575b5050610433906104389333906132ec565b90809250813d83116104a4575b6104928183612a08565b8101031261025d57518261043361046a565b503d610488565b6040513d6000823e3d90fd5b3461025d57600036600319011261025d576104df6104d361352e565b604051918291826125d1565b0390f35b3461025d57604036600319011261025d5761001b6004356105026125bb565b9080600052609760205261051d60016040600020015461265e565b612a56565b3461025d57602036600319011261025d5760043580151580910361025d5760207fdf1c2ccfd21e3329e1124daf53bdfee90ba7d708a557bf15e5c4eddd57fa24c99161056c612ae0565b61013280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff00000000000000000000000000000000000000008460a01b169116179055604051908152a1005b3461025d57602036600319011261025d5760043560005260c96020526020604060002054604051908152f35b3461025d57600036600319011261025d57602060ff6101325460a01c166040519015158152f35b3461025d57604036600319011261025d576106276125a5565b5061063f6001600160a01b0361012e54163314612d3c565b610647612dad565b606460405162461bcd60e51b815260206004820152601b60248201527f43616c6c20427269626556322e6f6e566f746520696e737465616400000000006044820152fd5b3461025d57600036600319011261025d5761012f546106a981613217565b6106b66040519182612a08565b8181526106c282613217565b6020928383019291601f190136843760005b81811061072757505090604051928392818401908285525180915260408401929160005b82811061070757505050500390f35b83516001600160a01b0316855286955093810193928101926001016106f8565b806001600160a01b0361074561073f6107579461260c565b506134ce565b51166107518286613088565b52612fa8565b6106d4565b3461025d5760208060031936011261025d576107766125a5565b61012f54906107848261322f565b9161078d61352e565b916001600160a01b031660005b8281106107af57604051806104df87826125d1565b6107bb61073f8261260c565b908060005261013187526040600020836000528752604080600020926001600160801b0391829101511692886107ef612fcb565b80610847575b506108389291670de0b6b3a76400006108226108429761013061082e958b60005252604060002054612b80565b04905492831690612c53565b9060801c90612b93565b6107518288613088565b61079a565b929190506108558489613088565b5190670de0b6b3a764000093848302928084048614901517156108c3576108228c6101306108ad6108429a6108a761082e98670de0b6b3a7640000976108389c808210156000146108bb57509061309c565b90612b93565b9950509350505091926107f5565b90509061309c565b634e487b7160e01b600052601160045260246000fd5b3461025d57600036600319011261025d57602061012f54604051908152f35b3461025d57602036600319011261025d576001600160a01b036109196125a5565b610921612ae0565b168061093c575061001b600080808047335af161042d613261565b604051906370a0823160e01b8252306004830152602082602481845afa9081156104ab57600091610974575b61001b925033906132ec565b90506020823d82116109a1575b8161098e60209383612a08565b8101031261025d5761001b915190610968565b3d9150610981565b3461025d5760208060031936011261025d5761001b9060c96109c96125a5565b916109d2612ae0565b7f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62280600052609782526001600160a01b03604060002094169384600052825260ff60406000205416610a2d575b600052526040600020612c60565b80600052609782526040600020846000528252604060002060ff1981541690553384827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a4610a1f565b3461025d57606036600319011261025d57610a936125a5565b602480359164ffffffffff928381169384820361025d576044918235956bffffffffffffffffffffffff871680970361025d573360009081527ffdc1535cdd2f355f3856ccff3baa99da917bdc4f8f249bcffd4d51836919939c602090815260409091205490969060ff168015610e73575b610b0e90612f45565b6001600160a01b039586610132541682898215928315610df6575b50505015610d8e57861694853b15801590610d86575b15610d1e57821580938115610d13575b5015610cd15761012f5491600a831015610c8f5760005b838110610c2c578a7f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a60408c8c8c8c8c8c610ba261027e612fcb565b15610c2757508042165b855192610bb8846129d6565b83528785840152670de0b6b3a7640000868401526000606084015260006080840152168060a0830152610bea82612e02565b7f99e4a80c4e66b0b3fbf1bbe586cf7708be5e406b09778228cdb64b480226c3898484845116928751908152a251169382519160008352820152a2005b610bac565b8789610c378361260c565b50541614610c4d57610c4890612fa8565b610b66565b60648a7f746f6b656e2068617320616c7265616479206265656e2061646465640000000085601c866040519462461bcd60e51b86526004860152840152820152fd5b7f72657761726420746f6b656e206c656e67746820657863656564656400000000606492601c8b936040519462461bcd60e51b86526004860152840152820152fd5b7f696e76616c6964205f737461727454696d657374616d70000000000000000000889160176064946040519462461bcd60e51b86526004860152840152820152fd5b90504211158a610b4f565b7f72657761726420746f6b656e206d75737420626520612076616c696420636f6e889160256084946040519462461bcd60e51b865260048601528401528201527f74726163740000000000000000000000000000000000000000000000000000006064820152fd5b508515610b3f565b6084887f72657761726420746f6b656e206d7573742062652077686974656c6973746564886031866040519462461bcd60e51b865260048601528401528201527f20627920627269626520666163746f72790000000000000000000000000000006064820152fd5b90919250604051928380927fbbe78b380000000000000000000000000000000000000000000000000000000082528c871660048301525afa9081156104ab57600091610e46575b5082898c610b29565b610e669150893d8b11610e6c575b610e5e8183612a08565b810190612f90565b8a610e3d565b503d610e54565b50610b0e6001600160a01b036033541633149050610b05565b3461025d57600036600319011261025d57602060405160008152f35b3461025d57600036600319011261025d5760206040517f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f6228152f35b3461025d5760208060031936011261025d5761001b9060c9610f036125a5565b91610f0c612ae0565b7f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62280600052609782526001600160a01b03604060002094169384600052825260ff6040600020541615610f68575b600052526040600020612bc9565b806000526097825260406000208460005282526040600020600160ff198254161790553384827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4610f5a565b3461025d57604036600319011261025d57610fd16125bb565b60043560005260976020526001600160a01b0360406000209116600052602052602060ff604060002054166040519015158152f35b3461025d57604036600319011261025d5760043560005260c960205260206001600160a01b0361103c6024356040600020612bb1565b9190546040519260031b1c168152f35b3461025d57600036600319011261025d5760206001600160a01b0360335416604051908152f35b3461025d57600036600319011261025d5761108c613647565b604051809160208083018184528251809152816040850193019160005b8281106110b857505050500390f35b8351855286955093810193928101926001016110a9565b3461025d57602036600319011261025d5760043561012f5481101561025d576110f960c09161260c565b5064ffffffffff8154916002600182015491015490604051936001600160a01b038116855260a01c60208501526001600160801b0390818116604086015260801c60608501528116608084015260801c1660a0820152f35b3461025d57600036600319011261025d5761012f5461116f81613217565b61117c6040519182612a08565b81815261118882613217565b6020928383019291601f190136843761119f613728565b6111a7613647565b9060005b8381106111fc57868587604051928392818401908285525180915260408401929160005b8281106111de57505050500390f35b835164ffffffffff16855286955093810193928101926001016111cf565b61120861073f8261260c565b9060006112158286613088565b5113806112bf575b611231575b61122c9150612fa8565b6111ab565b60a06112666001600160801b03611259816080870151166112528689613088565b5190612b93565b9060608601511690612c53565b928981016bffffffffffffffffffffffff91828251169064ffffffffff94859101511602918083169283036108c3576112a56112ae9361122c97612b93565b9151169061309c565b166112b98288613088565b52611222565b506bffffffffffffffffffffffff8883015116151561121d565b3461025d57602036600319011261025d57600060a06040516112fa816129d6565b828152826020820152826040820152826060820152826080820152015260c061132761073f60043561260c565b64ffffffffff60a0604051926001600160a01b0381511684526bffffffffffffffffffffffff60208201511660208501526001600160801b03806040830151166040860152806060830151166060860152608082015116608085015201511660a0820152f35b3461025d57600036600319011261025d576104df6104d3613728565b3461025d5760c036600319011261025d576004356001600160a01b039081811680910361025d576113d86125bb565b604490813584811680910361025d5760649384359160849384359488861680960361025d5760a435966bffffffffffffffffffffffff881680980361025d576000549860ff8a60081c1615998a809b6117f0575b80156117d9575b156117725760ff1981166001176000558a611760575b50873b15801590611758575b156116f257843b1561168c57833b15611626574287106115c1575050507f99e4a80c4e66b0b3fbf1bbe586cf7708be5e406b09778228cdb64b480226c3899360209361158398999364ffffffffff936114be60ff60005460081c166114b981612ed4565b612ed4565b6114c733612b38565b6114dc60ff60005460081c166114b981612ed4565b600160fb556001600160a01b03199261013290848254161790558561012e91168382541617905561012d9182541617905516937f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a604080519761153e896129d6565b83895280868a0152670de0b6b3a7640000828a0152600060608a0152600060808a01528760a08a01528151906000825286820152a284511692604051908152a2612e02565b61158957005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b7f74616d7000000000000000000000000000000000000000000000000000000000907f636f6e7374727563746f723a20696e76616c6964205f737461727454696d65736040519362461bcd60e51b855260206004860152602480860152840152820152fd5b7f6c696420636f6e74726163740000000000000000000000000000000000000000907f636f6e7374727563746f723a204d6173746572206d75737420626520612076616040519362461bcd60e51b855260206004860152602c6024860152840152820152fd5b7f76616c696420636f6e7472616374000000000000000000000000000000000000907f636f6e7374727563746f723a204c5020746f6b656e206d7573742062652061206040519362461bcd60e51b855260206004860152602e6024860152840152820152fd5b7f6520612076616c696420636f6e74726163740000000000000000000000000000907f636f6e7374727563746f723a2072657761726420746f6b656e206d75737420626040519362461bcd60e51b85526020600486015260326024860152840152820152fd5b508715611455565b61ffff1916610101176000558b611449565b507f647920696e697469616c697a6564000000000000000000000000000000000000907f496e697469616c697a61626c653a20636f6e747261637420697320616c7265616040519362461bcd60e51b855260206004860152602e6024860152840152820152fd5b50303b1580156114335750600160ff821614611433565b50600160ff82161061142c565b3461025d57600036600319011261025d57611816612ae0565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461025d57606036600319011261025d576118716125a5565b6118886001600160a01b0361012e54163314612d3c565b611890612dad565b61189b6044356130d7565b61012f54906118a98261322f565b9160005b8181106118f7576104df84846001600160a01b036001600160801b036118d46024356137e6565b169116600052610130602052604060002055600160fb55604051918291826125d1565b6119008161260c565b50908060005261013160205260406000206001600160a01b03851660005260205260406000206001600160a01b038354169080546001600160801b038116908115801590611c07575b6119da575b50506001600160801b0361197f670de0b6b3a76400006119798360016119d599015416602435612b80565b046137e6565b166001600160801b03198254161790556119998287613088565b51906040519182527f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b52760206001600160a01b03881693a3612fa8565b6118ad565b90611a19611a1e92610130602052670de0b6b3a7640000611a0e6040600020546001600160801b0360018c01541690612b80565b049060801c90612b93565b612c53565b93868884611b33576119796001600160801b036001819561197f956119d59b8b670de0b6b3a7640000974793848411600014611ae0579284611a7e611ab0948294611a796000808080611ad59d611ab59d5af161042d613261565b613088565b52611a88826137e6565b60028701906001600160801b03198a611aa58454938285166130bc565b169116179055612c53565b6137e6565b89546001600160801b031660809190911b6001600160801b031916178955565b99505050505061194e565b611b05945091611aff91611a7960008080808980995af161042d613261565b526137e6565b60028201906001600160801b031985611b228454938285166130bc565b169116179055828854168855611ad5565b50506040516370a0823160e01b8152306004820152602081602481875afa9081156104ab57888a91600093611bca575b506001600160801b0360018195858b8b670de0b6b3a764000097611979976119d59f61197f9b8f9111600014611bb45794611a7e611ab0948294611a7984611ab59996611baf9b6132ec565b611ad5565b611b05955091611a7985809593611aff956132ec565b925050506020813d602011611bff575b81611be760209383612a08565b8101031261025d575188886001600160801b03611b63565b3d9150611bda565b508060801c1515611949565b3461025d57600036600319011261025d5760206001600160a01b0361012d5416604051908152f35b3461025d57600036600319011261025d576020604051600a8152f35b3461025d57600036600319011261025d5761012f54611c7581613217565b611c826040519182612a08565b818152611c8e82613217565b6020928383019291601f1901368437611ca5613647565b60005b828110611cf55750505090604051928392818401908285525180915260408401929160005b828110611cdc57505050500390f35b8351151585528695509381019392810192600101611ccd565b80611d0561073f611d359361260c565b6000611d118386613088565b51139081611d50575b81611d3a575b50611d2b8287613088565b9015159052612fa8565b611ca8565b64ffffffffff915060a001511642101588611d20565b888101516bffffffffffffffffffffffff1615159150611d1a565b3461025d57604036600319011261025d57611d846125bb565b336001600160a01b03821603611da05761001b90600435612a56565b608460405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152fd5b3461025d57604036600319011261025d5761001b60043560c9611e2b6125bb565b918060005260209060978252611e4860016040600020015461265e565b80600052609782526001600160a01b03604060002094169384600052825260ff6040600020541615610f6857600052526040600020612bc9565b3461025d57602036600319011261025d5760043560005260976020526020600160406000200154604051908152f35b3461025d57606036600319011261025d576004356024356bffffffffffffffffffffffff811680820361025d576044359264ffffffffff841680850361025d573360009081527ffdc1535cdd2f355f3856ccff3baa99da917bdc4f8f249bcffd4d51836919939c602090815260409091205490959060ff16801561214b575b611f3990612f45565b61012f5483101561210757811590811591826120fd575b156120935769021e19e0c9bab2400000851161204f577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a9593604095936001600160a01b039389611fe194611fa661027e612fcb565b611faf8561260c565b5080546001600160a01b03811660a09b8c1b6001600160a01b03191617825590991c9892611ff0575b5050505061260c565b505416948351928352820152a2005b8261203d889260027f99e4a80c4e66b0b3fbf1bbe586cf7708be5e406b09778228cdb64b480226c38996019064ffffffffff60801b1964ffffffffff60801b83549260801b169116179055565b5416928951908152a288808981611fd8565b6064876040519062461bcd60e51b82526004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b6084876040519062461bcd60e51b82526004820152602160248201527f696e76616c6964205f737461727454696d657374616d70546f4f76657272696460448201527f65000000000000000000000000000000000000000000000000000000000000006064820152fd5b5042831015611f50565b6064866040519062461bcd60e51b82526004820152601060248201527f696e76616c6964205f746f6b656e4964000000000000000000000000000000006044820152fd5b50611f396001600160a01b036033541633149050611f30565b3461025d57600036600319011261025d5761217d612dad565b61218861027e612fcb565b60ff6101325460a01c161561242f5761012f546121a48161322f565b9060005b8181106121d5576104df833360005261013060205260006040812055600160fb55604051918291826125d1565b6121de8161260c565b5090806000526020610131815260406000203360005281526040600020926001600160a01b038154169084546001600160801b03908181168015801590612423575b612287575b5050600180920154161517156108c357836001600160801b031961228295541690557f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b5276122728488613088565b51926040519384523393a3612fa8565b6121a8565b611a196122b2926101308852670de0b6b3a7640000611a0e6040600020548760018a01541690612b80565b8361238a574790868a83831115612336579261230f92816122e8611ab09461232f97611a79600080808088335af161042d613261565b526122f2826137e6565b60028801906001600160801b031988611aa58454938285166130bc565b87546001600160801b031660809190911b6001600160801b031916178755565b8880612225565b505061235c9150612351600080808085335af161042d613261565b80611aff888c613088565b60028301906001600160801b0319836123798454938285166130bc565b16911617905580865416865561232f565b604051906370a0823160e01b82523060048301528582602481885afa9182156104ab576000926123f4575b50868a838311156123e2579261230f92816122e8611ab0946123dd97611a79848d33906132ec565b61232f565b505061235c91506123518133876132ec565b9091508581813d831161241c575b61240c8183612a08565b8101031261025d5751908a6123b5565b503d612402565b508160801c1515612220565b608460405162461bcd60e51b815260206004820152602260248201527f7265776172646572202f206272696265206973206e6f7420646570726563617460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b3461025d57602036600319011261025d576001600160a01b036124ba6125a5565b166000526101306020526020604060002054604051908152f35b3461025d57602036600319011261025d57600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361025d57817f5a05180f0000000000000000000000000000000000000000000000000000000060209314908115612548575b5015158152f35b7f7965db0b0000000000000000000000000000000000000000000000000000000081149150811561257b575b5083612541565b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483612574565b600435906001600160a01b038216820361025d57565b602435906001600160a01b038216820361025d57565b6020908160408183019282815285518094520193019160005b8281106125f8575050505090565b8351855293810193928101926001016125ea565b61012f90815481101561264857600391600052027f232da9e50dad2971456a78fb5cd6ff6b75019984d6e918139ce990999420f9790190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260209060978252604092838220338352835260ff8483205416156126875750505050565b835167ffffffffffffffff919033606082018481118382101761299f578752602a8252858201928736853782511561298b5760308453825191600192831015612977576078602185015360295b83811161290057506128be57908751946080860190868210908211176128aa57885260428552868501956060368837855115612896576030875385518210156128965790607860218701536041915b81831161281b575050506127d9579385936127bf936127b060489461277b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000996127d59b519a8b9788015251809260378801906129b3565b8401917f206973206d697373696e6720726f6c65200000000000000000000000000000006037840152518093868401906129b3565b01036028810185520183612a08565b5191829162461bcd60e51b835260048301612a2a565b0390fd5b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612882577f3031323334353637383961626364656600000000000000000000000000000000901a6128588589612ba0565b5360041c92801561286e57600019019190612723565b602482634e487b7160e01b81526011600452fd5b602483634e487b7160e01b81526032600452fd5b80634e487b7160e01b602492526032600452fd5b602487634e487b7160e01b81526041600452fd5b60648789519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f81166010811015612963577f3031323334353637383961626364656600000000000000000000000000000000901a61293b8387612ba0565b5360041c90801561294f57600019016126d4565b602488634e487b7160e01b81526011600452fd5b602489634e487b7160e01b81526032600452fd5b602487634e487b7160e01b81526032600452fd5b602486634e487b7160e01b81526032600452fd5b602486634e487b7160e01b81526041600452fd5b60005b8381106129c65750506000910152565b81810151838201526020016129b6565b60c0810190811067ffffffffffffffff8211176129f257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176129f257604052565b60409160208252612a4a81518092816020860152602086860191016129b3565b601f01601f1916010190565b906040612a959260009080825260976020526001600160a01b0383832094169384835260205260ff8383205416612a98575b815260c960205220612c60565b50565b808252609760205282822084835260205282822060ff1981541690553384827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8580a4612a88565b6001600160a01b03603354163303612af457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b818102929181159184041417156108c357565b919082018092116108c357565b908151811015612648570160200190565b80548210156126485760005260206000200190600090565b91906001830160009082825280602052604082205415600014612c4d5784549468010000000000000000861015612c395783612c29612c12886001604098999a01855584612bb1565b819391549060031b91821b91600019901b19161790565b9055549382526020522055600190565b602483634e487b7160e01b81526041600452fd5b50925050565b919082039182116108c357565b90600182019060009281845282602052604084205490811515600014612d355760001991808301818111612d215782549084820191821161294f57808203612cec575b50505080548015612cd857820191612cbb8383612bb1565b909182549160031b1b191690555582526020526040812055600190565b602486634e487b7160e01b81526031600452fd5b612d0c612cfc612c129386612bb1565b90549060031b1c92839286612bb1565b90558652846020526040862055388080612ca3565b602487634e487b7160e01b81526011600452fd5b5050505090565b15612d4357565b608460405162461bcd60e51b815260206004820152602e60248201527f6f6e6c794d61737465723a206f6e6c79204d61737465722063616e2063616c6c60448201527f20746869732066756e6374696f6e0000000000000000000000000000000000006064820152fd5b600260fb5414612dbe57600260fb55565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b61012f8054680100000000000000008110156129f257612e279160018201905561260c565b612ebe57815160208301516001600160a01b039091166001600160a01b031960a092831b16178255612ebc9264ffffffffff91906040810151606082015160801b6001600160801b03199081166001600160801b039283161760018701559094600201946080830151169085541617845501511664ffffffffff60801b1964ffffffffff60801b83549260801b169116179055565b565b634e487b7160e01b600052600060045260246000fd5b15612edb57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b15612f4c57565b606460405162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a65640000000000000000000000000000000000006044820152fd5b9081602091031261025d5751801515810361025d5790565b60001981146108c35760010190565b51906001600160801b038216820361025d57565b6001600160a01b038061012e54169061012d54166040809160248251809581937fa7cac84600000000000000000000000000000000000000000000000000000000835260048301525afa90811561307e57600091613033575b506001600160801b0391501690565b82813d8311613077575b6130478183612a08565b81010312613074575061306e6020826130676001600160801b0394612fb7565b5001612fb7565b38613024565b80fd5b503d61303d565b513d6000823e3d90fd5b80518210156126485760209160051b010190565b81156130a6570490565b634e487b7160e01b600052601260045260246000fd5b9190916001600160801b03808094169116019182116108c357565b61012f546130e361352e565b9160005b8281106130f45750505050565b6130fd8161260c565b50906131098186613088565b518015801561316b575b50506002613138920164ffffffffff904282825460801c161061313d575b5050612fa8565b6130e7565b61316491421664ffffffffff60801b1964ffffffffff60801b83549260801b169116179055565b3880613131565b9092670de0b6b3a76400009182850290858204841417156108c357613138946131ec6131ad611ab061320b94600297808c101560001461321157508a9061309c565b916131e360018601936001600160801b03198554916131d66001600160801b03918285166130bc565b16911617918285556137e6565b9060801c6130bc565b6001600160801b036001600160801b031983549260801b169116179055565b92613113565b9061309c565b67ffffffffffffffff81116129f25760051b60200190565b9061323982613217565b6132466040519182612a08565b8281528092613257601f1991613217565b0190602036910137565b3d1561329c573d9067ffffffffffffffff82116129f25760405191613290601f8201601f191660200184612a08565b82523d6000602084013e565b606090565b156132a857565b606460405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b60405160208101937fa9059cbb0000000000000000000000000000000000000000000000000000000085526001600160a01b038094166024830152604482015260448152608081019267ffffffffffffffff92828510848611176129f257169160c08201908111848210176129f257604052602083527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152516133a493600091829182855af161339e613261565b9161343e565b8051908115918215613424575b5050156133ba57565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6134379250602080918301019101612f90565b38806133b1565b9192901561349f5750815115613452575090565b3b1561345b5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156134b25750805190602001fd5b6127d59060405191829162461bcd60e51b835260048301612a2a565b906040516134db816129d6565b60a064ffffffffff829480546001600160a01b0381168552831c602085015260026001820154916001600160801b0392838116604088015260801c60608701520154908116608085015260801c16910152565b61012f549061353c8261322f565b91613545613728565b9064ffffffffff42811660005b838110613560575050505050565b61356c61073f8261260c565b908360a083015116804210613623578303918483116108c3576135a86135f093866bffffffffffffffffffffffff602085015116911690612b80565b90600090608081016001600160801b039060606135cd8c611252898686511692613088565b93019282845116106135fc575b5050508082116135f557505b610751828a613088565b613552565b90506135e6565b61361b935081613612915116611252878d613088565b91511690612c53565b3880806135da565b506135f09150612fa8565b818103929160001380158285131691841216176108c357565b61012f549061365582613217565b6136626040519182612a08565b828152601f1961367184613217565b01366020830137809261368261352e565b9161368b613728565b6000805b84811061369e57505050505050565b6136aa61073f8261260c565b6001600160801b0380608083015116916136c48487613088565b51928584820194851291129080158216911516176137145761370f93926137059260606136f4930151169061362e565b6136fe838a613088565b519061362e565b6107518287613088565b61368f565b602485634e487b7160e01b81526011600452fd5b61012f54906137368261322f565b9160005b818110613745575050565b6001600160a01b036137568261260c565b50541690816137745761376f9150476107518287613088565b61373a565b6040805180936370a0823160e01b825230600483015281602460209687935afa91821561307e57506000916137b4575b5061376f92506107518287613088565b919282813d83116137df575b6137ca8183612a08565b8101031261307457509061376f9151386137a4565b503d6137c0565b6001600160801b03908181116137fa571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fdfea2646970667358221220135409e7b630362efea161a7e7fcbec3a49f20f819e8408de5ab9581a2c315ac64736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a7146124d457508063112a5d581461249957806312bc7bfd146121645780632474e18114611eb1578063248a9ca314611e825780632f2ff15d14611e0a57806336568abe14611d6b5780634e8a947e14611c575780635d0cde9714611c3b5780635fcbd28514611c1357806365d9aa4a14611858578063715018a6146117fd578063731994fc146113a95780637bb98a681461138d57806381a00f83146112d9578063858ce1a41461115157806389d6517f146110cf5780638bab3786146110735780638da5cb5b1461104c5780639010d07c1461100657806391d1485414610fb85780639870d7fe14610ee357806398a1b39714610ea8578063a217fddf14610e8c578063a5eceb1b14610a7a578063ac8a584a146109a9578063ad568827146108f8578063b95c5746146108d9578063c031a66f1461075c578063c2b18aa01461068b578063c37232881461060e578063c7178230146105e7578063ca15c873146105bb578063ccbd9b7514610522578063d547741f146104e3578063d5dd2c4f146104b7578063db2e21bc14610399578063eb4a78e014610371578063ee97f7f314610349578063eea0160414610326578063f2fde38b14610283578063f36c0a72146102625763f709f23b14610203573861000f565b3461025d57604036600319011261025d5761021c6125bb565b6004356000526101316020526001600160a01b0360406000209116600052602052604080600020548151906001600160801b038116825260801c6020820152f35b600080fd5b3461025d57600036600319011261025d5761001b61027e612fcb565b6130d7565b3461025d57602036600319011261025d5761029c6125a5565b6102a4612ae0565b6001600160a01b038116156102bc5761001b90612b38565b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461025d57600036600319011261025d576020604051670de0b6b3a76400008152f35b3461025d57600036600319011261025d5760206001600160a01b0361012e5416604051908152f35b3461025d57600036600319011261025d5760206001600160a01b036101325416604051908152f35b3461025d57600036600319011261025d576103b2612ae0565b61012f544264ffffffffff1660005b8281106103ca57005b6103d38161260c565b5080546001600160a01b03168082556002909101805464ffffffffff60801b1916608085901b64ffffffffff60801b161790559061040f612ae0565b8161043d576104389150610433600080808047335af161042d613261565b506132a1565b612fa8565b6103c1565b6040516370a0823160e01b81523060048201526020908181602481875afa9182156104ab5760009261047b575b5050610433906104389333906132ec565b90809250813d83116104a4575b6104928183612a08565b8101031261025d57518261043361046a565b503d610488565b6040513d6000823e3d90fd5b3461025d57600036600319011261025d576104df6104d361352e565b604051918291826125d1565b0390f35b3461025d57604036600319011261025d5761001b6004356105026125bb565b9080600052609760205261051d60016040600020015461265e565b612a56565b3461025d57602036600319011261025d5760043580151580910361025d5760207fdf1c2ccfd21e3329e1124daf53bdfee90ba7d708a557bf15e5c4eddd57fa24c99161056c612ae0565b61013280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff00000000000000000000000000000000000000008460a01b169116179055604051908152a1005b3461025d57602036600319011261025d5760043560005260c96020526020604060002054604051908152f35b3461025d57600036600319011261025d57602060ff6101325460a01c166040519015158152f35b3461025d57604036600319011261025d576106276125a5565b5061063f6001600160a01b0361012e54163314612d3c565b610647612dad565b606460405162461bcd60e51b815260206004820152601b60248201527f43616c6c20427269626556322e6f6e566f746520696e737465616400000000006044820152fd5b3461025d57600036600319011261025d5761012f546106a981613217565b6106b66040519182612a08565b8181526106c282613217565b6020928383019291601f190136843760005b81811061072757505090604051928392818401908285525180915260408401929160005b82811061070757505050500390f35b83516001600160a01b0316855286955093810193928101926001016106f8565b806001600160a01b0361074561073f6107579461260c565b506134ce565b51166107518286613088565b52612fa8565b6106d4565b3461025d5760208060031936011261025d576107766125a5565b61012f54906107848261322f565b9161078d61352e565b916001600160a01b031660005b8281106107af57604051806104df87826125d1565b6107bb61073f8261260c565b908060005261013187526040600020836000528752604080600020926001600160801b0391829101511692886107ef612fcb565b80610847575b506108389291670de0b6b3a76400006108226108429761013061082e958b60005252604060002054612b80565b04905492831690612c53565b9060801c90612b93565b6107518288613088565b61079a565b929190506108558489613088565b5190670de0b6b3a764000093848302928084048614901517156108c3576108228c6101306108ad6108429a6108a761082e98670de0b6b3a7640000976108389c808210156000146108bb57509061309c565b90612b93565b9950509350505091926107f5565b90509061309c565b634e487b7160e01b600052601160045260246000fd5b3461025d57600036600319011261025d57602061012f54604051908152f35b3461025d57602036600319011261025d576001600160a01b036109196125a5565b610921612ae0565b168061093c575061001b600080808047335af161042d613261565b604051906370a0823160e01b8252306004830152602082602481845afa9081156104ab57600091610974575b61001b925033906132ec565b90506020823d82116109a1575b8161098e60209383612a08565b8101031261025d5761001b915190610968565b3d9150610981565b3461025d5760208060031936011261025d5761001b9060c96109c96125a5565b916109d2612ae0565b7f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62280600052609782526001600160a01b03604060002094169384600052825260ff60406000205416610a2d575b600052526040600020612c60565b80600052609782526040600020846000528252604060002060ff1981541690553384827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b600080a4610a1f565b3461025d57606036600319011261025d57610a936125a5565b602480359164ffffffffff928381169384820361025d576044918235956bffffffffffffffffffffffff871680970361025d573360009081527ffdc1535cdd2f355f3856ccff3baa99da917bdc4f8f249bcffd4d51836919939c602090815260409091205490969060ff168015610e73575b610b0e90612f45565b6001600160a01b039586610132541682898215928315610df6575b50505015610d8e57861694853b15801590610d86575b15610d1e57821580938115610d13575b5015610cd15761012f5491600a831015610c8f5760005b838110610c2c578a7f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a60408c8c8c8c8c8c610ba261027e612fcb565b15610c2757508042165b855192610bb8846129d6565b83528785840152670de0b6b3a7640000868401526000606084015260006080840152168060a0830152610bea82612e02565b7f99e4a80c4e66b0b3fbf1bbe586cf7708be5e406b09778228cdb64b480226c3898484845116928751908152a251169382519160008352820152a2005b610bac565b8789610c378361260c565b50541614610c4d57610c4890612fa8565b610b66565b60648a7f746f6b656e2068617320616c7265616479206265656e2061646465640000000085601c866040519462461bcd60e51b86526004860152840152820152fd5b7f72657761726420746f6b656e206c656e67746820657863656564656400000000606492601c8b936040519462461bcd60e51b86526004860152840152820152fd5b7f696e76616c6964205f737461727454696d657374616d70000000000000000000889160176064946040519462461bcd60e51b86526004860152840152820152fd5b90504211158a610b4f565b7f72657761726420746f6b656e206d75737420626520612076616c696420636f6e889160256084946040519462461bcd60e51b865260048601528401528201527f74726163740000000000000000000000000000000000000000000000000000006064820152fd5b508515610b3f565b6084887f72657761726420746f6b656e206d7573742062652077686974656c6973746564886031866040519462461bcd60e51b865260048601528401528201527f20627920627269626520666163746f72790000000000000000000000000000006064820152fd5b90919250604051928380927fbbe78b380000000000000000000000000000000000000000000000000000000082528c871660048301525afa9081156104ab57600091610e46575b5082898c610b29565b610e669150893d8b11610e6c575b610e5e8183612a08565b810190612f90565b8a610e3d565b503d610e54565b50610b0e6001600160a01b036033541633149050610b05565b3461025d57600036600319011261025d57602060405160008152f35b3461025d57600036600319011261025d5760206040517f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f6228152f35b3461025d5760208060031936011261025d5761001b9060c9610f036125a5565b91610f0c612ae0565b7f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62280600052609782526001600160a01b03604060002094169384600052825260ff6040600020541615610f68575b600052526040600020612bc9565b806000526097825260406000208460005282526040600020600160ff198254161790553384827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4610f5a565b3461025d57604036600319011261025d57610fd16125bb565b60043560005260976020526001600160a01b0360406000209116600052602052602060ff604060002054166040519015158152f35b3461025d57604036600319011261025d5760043560005260c960205260206001600160a01b0361103c6024356040600020612bb1565b9190546040519260031b1c168152f35b3461025d57600036600319011261025d5760206001600160a01b0360335416604051908152f35b3461025d57600036600319011261025d5761108c613647565b604051809160208083018184528251809152816040850193019160005b8281106110b857505050500390f35b8351855286955093810193928101926001016110a9565b3461025d57602036600319011261025d5760043561012f5481101561025d576110f960c09161260c565b5064ffffffffff8154916002600182015491015490604051936001600160a01b038116855260a01c60208501526001600160801b0390818116604086015260801c60608501528116608084015260801c1660a0820152f35b3461025d57600036600319011261025d5761012f5461116f81613217565b61117c6040519182612a08565b81815261118882613217565b6020928383019291601f190136843761119f613728565b6111a7613647565b9060005b8381106111fc57868587604051928392818401908285525180915260408401929160005b8281106111de57505050500390f35b835164ffffffffff16855286955093810193928101926001016111cf565b61120861073f8261260c565b9060006112158286613088565b5113806112bf575b611231575b61122c9150612fa8565b6111ab565b60a06112666001600160801b03611259816080870151166112528689613088565b5190612b93565b9060608601511690612c53565b928981016bffffffffffffffffffffffff91828251169064ffffffffff94859101511602918083169283036108c3576112a56112ae9361122c97612b93565b9151169061309c565b166112b98288613088565b52611222565b506bffffffffffffffffffffffff8883015116151561121d565b3461025d57602036600319011261025d57600060a06040516112fa816129d6565b828152826020820152826040820152826060820152826080820152015260c061132761073f60043561260c565b64ffffffffff60a0604051926001600160a01b0381511684526bffffffffffffffffffffffff60208201511660208501526001600160801b03806040830151166040860152806060830151166060860152608082015116608085015201511660a0820152f35b3461025d57600036600319011261025d576104df6104d3613728565b3461025d5760c036600319011261025d576004356001600160a01b039081811680910361025d576113d86125bb565b604490813584811680910361025d5760649384359160849384359488861680960361025d5760a435966bffffffffffffffffffffffff881680980361025d576000549860ff8a60081c1615998a809b6117f0575b80156117d9575b156117725760ff1981166001176000558a611760575b50873b15801590611758575b156116f257843b1561168c57833b15611626574287106115c1575050507f99e4a80c4e66b0b3fbf1bbe586cf7708be5e406b09778228cdb64b480226c3899360209361158398999364ffffffffff936114be60ff60005460081c166114b981612ed4565b612ed4565b6114c733612b38565b6114dc60ff60005460081c166114b981612ed4565b600160fb556001600160a01b03199261013290848254161790558561012e91168382541617905561012d9182541617905516937f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a604080519761153e896129d6565b83895280868a0152670de0b6b3a7640000828a0152600060608a0152600060808a01528760a08a01528151906000825286820152a284511692604051908152a2612e02565b61158957005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b7f74616d7000000000000000000000000000000000000000000000000000000000907f636f6e7374727563746f723a20696e76616c6964205f737461727454696d65736040519362461bcd60e51b855260206004860152602480860152840152820152fd5b7f6c696420636f6e74726163740000000000000000000000000000000000000000907f636f6e7374727563746f723a204d6173746572206d75737420626520612076616040519362461bcd60e51b855260206004860152602c6024860152840152820152fd5b7f76616c696420636f6e7472616374000000000000000000000000000000000000907f636f6e7374727563746f723a204c5020746f6b656e206d7573742062652061206040519362461bcd60e51b855260206004860152602e6024860152840152820152fd5b7f6520612076616c696420636f6e74726163740000000000000000000000000000907f636f6e7374727563746f723a2072657761726420746f6b656e206d75737420626040519362461bcd60e51b85526020600486015260326024860152840152820152fd5b508715611455565b61ffff1916610101176000558b611449565b507f647920696e697469616c697a6564000000000000000000000000000000000000907f496e697469616c697a61626c653a20636f6e747261637420697320616c7265616040519362461bcd60e51b855260206004860152602e6024860152840152820152fd5b50303b1580156114335750600160ff821614611433565b50600160ff82161061142c565b3461025d57600036600319011261025d57611816612ae0565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461025d57606036600319011261025d576118716125a5565b6118886001600160a01b0361012e54163314612d3c565b611890612dad565b61189b6044356130d7565b61012f54906118a98261322f565b9160005b8181106118f7576104df84846001600160a01b036001600160801b036118d46024356137e6565b169116600052610130602052604060002055600160fb55604051918291826125d1565b6119008161260c565b50908060005261013160205260406000206001600160a01b03851660005260205260406000206001600160a01b038354169080546001600160801b038116908115801590611c07575b6119da575b50506001600160801b0361197f670de0b6b3a76400006119798360016119d599015416602435612b80565b046137e6565b166001600160801b03198254161790556119998287613088565b51906040519182527f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b52760206001600160a01b03881693a3612fa8565b6118ad565b90611a19611a1e92610130602052670de0b6b3a7640000611a0e6040600020546001600160801b0360018c01541690612b80565b049060801c90612b93565b612c53565b93868884611b33576119796001600160801b036001819561197f956119d59b8b670de0b6b3a7640000974793848411600014611ae0579284611a7e611ab0948294611a796000808080611ad59d611ab59d5af161042d613261565b613088565b52611a88826137e6565b60028701906001600160801b03198a611aa58454938285166130bc565b169116179055612c53565b6137e6565b89546001600160801b031660809190911b6001600160801b031916178955565b99505050505061194e565b611b05945091611aff91611a7960008080808980995af161042d613261565b526137e6565b60028201906001600160801b031985611b228454938285166130bc565b169116179055828854168855611ad5565b50506040516370a0823160e01b8152306004820152602081602481875afa9081156104ab57888a91600093611bca575b506001600160801b0360018195858b8b670de0b6b3a764000097611979976119d59f61197f9b8f9111600014611bb45794611a7e611ab0948294611a7984611ab59996611baf9b6132ec565b611ad5565b611b05955091611a7985809593611aff956132ec565b925050506020813d602011611bff575b81611be760209383612a08565b8101031261025d575188886001600160801b03611b63565b3d9150611bda565b508060801c1515611949565b3461025d57600036600319011261025d5760206001600160a01b0361012d5416604051908152f35b3461025d57600036600319011261025d576020604051600a8152f35b3461025d57600036600319011261025d5761012f54611c7581613217565b611c826040519182612a08565b818152611c8e82613217565b6020928383019291601f1901368437611ca5613647565b60005b828110611cf55750505090604051928392818401908285525180915260408401929160005b828110611cdc57505050500390f35b8351151585528695509381019392810192600101611ccd565b80611d0561073f611d359361260c565b6000611d118386613088565b51139081611d50575b81611d3a575b50611d2b8287613088565b9015159052612fa8565b611ca8565b64ffffffffff915060a001511642101588611d20565b888101516bffffffffffffffffffffffff1615159150611d1a565b3461025d57604036600319011261025d57611d846125bb565b336001600160a01b03821603611da05761001b90600435612a56565b608460405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152fd5b3461025d57604036600319011261025d5761001b60043560c9611e2b6125bb565b918060005260209060978252611e4860016040600020015461265e565b80600052609782526001600160a01b03604060002094169384600052825260ff6040600020541615610f6857600052526040600020612bc9565b3461025d57602036600319011261025d5760043560005260976020526020600160406000200154604051908152f35b3461025d57606036600319011261025d576004356024356bffffffffffffffffffffffff811680820361025d576044359264ffffffffff841680850361025d573360009081527ffdc1535cdd2f355f3856ccff3baa99da917bdc4f8f249bcffd4d51836919939c602090815260409091205490959060ff16801561214b575b611f3990612f45565b61012f5483101561210757811590811591826120fd575b156120935769021e19e0c9bab2400000851161204f577f225033f2ea5486463cbb49ceda2823be38daddc85031ce2c637e7ad0950bc85a9593604095936001600160a01b039389611fe194611fa661027e612fcb565b611faf8561260c565b5080546001600160a01b03811660a09b8c1b6001600160a01b03191617825590991c9892611ff0575b5050505061260c565b505416948351928352820152a2005b8261203d889260027f99e4a80c4e66b0b3fbf1bbe586cf7708be5e406b09778228cdb64b480226c38996019064ffffffffff60801b1964ffffffffff60801b83549260801b169116179055565b5416928951908152a288808981611fd8565b6064876040519062461bcd60e51b82526004820152601460248201527f726577617264207261746520746f6f20686967680000000000000000000000006044820152fd5b6084876040519062461bcd60e51b82526004820152602160248201527f696e76616c6964205f737461727454696d657374616d70546f4f76657272696460448201527f65000000000000000000000000000000000000000000000000000000000000006064820152fd5b5042831015611f50565b6064866040519062461bcd60e51b82526004820152601060248201527f696e76616c6964205f746f6b656e4964000000000000000000000000000000006044820152fd5b50611f396001600160a01b036033541633149050611f30565b3461025d57600036600319011261025d5761217d612dad565b61218861027e612fcb565b60ff6101325460a01c161561242f5761012f546121a48161322f565b9060005b8181106121d5576104df833360005261013060205260006040812055600160fb55604051918291826125d1565b6121de8161260c565b5090806000526020610131815260406000203360005281526040600020926001600160a01b038154169084546001600160801b03908181168015801590612423575b612287575b5050600180920154161517156108c357836001600160801b031961228295541690557f986cbc32375de61d1fabfb01aef452f5c919f2180bb72fff0fb182126a02b5276122728488613088565b51926040519384523393a3612fa8565b6121a8565b611a196122b2926101308852670de0b6b3a7640000611a0e6040600020548760018a01541690612b80565b8361238a574790868a83831115612336579261230f92816122e8611ab09461232f97611a79600080808088335af161042d613261565b526122f2826137e6565b60028801906001600160801b031988611aa58454938285166130bc565b87546001600160801b031660809190911b6001600160801b031916178755565b8880612225565b505061235c9150612351600080808085335af161042d613261565b80611aff888c613088565b60028301906001600160801b0319836123798454938285166130bc565b16911617905580865416865561232f565b604051906370a0823160e01b82523060048301528582602481885afa9182156104ab576000926123f4575b50868a838311156123e2579261230f92816122e8611ab0946123dd97611a79848d33906132ec565b61232f565b505061235c91506123518133876132ec565b9091508581813d831161241c575b61240c8183612a08565b8101031261025d5751908a6123b5565b503d612402565b508160801c1515612220565b608460405162461bcd60e51b815260206004820152602260248201527f7265776172646572202f206272696265206973206e6f7420646570726563617460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b3461025d57602036600319011261025d576001600160a01b036124ba6125a5565b166000526101306020526020604060002054604051908152f35b3461025d57602036600319011261025d57600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361025d57817f5a05180f0000000000000000000000000000000000000000000000000000000060209314908115612548575b5015158152f35b7f7965db0b0000000000000000000000000000000000000000000000000000000081149150811561257b575b5083612541565b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483612574565b600435906001600160a01b038216820361025d57565b602435906001600160a01b038216820361025d57565b6020908160408183019282815285518094520193019160005b8281106125f8575050505090565b8351855293810193928101926001016125ea565b61012f90815481101561264857600391600052027f232da9e50dad2971456a78fb5cd6ff6b75019984d6e918139ce990999420f9790190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260209060978252604092838220338352835260ff8483205416156126875750505050565b835167ffffffffffffffff919033606082018481118382101761299f578752602a8252858201928736853782511561298b5760308453825191600192831015612977576078602185015360295b83811161290057506128be57908751946080860190868210908211176128aa57885260428552868501956060368837855115612896576030875385518210156128965790607860218701536041915b81831161281b575050506127d9579385936127bf936127b060489461277b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000996127d59b519a8b9788015251809260378801906129b3565b8401917f206973206d697373696e6720726f6c65200000000000000000000000000000006037840152518093868401906129b3565b01036028810185520183612a08565b5191829162461bcd60e51b835260048301612a2a565b0390fd5b60648587519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612882577f3031323334353637383961626364656600000000000000000000000000000000901a6128588589612ba0565b5360041c92801561286e57600019019190612723565b602482634e487b7160e01b81526011600452fd5b602483634e487b7160e01b81526032600452fd5b80634e487b7160e01b602492526032600452fd5b602487634e487b7160e01b81526041600452fd5b60648789519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f81166010811015612963577f3031323334353637383961626364656600000000000000000000000000000000901a61293b8387612ba0565b5360041c90801561294f57600019016126d4565b602488634e487b7160e01b81526011600452fd5b602489634e487b7160e01b81526032600452fd5b602487634e487b7160e01b81526032600452fd5b602486634e487b7160e01b81526032600452fd5b602486634e487b7160e01b81526041600452fd5b60005b8381106129c65750506000910152565b81810151838201526020016129b6565b60c0810190811067ffffffffffffffff8211176129f257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176129f257604052565b60409160208252612a4a81518092816020860152602086860191016129b3565b601f01601f1916010190565b906040612a959260009080825260976020526001600160a01b0383832094169384835260205260ff8383205416612a98575b815260c960205220612c60565b50565b808252609760205282822084835260205282822060ff1981541690553384827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8580a4612a88565b6001600160a01b03603354163303612af457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b818102929181159184041417156108c357565b919082018092116108c357565b908151811015612648570160200190565b80548210156126485760005260206000200190600090565b91906001830160009082825280602052604082205415600014612c4d5784549468010000000000000000861015612c395783612c29612c12886001604098999a01855584612bb1565b819391549060031b91821b91600019901b19161790565b9055549382526020522055600190565b602483634e487b7160e01b81526041600452fd5b50925050565b919082039182116108c357565b90600182019060009281845282602052604084205490811515600014612d355760001991808301818111612d215782549084820191821161294f57808203612cec575b50505080548015612cd857820191612cbb8383612bb1565b909182549160031b1b191690555582526020526040812055600190565b602486634e487b7160e01b81526031600452fd5b612d0c612cfc612c129386612bb1565b90549060031b1c92839286612bb1565b90558652846020526040862055388080612ca3565b602487634e487b7160e01b81526011600452fd5b5050505090565b15612d4357565b608460405162461bcd60e51b815260206004820152602e60248201527f6f6e6c794d61737465723a206f6e6c79204d61737465722063616e2063616c6c60448201527f20746869732066756e6374696f6e0000000000000000000000000000000000006064820152fd5b600260fb5414612dbe57600260fb55565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b61012f8054680100000000000000008110156129f257612e279160018201905561260c565b612ebe57815160208301516001600160a01b039091166001600160a01b031960a092831b16178255612ebc9264ffffffffff91906040810151606082015160801b6001600160801b03199081166001600160801b039283161760018701559094600201946080830151169085541617845501511664ffffffffff60801b1964ffffffffff60801b83549260801b169116179055565b565b634e487b7160e01b600052600060045260246000fd5b15612edb57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b15612f4c57565b606460405162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a65640000000000000000000000000000000000006044820152fd5b9081602091031261025d5751801515810361025d5790565b60001981146108c35760010190565b51906001600160801b038216820361025d57565b6001600160a01b038061012e54169061012d54166040809160248251809581937fa7cac84600000000000000000000000000000000000000000000000000000000835260048301525afa90811561307e57600091613033575b506001600160801b0391501690565b82813d8311613077575b6130478183612a08565b81010312613074575061306e6020826130676001600160801b0394612fb7565b5001612fb7565b38613024565b80fd5b503d61303d565b513d6000823e3d90fd5b80518210156126485760209160051b010190565b81156130a6570490565b634e487b7160e01b600052601260045260246000fd5b9190916001600160801b03808094169116019182116108c357565b61012f546130e361352e565b9160005b8281106130f45750505050565b6130fd8161260c565b50906131098186613088565b518015801561316b575b50506002613138920164ffffffffff904282825460801c161061313d575b5050612fa8565b6130e7565b61316491421664ffffffffff60801b1964ffffffffff60801b83549260801b169116179055565b3880613131565b9092670de0b6b3a76400009182850290858204841417156108c357613138946131ec6131ad611ab061320b94600297808c101560001461321157508a9061309c565b916131e360018601936001600160801b03198554916131d66001600160801b03918285166130bc565b16911617918285556137e6565b9060801c6130bc565b6001600160801b036001600160801b031983549260801b169116179055565b92613113565b9061309c565b67ffffffffffffffff81116129f25760051b60200190565b9061323982613217565b6132466040519182612a08565b8281528092613257601f1991613217565b0190602036910137565b3d1561329c573d9067ffffffffffffffff82116129f25760405191613290601f8201601f191660200184612a08565b82523d6000602084013e565b606090565b156132a857565b606460405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152fd5b60405160208101937fa9059cbb0000000000000000000000000000000000000000000000000000000085526001600160a01b038094166024830152604482015260448152608081019267ffffffffffffffff92828510848611176129f257169160c08201908111848210176129f257604052602083527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152516133a493600091829182855af161339e613261565b9161343e565b8051908115918215613424575b5050156133ba57565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6134379250602080918301019101612f90565b38806133b1565b9192901561349f5750815115613452575090565b3b1561345b5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156134b25750805190602001fd5b6127d59060405191829162461bcd60e51b835260048301612a2a565b906040516134db816129d6565b60a064ffffffffff829480546001600160a01b0381168552831c602085015260026001820154916001600160801b0392838116604088015260801c60608701520154908116608085015260801c16910152565b61012f549061353c8261322f565b91613545613728565b9064ffffffffff42811660005b838110613560575050505050565b61356c61073f8261260c565b908360a083015116804210613623578303918483116108c3576135a86135f093866bffffffffffffffffffffffff602085015116911690612b80565b90600090608081016001600160801b039060606135cd8c611252898686511692613088565b93019282845116106135fc575b5050508082116135f557505b610751828a613088565b613552565b90506135e6565b61361b935081613612915116611252878d613088565b91511690612c53565b3880806135da565b506135f09150612fa8565b818103929160001380158285131691841216176108c357565b61012f549061365582613217565b6136626040519182612a08565b828152601f1961367184613217565b01366020830137809261368261352e565b9161368b613728565b6000805b84811061369e57505050505050565b6136aa61073f8261260c565b6001600160801b0380608083015116916136c48487613088565b51928584820194851291129080158216911516176137145761370f93926137059260606136f4930151169061362e565b6136fe838a613088565b519061362e565b6107518287613088565b61368f565b602485634e487b7160e01b81526011600452fd5b61012f54906137368261322f565b9160005b818110613745575050565b6001600160a01b036137568261260c565b50541690816137745761376f9150476107518287613088565b61373a565b6040805180936370a0823160e01b825230600483015281602460209687935afa91821561307e57506000916137b4575b5061376f92506107518287613088565b919282813d83116137df575b6137ca8183612a08565b8101031261307457509061376f9151386137a4565b503d6137c0565b6001600160801b03908181116137fa571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fdfea2646970667358221220135409e7b630362efea161a7e7fcbec3a49f20f819e8408de5ab9581a2c315ac64736f6c63430008120033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "emergencyTokenWithdraw(address)": {
        "details": "only to be called by owner"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "rewardTokenSurpluses()": {
        "returns": {
          "surpluses_": "surpluses of the reward tokens."
        }
      },
      "setRewardRate(uint256,uint96,uint40)": {
        "params": {
          "_startTimestampToOverride": "the start time for the token emission.        A value of 0 indicates no changes, while a future timestamp starts the emission at the specified time.",
          "_tokenId": "The token id",
          "_tokenPerSec": "The number of tokens to distribute per second"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balances()": {
        "notice": "View function to see balances of reward token."
      },
      "emergencyTokenWithdraw(address)": {
        "notice": "avoids loosing funds in case there is any tokens sent to this contract the reward token will not be stopped and keep accumulating debts"
      },
      "emergencyWithdraw()": {
        "notice": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens. there will be deficit which is equal to the unclaimed amount"
      },
      "initialize(address,address,address,uint256,address,uint96)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "lpToken()": {
        "notice": "Visualization of the relationship between distributedAmount, claimedAmount, rewardToDistribute, availableReward, surplus and balance: Case: emission is active. rewardToDistribute is growing at the rate of tokenPerSec. |<--------------distributedAmount------------->|<--rewardToDistribute*-->| |<-----claimedAmount----->|<-------------------------balance------------------------->|                                                |<-----------availableReward*--------->|                           |<-unclaimedAmount*->|                         |<-surplus*->| Case: reward running out. rewardToDistribute stopped growing. it is capped at availableReward. |<--------------distributedAmount------------->|<---------rewardToDistribute*-------->| |<-----claimedAmount----->|<-------------------------balance------------------------->|                                                |<-----------availableReward*--------->|                           |<-unclaimedAmount*->|                                       surplus* = 0 Case: balance emptied after emergencyWithdraw. |<--------------distributedAmount------------->| rewardToDistribute* = 0 |<-----claimedAmount----->|                      balance = 0, availableReward* = 0                           |<-unclaimedAmount*->| surplus* = - unclaimedAmount* (negative to indicate deficit) (Variables with * are not in the RewardInfo state, but can be derived from it.) balance, is the amount of reward token in this contract. Not all of them are available for distribution as some are reserved for unclaimed rewards. distributedAmount, is the amount of reward token that has been distributed up to lastRewardTimestamp. claimedAmount, is the amount of reward token that has been claimed by users. claimedAmount always <= distributedAmount. unclaimedAmount = distributedAmount - claimedAmount, is the amount of reward token in balance that is reserved to be claimed by users. availableReward = balance - unclaimedAmount, is the amount inside balance that is available for distribution (not reserved for unclaimed rewards). rewardToDistribute is the accumulated reward from [lastRewardTimestamp, now] that is yet to be distributed. as distributedAmount only accounts for the distributed amount up to lastRewardTimestamp. it is used in _updateReward(), and to be added to distributedAmount. to prevent bad debt, rewardToDistribute is capped at availableReward. as we cannot distribute more than the availableReward. rewardToDistribute = min(tokenPerSec * (now - lastRewardTimestamp), availableReward) surplus = availableReward - rewardToDistribute, is the amount inside balance that is available for future distribution."
      },
      "rewardInfo(uint256)": {
        "notice": "View function to preserve backward compatibility, as the previous version uses rewardInfo instead of rewardInfos"
      },
      "rewardInfos(uint256)": {
        "notice": "Info of the reward tokens."
      },
      "rewardTokenSurpluses()": {
        "notice": "View function to see surplus of each reward, i.e. reward balance - unclaimed amount it would be negative if there's bad debt/deficit, which would happend only if some token was emergencyWithdrawn."
      },
      "rewardsToDistribute()": {
        "notice": "the amount of reward accumulated since the lastRewardTimestamp and is to be distributed. the case that lastRewardTimestamp is in the future is also handled"
      },
      "runoutTimestamps()": {
        "notice": "View function to see the timestamp when the reward will runout based on current emission rate and balance left. a timestamp of 0 indicates that the token is not emitting or already run out. also works for the case that emission start time (lastRewardTimestamp) is in the future."
      },
      "setRewardRate(uint256,uint96,uint40)": {
        "notice": "Sets the distribution reward rate, and updates the emission start time if specified."
      },
      "userBalanceInfo(address)": {
        "notice": "userAddr => UserBalanceInfo"
      },
      "userRewardInfo(uint256,address)": {
        "notice": "tokenId => userId => UserRewardInfo"
      }
    },
    "notice": "Simple bribe per sec. Distribute bribe rewards to voters Bribe.onVote->updateReward() is a bit different from SimpleRewarder. Here we reduce the original total amount of share",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2926,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2929,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3670,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2798,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2918,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3943,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2393,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2388_storage)"
      },
      {
        "astId": 2688,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2242,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)5253_storage)"
      },
      {
        "astId": 2352,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3229,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 3298,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 62458,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "lpToken",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC20)8968"
      },
      {
        "astId": 62460,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "master",
        "offset": 0,
        "slot": "302",
        "type": "t_address"
      },
      {
        "astId": 62465,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "rewardInfos",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_struct(RewardInfo)62454_storage)dyn_storage"
      },
      {
        "astId": 62471,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "userBalanceInfo",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_struct(UserBalanceInfo)62432_storage)"
      },
      {
        "astId": 62479,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "userRewardInfo",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserRewardInfo)62437_storage))"
      },
      {
        "astId": 62482,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "bribeFactory",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IBribeRewarderFactory)55948"
      },
      {
        "astId": 62484,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "isDeprecated",
        "offset": 20,
        "slot": "306",
        "type": "t_bool"
      },
      {
        "astId": 64279,
        "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "307",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardInfo)62454_storage)dyn_storage": {
        "base": "t_struct(RewardInfo)62454_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiRewarderPerSecV2.RewardInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBribeRewarderFactory)55948": {
        "encoding": "inplace",
        "label": "contract IBribeRewarderFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)8968": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserBalanceInfo)62432_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiRewarderPerSecV2.UserBalanceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserBalanceInfo)62432_storage"
      },
      "t_mapping(t_address,t_struct(UserRewardInfo)62437_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiRewarderPerSecV2.UserRewardInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRewardInfo)62437_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)5253_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5253_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2388_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2388_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserRewardInfo)62437_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MultiRewarderPerSecV2.UserRewardInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserRewardInfo)62437_storage)"
      },
      "t_struct(AddressSet)5253_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 5252,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4938_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RewardInfo)62454_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSecV2.RewardInfo",
        "members": [
          {
            "astId": 62441,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "rewardToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)8968"
          },
          {
            "astId": 62443,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "tokenPerSec",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 62446,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 62448,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "distributedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 62451,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 62453,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "lastRewardTimestamp",
            "offset": 16,
            "slot": "2",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)2388_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 2385,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2387,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4938_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4933,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4937,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserBalanceInfo)62432_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSecV2.UserBalanceInfo",
        "members": [
          {
            "astId": 62431,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserRewardInfo)62437_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewarderPerSecV2.UserRewardInfo",
        "members": [
          {
            "astId": 62434,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 62436,
            "contract": "contracts/wombat-governance/gauge/BribeV2.sol:BribeV2",
            "label": "unpaidRewards",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}