{
  "address": "0xD0599dB1eDb0ce601AFCc59779fa21FEfaC83786",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IMultiRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWomWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IMultiRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "SetRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basePartition",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boostedPartition",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionPartition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVeWOM",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVeWOM",
          "type": "address"
        }
      ],
      "name": "UpdateVeWOM",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVoter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVoter",
          "type": "address"
        }
      ],
      "name": "UpdateVoter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_TOKEN_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IMultiRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basePartition",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boostedPartition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "calRewardPerUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accWomPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accWomPerFactorShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "additionalRewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWomWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_wom",
          "type": "address"
        },
        {
          "internalType": "contract IVeWom",
          "name": "_veWom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_basePartition",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_periodFinish",
          "type": "uint256"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "multiClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "additionalRewards",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "bonusTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "bonusTokenSymbols",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pendingBonusRewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "allocPoint",
          "type": "uint96"
        },
        {
          "internalType": "contract IMultiRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sumOfFactors",
          "type": "uint256"
        },
        {
          "internalType": "uint104",
          "name": "accWomPerShare",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "accWomPerFactorShare",
          "type": "uint104"
        },
        {
          "internalType": "uint40",
          "name": "lastRewardTimestamp",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfoV3",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IMultiRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "periodFinish",
          "type": "uint40"
        },
        {
          "internalType": "uint128",
          "name": "sumOfFactors",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardRate",
          "type": "uint128"
        },
        {
          "internalType": "uint104",
          "name": "accWomPerShare",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "accWomPerFactorShare",
          "type": "uint104"
        },
        {
          "internalType": "uint40",
          "name": "lastRewardTimestamp",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "rewarderBonusTokenInfo",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "bonusTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "bonusTokenSymbols",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterWombatV3",
          "name": "_newMasterWombat",
          "type": "address"
        }
      ],
      "name": "setNewMasterWombat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "contract IMultiRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "setRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVeWom",
          "name": "_newVeWom",
          "type": "address"
        }
      ],
      "name": "setVeWom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newVoter",
          "type": "address"
        }
      ],
      "name": "setVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_basePartition",
          "type": "uint16"
        }
      ],
      "name": "updateEmissionPartition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newVeWomBalance",
          "type": "uint256"
        }
      ],
      "name": "updateFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "factor",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardDebt",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "pendingWom",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veWom",
      "outputs": [
        {
          "internalType": "contract IVeWom",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "additionalRewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wom",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7af56be446d8dbfefe486995372afe7ae79e88cfc0c927e689bd1534bab41c8",
  "receipt": {
    "to": null,
    "from": "0xcB3Bb767104e0b3235520fafB182e005D7efD045",
    "contractAddress": "0xD0599dB1eDb0ce601AFCc59779fa21FEfaC83786",
    "transactionIndex": 0,
    "gasUsed": "3064462",
    "logsBloom": "0x
    "blockHash": "0xf3b09b63e143a09850a9475f3b5ea4aa89f22ae06c9a3b1a9d19fa620df691ac",
    "transactionHash": "0xa7af56be446d8dbfefe486995372afe7ae79e88cfc0c927e689bd1534bab41c8",
    "logs": [],
    "blockNumber": 97775987,
    "cumulativeGasUsed": "3064462",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f69478c090fcdc72c3ea9798b655ba5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IMultiRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"EmergencyWomWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IMultiRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"SetRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePartition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostedPartition\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionPartition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVeWOM\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVeWOM\",\"type\":\"address\"}],\"name\":\"UpdateVeWOM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVoter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVoter\",\"type\":\"address\"}],\"name\":\"UpdateVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_TOKEN_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IMultiRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePartition\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostedPartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"calRewardPerUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accWomPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accWomPerFactorShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"additionalRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWomWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_wom\",\"type\":\"address\"},{\"internalType\":\"contract IVeWom\",\"name\":\"_veWom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_basePartition\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodFinish\",\"type\":\"uint256\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"multiClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"additionalRewards\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingBonusRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"allocPoint\",\"type\":\"uint96\"},{\"internalType\":\"contract IMultiRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sumOfFactors\",\"type\":\"uint256\"},{\"internalType\":\"uint104\",\"name\":\"accWomPerShare\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"accWomPerFactorShare\",\"type\":\"uint104\"},{\"internalType\":\"uint40\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfoV3\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IMultiRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"periodFinish\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"sumOfFactors\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardRate\",\"type\":\"uint128\"},{\"internalType\":\"uint104\",\"name\":\"accWomPerShare\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"accWomPerFactorShare\",\"type\":\"uint104\"},{\"internalType\":\"uint40\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewarderBonusTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterWombatV3\",\"name\":\"_newMasterWombat\",\"type\":\"address\"}],\"name\":\"setNewMasterWombat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IMultiRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVeWom\",\"name\":\"_newVeWom\",\"type\":\"address\"}],\"name\":\"setVeWom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVoter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_basePartition\",\"type\":\"uint16\"}],\"name\":\"updateEmissionPartition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newVeWomBalance\",\"type\":\"uint256\"}],\"name\":\"updateFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"factor\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingWom\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veWom\",\"outputs\":[{\"internalType\":\"contract IVeWom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"additionalRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wom\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Updates: - Compatible with gauge voting\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"add(address,address)\":{\"details\":\"Reverts if the same LP token is added more than once.\",\"params\":{\"_lpToken\":\"the corresponding lp token\",\"_rewarder\":\"the rewarder\"}},\"deposit(uint256,uint256)\":{\"details\":\"it is possible to call this function with _amount == 0 to claim current rewards\",\"params\":{\"_amount\":\"amount to deposit\",\"_pid\":\"the pool id\"}},\"depositFor(uint256,uint256,address)\":{\"details\":\"user must initiate transaction from masterchef\",\"params\":{\"_amount\":\"amount to deposit\",\"_pid\":\"the pool id\",\"_user\":\"the user being represented\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"massUpdatePools()\":{\"details\":\"Be careful of gas spending!\"},\"migrate(uint256[])\":{\"details\":\"Assume the orginal MasterWombat has stopped emisions hence we skip IVoter(voter).distribute() to save gas cost\"},\"multiClaim(uint256[])\":{\"params\":{\"_pids\":\"array pids, pools to claim\"}},\"notifyRewardAmount(address,uint256)\":{\"details\":\"Refer to synthetix/StakingRewards.sol notifyRewardAmount Note: This looks safe from reentrancy.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingTokens(uint256,address)\":{\"params\":{\"_pid\":\"the pool id\",\"_user\":\"the user address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewarderBonusTokenInfo(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"setRewarder(uint256,address)\":{\"params\":{\"_pid\":\"the pool id\",\"_rewarder\":\"the rewarder\"}},\"setVeWom(address)\":{\"params\":{\"_newVeWom\":\"the new VeWom address\"}},\"setVoter(address)\":{\"params\":{\"_newVoter\":\"the new Voter address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"updateEmissionPartition(uint16)\":{\"params\":{\"_basePartition\":\"the future base partition\"}},\"updateFactor(address,uint256)\":{\"details\":\"can only be called by veWom\",\"params\":{\"_newVeWomBalance\":\"the amount of veWOM\",\"_user\":\"the user to update\"}},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"the pool id\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"the amount to withdraw\",\"_pid\":\"the pool id\"}}},\"title\":\"MasterWombatV3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(address,address)\":{\"notice\":\"Add a new lp to the pool. Can only be called by the owner.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit LP tokens to MasterChef for WOM allocation.\"},\"depositFor(uint256,uint256,address)\":{\"notice\":\"Deposit LP tokens to MasterChef for WOM allocation on behalf of user\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"emergencyWomWithdraw()\":{\"notice\":\"In case we need to manually migrate WOM funds from MasterChef Sends all remaining wom from the contract to the owner\"},\"massUpdatePools()\":{\"notice\":\"Update reward variables for all pools.\"},\"migrate(uint256[])\":{\"notice\":\"Helper function to migrate fund from multiple pools to the new MasterWombat.user must initiate transaction from masterchef\"},\"multiClaim(uint256[])\":{\"notice\":\"claims rewards for multiple pids\"},\"notifyRewardAmount(address,uint256)\":{\"notice\":\"Distribute WOM over a period of 7 days\"},\"pendingTokens(uint256,address)\":{\"notice\":\"View function to see pending WOMs on frontend.\"},\"poolInfo(uint256)\":{\"notice\":\"[Deprecated] A backward compatible function to return the PoolInfo struct in MasterWombatV2\"},\"poolLength()\":{\"notice\":\"returns pool length\"},\"rewarderBonusTokenInfo(uint256)\":{\"notice\":\"Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm\"},\"setRewarder(uint256,address)\":{\"notice\":\"Update the given pool's rewarder\"},\"setVeWom(address)\":{\"notice\":\"updates veWom address\"},\"setVoter(address)\":{\"notice\":\"updates voter address\"},\"updateEmissionPartition(uint16)\":{\"notice\":\"updates emission partition\"},\"updateFactor(address,uint256)\":{\"notice\":\"updates factor after any veWom token operation (minting/burning)\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw LP tokens from MasterWombat.Automatically harvest pending rewards and sends to user\"}},\"notice\":\"MasterWombat is a boss. He is not afraid of any snakes. In fact, he drinks their venoms. So, veWom holders boost their (boosted) emissions. This contract rewards users in function of their amount of lp staked (base pool) factor (boosted pool) Factor and sumOfFactors are updated by contract VeWom.sol after any veWom minting/burning (veERC20Upgradeable hook). Note that it's ownable and the owner wields tremendous power. The ownership will be transferred to a governance smart contract once Wombat is sufficiently distributed and the community can show to govern itself.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-governance/MasterWombatV3.sol\":\"MasterWombatV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/wombat-governance/MasterWombatV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport './libraries/DSMath.sol';\\nimport './interfaces/IVeWom.sol';\\nimport './interfaces/IMasterWombatV3.sol';\\nimport './interfaces/IMultiRewarder.sol';\\n\\ninterface IVoter {\\n    function distribute(address _lpToken) external;\\n}\\n\\n/// @title MasterWombatV3\\n/// @notice MasterWombat is a boss. He is not afraid of any snakes. In fact, he drinks their venoms. So, veWom holders boost\\n/// their (boosted) emissions. This contract rewards users in function of their amount of lp staked (base pool) factor (boosted pool)\\n/// Factor and sumOfFactors are updated by contract VeWom.sol after any veWom minting/burning (veERC20Upgradeable hook).\\n/// Note that it's ownable and the owner wields tremendous power. The ownership\\n/// will be transferred to a governance smart contract once Wombat is sufficiently\\n/// distributed and the community can show to govern itself.\\n/// @dev Updates:\\n/// - Compatible with gauge voting\\ncontract MasterWombatV3 is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    IMasterWombatV3\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        // storage slot 1\\n        uint128 amount; // 20.18 fixed point. How many LP tokens the user has provided.\\n        uint128 factor; // 20.18 fixed point. boosted factor = sqrt (lpAmount * veWom.balanceOf())\\n        // storage slot 2\\n        uint128 rewardDebt; // 20.18 fixed point. Reward debt. See explanation below.\\n        uint128 pendingWom; // 20.18 fixed point. Amount of pending wom\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of WOMs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   ((user.amount * pool.accWomPerShare + user.factor * pool.accWomPerFactorShare) / 1e12) -\\n        //        user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accWomPerShare`, `accWomPerFactorShare` (and `lastRewardTimestamp`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfoV3 {\\n        IERC20 lpToken; // Address of LP token contract.\\n        ////\\n        IMultiRewarder rewarder;\\n        uint40 periodFinish;\\n        ////\\n        uint128 sumOfFactors; // 20.18 fixed point. the sum of all boosted factors by all of the users in the pool\\n        uint128 rewardRate; // 20.18 fixed point.\\n        ////\\n        uint104 accWomPerShare; // 19.12 fixed point. Accumulated WOM per share, times 1e12.\\n        uint104 accWomPerFactorShare; // 19.12 fixed point. Accumulated WOM per factor share\\n        uint40 lastRewardTimestamp;\\n    }\\n\\n    uint256 public constant REWARD_DURATION = 7 days;\\n    uint256 public constant ACC_TOKEN_PRECISION = 1e12;\\n\\n    // Wom token\\n    IERC20 public wom;\\n    // Venom does not seem to hurt the Wombat, it only makes it stronger.\\n    IVeWom public veWom;\\n    // New Master Wombat address for future migrations\\n    IMasterWombatV3 newMasterWombat;\\n    // Address of Voter\\n    address public voter;\\n    // Base partition emissions (e.g. 300 for 30%).\\n    // BasePartition and boostedPartition add up to 1000 for 100%\\n    uint16 public basePartition;\\n    // Set of all LP tokens that have been added as pools\\n    EnumerableSet.AddressSet private lpTokens;\\n    // Info of each pool.\\n    PoolInfoV3[] public poolInfoV3;\\n    // userInfo[pid][user], Info of each user that stakes LP tokens\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Mapping of asset to pid. Offset by +1 to distinguish with default value\\n    mapping(address => uint256) internal assetPid;\\n\\n    event Add(uint256 indexed pid, IERC20 indexed lpToken, IMultiRewarder rewarder);\\n    event SetRewarder(uint256 indexed pid, IMultiRewarder rewarder);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event DepositFor(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdateEmissionPartition(address indexed user, uint256 basePartition, uint256 boostedPartition);\\n    event UpdateVeWOM(address indexed user, address oldVeWOM, address newVeWOM);\\n    event UpdateVoter(address indexed user, address oldVoter, address newVoter);\\n    event EmergencyWomWithdraw(address owner, uint256 balance);\\n\\n    /// @dev Modifier ensuring that certain function can only be called by VeWom\\n    modifier onlyVeWom() {\\n        require(address(veWom) == msg.sender, 'MasterWombat: caller is not VeWom');\\n        _;\\n    }\\n\\n    /// @dev Modifier ensuring that certain function can only be called by Voter\\n    modifier onlyVoter() {\\n        require(address(voter) == msg.sender, 'MasterWombat: caller is not Voter');\\n        _;\\n    }\\n\\n    function initialize(IERC20 _wom, IVeWom _veWom, address _voter, uint16 _basePartition) external initializer {\\n        require(address(_wom) != address(0), 'wom address cannot be zero');\\n        require(_basePartition <= 1000, 'base partition must be in range 0, 1000');\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        wom = _wom;\\n        veWom = _veWom;\\n        voter = _voter;\\n        basePartition = _basePartition;\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setNewMasterWombat(IMasterWombatV3 _newMasterWombat) external onlyOwner {\\n        newMasterWombat = _newMasterWombat;\\n    }\\n\\n    /// @notice Add a new lp to the pool. Can only be called by the owner.\\n    /// @dev Reverts if the same LP token is added more than once.\\n    /// @param _lpToken the corresponding lp token\\n    /// @param _rewarder the rewarder\\n    function add(IERC20 _lpToken, IMultiRewarder _rewarder) external onlyOwner {\\n        require(Address.isContract(address(_lpToken)), 'add: LP token must be a valid contract');\\n        require(\\n            Address.isContract(address(_rewarder)) || address(_rewarder) == address(0),\\n            'add: rewarder must be contract or zero'\\n        );\\n        require(!lpTokens.contains(address(_lpToken)), 'add: LP already added');\\n\\n        // update PoolInfoV3 with the new LP\\n        poolInfoV3.push(\\n            PoolInfoV3({\\n                lpToken: _lpToken,\\n                lastRewardTimestamp: uint40(block.timestamp),\\n                accWomPerShare: 0,\\n                rewarder: _rewarder,\\n                accWomPerFactorShare: 0,\\n                sumOfFactors: 0,\\n                periodFinish: uint40(block.timestamp),\\n                rewardRate: 0\\n            })\\n        );\\n        assetPid[address(_lpToken)] = poolInfoV3.length;\\n\\n        // add lpToken to the lpTokens enumerable set\\n        lpTokens.add(address(_lpToken));\\n        emit Add(poolInfoV3.length - 1, _lpToken, _rewarder);\\n    }\\n\\n    /// @notice Update the given pool's rewarder\\n    /// @param _pid the pool id\\n    /// @param _rewarder the rewarder\\n    function setRewarder(uint256 _pid, IMultiRewarder _rewarder) external onlyOwner {\\n        require(\\n            Address.isContract(address(_rewarder)) || address(_rewarder) == address(0),\\n            'set: rewarder must be contract or zero'\\n        );\\n\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n\\n        pool.rewarder = _rewarder;\\n        emit SetRewarder(_pid, _rewarder);\\n    }\\n\\n    /// @notice Update reward variables for all pools.\\n    /// @dev Be careful of gas spending!\\n    function massUpdatePools() public override {\\n        uint256 length = poolInfoV3.length;\\n        for (uint256 pid; pid < length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    /// @notice Update reward variables of the given pool\\n    /// @param _pid the pool id\\n    function updatePool(uint256 _pid) external override {\\n        _updatePool(_pid);\\n    }\\n\\n    function _updatePool(uint256 _pid) private {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n\\n        if (block.timestamp > pool.lastRewardTimestamp) {\\n            (uint256 accWomPerShare, uint256 accWomPerFactorShare) = calRewardPerUnit(_pid);\\n            pool.accWomPerShare = to104(accWomPerShare);\\n            pool.accWomPerFactorShare = to104(accWomPerFactorShare);\\n            pool.lastRewardTimestamp = uint40(lastTimeRewardApplicable(pool.periodFinish));\\n\\n            // We can consider to skip this function to minimize gas\\n            // voter address can be zero during a migration. See comment in setVoter.\\n            if (voter != address(0)) {\\n                IVoter(voter).distribute(address(pool.lpToken));\\n            }\\n        }\\n    }\\n\\n    /// @notice Distribute WOM over a period of 7 days\\n    /// @dev Refer to synthetix/StakingRewards.sol notifyRewardAmount\\n    /// Note: This looks safe from reentrancy.\\n    function notifyRewardAmount(address _lpToken, uint256 _amount) external override onlyVoter {\\n        require(_amount > 0, 'notifyRewardAmount: zero amount');\\n\\n        // this line reverts if asset is not in the list\\n        uint256 pid = assetPid[_lpToken] - 1;\\n        PoolInfoV3 storage pool = poolInfoV3[pid];\\n        if (pool.lastRewardTimestamp >= pool.periodFinish) {\\n            pool.rewardRate = to128(_amount / REWARD_DURATION);\\n        } else {\\n            uint256 remainingTime = pool.periodFinish - pool.lastRewardTimestamp;\\n            uint256 leftoverReward = remainingTime * pool.rewardRate;\\n            pool.rewardRate = to128((_amount + leftoverReward) / REWARD_DURATION);\\n        }\\n\\n        pool.lastRewardTimestamp = uint40(block.timestamp);\\n        pool.periodFinish = uint40(block.timestamp + REWARD_DURATION);\\n\\n        // Event is not emitted as Voter should have already emitted it\\n    }\\n\\n    /// @notice Helper function to migrate fund from multiple pools to the new MasterWombat.\\n    /// @notice user must initiate transaction from masterchef\\n    /// @dev Assume the orginal MasterWombat has stopped emisions\\n    /// hence we skip IVoter(voter).distribute() to save gas cost\\n    function migrate(uint256[] calldata _pids) external override nonReentrant {\\n        require(address(newMasterWombat) != (address(0)), 'to where?');\\n\\n        _multiClaim(_pids);\\n        for (uint256 i; i < _pids.length; ++i) {\\n            uint256 pid = _pids[i];\\n            UserInfo storage user = userInfo[pid][msg.sender];\\n\\n            if (user.amount > 0) {\\n                PoolInfoV3 storage pool = poolInfoV3[pid];\\n                pool.lpToken.approve(address(newMasterWombat), user.amount);\\n                uint256 newPid = newMasterWombat.getAssetPid(address(pool.lpToken));\\n                newMasterWombat.depositFor(newPid, user.amount, msg.sender);\\n\\n                pool.sumOfFactors -= user.factor;\\n                // remove user\\n                delete userInfo[pid][msg.sender];\\n            }\\n        }\\n    }\\n\\n    /// @notice Deposit LP tokens to MasterChef for WOM allocation on behalf of user\\n    /// @dev user must initiate transaction from masterchef\\n    /// @param _pid the pool id\\n    /// @param _amount amount to deposit\\n    /// @param _user the user being represented\\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external override nonReentrant whenNotPaused {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        // update pool in case user has deposited\\n        _updatePool(_pid);\\n\\n        _updateUserAmount(_pid, _user, user.amount + _amount);\\n\\n        // safe transfer is not needed for Asset\\n        pool.lpToken.transferFrom(msg.sender, address(this), _amount);\\n        emit DepositFor(_user, _pid, _amount);\\n    }\\n\\n    /// @notice Deposit LP tokens to MasterChef for WOM allocation.\\n    /// @dev it is possible to call this function with _amount == 0 to claim current rewards\\n    /// @param _pid the pool id\\n    /// @param _amount amount to deposit\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external override nonReentrant whenNotPaused returns (uint256 reward, uint256[] memory additionalRewards) {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        // update pool in case user has deposited\\n        _updatePool(_pid);\\n\\n        (reward, additionalRewards) = _updateUserAmount(_pid, msg.sender, user.amount + _amount);\\n\\n        // safe transfer is not needed for Asset\\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice claims rewards for multiple pids\\n    /// @param _pids array pids, pools to claim\\n    function multiClaim(\\n        uint256[] calldata _pids\\n    )\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256 reward, uint256[] memory amounts, uint256[][] memory additionalRewards)\\n    {\\n        return _multiClaim(_pids);\\n    }\\n\\n    /// @notice private function to claim rewards for multiple pids\\n    /// @param _pids array pids, pools to claim\\n    function _multiClaim(\\n        uint256[] memory _pids\\n    ) private returns (uint256 reward, uint256[] memory amounts, uint256[][] memory additionalRewards) {\\n        // accumulate rewards for each one of the pids in pending\\n        amounts = new uint256[](_pids.length);\\n        additionalRewards = new uint256[][](_pids.length);\\n        for (uint256 i; i < _pids.length; ++i) {\\n            UserInfo storage user = userInfo[_pids[i]][msg.sender];\\n            _updatePool(_pids[i]);\\n\\n            if (user.amount > 0) {\\n                PoolInfoV3 storage pool = poolInfoV3[_pids[i]];\\n                // increase pending to send all rewards once\\n                uint256 poolRewards = ((uint256(user.amount) *\\n                    pool.accWomPerShare +\\n                    uint256(user.factor) *\\n                    pool.accWomPerFactorShare) / ACC_TOKEN_PRECISION) +\\n                    user.pendingWom -\\n                    user.rewardDebt;\\n\\n                user.pendingWom = 0;\\n\\n                // update reward debt\\n                user.rewardDebt = to128(\\n                    (uint256(user.amount) * pool.accWomPerShare + uint256(user.factor) * pool.accWomPerFactorShare) /\\n                        ACC_TOKEN_PRECISION\\n                );\\n\\n                // increase reward\\n                reward += poolRewards;\\n\\n                amounts[i] = poolRewards;\\n                emit Harvest(msg.sender, _pids[i], amounts[i]);\\n\\n                // if exist, update external rewarder\\n                IMultiRewarder rewarder = pool.rewarder;\\n                if (address(rewarder) != address(0)) {\\n                    additionalRewards[i] = rewarder.onReward(msg.sender, user.amount);\\n                }\\n            }\\n        }\\n\\n        // transfer all rewards\\n        // SafeERC20 is not needed as WOM will revert if transfer fails\\n        wom.transfer(payable(msg.sender), reward);\\n    }\\n\\n    /// @notice Withdraw LP tokens from MasterWombat.\\n    /// @notice Automatically harvest pending rewards and sends to user\\n    /// @param _pid the pool id\\n    /// @param _amount the amount to withdraw\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external override nonReentrant whenNotPaused returns (uint256 reward, uint256[] memory additionalRewards) {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, 'withdraw: not enough balance');\\n\\n        _updatePool(_pid);\\n\\n        (reward, additionalRewards) = _updateUserAmount(_pid, msg.sender, user.amount - _amount);\\n\\n        // SafeERC20 is not needed as Asset will revert if transfer fails\\n        pool.lpToken.transfer(msg.sender, _amount);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice Update user balance and distribute WOM rewards\\n    function _updateUserAmount(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) internal returns (uint256 reward, uint256[] memory additionalRewards) {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        // Harvest WOM\\n        if (user.amount > 0 || user.pendingWom > 0) {\\n            reward =\\n                ((uint256(user.amount) * pool.accWomPerShare + uint256(user.factor) * pool.accWomPerFactorShare) /\\n                    ACC_TOKEN_PRECISION) +\\n                user.pendingWom -\\n                user.rewardDebt;\\n            user.pendingWom = 0;\\n\\n            // SafeERC20 is not needed as WOM will revert if transfer fails\\n            wom.transfer(payable(_user), reward);\\n            emit Harvest(_user, _pid, reward);\\n        }\\n\\n        // update amount of lp staked\\n        user.amount = to128(_amount);\\n\\n        // update sumOfFactors\\n        uint128 oldFactor = user.factor;\\n        user.factor = to128(DSMath.sqrt(user.amount * veWom.balanceOf(_user), user.amount));\\n\\n        // update reward debt\\n        user.rewardDebt = to128(\\n            (uint256(user.amount) * pool.accWomPerShare + uint256(user.factor) * pool.accWomPerFactorShare) /\\n                ACC_TOKEN_PRECISION\\n        );\\n\\n        // update rewarder before we update lpSupply and sumOfFactors\\n        IMultiRewarder rewarder = pool.rewarder;\\n        if (address(rewarder) != address(0)) {\\n            additionalRewards = rewarder.onReward(_user, _amount);\\n        }\\n\\n        pool.sumOfFactors = to128(pool.sumOfFactors + user.factor - oldFactor);\\n    }\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    /// @param _pid the pool id\\n    function emergencyWithdraw(uint256 _pid) external override nonReentrant {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        // safe transfer is not needed for Asset\\n        pool.lpToken.transfer(address(msg.sender), user.amount);\\n\\n        // reset rewarder\\n        IMultiRewarder rewarder = poolInfoV3[_pid].rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onReward(msg.sender, 0);\\n        }\\n\\n        pool.sumOfFactors = pool.sumOfFactors - user.factor;\\n\\n        user.amount = 0;\\n        user.factor = 0;\\n        user.rewardDebt = 0;\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    /// @notice updates emission partition\\n    /// @param _basePartition the future base partition\\n    function updateEmissionPartition(uint16 _basePartition) external onlyOwner {\\n        require(_basePartition <= 1000);\\n        massUpdatePools();\\n        basePartition = _basePartition;\\n        emit UpdateEmissionPartition(msg.sender, _basePartition, 1000 - _basePartition);\\n    }\\n\\n    /// @notice updates veWom address\\n    /// @param _newVeWom the new VeWom address\\n    function setVeWom(IVeWom _newVeWom) external onlyOwner {\\n        require(address(_newVeWom) != address(0));\\n        IVeWom oldVeWom = veWom;\\n        veWom = _newVeWom;\\n        emit UpdateVeWOM(msg.sender, address(oldVeWom), address(_newVeWom));\\n    }\\n\\n    /// @notice updates voter address\\n    /// @param _newVoter the new Voter address\\n    function setVoter(address _newVoter) external onlyOwner {\\n        // voter address can be zero during a migration. This is done to avoid\\n        // the scenario where both old and new MasterWombat claims in migrate,\\n        // which calls voter.distribute. But only one can succeed as voter.distribute\\n        // is only callable from gauge manager.\\n        address oldVoter = voter;\\n        voter = _newVoter;\\n        emit UpdateVoter(msg.sender, oldVoter, _newVoter);\\n    }\\n\\n    /// @notice updates factor after any veWom token operation (minting/burning)\\n    /// @param _user the user to update\\n    /// @param _newVeWomBalance the amount of veWOM\\n    /// @dev can only be called by veWom\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external override onlyVeWom {\\n        // loop over each pool : beware gas cost!\\n        uint256 length = poolInfoV3.length;\\n\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            UserInfo storage user = userInfo[pid][_user];\\n\\n            // skip if user doesn't have any deposit in the pool\\n            if (user.amount == 0) {\\n                continue;\\n            }\\n\\n            // first, update pool\\n            _updatePool(pid);\\n            PoolInfoV3 storage pool = poolInfoV3[pid];\\n\\n            // calculate pending\\n            uint256 pending = ((uint256(user.amount) *\\n                pool.accWomPerShare +\\n                uint256(user.factor) *\\n                pool.accWomPerFactorShare) / ACC_TOKEN_PRECISION) - user.rewardDebt;\\n            // increase pendingWom\\n            user.pendingWom += to128(pending);\\n\\n            // update boosted partition factor\\n            uint256 oldFactor = user.factor;\\n            uint256 newFactor = DSMath.sqrt(user.amount * _newVeWomBalance, user.amount);\\n            user.factor = to128(newFactor);\\n            // update reward debt, take into account newFactor\\n            user.rewardDebt = to128(\\n                (uint256(user.amount) * pool.accWomPerShare + newFactor * pool.accWomPerFactorShare) /\\n                    ACC_TOKEN_PRECISION\\n            );\\n            // also, update sumOfFactors\\n            pool.sumOfFactors = to128(pool.sumOfFactors + newFactor - oldFactor);\\n        }\\n    }\\n\\n    /// @notice In case we need to manually migrate WOM funds from MasterChef\\n    /// Sends all remaining wom from the contract to the owner\\n    function emergencyWomWithdraw() external onlyOwner {\\n        // safe transfer is not needed for WOM\\n        wom.transfer(address(msg.sender), wom.balanceOf(address(this)));\\n        emit EmergencyWomWithdraw(address(msg.sender), wom.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * Read-only functions\\n     */\\n\\n    /// @notice Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm\\n    /// @param _pid the pool id\\n    function rewarderBonusTokenInfo(\\n        uint256 _pid\\n    ) public view override returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols) {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n        if (address(pool.rewarder) == address(0)) {\\n            return (bonusTokenAddresses, bonusTokenSymbols);\\n        }\\n\\n        bonusTokenAddresses = pool.rewarder.rewardTokens();\\n\\n        uint256 len = bonusTokenAddresses.length;\\n        bonusTokenSymbols = new string[](len);\\n        for (uint256 i; i < len; ++i) {\\n            if (address(bonusTokenAddresses[i]) == address(0)) {\\n                bonusTokenSymbols[i] = 'BNB';\\n            } else {\\n                bonusTokenSymbols[i] = IERC20Metadata(address(bonusTokenAddresses[i])).symbol();\\n            }\\n        }\\n    }\\n\\n    function boostedPartition() external view returns (uint256) {\\n        return 1000 - basePartition;\\n    }\\n\\n    /// @notice returns pool length\\n    function poolLength() external view override returns (uint256) {\\n        return poolInfoV3.length;\\n    }\\n\\n    function getAssetPid(address asset) external view override returns (uint256) {\\n        // revert if asset not exist\\n        return assetPid[asset] - 1;\\n    }\\n\\n    function lastTimeRewardApplicable(uint256 _periodFinish) public view returns (uint256) {\\n        return block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\\n    }\\n\\n    function calRewardPerUnit(uint256 _pid) public view returns (uint256 accWomPerShare, uint256 accWomPerFactorShare) {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        accWomPerShare = pool.accWomPerShare;\\n        accWomPerFactorShare = pool.accWomPerFactorShare;\\n\\n        if (lpSupply == 0 || block.timestamp <= pool.lastRewardTimestamp) {\\n            // update only if now > lastRewardTimestamp\\n            return (accWomPerShare, accWomPerFactorShare);\\n        }\\n\\n        uint256 secondsElapsed = lastTimeRewardApplicable(pool.periodFinish) - pool.lastRewardTimestamp;\\n        uint256 womReward = secondsElapsed * pool.rewardRate;\\n        accWomPerShare += (womReward * ACC_TOKEN_PRECISION * basePartition) / (lpSupply * 1000);\\n\\n        if (pool.sumOfFactors != 0) {\\n            accWomPerFactorShare +=\\n                (womReward * ACC_TOKEN_PRECISION * (1000 - basePartition)) /\\n                (pool.sumOfFactors * 1000);\\n        }\\n    }\\n\\n    /// @notice View function to see pending WOMs on frontend.\\n    /// @param _pid the pool id\\n    /// @param _user the user address\\n    function pendingTokens(\\n        uint256 _pid,\\n        address _user\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 pendingRewards,\\n            IERC20[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        )\\n    {\\n        PoolInfoV3 storage pool = poolInfoV3[_pid];\\n\\n        // calculate accWomPerShare and accWomPerFactorShare\\n        (uint256 accWomPerShare, uint256 accWomPerFactorShare) = calRewardPerUnit(_pid);\\n\\n        UserInfo storage user = userInfo[_pid][_user];\\n        pendingRewards =\\n            ((user.amount * accWomPerShare + user.factor * accWomPerFactorShare) / ACC_TOKEN_PRECISION) +\\n            user.pendingWom -\\n            user.rewardDebt;\\n\\n        // If it's a double reward farm, return info about the bonus token\\n        if (address(pool.rewarder) != address(0)) {\\n            (bonusTokenAddresses, bonusTokenSymbols) = rewarderBonusTokenInfo(_pid);\\n            pendingBonusRewards = pool.rewarder.pendingTokens(_user);\\n        }\\n    }\\n\\n    /// @notice [Deprecated] A backward compatible function to return the PoolInfo struct in MasterWombatV2\\n    function poolInfo(\\n        uint256 _pid\\n    )\\n        external\\n        view\\n        returns (\\n            IERC20 lpToken,\\n            uint96 allocPoint,\\n            IMultiRewarder rewarder,\\n            uint256 sumOfFactors,\\n            uint104 accWomPerShare,\\n            uint104 accWomPerFactorShare,\\n            uint40 lastRewardTimestamp\\n        )\\n    {\\n        PoolInfoV3 memory pool = poolInfoV3[_pid];\\n\\n        return (\\n            pool.lpToken,\\n            0,\\n            pool.rewarder,\\n            pool.sumOfFactors,\\n            pool.accWomPerShare,\\n            pool.accWomPerFactorShare,\\n            pool.lastRewardTimestamp\\n        );\\n    }\\n\\n    function to128(uint256 val) internal pure returns (uint128) {\\n        if (val > type(uint128).max) revert('uint128 overflow');\\n        return uint128(val);\\n    }\\n\\n    function to104(uint256 val) internal pure returns (uint104) {\\n        if (val > type(uint104).max) revert('uint104 overflow');\\n        return uint104(val);\\n    }\\n}\\n\",\"keccak256\":\"0x556bf59c6dd14265f68b755983d51168313facef214ac443aadf85b89f9c225a\",\"license\":\"BUSL-1.1\"},\"contracts/wombat-governance/interfaces/IMasterWombatV3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @dev Interface of the MasterWombatV3\\n */\\ninterface IMasterWombatV3 {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(\\n        uint256 _pid,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 pendingRewards,\\n            IERC20[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards\\n        );\\n\\n    function rewarderBonusTokenInfo(\\n        uint256 _pid\\n    ) external view returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function multiClaim(\\n        uint256[] memory _pids\\n    ) external returns (uint256 transfered, uint256[] memory rewards, uint256[][] memory additionalRewards);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(uint256 _pid, uint256 _amount, address _user) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n\\n    function notifyRewardAmount(address _lpToken, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x55f45e09786ed62da80275e03385a5021f9fcee67dfb6a8289a539ed9c04d397\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IMultiRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMultiRewarder {\\n    function lpToken() external view returns (IERC20 lpToken);\\n\\n    function onReward(address _user, uint256 _lpAmount) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe86ea0565fd285dc35506169f1ec6496d2004883f1645e90292f8caa713f049a\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/interfaces/IVeWom.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the VeWom\\n */\\ninterface IVeWom {\\n    struct Breeding {\\n        uint48 unlockTime;\\n        uint104 womAmount;\\n        uint104 veWomAmount;\\n    }\\n\\n    struct UserInfo {\\n        // reserve usage for future upgrades\\n        uint256[10] reserved;\\n        Breeding[] breedings;\\n    }\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _addr) external view returns (uint256);\\n\\n    function isUser(address _addr) external view returns (bool);\\n\\n    function getUserOverview(address _addr) external view returns (uint256 womLocked, uint256 veWomBalance);\\n\\n    function getUserInfo(address addr) external view returns (UserInfo memory);\\n\\n    function mint(uint256 amount, uint256 lockDays) external returns (uint256 veWomAmount);\\n\\n    function burn(uint256 slot) external;\\n\\n    function update(uint256 slot, uint256 lockDays) external returns (uint256 newVeWomAmount);\\n}\\n\",\"keccak256\":\"0x09cbc975f3c52631e66e542a0d0ca041e48fde904e553c03059d4858339a2eb0\",\"license\":\"GPL-3.0\"},\"contracts/wombat-governance/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10 ** 18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess\\n    function sqrt(uint256 y, uint256 guess) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            if (guess > y || guess == 0) {\\n                z = y;\\n            } else {\\n                z = guess;\\n            }\\n            uint256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x039bfc1757911d7cc6d8b6394cc0dd39cfa823cb1685bfc2bfa5e2c9a77cab3b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613692908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c908163081e3eda14612223575080631526fe27146121545780631983dbf5146120a75780632e11275714611df45780633e582ae614611dcd5780633f4ba83a14611d3157806343de320714611c4f578063441a3e7014611aed57806346c96aac14611ac65780634bc2a65714611a475780634ed73d281461196b5780634f00a93e1461171a57806351eb05a6146116fe57806352c28fab146113875780635312ea8e146111e45780635ade228a146111c65780635c975abb146111a3578063630b5ba11461118a578063715018a61461112f5780638456cb59146110d55780638da5cb5b146110ae57806390210d7e14610f9d57806393f1a40b14610f2d5780639b128de614610e9c578063abfef11114610e77578063af929a8014610e1a578063b163e79314610d76578063b66503cf14610b1d578063b8be44e714610af3578063bc70fdbc14610aac578063be159bea14610a7d578063c5a6222e14610a56578063d1e2ac8814610a13578063d93bf4fe1461072c578063e2bbb1581461060f578063eea01604146105ef578063eeca1562146105bc578063f13e55071461041c578063f2fde38b146103775763ffcd4263146101d757600080fd5b34610372576040366003190112610372576004356101f3612254565b6060918261028a849261020581612317565b5094600161021283613386565b8460009692965260d06020526040600020956001600160a01b0380951696876000526020526102828464e8d4a5100061027360406000209561026d8754916102646001600160801b0398898516612839565b9260801c612839565b9061284c565b04930154928360801c9061284c565b9116906125ec565b9601541690816102dc575b505050906102ca6102d8926102bc6040519687968752608060208801526080870190612367565b9085820360408701526123c7565b908382036060850152612296565b0390f35b9093506102ee9195506000925061308b565b9190946024604051809581937fc031a66f00000000000000000000000000000000000000000000000000000000835260048301525afa918215610366576102d8926102ca91600091610343575b509238610295565b61036091503d806000833e61035881836125ca565b810190612996565b3861033b565b6040513d6000823e3d90fd5b600080fd5b346103725760203660031901126103725761039061223e565b610398612438565b6001600160a01b038116156103b2576103b090612490565b005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461037257600036600319011261037257610435612438565b6001600160a01b038060c95416906040516370a0823160e01b918282523060048301526020938483602481845afa801561036657859360009161058a575b5060405163a9059cbb60e01b815233600482015260248101919091529290839060449082906000905af191821561036657849261055d575b5060c954169160246040518094819382523060048301525afa9182156103665760009261050d575b60408051338152602081018590527f2b58f1b72aa1f2865f8da73af0eaff3a2b5b670c59fed83005919fe6c23cf35c91819081015b0390a1005b90809250813d8311610556575b61052481836125ca565b8101031261037257516105087f2b58f1b72aa1f2865f8da73af0eaff3a2b5b670c59fed83005919fe6c23cf35c6104d3565b503d61051a565b61057c90833d8511610583575b61057481836125ca565b8101906128df565b50846104ab565b503d61056a565b84819592503d83116105b5575b6105a181836125ca565b810103126103725791518492906000610473565b503d610597565b34610372576020366003190112610372576004358042106000146105e757506020425b604051908152f35b6020906105df565b3461037257600036600319011261037257602060405164e8d4a510008152f35b346103725761061d36612280565b610625612910565b61062d612549565b61063682612317565b5090826000526001600160a01b0360209360d08552604060002033600052855261068161067a846001600160801b036040600020610673866126cd565b541661284c565b3383612d1c565b94546040516323b872dd60e01b815233600482015230602482015260448101869052919591949193879186916064918391600091165af1938415610366576102d89461070f575b506040519081527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15863392a360016065556040805194859485528401526040830190612296565b61072590873d89116105835761057481836125ca565b50866106c8565b346103725761073a366122ca565b610742612910565b6001600160a01b0360cb5416156109cf57610766610761368385612891565b612a10565b50505060005b81811061077a576001606555005b8060051b83013560005260d06020526040600020336000526020526040600020906001600160801b03825416806107bc575b506107b79150612696565b61076c565b61083f60206107d08460051b880135612317565b50926001600160a01b038454166001600160a01b0360cb541660006040518096819582947f095ea7b3000000000000000000000000000000000000000000000000000000008452600484019092916001600160801b036020916001600160a01b03604085019616845216910152565b03925af18015610366576109b0575b506001600160a01b0360cb5416926001600160a01b03825416604051907faf929a800000000000000000000000000000000000000000000000000000000082526004820152602081602481885afa9081156103665760009161097e575b506001600160801b03825416853b156103725760646000928360405198899485937f90210d7e000000000000000000000000000000000000000000000000000000008552600485015260248401523360448401525af1908115610366576107b79460029261096f575b505460801c9101906001600160801b03196001600160801b0361093b8454938285166128f7565b1691161790558060051b84013560005260d060205260406000203360005260205260006001604082208281550155846107ac565b610978906125b6565b87610914565b90506020813d6020116109a8575b81610999602093836125ca565b810103126103725751876108ab565b3d915061098c565b6109c89060203d6020116105835761057481836125ca565b508561084e565b606460405162461bcd60e51b815260206004820152600960248201527f746f2077686572653f00000000000000000000000000000000000000000000006044820152fd5b34610372576020366003190112610372576004356001600160a01b03811680910361037257610a40612438565b6001600160a01b031960cb54161760cb55600080f35b346103725760003660031901126103725760206001600160a01b0360c95416604051908152f35b3461037257600036600319011261037257602061ffff610aa38160cc5460a01c16613077565b16604051908152f35b3461037257602036600319011261037257610ae56102d8610ace60043561308b565b604092919251938493604085526040850190612367565b9083820360208501526123c7565b34610372576020366003190112610372576040610b11600435613386565b82519182526020820152f35b3461037257604036600319011261037257610b3661223e565b6024908135906001600160a01b03908160cc54163303610d0c578215610cc8571660005260d16020526040600020546000198101908111610cb357610b7a90612317565b50600381019064ffffffffff9182815460d01c1693600183019484865460a01c1680821015600014610c46575050610c03926002610bbf62093a80610be1940461352e565b9101906001600160801b036001600160801b031983549260801b169116179055565b805464ffffffffff60d01b191642841660d01b64ffffffffff60d01b16179055565b62093a804201804211610c3157825464ffffffffff60a01b1916911660a01b64ffffffffff60a01b16179055005b83634e487b7160e01b60005260116004526000fd5b03848111610c9e57610c7a62093a80610c74610c999461026d6002610c039901958a875460801c9116612839565b0461352e565b6001600160801b036001600160801b031983549260801b169116179055565b610be1565b86634e487b7160e01b60005260116004526000fd5b82634e487b7160e01b60005260116004526000fd5b606484601f6040519162461bcd60e51b8352602060048401528201527f6e6f74696679526577617264416d6f756e743a207a65726f20616d6f756e74006044820152fd5b60848460216040519162461bcd60e51b8352602060048401528201527f4d6173746572576f6d6261743a2063616c6c6572206973206e6f7420566f746560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152fd5b346103725760203660031901126103725760043560cf5481101561037257610da061010091612317565b506001600160a01b0390818154169160018201549160036002820154910154916040519485528316602085015264ffffffffff809360a01c1660408501526001600160801b038116606085015260801c60808401526001600160681b0380821660a08501528160681c1660c084015260d01c1660e0820152f35b34610372576020366003190112610372576001600160a01b03610e3b61223e565b1660005260d16020526040600020546000198101908111610e6157602090604051908152f35b634e487b7160e01b600052601160045260246000fd5b3461037257600036600319011261037257602061ffff60cc5460a01c16604051908152f35b3461037257602036600319011261037257610eb561223e565b610ebd612438565b6001600160a01b0380911680156103725760ca80546001600160a01b03198116831790915560408051939091166001600160a01b039081168452909116602083015233917fa0956d8e03557278fdb89913cec4e0f21da09587edf25b3eecc0079cdb757ef591819081015b0390a2005b3461037257604036600319011261037257610f46612254565b60043560005260d06020526001600160a01b03604060002091166000526020526080604060002060018154910154604051916001600160801b03908181168452841c602084015281166040830152821c6060820152f35b3461037257606036600319011261037257600435602435610fbc61226a565b90610fc5612910565b610fcd612549565b610fd683612317565b50918360005260209060d082526040600020936110206001600160a01b039283811696876000528552611019866001600160801b0360406000206106738c6126cd565b9088612d1c565b5050546040516323b872dd60e01b8152336004820152306024820152604481018590529391839185916064918391600091165af1928315610366577f16f3fbfd4bcc50a5cecb2e53e398a1ad77d89f63288ef540d862b264ed57eb1f93611091575b50604051908152a36001606555005b6110a790833d85116105835761057481836125ca565b5085611082565b346103725760003660031901126103725760206001600160a01b0360335416604051908152f35b34610372576000366003190112610372576110ee612438565b6110f6612549565b600160ff1960975416176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461037257600036600319011261037257611148612438565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610372576000366003190112610372576103b06126a5565b3461037257600036600319011261037257602060ff609754166040519015158152f35b3461037257600036600319011261037257602060405162093a808152f35b34610372576020806003193601126103725760043590611202612910565b61120b82612317565b508260005260d0825260406000203360005282526040600020906001600160a01b039182825416926000856112826001600160801b03968786541660405194858094819363a9059cbb60e01b835233600484019092916001600160801b036020916001600160a01b03604085019616845216910152565b03925af180156103665761136a575b50600161129d87612317565b500154168061130f575b506002600192018054936112c1835460801c8287166128f7565b166001600160801b031980951617905560008155019081541690557fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059560405191600083523392a36001606555005b916000809360446040518096819363186e465160e31b83523360048401528160248401525af19081156103665760019360029261134f575b5092506112a7565b611363903d806000833e61035881836125ca565b5087611347565b61138090863d88116105835761057481836125ca565b5086611291565b34610372576040366003190112610372576113a061223e565b6113a8612254565b906113b1612438565b6001600160a01b0380911691823b1561169457811690813b1580159061168c575b15611639578260005260ce6020526040600020546115f55760405164ffffffffff4281166113ff83612599565b858352602083018581526040840182815260608501946000865260808101956000875260a08201926000845260c08301976000895260e0840196875260cf54680100000000000000008110156115df5780600161145f920160cf55612317565b9390936115c9576114bf61154e978a6114e3958e6115709f60039a5116906001600160a01b031991828b5416178a5560018a0194511690845416178355511664ffffffffff60a01b1964ffffffffff60a01b83549260a01b169116179055565b51905160801b6001600160801b0319166001600160801b0391909116176002830155565b01946001600160681b03809251166001600160681b0319875416178655511684907fffffffffffff00000000000000000000000000ffffffffffffffffffffffffff79ffffffffffffffffffffffffff0000000000000000000000000083549260681b169116179055565b51825464ffffffffff60d01b1916911660d01b64ffffffffff60d01b16179055565b60cf548260005260d160205260406000205561158b826125f9565b5060cf54600019810191908211610e615760207fec85b1d1f037ff3a8722aaf5d4d8e7d93c7ff10c056430c18d76a9ec23aa397e91604051908152a3005b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152601560248201527f6164643a204c5020616c726561647920616464656400000000000000000000006044820152fd5b608460405162461bcd60e51b815260206004820152602660248201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b6064820152fd5b5081156113d2565b608460405162461bcd60e51b815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b34610372576020366003190112610372576103b06004356126cd565b346103725760403660031901126103725761173361223e565b6024356001600160a01b038060ca541633036119015760cf54921660005b83811061175a57005b80600052602060d0815260406000209083600052528260406000206001600160801b0380825416156118f55761178f846126cd565b61179884612317565b50908254926003830192828454956001600160681b0390818816838216906117bf91612839565b9164e8d4a5100080936068938360809c861c16908c1c906117df91612839565b6117e89161284c565b049760018701988954908682166117fe916125ec565b6118079061352e565b611812918c1c612d01565b89546001600160801b031660809190911b6001600160801b0319161789558487549b818d16906118429082612839565b9061184c916135de565b976118568961352e565b81546001600160801b031660809190911b6001600160801b031916178155541690549082821661188591612839565b921c166118929086612839565b61189b9161284c565b046118a59061352e565b16936001600160801b03199485825416179055600201948554941c90828516906118ce9161284c565b906118d8916125ec565b6118e19061352e565b1691161790556118f090612696565b611751565b5050506118f090612696565b608460405162461bcd60e51b815260206004820152602160248201527f4d6173746572576f6d6261743a2063616c6c6572206973206e6f74205665576f60448201527f6d000000000000000000000000000000000000000000000000000000000000006064820152fd5b346103725761199661076161197f366122ca565b611987612910565b61198f612549565b3691612891565b9190600190816065556040519283526119bb6020916060838601526060850190612296565b9083820360408501528451908183528083019281808460051b8301019701936000915b8483106119eb5787890388f35b9091929394958098601f198382030184528588518180825194858152019101926000905b85818310611a305750505081925098019301930191949392909795976119de565b919380919386518152019401920188929391611a0f565b3461037257602036600319011261037257611a6061223e565b611a68612438565b60cc80546001600160a01b039283166001600160a01b03198216811790925560408051939091168352602083019190915233917f9db5e84498cff91ecd1f5666fa2ecf069530eb27baffabaccefafc06bbd3cee39181908101610f28565b346103725760003660031901126103725760206001600160a01b0360cc5416604051908152f35b3461037257611afb36612280565b611b03612910565b611b0b612549565b611b1482612317565b50908260005260209260d08452604060002033600052845260406000206001600160801b0390838282541610611c0b5761067a848493611b6693611b5f6001600160a01b03976126cd565b54166125ec565b945460405163a9059cbb60e01b815233600482015260248101869052919591949193879186916044918391600091165af1938415610366576102d894611bee575b506040519081527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568863392a360016065556040805194859485528401526040830190612296565b611c0490873d89116105835761057481836125ca565b5086611ba7565b6064866040519062461bcd60e51b82526004820152601c60248201527f77697468647261773a206e6f7420656e6f7567682062616c616e6365000000006044820152fd5b34610372576040366003190112610372576004356001600160a01b03611c73612254565b611c7b612438565b16803b15801590611d29575b15611cd65760207f858b2cab7b344488967106b3c498c1f59de0a26b500923d9e4e06918909cd511916001611cbb85612317565b5001816001600160a01b0319825416179055604051908152a2005b608460405162461bcd60e51b815260206004820152602660248201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b6064820152fd5b508015611c87565b3461037257600036600319011261037257611d4a612438565b60975460ff811615611d895760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b346103725760003660031901126103725760206001600160a01b0360ca5416604051908152f35b3461037257608036600319011261037257611e0d61223e565b611e15612254565b611e1d61226a565b60643561ffff811692838203610372576000549460ff8660081c16159485809661209a575b8015612083575b156120195760ff198781166001176000559686612007575b506001600160a01b03809216908115611fc3576103e810611f5957817fffffffffffffffffffff0000000000000000000000000000000000000000000093611eb960ff60005460081c16611eb4816124d8565b6124d8565b611ec233612490565b60005498611ee360ff8b60081c16611ed9816124d8565b60016065556124d8565b609754166097556001600160a01b0319928360c954161760c955169060ca54161760ca5561ffff60a01b60cc549360a01b1693169116171760cc55611f2457005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b608460405162461bcd60e51b815260206004820152602760248201527f6261736520706172746974696f6e206d75737420626520696e2072616e67652060448201527f302c2031303030000000000000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601a60248201527f776f6d20616464726573732063616e6e6f74206265207a65726f0000000000006044820152fd5b61ffff19166101011760005587611e61565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b158015611e495750600160ff881614611e49565b50600160ff881610611e42565b346103725760203660031901126103725760043561ffff80821691828103610372576120d1612438565b6103e8831161037257612120906120e66126a5565b60cc547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff61ffff60a01b8360a01b1691161760cc55613077565b6040519283521660208201527f7fd921cf733c788915a229b0ea58095c44ae2c275ed7835501e5135fe3c1ed0560403392a2005b346103725760203660031901126103725760e0612172600435612317565b508160405161218081612599565b6001600160a01b038084541693848352600181015491821680602085015264ffffffffff809360a01c16604085015260036002830154926001600160801b0384169384606088015260801c60808701520154936001600160681b0393848616948560a08401528660681c16958660c084015260d01c1695869101526040519586526000602087015260408601526060850152608084015260a083015260c0820152f35b346103725760003660031901126103725760209060cf548152f35b600435906001600160a01b038216820361037257565b602435906001600160a01b038216820361037257565b604435906001600160a01b038216820361037257565b6040906003190112610372576004359060243590565b90815180825260208080930193019160005b8281106122b6575050505090565b8351855293810193928101926001016122a8565b9060206003198301126103725760043567ffffffffffffffff9283821161037257806023830112156103725781600401359384116103725760248460051b83010111610372576024019190565b60cf548110156123515760cf60005260021b7facb8d954e2cfef495862221e91bd7523613cf8808827cb33edfe4904cc51bf290190600090565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110612387575050505090565b83516001600160a01b031685529381019392810192600101612379565b60005b8381106123b75750506000910152565b81810151838201526020016123a7565b908082519081815260208091019281808460051b8301019501936000915b8483106123f55750505050505090565b909192939495848080600193601f1980878303018852601f8c51612424815180928187528780880191016123a4565b0116010198019301930191949392906123e5565b6001600160a01b0360335416330361244c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b156124df57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60ff6097541661255557565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b610100810190811067ffffffffffffffff8211176115df57604052565b67ffffffffffffffff81116115df57604052565b90601f8019910116810190811067ffffffffffffffff8211176115df57604052565b91908203918211610e6157565b600081815260ce60205260408120546126915760cd546801000000000000000081101561267d57600181018060cd558110156126695790826040927f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e015560cd5492815260ce6020522055600190565b602482634e487b7160e01b81526032600452fd5b602482634e487b7160e01b81526041600452fd5b905090565b6000198114610e615760010190565b60cf5460005b8181106126b6575050565b806126c36126c8926126cd565b612696565b6126ab565b6126d681612317565b50906003820180549164ffffffffff90818460d01c1642116126fa575b5050505050565b61273361271f6127b6956001600160681b0361271861277e95613386565b9390613586565b16906001600160681b031916178555613586565b83547fffffffffffff00000000000000000000000000ffffffffffffffffffffffffff1660689190911b79ffffffffffffffffffffffffff0000000000000000000000000016178355565b80600185015460a01c168042106000146128345750425b825464ffffffffff60d01b1916911660d01b64ffffffffff60d01b16179055565b6001600160a01b038060cc541691826127d1575b80806126f3565b5416813b15610372576000916024839260405194859384927f63453ae100000000000000000000000000000000000000000000000000000000845260048401525af1801561036657612825575b80806127ca565b61282e906125b6565b3861281e565b612795565b81810292918115918404141715610e6157565b91908201809211610e6157565b8115612863570490565b634e487b7160e01b600052601260045260246000fd5b67ffffffffffffffff81116115df5760051b60200190565b929161289c82612879565b916128aa60405193846125ca565b829481845260208094019160051b810192831161037257905b8282106128d05750505050565b813581529083019083016128c3565b90816020910312610372575180151581036103725790565b6001600160801b039182169082160391908211610e6157565b600260655414612921576002606555565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b60005b82811061297457505050565b606082820152602001612968565b80518210156123515760209160051b010190565b60209081818403126103725780519067ffffffffffffffff821161037257019180601f840112156103725782516129cc81612879565b936129da60405195866125ca565b818552838086019260051b820101928311610372578301905b828210612a01575050505090565b815181529083019083016129f3565b90612a3e9160008151612a2281612879565b90612a3060405192836125ca565b808252601f19958691612879565b0136602083013780612a78845196612a6e612a5889612879565b98612a666040519a8b6125ca565b808a52612879565b0160208801612965565b8560005b8551811015612c9857612a8f8187612982565b5160005260d06020526040600020336000526020526040600020612abc612ab68389612982565b516126cd565b805490876001600160801b038316612ae0575b505050612adb90612696565b612a7c565b6001600160801b0397612bba6001600160a01b0393612b0d612b0788600196999899612982565b51612317565b509264e8d4a51000612b46600386015461026d8f612b388d6001600160681b03928386169116612839565b9260681c168c60801c612839565b0491612b66612b5d87830154948560801c9061284c565b8e8516906125ec565b9c8d931686820155856001600160801b03612bb164e8d4a51000610c748d61026d60038c0154916001600160681b03612ba3818516898416612839565b9360681c169060801c612839565b1691015561284c565b98612bc5858a612982565b52612bd0848b612982565b51612bdb858a612982565b516040519081527f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495460203392a30154169182612c1b575b81925087612acf565b60405163186e465160e31b81523360048201526001600160801b03919091166024820152916000908390604490829084905af1801561036657612adb92600091612c7d575b50612c6b828b612982565b52612c76818a612982565b5038612c12565b612c9291503d806000833e61035881836125ca565b38612c60565b5060c95460405163a9059cbb60e01b8152336004820152602481018690529497509195909450929150602090829060449082906000906001600160a01b03165af1801561036657612ce65750565b612cfe9060203d6020116105835761057481836125ca565b50565b9190916001600160801b0380809416911601918211610e6157565b6000936060939092612d2d83612317565b508360005260d060205260406000206001600160a01b03831660005260205260406000209384546001600160801b038116908115801590613067575b612f6a575b5050506001600160801b03612d828461352e565b16926001600160801b03199260248585885416179586885560206001600160a01b0360ca5416604051938480926370a0823160e01b82526001600160a01b03881660048301525afa91821561036657600092612f34575b50612df381612dee612e1894612df894612839565b6135de565b61352e565b87546001600160801b031660809190911b6001600160801b031916178755565b612e4c64e8d4a51000610c74885461026d6003880154916001600160681b03612ba38185166001600160801b038416612839565b6001600160801b03600188019116858254161790556001600160a01b036001840154169081612eb6575b505050612eae6001600160801b03612ea8600282940196612ea388549760801c915460801c848916612d01565b6128f7565b1661352e565b169116179055565b60405163186e465160e31b81526001600160a01b039190911660048201526024810192909252919650906000908290604490829084905af18015610366576001600160801b03612ea86002612eae938395600091612f19575b5099945050612e76565b612f2e91503d806000833e61035881836125ca565b38612f0f565b91506020823d602011612f62575b81612f4f602093836125ca565b8101031261037257905190612df3612dd9565b3d9150612f42565b64e8d4a510009299509061026d612f9692600386015492612ba36001600160681b039182861690612839565b04966001600160801b03612fbf612fb660018801549a8b60801c9061284c565b828b16906125ec565b9816600186015560c95460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018b9052909160209183916044918391600091165af1801561036657613048575b506040518881527f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495460206001600160a01b03861692a3388080612d6e565b6130609060203d6020116105835761057481836125ca565b503861300a565b50600187015460801c1515612d69565b9061ffff8092166103e803918211610e6157565b613096600191612317565b5001546001600160a01b0390811691821561337d576040928351928380927fc2b18aa0000000000000000000000000000000000000000000000000000000008252600091829160049586915afa9485156133715781956132d2575b50849585519261310084612879565b9261310d835194856125ca565b848452601f198061311d87612879565b019261312d602094858801612965565b8599835b8881106131445750505050505050505050565b89836131508385612982565b51166131d25750865187810181811067ffffffffffffffff8211176131bf578852600381527f424e420000000000000000000000000000000000000000000000000000000000878201526131ba91906131a9828b612982565b526131b4818a612982565b50612696565b613131565b60248760418e634e487b7160e01b835252fd5b9085846131df8386612982565b51168951938480927f95d89b410000000000000000000000000000000000000000000000000000000082525afa80156132c8578690613228575b6131ba92506131a9828b612982565b50903d8087833e61323981836125ca565b81019087818303126132c457805167ffffffffffffffff918282116132c05701601f928084830112156132c05781519283116132ac576132818a898d519686011601856125ca565b8284528983830101116132a85782916132a3918a806131ba97960191016123a4565b613219565b8780fd5b5060248860418f634e487b7160e01b835252fd5b8880fd5b8680fd5b88513d88823e3d90fd5b9094503d8086833e6132e481836125ca565b81019060209081818403126132c45780519067ffffffffffffffff82116132a857019180601f840112156132c457825161331d81612879565b9361332a8a5195866125ca565b818552838086019260051b8201019283116132c0578301905b828210613355575050505093386130f1565b8151868116810361336d578152908301908301613343565b8980fd5b508551903d90823e3d90fd5b60609250829150565b90613392602492612317565b509060206001600160a01b03835416604051948580926370a0823160e01b82523060048301525afa928315610366576000936134f8575b506003820154916001600160681b03808416908460681c16938515908180156134e4575b6134dc5760026134226134309264ffffffffff80600189015460a01c168042106000146134d6575042915b60d01c16906125ec565b940154938460801c90612839565b64e8d4a5100090818102918183041490151715610e615761ffff968760cc5460a01c169361345e8584612839565b6103e89485840293840486141715610e615761347d9261026d91612859565b966001600160801b038095169384613498575b505050505050565b906134aa6134b1939298969798613077565b1690612839565b9102928316928303610e61576134ca9261026d91612859565b90388080808080613490565b91613418565b509094505050565b5064ffffffffff8160d01c164211156133ed565b90926020823d8211613526575b81613512602093836125ca565b8101031261352357505191386133c9565b80fd5b3d9150613505565b6001600160801b0390818111613542571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b6001600160681b039081811161359a571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313034206f766572666c6f77000000000000000000000000000000006044820152fd5b91906000600384111561364d57508281118015613645575b1561363f5750815b6136118361360c8184612859565b61284c565b600190811c915b84830361362457505050565b909193506136368461360c8184612859565b821c9190613618565b916135fe565b5080156135f6565b92905061365657565b6001915056fea264697066735822122003a850e751c0637f0014b598be6922b662ee26585e18d4165a7b7164895a46fe64736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163081e3eda14612223575080631526fe27146121545780631983dbf5146120a75780632e11275714611df45780633e582ae614611dcd5780633f4ba83a14611d3157806343de320714611c4f578063441a3e7014611aed57806346c96aac14611ac65780634bc2a65714611a475780634ed73d281461196b5780634f00a93e1461171a57806351eb05a6146116fe57806352c28fab146113875780635312ea8e146111e45780635ade228a146111c65780635c975abb146111a3578063630b5ba11461118a578063715018a61461112f5780638456cb59146110d55780638da5cb5b146110ae57806390210d7e14610f9d57806393f1a40b14610f2d5780639b128de614610e9c578063abfef11114610e77578063af929a8014610e1a578063b163e79314610d76578063b66503cf14610b1d578063b8be44e714610af3578063bc70fdbc14610aac578063be159bea14610a7d578063c5a6222e14610a56578063d1e2ac8814610a13578063d93bf4fe1461072c578063e2bbb1581461060f578063eea01604146105ef578063eeca1562146105bc578063f13e55071461041c578063f2fde38b146103775763ffcd4263146101d757600080fd5b34610372576040366003190112610372576004356101f3612254565b6060918261028a849261020581612317565b5094600161021283613386565b8460009692965260d06020526040600020956001600160a01b0380951696876000526020526102828464e8d4a5100061027360406000209561026d8754916102646001600160801b0398898516612839565b9260801c612839565b9061284c565b04930154928360801c9061284c565b9116906125ec565b9601541690816102dc575b505050906102ca6102d8926102bc6040519687968752608060208801526080870190612367565b9085820360408701526123c7565b908382036060850152612296565b0390f35b9093506102ee9195506000925061308b565b9190946024604051809581937fc031a66f00000000000000000000000000000000000000000000000000000000835260048301525afa918215610366576102d8926102ca91600091610343575b509238610295565b61036091503d806000833e61035881836125ca565b810190612996565b3861033b565b6040513d6000823e3d90fd5b600080fd5b346103725760203660031901126103725761039061223e565b610398612438565b6001600160a01b038116156103b2576103b090612490565b005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461037257600036600319011261037257610435612438565b6001600160a01b038060c95416906040516370a0823160e01b918282523060048301526020938483602481845afa801561036657859360009161058a575b5060405163a9059cbb60e01b815233600482015260248101919091529290839060449082906000905af191821561036657849261055d575b5060c954169160246040518094819382523060048301525afa9182156103665760009261050d575b60408051338152602081018590527f2b58f1b72aa1f2865f8da73af0eaff3a2b5b670c59fed83005919fe6c23cf35c91819081015b0390a1005b90809250813d8311610556575b61052481836125ca565b8101031261037257516105087f2b58f1b72aa1f2865f8da73af0eaff3a2b5b670c59fed83005919fe6c23cf35c6104d3565b503d61051a565b61057c90833d8511610583575b61057481836125ca565b8101906128df565b50846104ab565b503d61056a565b84819592503d83116105b5575b6105a181836125ca565b810103126103725791518492906000610473565b503d610597565b34610372576020366003190112610372576004358042106000146105e757506020425b604051908152f35b6020906105df565b3461037257600036600319011261037257602060405164e8d4a510008152f35b346103725761061d36612280565b610625612910565b61062d612549565b61063682612317565b5090826000526001600160a01b0360209360d08552604060002033600052855261068161067a846001600160801b036040600020610673866126cd565b541661284c565b3383612d1c565b94546040516323b872dd60e01b815233600482015230602482015260448101869052919591949193879186916064918391600091165af1938415610366576102d89461070f575b506040519081527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15863392a360016065556040805194859485528401526040830190612296565b61072590873d89116105835761057481836125ca565b50866106c8565b346103725761073a366122ca565b610742612910565b6001600160a01b0360cb5416156109cf57610766610761368385612891565b612a10565b50505060005b81811061077a576001606555005b8060051b83013560005260d06020526040600020336000526020526040600020906001600160801b03825416806107bc575b506107b79150612696565b61076c565b61083f60206107d08460051b880135612317565b50926001600160a01b038454166001600160a01b0360cb541660006040518096819582947f095ea7b3000000000000000000000000000000000000000000000000000000008452600484019092916001600160801b036020916001600160a01b03604085019616845216910152565b03925af18015610366576109b0575b506001600160a01b0360cb5416926001600160a01b03825416604051907faf929a800000000000000000000000000000000000000000000000000000000082526004820152602081602481885afa9081156103665760009161097e575b506001600160801b03825416853b156103725760646000928360405198899485937f90210d7e000000000000000000000000000000000000000000000000000000008552600485015260248401523360448401525af1908115610366576107b79460029261096f575b505460801c9101906001600160801b03196001600160801b0361093b8454938285166128f7565b1691161790558060051b84013560005260d060205260406000203360005260205260006001604082208281550155846107ac565b610978906125b6565b87610914565b90506020813d6020116109a8575b81610999602093836125ca565b810103126103725751876108ab565b3d915061098c565b6109c89060203d6020116105835761057481836125ca565b508561084e565b606460405162461bcd60e51b815260206004820152600960248201527f746f2077686572653f00000000000000000000000000000000000000000000006044820152fd5b34610372576020366003190112610372576004356001600160a01b03811680910361037257610a40612438565b6001600160a01b031960cb54161760cb55600080f35b346103725760003660031901126103725760206001600160a01b0360c95416604051908152f35b3461037257600036600319011261037257602061ffff610aa38160cc5460a01c16613077565b16604051908152f35b3461037257602036600319011261037257610ae56102d8610ace60043561308b565b604092919251938493604085526040850190612367565b9083820360208501526123c7565b34610372576020366003190112610372576040610b11600435613386565b82519182526020820152f35b3461037257604036600319011261037257610b3661223e565b6024908135906001600160a01b03908160cc54163303610d0c578215610cc8571660005260d16020526040600020546000198101908111610cb357610b7a90612317565b50600381019064ffffffffff9182815460d01c1693600183019484865460a01c1680821015600014610c46575050610c03926002610bbf62093a80610be1940461352e565b9101906001600160801b036001600160801b031983549260801b169116179055565b805464ffffffffff60d01b191642841660d01b64ffffffffff60d01b16179055565b62093a804201804211610c3157825464ffffffffff60a01b1916911660a01b64ffffffffff60a01b16179055005b83634e487b7160e01b60005260116004526000fd5b03848111610c9e57610c7a62093a80610c74610c999461026d6002610c039901958a875460801c9116612839565b0461352e565b6001600160801b036001600160801b031983549260801b169116179055565b610be1565b86634e487b7160e01b60005260116004526000fd5b82634e487b7160e01b60005260116004526000fd5b606484601f6040519162461bcd60e51b8352602060048401528201527f6e6f74696679526577617264416d6f756e743a207a65726f20616d6f756e74006044820152fd5b60848460216040519162461bcd60e51b8352602060048401528201527f4d6173746572576f6d6261743a2063616c6c6572206973206e6f7420566f746560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152fd5b346103725760203660031901126103725760043560cf5481101561037257610da061010091612317565b506001600160a01b0390818154169160018201549160036002820154910154916040519485528316602085015264ffffffffff809360a01c1660408501526001600160801b038116606085015260801c60808401526001600160681b0380821660a08501528160681c1660c084015260d01c1660e0820152f35b34610372576020366003190112610372576001600160a01b03610e3b61223e565b1660005260d16020526040600020546000198101908111610e6157602090604051908152f35b634e487b7160e01b600052601160045260246000fd5b3461037257600036600319011261037257602061ffff60cc5460a01c16604051908152f35b3461037257602036600319011261037257610eb561223e565b610ebd612438565b6001600160a01b0380911680156103725760ca80546001600160a01b03198116831790915560408051939091166001600160a01b039081168452909116602083015233917fa0956d8e03557278fdb89913cec4e0f21da09587edf25b3eecc0079cdb757ef591819081015b0390a2005b3461037257604036600319011261037257610f46612254565b60043560005260d06020526001600160a01b03604060002091166000526020526080604060002060018154910154604051916001600160801b03908181168452841c602084015281166040830152821c6060820152f35b3461037257606036600319011261037257600435602435610fbc61226a565b90610fc5612910565b610fcd612549565b610fd683612317565b50918360005260209060d082526040600020936110206001600160a01b039283811696876000528552611019866001600160801b0360406000206106738c6126cd565b9088612d1c565b5050546040516323b872dd60e01b8152336004820152306024820152604481018590529391839185916064918391600091165af1928315610366577f16f3fbfd4bcc50a5cecb2e53e398a1ad77d89f63288ef540d862b264ed57eb1f93611091575b50604051908152a36001606555005b6110a790833d85116105835761057481836125ca565b5085611082565b346103725760003660031901126103725760206001600160a01b0360335416604051908152f35b34610372576000366003190112610372576110ee612438565b6110f6612549565b600160ff1960975416176097557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461037257600036600319011261037257611148612438565b60006001600160a01b036033546001600160a01b03198116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610372576000366003190112610372576103b06126a5565b3461037257600036600319011261037257602060ff609754166040519015158152f35b3461037257600036600319011261037257602060405162093a808152f35b34610372576020806003193601126103725760043590611202612910565b61120b82612317565b508260005260d0825260406000203360005282526040600020906001600160a01b039182825416926000856112826001600160801b03968786541660405194858094819363a9059cbb60e01b835233600484019092916001600160801b036020916001600160a01b03604085019616845216910152565b03925af180156103665761136a575b50600161129d87612317565b500154168061130f575b506002600192018054936112c1835460801c8287166128f7565b166001600160801b031980951617905560008155019081541690557fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059560405191600083523392a36001606555005b916000809360446040518096819363186e465160e31b83523360048401528160248401525af19081156103665760019360029261134f575b5092506112a7565b611363903d806000833e61035881836125ca565b5087611347565b61138090863d88116105835761057481836125ca565b5086611291565b34610372576040366003190112610372576113a061223e565b6113a8612254565b906113b1612438565b6001600160a01b0380911691823b1561169457811690813b1580159061168c575b15611639578260005260ce6020526040600020546115f55760405164ffffffffff4281166113ff83612599565b858352602083018581526040840182815260608501946000865260808101956000875260a08201926000845260c08301976000895260e0840196875260cf54680100000000000000008110156115df5780600161145f920160cf55612317565b9390936115c9576114bf61154e978a6114e3958e6115709f60039a5116906001600160a01b031991828b5416178a5560018a0194511690845416178355511664ffffffffff60a01b1964ffffffffff60a01b83549260a01b169116179055565b51905160801b6001600160801b0319166001600160801b0391909116176002830155565b01946001600160681b03809251166001600160681b0319875416178655511684907fffffffffffff00000000000000000000000000ffffffffffffffffffffffffff79ffffffffffffffffffffffffff0000000000000000000000000083549260681b169116179055565b51825464ffffffffff60d01b1916911660d01b64ffffffffff60d01b16179055565b60cf548260005260d160205260406000205561158b826125f9565b5060cf54600019810191908211610e615760207fec85b1d1f037ff3a8722aaf5d4d8e7d93c7ff10c056430c18d76a9ec23aa397e91604051908152a3005b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152601560248201527f6164643a204c5020616c726561647920616464656400000000000000000000006044820152fd5b608460405162461bcd60e51b815260206004820152602660248201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b6064820152fd5b5081156113d2565b608460405162461bcd60e51b815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b34610372576020366003190112610372576103b06004356126cd565b346103725760403660031901126103725761173361223e565b6024356001600160a01b038060ca541633036119015760cf54921660005b83811061175a57005b80600052602060d0815260406000209083600052528260406000206001600160801b0380825416156118f55761178f846126cd565b61179884612317565b50908254926003830192828454956001600160681b0390818816838216906117bf91612839565b9164e8d4a5100080936068938360809c861c16908c1c906117df91612839565b6117e89161284c565b049760018701988954908682166117fe916125ec565b6118079061352e565b611812918c1c612d01565b89546001600160801b031660809190911b6001600160801b0319161789558487549b818d16906118429082612839565b9061184c916135de565b976118568961352e565b81546001600160801b031660809190911b6001600160801b031916178155541690549082821661188591612839565b921c166118929086612839565b61189b9161284c565b046118a59061352e565b16936001600160801b03199485825416179055600201948554941c90828516906118ce9161284c565b906118d8916125ec565b6118e19061352e565b1691161790556118f090612696565b611751565b5050506118f090612696565b608460405162461bcd60e51b815260206004820152602160248201527f4d6173746572576f6d6261743a2063616c6c6572206973206e6f74205665576f60448201527f6d000000000000000000000000000000000000000000000000000000000000006064820152fd5b346103725761199661076161197f366122ca565b611987612910565b61198f612549565b3691612891565b9190600190816065556040519283526119bb6020916060838601526060850190612296565b9083820360408501528451908183528083019281808460051b8301019701936000915b8483106119eb5787890388f35b9091929394958098601f198382030184528588518180825194858152019101926000905b85818310611a305750505081925098019301930191949392909795976119de565b919380919386518152019401920188929391611a0f565b3461037257602036600319011261037257611a6061223e565b611a68612438565b60cc80546001600160a01b039283166001600160a01b03198216811790925560408051939091168352602083019190915233917f9db5e84498cff91ecd1f5666fa2ecf069530eb27baffabaccefafc06bbd3cee39181908101610f28565b346103725760003660031901126103725760206001600160a01b0360cc5416604051908152f35b3461037257611afb36612280565b611b03612910565b611b0b612549565b611b1482612317565b50908260005260209260d08452604060002033600052845260406000206001600160801b0390838282541610611c0b5761067a848493611b6693611b5f6001600160a01b03976126cd565b54166125ec565b945460405163a9059cbb60e01b815233600482015260248101869052919591949193879186916044918391600091165af1938415610366576102d894611bee575b506040519081527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568863392a360016065556040805194859485528401526040830190612296565b611c0490873d89116105835761057481836125ca565b5086611ba7565b6064866040519062461bcd60e51b82526004820152601c60248201527f77697468647261773a206e6f7420656e6f7567682062616c616e6365000000006044820152fd5b34610372576040366003190112610372576004356001600160a01b03611c73612254565b611c7b612438565b16803b15801590611d29575b15611cd65760207f858b2cab7b344488967106b3c498c1f59de0a26b500923d9e4e06918909cd511916001611cbb85612317565b5001816001600160a01b0319825416179055604051908152a2005b608460405162461bcd60e51b815260206004820152602660248201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b6064820152fd5b508015611c87565b3461037257600036600319011261037257611d4a612438565b60975460ff811615611d895760ff19166097557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b346103725760003660031901126103725760206001600160a01b0360ca5416604051908152f35b3461037257608036600319011261037257611e0d61223e565b611e15612254565b611e1d61226a565b60643561ffff811692838203610372576000549460ff8660081c16159485809661209a575b8015612083575b156120195760ff198781166001176000559686612007575b506001600160a01b03809216908115611fc3576103e810611f5957817fffffffffffffffffffff0000000000000000000000000000000000000000000093611eb960ff60005460081c16611eb4816124d8565b6124d8565b611ec233612490565b60005498611ee360ff8b60081c16611ed9816124d8565b60016065556124d8565b609754166097556001600160a01b0319928360c954161760c955169060ca54161760ca5561ffff60a01b60cc549360a01b1693169116171760cc55611f2457005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b608460405162461bcd60e51b815260206004820152602760248201527f6261736520706172746974696f6e206d75737420626520696e2072616e67652060448201527f302c2031303030000000000000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601a60248201527f776f6d20616464726573732063616e6e6f74206265207a65726f0000000000006044820152fd5b61ffff19166101011760005587611e61565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b158015611e495750600160ff881614611e49565b50600160ff881610611e42565b346103725760203660031901126103725760043561ffff80821691828103610372576120d1612438565b6103e8831161037257612120906120e66126a5565b60cc547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff61ffff60a01b8360a01b1691161760cc55613077565b6040519283521660208201527f7fd921cf733c788915a229b0ea58095c44ae2c275ed7835501e5135fe3c1ed0560403392a2005b346103725760203660031901126103725760e0612172600435612317565b508160405161218081612599565b6001600160a01b038084541693848352600181015491821680602085015264ffffffffff809360a01c16604085015260036002830154926001600160801b0384169384606088015260801c60808701520154936001600160681b0393848616948560a08401528660681c16958660c084015260d01c1695869101526040519586526000602087015260408601526060850152608084015260a083015260c0820152f35b346103725760003660031901126103725760209060cf548152f35b600435906001600160a01b038216820361037257565b602435906001600160a01b038216820361037257565b604435906001600160a01b038216820361037257565b6040906003190112610372576004359060243590565b90815180825260208080930193019160005b8281106122b6575050505090565b8351855293810193928101926001016122a8565b9060206003198301126103725760043567ffffffffffffffff9283821161037257806023830112156103725781600401359384116103725760248460051b83010111610372576024019190565b60cf548110156123515760cf60005260021b7facb8d954e2cfef495862221e91bd7523613cf8808827cb33edfe4904cc51bf290190600090565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110612387575050505090565b83516001600160a01b031685529381019392810192600101612379565b60005b8381106123b75750506000910152565b81810151838201526020016123a7565b908082519081815260208091019281808460051b8301019501936000915b8483106123f55750505050505090565b909192939495848080600193601f1980878303018852601f8c51612424815180928187528780880191016123a4565b0116010198019301930191949392906123e5565b6001600160a01b0360335416330361244c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603354906001600160a01b0380911691826001600160a01b0319821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b156124df57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60ff6097541661255557565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b610100810190811067ffffffffffffffff8211176115df57604052565b67ffffffffffffffff81116115df57604052565b90601f8019910116810190811067ffffffffffffffff8211176115df57604052565b91908203918211610e6157565b600081815260ce60205260408120546126915760cd546801000000000000000081101561267d57600181018060cd558110156126695790826040927f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e015560cd5492815260ce6020522055600190565b602482634e487b7160e01b81526032600452fd5b602482634e487b7160e01b81526041600452fd5b905090565b6000198114610e615760010190565b60cf5460005b8181106126b6575050565b806126c36126c8926126cd565b612696565b6126ab565b6126d681612317565b50906003820180549164ffffffffff90818460d01c1642116126fa575b5050505050565b61273361271f6127b6956001600160681b0361271861277e95613386565b9390613586565b16906001600160681b031916178555613586565b83547fffffffffffff00000000000000000000000000ffffffffffffffffffffffffff1660689190911b79ffffffffffffffffffffffffff0000000000000000000000000016178355565b80600185015460a01c168042106000146128345750425b825464ffffffffff60d01b1916911660d01b64ffffffffff60d01b16179055565b6001600160a01b038060cc541691826127d1575b80806126f3565b5416813b15610372576000916024839260405194859384927f63453ae100000000000000000000000000000000000000000000000000000000845260048401525af1801561036657612825575b80806127ca565b61282e906125b6565b3861281e565b612795565b81810292918115918404141715610e6157565b91908201809211610e6157565b8115612863570490565b634e487b7160e01b600052601260045260246000fd5b67ffffffffffffffff81116115df5760051b60200190565b929161289c82612879565b916128aa60405193846125ca565b829481845260208094019160051b810192831161037257905b8282106128d05750505050565b813581529083019083016128c3565b90816020910312610372575180151581036103725790565b6001600160801b039182169082160391908211610e6157565b600260655414612921576002606555565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b60005b82811061297457505050565b606082820152602001612968565b80518210156123515760209160051b010190565b60209081818403126103725780519067ffffffffffffffff821161037257019180601f840112156103725782516129cc81612879565b936129da60405195866125ca565b818552838086019260051b820101928311610372578301905b828210612a01575050505090565b815181529083019083016129f3565b90612a3e9160008151612a2281612879565b90612a3060405192836125ca565b808252601f19958691612879565b0136602083013780612a78845196612a6e612a5889612879565b98612a666040519a8b6125ca565b808a52612879565b0160208801612965565b8560005b8551811015612c9857612a8f8187612982565b5160005260d06020526040600020336000526020526040600020612abc612ab68389612982565b516126cd565b805490876001600160801b038316612ae0575b505050612adb90612696565b612a7c565b6001600160801b0397612bba6001600160a01b0393612b0d612b0788600196999899612982565b51612317565b509264e8d4a51000612b46600386015461026d8f612b388d6001600160681b03928386169116612839565b9260681c168c60801c612839565b0491612b66612b5d87830154948560801c9061284c565b8e8516906125ec565b9c8d931686820155856001600160801b03612bb164e8d4a51000610c748d61026d60038c0154916001600160681b03612ba3818516898416612839565b9360681c169060801c612839565b1691015561284c565b98612bc5858a612982565b52612bd0848b612982565b51612bdb858a612982565b516040519081527f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495460203392a30154169182612c1b575b81925087612acf565b60405163186e465160e31b81523360048201526001600160801b03919091166024820152916000908390604490829084905af1801561036657612adb92600091612c7d575b50612c6b828b612982565b52612c76818a612982565b5038612c12565b612c9291503d806000833e61035881836125ca565b38612c60565b5060c95460405163a9059cbb60e01b8152336004820152602481018690529497509195909450929150602090829060449082906000906001600160a01b03165af1801561036657612ce65750565b612cfe9060203d6020116105835761057481836125ca565b50565b9190916001600160801b0380809416911601918211610e6157565b6000936060939092612d2d83612317565b508360005260d060205260406000206001600160a01b03831660005260205260406000209384546001600160801b038116908115801590613067575b612f6a575b5050506001600160801b03612d828461352e565b16926001600160801b03199260248585885416179586885560206001600160a01b0360ca5416604051938480926370a0823160e01b82526001600160a01b03881660048301525afa91821561036657600092612f34575b50612df381612dee612e1894612df894612839565b6135de565b61352e565b87546001600160801b031660809190911b6001600160801b031916178755565b612e4c64e8d4a51000610c74885461026d6003880154916001600160681b03612ba38185166001600160801b038416612839565b6001600160801b03600188019116858254161790556001600160a01b036001840154169081612eb6575b505050612eae6001600160801b03612ea8600282940196612ea388549760801c915460801c848916612d01565b6128f7565b1661352e565b169116179055565b60405163186e465160e31b81526001600160a01b039190911660048201526024810192909252919650906000908290604490829084905af18015610366576001600160801b03612ea86002612eae938395600091612f19575b5099945050612e76565b612f2e91503d806000833e61035881836125ca565b38612f0f565b91506020823d602011612f62575b81612f4f602093836125ca565b8101031261037257905190612df3612dd9565b3d9150612f42565b64e8d4a510009299509061026d612f9692600386015492612ba36001600160681b039182861690612839565b04966001600160801b03612fbf612fb660018801549a8b60801c9061284c565b828b16906125ec565b9816600186015560c95460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018b9052909160209183916044918391600091165af1801561036657613048575b506040518881527f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495460206001600160a01b03861692a3388080612d6e565b6130609060203d6020116105835761057481836125ca565b503861300a565b50600187015460801c1515612d69565b9061ffff8092166103e803918211610e6157565b613096600191612317565b5001546001600160a01b0390811691821561337d576040928351928380927fc2b18aa0000000000000000000000000000000000000000000000000000000008252600091829160049586915afa9485156133715781956132d2575b50849585519261310084612879565b9261310d835194856125ca565b848452601f198061311d87612879565b019261312d602094858801612965565b8599835b8881106131445750505050505050505050565b89836131508385612982565b51166131d25750865187810181811067ffffffffffffffff8211176131bf578852600381527f424e420000000000000000000000000000000000000000000000000000000000878201526131ba91906131a9828b612982565b526131b4818a612982565b50612696565b613131565b60248760418e634e487b7160e01b835252fd5b9085846131df8386612982565b51168951938480927f95d89b410000000000000000000000000000000000000000000000000000000082525afa80156132c8578690613228575b6131ba92506131a9828b612982565b50903d8087833e61323981836125ca565b81019087818303126132c457805167ffffffffffffffff918282116132c05701601f928084830112156132c05781519283116132ac576132818a898d519686011601856125ca565b8284528983830101116132a85782916132a3918a806131ba97960191016123a4565b613219565b8780fd5b5060248860418f634e487b7160e01b835252fd5b8880fd5b8680fd5b88513d88823e3d90fd5b9094503d8086833e6132e481836125ca565b81019060209081818403126132c45780519067ffffffffffffffff82116132a857019180601f840112156132c457825161331d81612879565b9361332a8a5195866125ca565b818552838086019260051b8201019283116132c0578301905b828210613355575050505093386130f1565b8151868116810361336d578152908301908301613343565b8980fd5b508551903d90823e3d90fd5b60609250829150565b90613392602492612317565b509060206001600160a01b03835416604051948580926370a0823160e01b82523060048301525afa928315610366576000936134f8575b506003820154916001600160681b03808416908460681c16938515908180156134e4575b6134dc5760026134226134309264ffffffffff80600189015460a01c168042106000146134d6575042915b60d01c16906125ec565b940154938460801c90612839565b64e8d4a5100090818102918183041490151715610e615761ffff968760cc5460a01c169361345e8584612839565b6103e89485840293840486141715610e615761347d9261026d91612859565b966001600160801b038095169384613498575b505050505050565b906134aa6134b1939298969798613077565b1690612839565b9102928316928303610e61576134ca9261026d91612859565b90388080808080613490565b91613418565b509094505050565b5064ffffffffff8160d01c164211156133ed565b90926020823d8211613526575b81613512602093836125ca565b8101031261352357505191386133c9565b80fd5b3d9150613505565b6001600160801b0390818111613542571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313238206f766572666c6f77000000000000000000000000000000006044820152fd5b6001600160681b039081811161359a571690565b606460405162461bcd60e51b815260206004820152601060248201527f75696e74313034206f766572666c6f77000000000000000000000000000000006044820152fd5b91906000600384111561364d57508281118015613645575b1561363f5750815b6136118361360c8184612859565b61284c565b600190811c915b84830361362457505050565b909193506136368461360c8184612859565b821c9190613618565b916135fe565b5080156135f6565b92905061365657565b6001915056fea264697066735822122003a850e751c0637f0014b598be6922b662ee26585e18d4165a7b7164895a46fe64736f6c63430008120033",
  "devdoc": {
    "details": "Updates: - Compatible with gauge voting",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "add(address,address)": {
        "details": "Reverts if the same LP token is added more than once.",
        "params": {
          "_lpToken": "the corresponding lp token",
          "_rewarder": "the rewarder"
        }
      },
      "deposit(uint256,uint256)": {
        "details": "it is possible to call this function with _amount == 0 to claim current rewards",
        "params": {
          "_amount": "amount to deposit",
          "_pid": "the pool id"
        }
      },
      "depositFor(uint256,uint256,address)": {
        "details": "user must initiate transaction from masterchef",
        "params": {
          "_amount": "amount to deposit",
          "_pid": "the pool id",
          "_user": "the user being represented"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "massUpdatePools()": {
        "details": "Be careful of gas spending!"
      },
      "migrate(uint256[])": {
        "details": "Assume the orginal MasterWombat has stopped emisions hence we skip IVoter(voter).distribute() to save gas cost"
      },
      "multiClaim(uint256[])": {
        "params": {
          "_pids": "array pids, pools to claim"
        }
      },
      "notifyRewardAmount(address,uint256)": {
        "details": "Refer to synthetix/StakingRewards.sol notifyRewardAmount Note: This looks safe from reentrancy."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingTokens(uint256,address)": {
        "params": {
          "_pid": "the pool id",
          "_user": "the user address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewarderBonusTokenInfo(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "setRewarder(uint256,address)": {
        "params": {
          "_pid": "the pool id",
          "_rewarder": "the rewarder"
        }
      },
      "setVeWom(address)": {
        "params": {
          "_newVeWom": "the new VeWom address"
        }
      },
      "setVoter(address)": {
        "params": {
          "_newVoter": "the new Voter address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "updateEmissionPartition(uint16)": {
        "params": {
          "_basePartition": "the future base partition"
        }
      },
      "updateFactor(address,uint256)": {
        "details": "can only be called by veWom",
        "params": {
          "_newVeWomBalance": "the amount of veWOM",
          "_user": "the user to update"
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "the pool id"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "the amount to withdraw",
          "_pid": "the pool id"
        }
      }
    },
    "title": "MasterWombatV3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(address,address)": {
        "notice": "Add a new lp to the pool. Can only be called by the owner."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit LP tokens to MasterChef for WOM allocation."
      },
      "depositFor(uint256,uint256,address)": {
        "notice": "Deposit LP tokens to MasterChef for WOM allocation on behalf of user"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "emergencyWomWithdraw()": {
        "notice": "In case we need to manually migrate WOM funds from MasterChef Sends all remaining wom from the contract to the owner"
      },
      "massUpdatePools()": {
        "notice": "Update reward variables for all pools."
      },
      "migrate(uint256[])": {
        "notice": "Helper function to migrate fund from multiple pools to the new MasterWombat.user must initiate transaction from masterchef"
      },
      "multiClaim(uint256[])": {
        "notice": "claims rewards for multiple pids"
      },
      "notifyRewardAmount(address,uint256)": {
        "notice": "Distribute WOM over a period of 7 days"
      },
      "pendingTokens(uint256,address)": {
        "notice": "View function to see pending WOMs on frontend."
      },
      "poolInfo(uint256)": {
        "notice": "[Deprecated] A backward compatible function to return the PoolInfo struct in MasterWombatV2"
      },
      "poolLength()": {
        "notice": "returns pool length"
      },
      "rewarderBonusTokenInfo(uint256)": {
        "notice": "Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm"
      },
      "setRewarder(uint256,address)": {
        "notice": "Update the given pool's rewarder"
      },
      "setVeWom(address)": {
        "notice": "updates veWom address"
      },
      "setVoter(address)": {
        "notice": "updates voter address"
      },
      "updateEmissionPartition(uint16)": {
        "notice": "updates emission partition"
      },
      "updateFactor(address,uint256)": {
        "notice": "updates factor after any veWom token operation (minting/burning)"
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw LP tokens from MasterWombat.Automatically harvest pending rewards and sends to user"
      }
    },
    "notice": "MasterWombat is a boss. He is not afraid of any snakes. In fact, he drinks their venoms. So, veWom holders boost their (boosted) emissions. This contract rewards users in function of their amount of lp staked (base pool) factor (boosted pool) Factor and sumOfFactors are updated by contract VeWom.sol after any veWom minting/burning (veERC20Upgradeable hook). Note that it's ownable and the owner wields tremendous power. The ownership will be transferred to a governance smart contract once Wombat is sufficiently distributed and the community can show to govern itself.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 871,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 176,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 487,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 545,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 367,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 472,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 29610,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "wom",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20)2243"
      },
      {
        "astId": 29613,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "veWom",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IVeWom)35698"
      },
      {
        "astId": 29616,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "newMasterWombat",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IMasterWombatV3)35579"
      },
      {
        "astId": 29618,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "voter",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 29620,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "basePartition",
        "offset": 20,
        "slot": "204",
        "type": "t_uint16"
      },
      {
        "astId": 29623,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "lpTokens",
        "offset": 0,
        "slot": "205",
        "type": "t_struct(AddressSet)5633_storage"
      },
      {
        "astId": 29627,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "poolInfoV3",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_struct(PoolInfoV3)29601_storage)dyn_storage"
      },
      {
        "astId": 29634,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "userInfo",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)29582_storage))"
      },
      {
        "astId": 29638,
        "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
        "label": "assetPid",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfoV3)29601_storage)dyn_storage": {
        "base": "t_struct(PoolInfoV3)29601_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterWombatV3.PoolInfoV3[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2243": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterWombatV3)35579": {
        "encoding": "inplace",
        "label": "contract IMasterWombatV3",
        "numberOfBytes": "20"
      },
      "t_contract(IMultiRewarder)35619": {
        "encoding": "inplace",
        "label": "contract IMultiRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(IVeWom)35698": {
        "encoding": "inplace",
        "label": "contract IVeWom",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)29582_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterWombatV3.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)29582_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)29582_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterWombatV3.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)29582_storage)"
      },
      "t_struct(AddressSet)5633_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5632,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5318_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfoV3)29601_storage": {
        "encoding": "inplace",
        "label": "struct MasterWombatV3.PoolInfoV3",
        "members": [
          {
            "astId": 29585,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2243"
          },
          {
            "astId": 29588,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "rewarder",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IMultiRewarder)35619"
          },
          {
            "astId": 29590,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "periodFinish",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 29592,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "sumOfFactors",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 29594,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "rewardRate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 29596,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "accWomPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint104"
          },
          {
            "astId": 29598,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "accWomPerFactorShare",
            "offset": 13,
            "slot": "3",
            "type": "t_uint104"
          },
          {
            "astId": 29600,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "lastRewardTimestamp",
            "offset": 26,
            "slot": "3",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)5318_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5313,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5317,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)29582_storage": {
        "encoding": "inplace",
        "label": "struct MasterWombatV3.UserInfo",
        "members": [
          {
            "astId": 29575,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 29577,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "factor",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 29579,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 29581,
            "contract": "contracts/wombat-governance/MasterWombatV3.sol:MasterWombatV3",
            "label": "pendingWom",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}