{
  "address": "0xDa01302C86ECcd5bc94c1086777acF3c3Af7EF63",
  "abi": [
    {
      "inputs": [],
      "name": "CORE_CASH_NOT_ENOUGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_COV_RATIO_LIMIT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_INVALID_HIGH_COV_RATIO_FEE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_INVALID_VALUE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_UNDERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CORE_ZERO_LIQUIDITY",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "D",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "SL",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "delta_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "L_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "depositRewardImpl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "v",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "D",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "SL",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "equilCovRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "er",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "D_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "L_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "exactDepositLiquidityInEquilImpl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "liquidity",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromAssetCash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromAssetLiability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quotedToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endCovRatio",
          "type": "uint256"
        }
      ],
      "name": "highCovRatioFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "asset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        }
      ],
      "name": "quoteDepositLiquidityInEquil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpTokenToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liabilityToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "fromAsset",
          "type": "IAsset"
        },
        {
          "internalType": "contract IAsset",
          "name": "toAsset",
          "type": "IAsset"
        },
        {
          "internalType": "int256",
          "name": "fromAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate",
          "type": "uint256"
        }
      ],
      "name": "quoteSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IAsset",
          "name": "toAsset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapCreditForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "fromAsset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endCovRatio",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapTokensForCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creditAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "asset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        }
      ],
      "name": "quoteWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liabilityToBurn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAsset",
          "name": "fromAsset",
          "type": "IAsset"
        },
        {
          "internalType": "contract IAsset",
          "name": "toAsset",
          "type": "IAsset"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ampFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircutRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startCovRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endCovRatio",
          "type": "uint256"
        }
      ],
      "name": "quoteWithdrawAmountFromOtherAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "finalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrewAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "Ax",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Lx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "delta_credit",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "swapFromCreditQuote",
      "outputs": [
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "Ax",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Ay",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Lx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Ly",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Dx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "swapQuoteFunc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "Ax",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Lx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "Dx",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "swapToCreditQuote",
      "outputs": [
        {
          "internalType": "int256",
          "name": "quote",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "delta_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "L_i",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "A",
          "type": "int256"
        }
      ],
      "name": "withdrawalAmountInEquilImpl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x314af65e654c22f497301df622fb96b9c913565c36cdc88a380c2dbee4c10f12",
  "receipt": {
    "to": null,
    "from": "0xDB9f9Be4D6A033d622f6785BA6F8c3680dEC2452",
    "contractAddress": "0xDa01302C86ECcd5bc94c1086777acF3c3Af7EF63",
    "transactionIndex": 0,
    "gasUsed": "1522043",
    "logsBloom": "0x
    "blockHash": "0x92ae56c4dc481da3020e6d322840b4a4041dc3d6aa45aa9429ee0db7e9d87c77",
    "transactionHash": "0x314af65e654c22f497301df622fb96b9c913565c36cdc88a380c2dbee4c10f12",
    "logs": [],
    "blockNumber": 18274056,
    "cumulativeGasUsed": "1522043",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7d30d23a7df531766c7f8ad3938bd88d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CORE_CASH_NOT_ENOUGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_COV_RATIO_LIMIT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_INVALID_HIGH_COV_RATIO_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_INVALID_VALUE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_UNDERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CORE_ZERO_LIQUIDITY\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"D\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"SL\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delta_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"L_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"depositRewardImpl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"D\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"SL\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"equilCovRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"er\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"D_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"L_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"exactDepositLiquidityInEquilImpl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAssetCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromAssetLiability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotedToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCovRatio\",\"type\":\"uint256\"}],\"name\":\"highCovRatioFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"}],\"name\":\"quoteDepositLiquidityInEquil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liabilityToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"fromAsset\",\"type\":\"IAsset\"},{\"internalType\":\"contract IAsset\",\"name\":\"toAsset\",\"type\":\"IAsset\"},{\"internalType\":\"int256\",\"name\":\"fromAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate\",\"type\":\"uint256\"}],\"name\":\"quoteSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IAsset\",\"name\":\"toAsset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate\",\"type\":\"uint256\"}],\"name\":\"quoteSwapCreditForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"fromAsset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCovRatio\",\"type\":\"uint256\"}],\"name\":\"quoteSwapTokensForCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creditAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"}],\"name\":\"quoteWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liabilityToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"fromAsset\",\"type\":\"IAsset\"},{\"internalType\":\"contract IAsset\",\"name\":\"toAsset\",\"type\":\"IAsset\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircutRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startCovRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCovRatio\",\"type\":\"uint256\"}],\"name\":\"quoteWithdrawAmountFromOtherAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrewAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"Ax\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Lx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delta_credit\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"swapFromCreditQuote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"Ax\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Ay\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Lx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Ly\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Dx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"swapQuoteFunc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"Ax\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Lx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"Dx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"swapToCreditQuote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"delta_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"L_i\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"}],\"name\":\"withdrawalAmountInEquilImpl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations. Change log: - Move view functinos (quotes, high cov ratio fee) from the Pool contract to this contract - Add quote functions for cross chain swaps\",\"kind\":\"dev\",\"methods\":{\"depositRewardImpl(int256,int256,int256,int256,int256,int256)\":{\"returns\":{\"v\":\"positive value indicates a reward and negative value indicates a fee\"}},\"quoteSwap(IAsset,IAsset,int256,uint256,uint256,uint256)\":{\"params\":{\"fromAmount\":\"The amount to quote\",\"fromAsset\":\"The initial asset\",\"toAsset\":\"The asset wanted by user\"},\"returns\":{\"actualToAmount\":\"The actual amount user would receive\",\"haircut\":\"The haircut that will be applied\"}},\"quoteWithdrawAmount(IAsset,uint256,uint256)\":{\"params\":{\"asset\":\"The asset willing to be withdrawn\",\"liquidity\":\"The liquidity willing to be withdrawn\"},\"returns\":{\"amount\":\"Total amount to be withdrawn from Pool\",\"fee\":\"fee\",\"liabilityToBurn\":\"Total liability to be burned by Pool\"}},\"swapQuoteFunc(int256,int256,int256,int256,int256,int256)\":{\"details\":\"This function always returns >= 0\",\"params\":{\"A\":\"amplification factor\",\"Ax\":\"asset of token x\",\"Ay\":\"asset of token y\",\"Dx\":\"delta x, i.e. token x amount inputted\",\"Lx\":\"liability of token x\",\"Ly\":\"liability of token y\"},\"returns\":{\"quote\":\"The quote for amount of token y swapped for token x amount inputted\"}},\"withdrawalAmountInEquilImpl(int256,int256,int256,int256)\":{\"details\":\"should be used only when r* = 1\"}},\"title\":\"CoreV3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactDepositLiquidityInEquilImpl(int256,int256,int256,int256)\":{\"notice\":\"return the deposit reward in token amount when target liquidity (LP amount) is known\"},\"quoteDepositLiquidityInEquil(IAsset,uint256,uint256)\":{\"notice\":\"This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\"},\"quoteSwap(IAsset,IAsset,int256,uint256,uint256,uint256)\":{\"notice\":\"Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\"},\"quoteWithdrawAmount(IAsset,uint256,uint256)\":{\"notice\":\"Calculates fee and liability to burn in case of withdrawal\"},\"swapQuoteFunc(int256,int256,int256,int256,int256,int256)\":{\"notice\":\"Core Wombat stableswap equation\"}},\"notice\":\"Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wombat-core/pool/CoreV3.sol\":\"CoreV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/wombat-core/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ninterface IAsset is IERC20 {\\r\\n    function underlyingToken() external view returns (address);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function cash() external view returns (uint120);\\r\\n\\r\\n    function liability() external view returns (uint120);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function underlyingTokenDecimals() external view returns (uint8);\\r\\n\\r\\n    function setPool(address pool_) external;\\r\\n\\r\\n    function underlyingTokenBalance() external view returns (uint256);\\r\\n\\r\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(address to, uint256 amount) external;\\r\\n\\r\\n    function addCash(uint256 amount) external;\\r\\n\\r\\n    function removeCash(uint256 amount) external;\\r\\n\\r\\n    function addLiability(uint256 amount) external;\\r\\n\\r\\n    function removeLiability(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x422c0f5af1e3ee4db0a7baa912f8ed064bf92efc3ed761071abf8d991fe7120c\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.5;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10 ** 18;\\n\\n    // Babylonian Method\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return x * 10 ** (18 - d);\\n        } else if (d > 18) {\\n            return (x / (10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(uint256 x, uint8 d) internal pure returns (uint256) {\\n        if (d < 18) {\\n            return (x / (10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * 10 ** (d - 18);\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xd6cacca5817b3c8820f60e203c1485ef19ebe8c07dfdda7df9c870f3dbffaaf5\",\"license\":\"GPL-3.0\"},\"contracts/wombat-core/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    int256 public constant WAD = 10 ** 18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(int256 x, int256 y) internal pure returns (int256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    // Babylonian Method (typecast as int)\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Babylonian Method with initial guess (typecast as int)\\n    function sqrt(int256 y, int256 guess) internal pure returns (int256 z) {\\n        if (y > 3) {\\n            if (guess > 0 && guess <= y) {\\n                z = guess;\\n            } else if (guess < 0 && -guess <= y) {\\n                z = -guess;\\n            } else {\\n                z = y;\\n            }\\n            int256 x = (y / z + z) / 2;\\n            while (x != z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // Convert x to WAD (18 decimals) from d decimals.\\n    function toWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return x * int256(10 ** (18 - d));\\n        } else if (d > 18) {\\n            return (x / int256(10 ** (d - 18)));\\n        }\\n        return x;\\n    }\\n\\n    // Convert x from WAD (18 decimals) to d decimals.\\n    function fromWad(int256 x, uint8 d) internal pure returns (int256) {\\n        if (d < 18) {\\n            return (x / int256(10 ** (18 - d)));\\n        } else if (d > 18) {\\n            return x * int256(10 ** (d - 18));\\n        }\\n        return x;\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, 'value must be positive');\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc36a2ddfd52a2a0b18987d1da24fa45bebe1dd0c9fa10e631895b4eab7b80e44\",\"license\":\"MIT\"},\"contracts/wombat-core/pool/CoreV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.5;\\n\\nimport '../interfaces/IAsset.sol';\\nimport '../libraries/DSMath.sol';\\nimport '../libraries/SignedSafeMath.sol';\\n\\n/**\\n * @title CoreV3\\n * @notice Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals\\n * @dev Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations.\\n * Change log:\\n * - Move view functinos (quotes, high cov ratio fee) from the Pool contract to this contract\\n * - Add quote functions for cross chain swaps\\n */\\nlibrary CoreV3 {\\n    using DSMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    int256 internal constant WAD_I = 10 ** 18;\\n    uint256 internal constant WAD = 10 ** 18;\\n\\n    error CORE_UNDERFLOW();\\n    error CORE_INVALID_VALUE();\\n    error CORE_INVALID_HIGH_COV_RATIO_FEE();\\n    error CORE_ZERO_LIQUIDITY();\\n    error CORE_CASH_NOT_ENOUGH();\\n    error CORE_COV_RATIO_LIMIT_EXCEEDED();\\n\\n    /*\\n     * Public view functions\\n     */\\n\\n    /**\\n     * This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1\\n     */\\n    function quoteDepositLiquidityInEquil(\\n        IAsset asset,\\n        uint256 amount,\\n        uint256 ampFactor\\n    ) public view returns (uint256 lpTokenToMint, uint256 liabilityToMint, uint256 reward) {\\n        liabilityToMint = exactDepositLiquidityInEquilImpl(\\n            int256(amount),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToMint >= amount) {\\n            unchecked {\\n                reward = liabilityToMint - amount;\\n            }\\n        } else {\\n            // rounding error\\n            liabilityToMint = amount;\\n        }\\n\\n        // Calculate amount of LP to mint : ( deposit + reward ) * TotalAssetSupply / Liability\\n        uint256 liability = asset.liability();\\n        lpTokenToMint = (liability == 0 ? liabilityToMint : (liabilityToMint * asset.totalSupply()) / liability);\\n    }\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee\\n     */\\n    function quoteWithdrawAmount(\\n        IAsset asset,\\n        uint256 liquidity,\\n        uint256 ampFactor\\n    ) public view returns (uint256 amount, uint256 liabilityToBurn, uint256 fee) {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        if (liabilityToBurn == 0) revert CORE_ZERO_LIQUIDITY();\\n\\n        amount = withdrawalAmountInEquilImpl(\\n            -int256(liabilityToBurn),\\n            int256(uint256(asset.cash())),\\n            int256(uint256(asset.liability())),\\n            int256(ampFactor)\\n        ).toUint256();\\n\\n        if (liabilityToBurn >= amount) {\\n            fee = liabilityToBurn - amount;\\n        } else {\\n            // rounding error\\n            amount = liabilityToBurn;\\n        }\\n    }\\n\\n    function quoteWithdrawAmountFromOtherAsset(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        uint256 liquidity,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) public view returns (uint256 finalAmount, uint256 withdrewAmount) {\\n        // quote withdraw\\n        (withdrewAmount, , ) = quoteWithdrawAmount(fromAsset, liquidity, ampFactor);\\n\\n        // quote swap\\n        uint256 fromCash = fromAsset.cash() - withdrewAmount;\\n        uint256 fromLiability = fromAsset.liability() - liquidity;\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            withdrewAmount = (withdrewAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapQuoteFunc(\\n            int256(fromCash),\\n            int256(uint256(toAsset.cash())),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            int256(withdrewAmount),\\n            int256(ampFactor)\\n        );\\n\\n        // remove haircut\\n        finalAmount = idealToAmount - idealToAmount.wmul(haircutRate);\\n\\n        if (startCovRatio > 0 || endCovRatio > 0) {\\n            // charge high cov ratio fee\\n            uint256 fee = highCovRatioFee(\\n                fromCash,\\n                fromLiability,\\n                withdrewAmount,\\n                finalAmount,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n            unchecked {\\n                finalAmount -= fee;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function quoteSwap(\\n        IAsset fromAsset,\\n        IAsset toAsset,\\n        int256 fromAmount,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate\\n    ) public view returns (uint256 actualToAmount, uint256 haircut) {\\n        // exact output swap quote should count haircut before swap\\n        if (fromAmount < 0) {\\n            fromAmount = fromAmount.wdiv(WAD_I - int256(haircutRate));\\n        }\\n\\n        uint256 fromCash = uint256(fromAsset.cash());\\n        uint256 fromLiability = uint256(fromAsset.liability());\\n        uint256 toCash = uint256(toAsset.cash());\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * int256(scaleFactor)) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapQuoteFunc(\\n            int256(fromCash),\\n            int256(toCash),\\n            int256(fromLiability),\\n            int256(uint256(toAsset.liability())),\\n            fromAmount,\\n            int256(ampFactor)\\n        );\\n        if ((fromAmount > 0 && toCash < idealToAmount) || (fromAmount < 0 && fromAsset.cash() < uint256(-fromAmount))) {\\n            revert CORE_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = (uint256(-fromAmount)).wmul(haircutRate);\\n        }\\n    }\\n\\n    function quoteSwapTokensForCredit(\\n        IAsset fromAsset,\\n        uint256 fromAmount,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) public view returns (uint256 creditAmount, uint256 haircut) {\\n        uint256 fromCash = fromAsset.cash();\\n        uint256 fromLiability = fromAsset.liability();\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromCash = (fromCash * scaleFactor) / 1e18;\\n            fromLiability = (fromLiability * scaleFactor) / 1e18;\\n            fromAmount = (fromAmount * (scaleFactor)) / 1e18;\\n        }\\n\\n        creditAmount = swapToCreditQuote(int256(fromCash), int256(fromLiability), int256(fromAmount), int256(ampFactor))\\n            .toUint256();\\n\\n        uint256 fee = highCovRatioFee(\\n            fromAsset.cash(),\\n            fromAsset.liability(),\\n            fromAmount,\\n            creditAmount,\\n            startCovRatio,\\n            endCovRatio\\n        );\\n        if (fee > 0) {\\n            creditAmount -= fee;\\n            haircut += fee;\\n        }\\n    }\\n\\n    function quoteSwapCreditForTokens(\\n        uint256 fromAmount,\\n        IAsset toAsset,\\n        uint256 ampFactor,\\n        uint256 scaleFactor,\\n        uint256 haircutRate\\n    ) public view returns (uint256 actualToAmount, uint256 haircut) {\\n        uint256 toCash = toAsset.cash();\\n        uint256 toLiability = toAsset.liability();\\n\\n        if (scaleFactor != WAD) {\\n            // apply scale factor on from-amounts\\n            fromAmount = (fromAmount * scaleFactor) / 1e18;\\n        }\\n\\n        uint256 idealToAmount = swapFromCreditQuote(\\n            int256(toCash),\\n            int256(toLiability),\\n            int256(fromAmount),\\n            int256(ampFactor)\\n        ).toUint256();\\n        if (fromAmount > 0 && toCash < idealToAmount) {\\n            revert CORE_CASH_NOT_ENOUGH();\\n        }\\n\\n        if (fromAmount > 0) {\\n            // normal quote\\n            haircut = idealToAmount.wmul(haircutRate);\\n            actualToAmount = idealToAmount - haircut;\\n        } else {\\n            // exact output swap quote count haircut in the fromAmount\\n            actualToAmount = idealToAmount;\\n            haircut = fromAmount.wmul(haircutRate);\\n        }\\n    }\\n\\n    function equilCovRatio(int256 D, int256 SL, int256 A) public pure returns (int256 er) {\\n        int256 b = -(D.wdiv(SL));\\n        er = _solveQuad(b, A);\\n    }\\n\\n    /*\\n     * Pure calculating functions\\n     */\\n\\n    /**\\n     * @notice Core Wombat stableswap equation\\n     * @dev This function always returns >= 0\\n     * @param Ax asset of token x\\n     * @param Ay asset of token y\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param Dx delta x, i.e. token x amount inputted\\n     * @param A amplification factor\\n     * @return quote The quote for amount of token y swapped for token x amount inputted\\n     */\\n    function swapQuoteFunc(\\n        int256 Ax,\\n        int256 Ay,\\n        int256 Lx,\\n        int256 Ly,\\n        int256 Dx,\\n        int256 A\\n    ) public pure returns (uint256 quote) {\\n        if (Lx == 0 || Ly == 0) {\\n            // in case div of 0\\n            revert CORE_UNDERFLOW();\\n        }\\n        int256 D = Ax + Ay - A.wmul((Lx * Lx) / Ax + (Ly * Ly) / Ay); // flattened _invariantFunc\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 b = (Lx * (rx_ - A.wdiv(rx_))) / Ly - D.wdiv(Ly); // flattened _coefficientFunc\\n        int256 ry_ = _solveQuad(b, A);\\n        int256 Dy = Ly.wmul(ry_) - Ay;\\n        if (Dy < 0) {\\n            quote = uint256(-Dy);\\n        } else {\\n            quote = uint256(Dy);\\n        }\\n    }\\n\\n    /**\\n     * @return v positive value indicates a reward and negative value indicates a fee\\n     */\\n    function depositRewardImpl(\\n        int256 D,\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 v) {\\n        if (L_i == 0) {\\n            // early return in case of div of 0\\n            return 0;\\n        }\\n        if (delta_i + SL == 0) {\\n            return L_i - A_i;\\n        }\\n\\n        int256 r_i_ = _targetedCovRatio(SL, delta_i, A_i, L_i, D, A);\\n        v = A_i + delta_i - (L_i + delta_i).wmul(r_i_);\\n    }\\n\\n    /**\\n     * @dev should be used only when r* = 1\\n     */\\n    function withdrawalAmountInEquilImpl(\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 amount) {\\n        int256 L_i_ = L_i + delta_i;\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 rho = L_i.wmul(r_i - A.wdiv(r_i));\\n        int256 beta = (rho + delta_i.wmul(WAD_I - A)) / 2;\\n        int256 A_i_ = beta + (beta * beta + A.wmul(L_i_ * L_i_)).sqrt(beta);\\n        amount = A_i - A_i_;\\n    }\\n\\n    /**\\n     * @notice return the deposit reward in token amount when target liquidity (LP amount) is known\\n     */\\n    function exactDepositLiquidityInEquilImpl(\\n        int256 D_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 A\\n    ) public pure returns (int256 liquidity) {\\n        if (L_i == 0) {\\n            // if this is a deposit, there is no reward/fee\\n            // if this is a withdrawal, it should have been reverted\\n            return D_i;\\n        }\\n        if (A_i + D_i < 0) {\\n            // impossible\\n            revert CORE_UNDERFLOW();\\n        }\\n\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 k = D_i + A_i;\\n        int256 b = k.wmul(WAD_I - A) + 2 * A.wmul(L_i);\\n        int256 c = k.wmul(A_i - (A * L_i) / r_i) - k.wmul(k) + A.wmul(L_i).wmul(L_i);\\n        int256 l = b * b - 4 * A * c;\\n        return (-b + l.sqrt(b)).wdiv(A) / 2;\\n    }\\n\\n    function swapToCreditQuote(int256 Ax, int256 Lx, int256 Dx, int256 A) public pure returns (int256 quote) {\\n        int256 rx = Ax.wdiv(Lx);\\n        int256 rx_ = (Ax + Dx).wdiv(Lx);\\n        int256 x = rx_ - A.wdiv(rx_);\\n        int256 y = rx - A.wdiv(rx);\\n\\n        // return Lx.wmul(x - y);\\n        return (Lx * (x - y)) / (WAD_I + A);\\n    }\\n\\n    function swapFromCreditQuote(\\n        int256 Ax,\\n        int256 Lx,\\n        int256 delta_credit,\\n        int256 A\\n    ) public pure returns (int256 quote) {\\n        int256 rx = Ax.wdiv(Lx);\\n        // int256 b = delta_credit.wdiv(Lx) - rx + A.wdiv(rx); // flattened _coefficientFunc\\n        int256 b = (delta_credit * (WAD_I + A)) / Lx - rx + A.wdiv(rx); // flattened _coefficientFunc\\n        int256 rx_ = _solveQuad(b, A);\\n        int256 Dx = Ax - Lx.wmul(rx_);\\n\\n        return Dx;\\n    }\\n\\n    function highCovRatioFee(\\n        uint256 fromAssetCash,\\n        uint256 fromAssetLiability,\\n        uint256 fromAmount,\\n        uint256 quotedToAmount,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) public pure returns (uint256 fee) {\\n        uint256 finalFromAssetCovRatio = (fromAssetCash + fromAmount).wdiv(fromAssetLiability);\\n\\n        if (finalFromAssetCovRatio > startCovRatio) {\\n            // charge high cov ratio fee\\n            uint256 feeRatio = _highCovRatioFee(\\n                fromAssetCash.wdiv(fromAssetLiability),\\n                finalFromAssetCovRatio,\\n                startCovRatio,\\n                endCovRatio\\n            );\\n\\n            if (feeRatio > WAD) revert CORE_INVALID_HIGH_COV_RATIO_FEE();\\n            fee = feeRatio.wmul(quotedToAmount);\\n        }\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @notice Solve quadratic equation\\n     * @dev This function always returns >= 0\\n     * @param b quadratic equation b coefficient\\n     * @param c quadratic equation c coefficient\\n     * @return x\\n     */\\n    function _solveQuad(int256 b, int256 c) internal pure returns (int256) {\\n        return (((b * b) + (c * 4 * WAD_I)).sqrt(b) - b) / 2;\\n    }\\n\\n    /**\\n     * @notice Equation to get invariant constant between token x and token y\\n     * @dev This function always returns >= 0\\n     * @param Lx liability of token x\\n     * @param rx cov ratio of token x\\n     * @param Ly liability of token x\\n     * @param ry cov ratio of token y\\n     * @param A amplification factor\\n     * @return The invariant constant between token x and token y (\\\"D\\\")\\n     */\\n    function _invariantFunc(int256 Lx, int256 rx, int256 Ly, int256 ry, int256 A) internal pure returns (int256) {\\n        int256 a = Lx.wmul(rx) + Ly.wmul(ry);\\n        int256 b = A.wmul(Lx.wdiv(rx) + Ly.wdiv(ry));\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Equation to get quadratic equation b coefficient\\n     * @dev This function can return >= 0 or <= 0\\n     * @param Lx liability of token x\\n     * @param Ly liability of token y\\n     * @param rx_ new asset coverage ratio of token x\\n     * @param D invariant constant\\n     * @param A amplification factor\\n     * @return The quadratic equation b coefficient (\\\"b\\\")\\n     */\\n    function _coefficientFunc(int256 Lx, int256 Ly, int256 rx_, int256 D, int256 A) internal pure returns (int256) {\\n        return Lx.wmul(rx_ - A.wdiv(rx_)).wdiv(Ly) - D.wdiv(Ly);\\n    }\\n\\n    function _targetedCovRatio(\\n        int256 SL,\\n        int256 delta_i,\\n        int256 A_i,\\n        int256 L_i,\\n        int256 D,\\n        int256 A\\n    ) internal pure returns (int256 r_i_) {\\n        int256 r_i = A_i.wdiv(L_i);\\n        int256 er = equilCovRatio(D, SL, A);\\n        int256 er_ = _newEquilCovRatio(er, SL, delta_i);\\n        int256 D_ = _newInvariantFunc(er_, A, SL, delta_i);\\n\\n        // Summation of k\\u2208T\\\\{i} is D - L_i.wmul(r_i - A.wdiv(r_i))\\n        int256 b_ = (D - A_i + (L_i * A) / r_i - D_).wdiv(L_i + delta_i);\\n        r_i_ = _solveQuad(b_, A);\\n    }\\n\\n    function _newEquilCovRatio(int256 er, int256 SL, int256 delta_i) internal pure returns (int256 er_) {\\n        er_ = (delta_i + SL.wmul(er)).wdiv(delta_i + SL);\\n    }\\n\\n    function _newInvariantFunc(int256 er_, int256 A, int256 SL, int256 delta_i) internal pure returns (int256 D_) {\\n        D_ = (SL + delta_i).wmul(er_ - A.wdiv(er_));\\n    }\\n\\n    /**\\n     * @notice Calculate the high cov ratio fee in the to-asset in a swap.\\n     * @dev When cov ratio is in the range [startCovRatio, endCovRatio], the marginal cov ratio is\\n     * (r - startCovRatio) / (endCovRatio - startCovRatio). Here we approximate the high cov ratio cut\\n     * by calculating the \\\"average\\\" fee.\\n     * Note: `finalCovRatio` should be greater than `initCovRatio`\\n     */\\n    function _highCovRatioFee(\\n        uint256 initCovRatio,\\n        uint256 finalCovRatio,\\n        uint256 startCovRatio,\\n        uint256 endCovRatio\\n    ) internal pure returns (uint256 fee) {\\n        if (finalCovRatio > endCovRatio) {\\n            // invalid swap\\n            revert CORE_COV_RATIO_LIMIT_EXCEEDED();\\n        } else if (finalCovRatio <= startCovRatio || finalCovRatio <= initCovRatio) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // 1. Calculate the area of fee(r) = (r - startCovRatio) / (endCovRatio - startCovRatio)\\n            // when r increase from initCovRatio to finalCovRatio\\n            // 2. Then multiply it by (endCovRatio - startCovRatio) / (finalCovRatio - initCovRatio)\\n            // to get the average fee over the range\\n            uint256 a = initCovRatio <= startCovRatio\\n                ? 0\\n                : (initCovRatio - startCovRatio) * (initCovRatio - startCovRatio);\\n            uint256 b = (finalCovRatio - startCovRatio) * (finalCovRatio - startCovRatio);\\n            fee = ((b - a) / (finalCovRatio - initCovRatio) / 2).wdiv(endCovRatio - startCovRatio);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1df2cb3be73d807eff7c309c9c69d44538be8123715f8250b1815ad6cfca4f89\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a57611a959081610020823930815050f35b600080fdfe6040608081526004908136101561001557600080fd5b6000803560e01c80631f86566214610cb25780632841c1ad14610c9a5780632f6599bb14610c6c5780634c5b402d14610c5457806367146f2914610adf5780637b33fce7146108e0578063af633c40146108ae578063b94f2f9a14610667578063d7454c5314610624578063df4912981461060c578063e02a44c6146102f5578063e24a186a146102da578063f50fc03e146102b85763f6ae404f146100ba57600080fd5b6100c336610d19565b9291946001600160a01b038396169285519463961be39160e01b865260209384878581895afa968715610253578397610299575b5087519163705727b560e01b97888452868487818b5afa93841561028f578594610266575b5061014691610141916effffffffffffffffffffffffffffff80809716911685611683565b610e11565b98818a1061025d57508803955b875190815284818581895afa908115610253578391610226575b501693846101a057505050505061019c9083925b51938493846040919493926060820195825260208201520152565b0390f35b83908751938480926318160ddd60e01b82525afa92831561021a5781936101e2575b50505061019c92916101d76101dc9287610dc8565b610df1565b92610181565b9091809350813d8311610213575b6101fa8183610d69565b81010312610210575051816101d76101dc6101c2565b80fd5b503d6101f0565b508551903d90823e3d90fd5b6102469150853d871161024c575b61023e8183610d69565b810190610da1565b3861016d565b503d610234565b88513d85823e3d90fd5b96985097610153565b6101419194509161028661014693893d8b1161024c5761023e8183610d69565b9491509161011c565b8a513d87823e3d90fd5b6102b1919750853d871161024c5761023e8183610d69565b95386100f7565b6020836102d36102c736610d43565b9493909392919261119c565b9051908152f35b6020836102d36102e936610d43565b94939093929192611314565b50829060c03660031901126102105761030c610d03565b91610315610ced565b916044359060843592828281126105d9575b5086519463961be39160e01b8087526001600160a01b038098169360209889898681895afa9889156105cf5782996105b0575b506effffffffffffffffffffffffffffff8099168b519163705727b560e01b928381528c8189818c5afa90811561058957908c918e8792610593575b5050169516918c51908582528c828981875afa91821561058957908e8e92879461056a575b50670de0b6b3a76400008d819e8203610538575b50508990518096819382525afa92831561052e57918b8a9261040595948f889661050f575b50501696878d60643595169261119c565b978187139586948a9086610505575b50508415610488575b5050505061047a575015610458575061044c9061044461043f60a43585610dc8565b61108b565b048092610e8b565b915b8351928352820152f35b929161043f610473919461046e60a43591610e7a565b610dc8565b049061044e565b8651631c4bd71760e01b8152fd5b90919293508983881294856104a6575b50505050508880808061041d565b909192939450858c518094819382525afa9283156104fa57926104db575b506104ce85610e7a565b9116108880808981610498565b6104f3919250883d8a1161024c5761023e8183610d69565b90896104c4565b8a51903d90823e3d90fd5b109450898d610414565b610526929650803d1061024c5761023e8183610d69565b93388f6103f4565b8d513d86823e3d90fd5b80828d949f9c98828261055161055f9661055894610dc8565b049a610dc8565b049b611106565b059b90508c386103cf565b610582919450833d851161024c5761023e8183610d69565b92386103bb565b8e513d87823e3d90fd5b6105a99250803d1061024c5761023e8183610d69565b8f8e610396565b6105c89199508a3d8c1161024c5761023e8183610d69565b978b61035a565b8b513d84823e3d90fd5b6106059193506106006105f66105f060a4356110ad565b926110e9565b6002830590611180565b611129565b9187610327565b6020836102d361061b36610cca565b929190916114dd565b50606036600319011261021057506102d360209261066261065d61064b60243593356110e9565b92610600604435946002830590611180565b610e7a565b611997565b5082906101003660031901126102105761067f610d03565b610687610ced565b926044359060643561069a818486610e98565b505091829588519063961be39160e01b928383526001600160a01b0380981660209889858481855afa94851561052e57849561088f575b506106ee886effffffffffffffffffffffffffffff809716610e8b565b988d518b81868163705727b560e01b978882525afa90811561088457610721929188918e8992610867575b505016610e8b565b9b670de0b6b3a764000098608435670de0b6b3a763ffff19810161083d575b505016918c5195865289868281865afa95861561052e57908a9291859761081e575b508d518094819382525afa91821561081357836107ab9796948b9461079497948e94916107f6575b501692168861119c565b906107a461043f60a43584610dc8565b0490610e8b565b9360c4359081158015906107eb575b6107cc575b5050508351928352820152f35b9085856107e0949360e498969835946118d2565b9003918480806107bf565b5060e43515156107ba565b61080d91508c8d3d1061024c5761023e8183610d69565b8f61078a565b8b51903d90823e3d90fd5b610836919750833d851161024c5761023e8183610d69565b958e610762565b8a61085e929f9c81949f5082826108578261085794610dc8565b049e610dc8565b049a8e80610740565b61087d9250803d1061024c5761023e8183610d69565b388e610719565b508e513d87823e3d90fd5b6108a79195508a3d8c1161024c5761023e8183610d69565b938d6106d1565b61019c836108c46108be36610d19565b91610e98565b9251918252602082015260408101919091529081906060820190565b50829060c0366003190112610210576108f7610d03565b835163961be39160e01b8082526020928491602435916001600160a01b03168260643587878b81865afa968715610a5957908a92918798610ac0575b506effffffffffffffffffffffffffffff809816918c518a8163705727b560e01b9687825281895afa908115610ab657908a918a91610a99575b501691670de0b6b3a764000090818103610a63575b505050610997918661014192604435926117fb565b988a5193845287848281865afa938415610a5957908892918795610a3a575b508b518094819382525afa938415610a2f57916109ea95949391899394610a10575b5060a4359480608435951691166118d2565b806109fb575b508351928352820152f35b610a089192508093610e8b565b9190846109f0565b610a28919450873d891161024c5761023e8183610d69565b928a6109d8565b8951903d90823e3d90fd5b610a52919550833d851161024c5761023e8183610d69565b938c6109b6565b8b513d88823e3d90fd5b610141939298508082610a888282610a81610a8f966109979b610dc8565b0496610dc8565b0499610dc8565b0496918193610982565b610ab091508c8d3d1061024c5761023e8183610d69565b8f61096d565b8e513d8b823e3d90fd5b610ad8919850893d8b1161024c5761023e8183610d69565b968c610933565b508260a0366003190112610c5057803591610af8610ced565b9060643591608435916001600160a01b0386921690875163961be39160e01b815260209788828981875afa918215610c46578392610c27575b5087896effffffffffffffffffffffffffffff809416958c519283809263705727b560e01b82525afa9384156108135793610c08575b50670de0b6b3a7640000968791828203610be8575b505050610b93918461014192604435921685611873565b94821515918290879082610bde575b5050610bd0575015610bc057509061044461043f61044c9385610dc8565b93926104739161043f9195610dc8565b8751631c4bd71760e01b8152fd5b109050868a610ba2565b610141939650610b93949291610bfd91610dc8565b049491879193610b7c565b610c20919350893d8b1161024c5761023e8183610d69565b918a610b67565b610c3f919250893d8b1161024c5761023e8183610d69565b908a610b31565b8a513d85823e3d90fd5b5080fd5b6020836102d3610c6336610cca565b92919091611683565b5060c036600319011261021057506102d360209260a4359060843590606435906044359060243590356118d2565b6020836102d3610ca936610cca565b92919091611873565b6020836102d3610cc136610cca565b929190916117fb565b6080906003190112610ce85760043590602435906044359060643590565b600080fd5b602435906001600160a01b0382168203610ce857565b600435906001600160a01b0382168203610ce857565b6060906003190112610ce8576004356001600160a01b0381168103610ce857906024359060443590565b60c0906003190112610ce857600435906024359060443590606435906084359060a43590565b90601f8019910116810190811067ffffffffffffffff821117610d8b57604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610ce857516effffffffffffffffffffffffffffff81168103610ce85790565b81810292918115918404141715610ddb57565b634e487b7160e01b600052601160045260246000fd5b8115610dfb570490565b634e487b7160e01b600052601260045260246000fd5b60008112610e1c5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b600160ff1b8114610ddb5760000390565b91908203918211610ddb57565b9290916000936001600160a01b036000911690604080519063705727b560e01b938483526020978884600481855afa93841561108157859461105e575b50610ef2906effffffffffffffffffffffffffffff809516610dc8565b82516318160ddd60e01b81528981600481865afa908115611054578691611021575b50610f1e91610df1565b978815610ff857610f2e89610e7a565b9483519663961be39160e01b88528288600481875afa978815610fee578298610fcd575b508290600486518096819382525afa938415610fc35750928492610141979592610f8999979592610fa6575b5050169216906114dd565b92838310610f9f5750610f9c8383610e8b565b90565b9092508192565b610fbc9250803d1061024c5761023e8183610d69565b3880610f7e565b51903d90823e3d90fd5b83919850610fe790823d841161024c5761023e8183610d69565b9790610f52565b85513d84823e3d90fd5b600483517fd4b6d81b000000000000000000000000000000000000000000000000000000008152fd5b90508981813d831161104d575b6110388183610d69565b810103126110495751610f1e610f14565b8580fd5b503d61102e565b84513d88823e3d90fd5b610ef291945061107a908a3d8c1161024c5761023e8183610d69565b9390610ed5565b83513d87823e3d90fd5b906706f05b59d3b200008201809211610ddb57565b91908201809211610ddb57565b90670de0b6b3a764000060008382039312818412811691841390151617610ddb57565b81810392916000138015828513169184121617610ddb57565b90670de0b6b3a764000091828102928184051490151715610ddb57565b818102929160008212600160ff1b821416610ddb578184051490151715610ddb57565b8115610dfb57600160ff1b8114600019831416610ddb570590565b9081670de0b6b3a764000001918212600116610ddb57565b906706f05b59d3b200009160008382019384129112908015821691151617610ddb57565b91909160008382019384129112908015821691151617610ddb57565b939094918015801561130c575b6112e257838181926111bb8989611180565b97806111c78380611106565b906111d191611129565b98670de0b6b3a7640000809a8c6111e88880611106565b906111f291611129565b6111fb91611180565b611205908a611106565b61120e9061115c565b05611218916110d0565b9561122291611180565b61122b906110e9565b6002820561123891611180565b9061124291611129565b8061124c876110e9565b6002820561125991611180565b9061126391611129565b61126c916110d0565b61127591611106565b9061127f91611129565b91611289906110e9565b6002820561129691611180565b906112a091611129565b6112a9916110d0565b906112b391611997565b6112bc91611106565b6112c59061115c565b05906112d0916110d0565b6000811215610f9c57610f9c90610e7a565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5083156111a9565b949392919483156114d2576113298287611180565b156114c45782809286928661133f8a98976110e9565b6002820561134c91611180565b9061135691611129565b918781611362846110e9565b670de0b6b3a76400009b828d9592600287940561137e91611180565b9061138891611129565b61139190610e7a565b9061139b91611997565b6113a59083611106565b6113ae9061115c565b056113b99083611180565b6113c38284611180565b906113cd906110e9565b600282056113da91611180565b906113e491611129565b916113ee91611180565b90806113f9886110e9565b6002820561140691611180565b9061141091611129565b611419916110d0565b61142291611106565b61142b9061115c565b0592611436916110d0565b906114418487611106565b9061144b91611129565b61145491611180565b9061145e916110d0565b6114688585611180565b90611472906110e9565b6002820561147f91611180565b9061148991611129565b9061149391611997565b9261149d91611180565b936114a791611180565b906114b191611106565b6114ba9061115c565b05610f9c916110d0565b50509150610f9c92506110d0565b505050505050600090565b9290926114ea8184611180565b90836114f5866110e9565b6002820561150291611180565b9061150c91611129565b8094611517856110e9565b90670de0b6b3a76400009680889493600286950561153491611180565b9061153e91611129565b611547916110d0565b61155091611106565b6115599061115c565b0591611564856110ad565b61156d91611106565b6115769061115c565b0561158091611180565b600290059283926115918480611106565b928061159c91611106565b6115a591611106565b6115ae9061115c565b056115b891611180565b906115c2916115d4565b6115cb91611180565b610f9c916110d0565b9190600060038413156116745750600081138061166a575b1561163357915b600280611609856116048186611129565b611180565b05915b84830361161857505050565b919350908161162b856116048185611129565b05919061160c565b6000811280611658575b156116515761164b90610e7a565b916115f3565b50816115f3565b508261166382610e7a565b131561163d565b50828113156115ec565b92905061167d57565b60019150565b919081156117f45760006116978483611180565b126112e2576116b6816116b0846106006105f6846110e9565b94611180565b670de0b6b3a764000091826116db6116d66116d0896110ad565b85611106565b61115c565b0590836116eb6116d6878a611106565b05908160011b916002830503610ddb576117088593928493611180565b96611713878a611106565b9061171d91611129565b611726916110d0565b6117309084611106565b6117399061115c565b05918061174591611106565b61174e9061115c565b05611758916110d0565b91816117648287611106565b61176d9061115c565b059061177891611106565b6117819061115c565b0561178b91611180565b916117968280611106565b928160021b90600482058303610ddb576117e26117f0946117dc6117cc6002986117c66117e79661060098611106565b906110d0565b916117d681610e7a565b926115d4565b90611180565b6110e9565b84830590611180565b0590565b5050905090565b81611861611867926117c661185061184061186d97610600610f9c9b9a6116046117e2611827896110e9565b9261183a86610600600282058097611180565b99611180565b6117c6816106006105f68c6110e9565b916117c6816106006105f68b6110e9565b90611106565b91611144565b90611129565b916116d682611861610f9c966106626106006117dc6118be6118cb986118b9886118ad670de0b6b3a76400009d8f6105f6610600916110e9565b9586936118618a611144565b6110d0565b916106006105f6866110e9565b05906110d0565b909594929391956118ee816118e9600099856110a0565b61196b565b918383116118ff575b505050505050565b61191595969750906119109161196b565b6119d0565b90670de0b6b3a764000091828111611941576119349161043f91610dc8565b04903880808080806118f7565b60046040517f5c7c5649000000000000000000000000000000000000000000000000000000008152fd5b90670de0b6b3a764000091828102928184041490151715610ddb576101d7610f9c928260011c906110a0565b6119a18180611106565b908260021b9280840560041490151715610ddb576118b9816119cb6117f0946117dc6002976110e9565b6115d4565b9092919082841115611a065760046040517fa6af4260000000000000000000000000000000000000000000000000000000008152fd5b818411801590611a55575b611a4c57610f9c93611a3691838111611a41576000905b848303920391800203610df1565b60011c91039061196b565b838103800290611a28565b50505050600090565b5080841115611a1156fea2646970667358221220f6ad1c5505d8f0153aa87ad7f4ece90e1387311f34c3a4ae27d7d683acc138b764736f6c63430008110033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b6000803560e01c80631f86566214610cb25780632841c1ad14610c9a5780632f6599bb14610c6c5780634c5b402d14610c5457806367146f2914610adf5780637b33fce7146108e0578063af633c40146108ae578063b94f2f9a14610667578063d7454c5314610624578063df4912981461060c578063e02a44c6146102f5578063e24a186a146102da578063f50fc03e146102b85763f6ae404f146100ba57600080fd5b6100c336610d19565b9291946001600160a01b038396169285519463961be39160e01b865260209384878581895afa968715610253578397610299575b5087519163705727b560e01b97888452868487818b5afa93841561028f578594610266575b5061014691610141916effffffffffffffffffffffffffffff80809716911685611683565b610e11565b98818a1061025d57508803955b875190815284818581895afa908115610253578391610226575b501693846101a057505050505061019c9083925b51938493846040919493926060820195825260208201520152565b0390f35b83908751938480926318160ddd60e01b82525afa92831561021a5781936101e2575b50505061019c92916101d76101dc9287610dc8565b610df1565b92610181565b9091809350813d8311610213575b6101fa8183610d69565b81010312610210575051816101d76101dc6101c2565b80fd5b503d6101f0565b508551903d90823e3d90fd5b6102469150853d871161024c575b61023e8183610d69565b810190610da1565b3861016d565b503d610234565b88513d85823e3d90fd5b96985097610153565b6101419194509161028661014693893d8b1161024c5761023e8183610d69565b9491509161011c565b8a513d87823e3d90fd5b6102b1919750853d871161024c5761023e8183610d69565b95386100f7565b6020836102d36102c736610d43565b9493909392919261119c565b9051908152f35b6020836102d36102e936610d43565b94939093929192611314565b50829060c03660031901126102105761030c610d03565b91610315610ced565b916044359060843592828281126105d9575b5086519463961be39160e01b8087526001600160a01b038098169360209889898681895afa9889156105cf5782996105b0575b506effffffffffffffffffffffffffffff8099168b519163705727b560e01b928381528c8189818c5afa90811561058957908c918e8792610593575b5050169516918c51908582528c828981875afa91821561058957908e8e92879461056a575b50670de0b6b3a76400008d819e8203610538575b50508990518096819382525afa92831561052e57918b8a9261040595948f889661050f575b50501696878d60643595169261119c565b978187139586948a9086610505575b50508415610488575b5050505061047a575015610458575061044c9061044461043f60a43585610dc8565b61108b565b048092610e8b565b915b8351928352820152f35b929161043f610473919461046e60a43591610e7a565b610dc8565b049061044e565b8651631c4bd71760e01b8152fd5b90919293508983881294856104a6575b50505050508880808061041d565b909192939450858c518094819382525afa9283156104fa57926104db575b506104ce85610e7a565b9116108880808981610498565b6104f3919250883d8a1161024c5761023e8183610d69565b90896104c4565b8a51903d90823e3d90fd5b109450898d610414565b610526929650803d1061024c5761023e8183610d69565b93388f6103f4565b8d513d86823e3d90fd5b80828d949f9c98828261055161055f9661055894610dc8565b049a610dc8565b049b611106565b059b90508c386103cf565b610582919450833d851161024c5761023e8183610d69565b92386103bb565b8e513d87823e3d90fd5b6105a99250803d1061024c5761023e8183610d69565b8f8e610396565b6105c89199508a3d8c1161024c5761023e8183610d69565b978b61035a565b8b513d84823e3d90fd5b6106059193506106006105f66105f060a4356110ad565b926110e9565b6002830590611180565b611129565b9187610327565b6020836102d361061b36610cca565b929190916114dd565b50606036600319011261021057506102d360209261066261065d61064b60243593356110e9565b92610600604435946002830590611180565b610e7a565b611997565b5082906101003660031901126102105761067f610d03565b610687610ced565b926044359060643561069a818486610e98565b505091829588519063961be39160e01b928383526001600160a01b0380981660209889858481855afa94851561052e57849561088f575b506106ee886effffffffffffffffffffffffffffff809716610e8b565b988d518b81868163705727b560e01b978882525afa90811561088457610721929188918e8992610867575b505016610e8b565b9b670de0b6b3a764000098608435670de0b6b3a763ffff19810161083d575b505016918c5195865289868281865afa95861561052e57908a9291859761081e575b508d518094819382525afa91821561081357836107ab9796948b9461079497948e94916107f6575b501692168861119c565b906107a461043f60a43584610dc8565b0490610e8b565b9360c4359081158015906107eb575b6107cc575b5050508351928352820152f35b9085856107e0949360e498969835946118d2565b9003918480806107bf565b5060e43515156107ba565b61080d91508c8d3d1061024c5761023e8183610d69565b8f61078a565b8b51903d90823e3d90fd5b610836919750833d851161024c5761023e8183610d69565b958e610762565b8a61085e929f9c81949f5082826108578261085794610dc8565b049e610dc8565b049a8e80610740565b61087d9250803d1061024c5761023e8183610d69565b388e610719565b508e513d87823e3d90fd5b6108a79195508a3d8c1161024c5761023e8183610d69565b938d6106d1565b61019c836108c46108be36610d19565b91610e98565b9251918252602082015260408101919091529081906060820190565b50829060c0366003190112610210576108f7610d03565b835163961be39160e01b8082526020928491602435916001600160a01b03168260643587878b81865afa968715610a5957908a92918798610ac0575b506effffffffffffffffffffffffffffff809816918c518a8163705727b560e01b9687825281895afa908115610ab657908a918a91610a99575b501691670de0b6b3a764000090818103610a63575b505050610997918661014192604435926117fb565b988a5193845287848281865afa938415610a5957908892918795610a3a575b508b518094819382525afa938415610a2f57916109ea95949391899394610a10575b5060a4359480608435951691166118d2565b806109fb575b508351928352820152f35b610a089192508093610e8b565b9190846109f0565b610a28919450873d891161024c5761023e8183610d69565b928a6109d8565b8951903d90823e3d90fd5b610a52919550833d851161024c5761023e8183610d69565b938c6109b6565b8b513d88823e3d90fd5b610141939298508082610a888282610a81610a8f966109979b610dc8565b0496610dc8565b0499610dc8565b0496918193610982565b610ab091508c8d3d1061024c5761023e8183610d69565b8f61096d565b8e513d8b823e3d90fd5b610ad8919850893d8b1161024c5761023e8183610d69565b968c610933565b508260a0366003190112610c5057803591610af8610ced565b9060643591608435916001600160a01b0386921690875163961be39160e01b815260209788828981875afa918215610c46578392610c27575b5087896effffffffffffffffffffffffffffff809416958c519283809263705727b560e01b82525afa9384156108135793610c08575b50670de0b6b3a7640000968791828203610be8575b505050610b93918461014192604435921685611873565b94821515918290879082610bde575b5050610bd0575015610bc057509061044461043f61044c9385610dc8565b93926104739161043f9195610dc8565b8751631c4bd71760e01b8152fd5b109050868a610ba2565b610141939650610b93949291610bfd91610dc8565b049491879193610b7c565b610c20919350893d8b1161024c5761023e8183610d69565b918a610b67565b610c3f919250893d8b1161024c5761023e8183610d69565b908a610b31565b8a513d85823e3d90fd5b5080fd5b6020836102d3610c6336610cca565b92919091611683565b5060c036600319011261021057506102d360209260a4359060843590606435906044359060243590356118d2565b6020836102d3610ca936610cca565b92919091611873565b6020836102d3610cc136610cca565b929190916117fb565b6080906003190112610ce85760043590602435906044359060643590565b600080fd5b602435906001600160a01b0382168203610ce857565b600435906001600160a01b0382168203610ce857565b6060906003190112610ce8576004356001600160a01b0381168103610ce857906024359060443590565b60c0906003190112610ce857600435906024359060443590606435906084359060a43590565b90601f8019910116810190811067ffffffffffffffff821117610d8b57604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610ce857516effffffffffffffffffffffffffffff81168103610ce85790565b81810292918115918404141715610ddb57565b634e487b7160e01b600052601160045260246000fd5b8115610dfb570490565b634e487b7160e01b600052601260045260246000fd5b60008112610e1c5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f76616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b600160ff1b8114610ddb5760000390565b91908203918211610ddb57565b9290916000936001600160a01b036000911690604080519063705727b560e01b938483526020978884600481855afa93841561108157859461105e575b50610ef2906effffffffffffffffffffffffffffff809516610dc8565b82516318160ddd60e01b81528981600481865afa908115611054578691611021575b50610f1e91610df1565b978815610ff857610f2e89610e7a565b9483519663961be39160e01b88528288600481875afa978815610fee578298610fcd575b508290600486518096819382525afa938415610fc35750928492610141979592610f8999979592610fa6575b5050169216906114dd565b92838310610f9f5750610f9c8383610e8b565b90565b9092508192565b610fbc9250803d1061024c5761023e8183610d69565b3880610f7e565b51903d90823e3d90fd5b83919850610fe790823d841161024c5761023e8183610d69565b9790610f52565b85513d84823e3d90fd5b600483517fd4b6d81b000000000000000000000000000000000000000000000000000000008152fd5b90508981813d831161104d575b6110388183610d69565b810103126110495751610f1e610f14565b8580fd5b503d61102e565b84513d88823e3d90fd5b610ef291945061107a908a3d8c1161024c5761023e8183610d69565b9390610ed5565b83513d87823e3d90fd5b906706f05b59d3b200008201809211610ddb57565b91908201809211610ddb57565b90670de0b6b3a764000060008382039312818412811691841390151617610ddb57565b81810392916000138015828513169184121617610ddb57565b90670de0b6b3a764000091828102928184051490151715610ddb57565b818102929160008212600160ff1b821416610ddb578184051490151715610ddb57565b8115610dfb57600160ff1b8114600019831416610ddb570590565b9081670de0b6b3a764000001918212600116610ddb57565b906706f05b59d3b200009160008382019384129112908015821691151617610ddb57565b91909160008382019384129112908015821691151617610ddb57565b939094918015801561130c575b6112e257838181926111bb8989611180565b97806111c78380611106565b906111d191611129565b98670de0b6b3a7640000809a8c6111e88880611106565b906111f291611129565b6111fb91611180565b611205908a611106565b61120e9061115c565b05611218916110d0565b9561122291611180565b61122b906110e9565b6002820561123891611180565b9061124291611129565b8061124c876110e9565b6002820561125991611180565b9061126391611129565b61126c916110d0565b61127591611106565b9061127f91611129565b91611289906110e9565b6002820561129691611180565b906112a091611129565b6112a9916110d0565b906112b391611997565b6112bc91611106565b6112c59061115c565b05906112d0916110d0565b6000811215610f9c57610f9c90610e7a565b60046040517fae032660000000000000000000000000000000000000000000000000000000008152fd5b5083156111a9565b949392919483156114d2576113298287611180565b156114c45782809286928661133f8a98976110e9565b6002820561134c91611180565b9061135691611129565b918781611362846110e9565b670de0b6b3a76400009b828d9592600287940561137e91611180565b9061138891611129565b61139190610e7a565b9061139b91611997565b6113a59083611106565b6113ae9061115c565b056113b99083611180565b6113c38284611180565b906113cd906110e9565b600282056113da91611180565b906113e491611129565b916113ee91611180565b90806113f9886110e9565b6002820561140691611180565b9061141091611129565b611419916110d0565b61142291611106565b61142b9061115c565b0592611436916110d0565b906114418487611106565b9061144b91611129565b61145491611180565b9061145e916110d0565b6114688585611180565b90611472906110e9565b6002820561147f91611180565b9061148991611129565b9061149391611997565b9261149d91611180565b936114a791611180565b906114b191611106565b6114ba9061115c565b05610f9c916110d0565b50509150610f9c92506110d0565b505050505050600090565b9290926114ea8184611180565b90836114f5866110e9565b6002820561150291611180565b9061150c91611129565b8094611517856110e9565b90670de0b6b3a76400009680889493600286950561153491611180565b9061153e91611129565b611547916110d0565b61155091611106565b6115599061115c565b0591611564856110ad565b61156d91611106565b6115769061115c565b0561158091611180565b600290059283926115918480611106565b928061159c91611106565b6115a591611106565b6115ae9061115c565b056115b891611180565b906115c2916115d4565b6115cb91611180565b610f9c916110d0565b9190600060038413156116745750600081138061166a575b1561163357915b600280611609856116048186611129565b611180565b05915b84830361161857505050565b919350908161162b856116048185611129565b05919061160c565b6000811280611658575b156116515761164b90610e7a565b916115f3565b50816115f3565b508261166382610e7a565b131561163d565b50828113156115ec565b92905061167d57565b60019150565b919081156117f45760006116978483611180565b126112e2576116b6816116b0846106006105f6846110e9565b94611180565b670de0b6b3a764000091826116db6116d66116d0896110ad565b85611106565b61115c565b0590836116eb6116d6878a611106565b05908160011b916002830503610ddb576117088593928493611180565b96611713878a611106565b9061171d91611129565b611726916110d0565b6117309084611106565b6117399061115c565b05918061174591611106565b61174e9061115c565b05611758916110d0565b91816117648287611106565b61176d9061115c565b059061177891611106565b6117819061115c565b0561178b91611180565b916117968280611106565b928160021b90600482058303610ddb576117e26117f0946117dc6117cc6002986117c66117e79661060098611106565b906110d0565b916117d681610e7a565b926115d4565b90611180565b6110e9565b84830590611180565b0590565b5050905090565b81611861611867926117c661185061184061186d97610600610f9c9b9a6116046117e2611827896110e9565b9261183a86610600600282058097611180565b99611180565b6117c6816106006105f68c6110e9565b916117c6816106006105f68b6110e9565b90611106565b91611144565b90611129565b916116d682611861610f9c966106626106006117dc6118be6118cb986118b9886118ad670de0b6b3a76400009d8f6105f6610600916110e9565b9586936118618a611144565b6110d0565b916106006105f6866110e9565b05906110d0565b909594929391956118ee816118e9600099856110a0565b61196b565b918383116118ff575b505050505050565b61191595969750906119109161196b565b6119d0565b90670de0b6b3a764000091828111611941576119349161043f91610dc8565b04903880808080806118f7565b60046040517f5c7c5649000000000000000000000000000000000000000000000000000000008152fd5b90670de0b6b3a764000091828102928184041490151715610ddb576101d7610f9c928260011c906110a0565b6119a18180611106565b908260021b9280840560041490151715610ddb576118b9816119cb6117f0946117dc6002976110e9565b6115d4565b9092919082841115611a065760046040517fa6af4260000000000000000000000000000000000000000000000000000000008152fd5b818411801590611a55575b611a4c57610f9c93611a3691838111611a41576000905b848303920391800203610df1565b60011c91039061196b565b838103800290611a28565b50505050600090565b5080841115611a1156fea2646970667358221220f6ad1c5505d8f0153aa87ad7f4ece90e1387311f34c3a4ae27d7d683acc138b764736f6c63430008110033",
  "devdoc": {
    "details": "Uses OpenZeppelin's SignedSafeMath and DSMath's WAD for calculations. Change log: - Move view functinos (quotes, high cov ratio fee) from the Pool contract to this contract - Add quote functions for cross chain swaps",
    "kind": "dev",
    "methods": {
      "depositRewardImpl(int256,int256,int256,int256,int256,int256)": {
        "returns": {
          "v": "positive value indicates a reward and negative value indicates a fee"
        }
      },
      "quoteSwap(IAsset,IAsset,int256,uint256,uint256,uint256)": {
        "params": {
          "fromAmount": "The amount to quote",
          "fromAsset": "The initial asset",
          "toAsset": "The asset wanted by user"
        },
        "returns": {
          "actualToAmount": "The actual amount user would receive",
          "haircut": "The haircut that will be applied"
        }
      },
      "quoteWithdrawAmount(IAsset,uint256,uint256)": {
        "params": {
          "asset": "The asset willing to be withdrawn",
          "liquidity": "The liquidity willing to be withdrawn"
        },
        "returns": {
          "amount": "Total amount to be withdrawn from Pool",
          "fee": "fee",
          "liabilityToBurn": "Total liability to be burned by Pool"
        }
      },
      "swapQuoteFunc(int256,int256,int256,int256,int256,int256)": {
        "details": "This function always returns >= 0",
        "params": {
          "A": "amplification factor",
          "Ax": "asset of token x",
          "Ay": "asset of token y",
          "Dx": "delta x, i.e. token x amount inputted",
          "Lx": "liability of token x",
          "Ly": "liability of token y"
        },
        "returns": {
          "quote": "The quote for amount of token y swapped for token x amount inputted"
        }
      },
      "withdrawalAmountInEquilImpl(int256,int256,int256,int256)": {
        "details": "should be used only when r* = 1"
      }
    },
    "title": "CoreV3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exactDepositLiquidityInEquilImpl(int256,int256,int256,int256)": {
        "notice": "return the deposit reward in token amount when target liquidity (LP amount) is known"
      },
      "quoteDepositLiquidityInEquil(IAsset,uint256,uint256)": {
        "notice": "This function calculate the exactly amount of liquidity of the deposit. Assumes r* = 1"
      },
      "quoteSwap(IAsset,IAsset,int256,uint256,uint256,uint256)": {
        "notice": "Quotes the actual amount user would receive in a swap, taking in account slippage and haircut"
      },
      "quoteWithdrawAmount(IAsset,uint256,uint256)": {
        "notice": "Calculates fee and liability to burn in case of withdrawal"
      },
      "swapQuoteFunc(int256,int256,int256,int256,int256,int256)": {
        "notice": "Core Wombat stableswap equation"
      }
    },
    "notice": "Handles math operations of Wombat protocol. Assume all params are signed integer with 18 decimals",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}