{
  "address": "0x8296f028809353C281543317F34823D844AD63D6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "name": "AssetSourceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "getAssetsPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getETHAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getETHPriceInAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getSourceOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        }
      ],
      "name": "setAssetSources",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ethAddress",
          "type": "address"
        }
      ],
      "name": "setETHAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf449fe23744743853009ef7a213861e231949ec39da72d8ec2a0d0a4be99b97d",
  "receipt": {
    "to": null,
    "from": "0x1f30d1eFafdfb20AF5fAC55254A115D2B0E8D410",
    "contractAddress": "0x8296f028809353C281543317F34823D844AD63D6",
    "transactionIndex": 0,
    "gasUsed": "900483",
    "logsBloom": "0x
    "blockHash": "0xd77df210017ce56115d5f8612023de83803d61a80164ea1de818e989296889cb",
    "transactionHash": "0xf449fe23744743853009ef7a213861e231949ec39da72d8ec2a0d0a4be99b97d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1336513,
        "transactionHash": "0xf449fe23744743853009ef7a213861e231949ec39da72d8ec2a0d0a4be99b97d",
        "address": "0x8296f028809353C281543317F34823D844AD63D6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001f30d1efafdfb20af5fac55254a115d2b0e8d410"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd77df210017ce56115d5f8612023de83803d61a80164ea1de818e989296889cb"
      }
    ],
    "blockNumber": 1336513,
    "cumulativeGasUsed": "900483",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [],
    []
  ],
  "solcInputHash": "90db8cc53bd2911a81fe521a3239f9b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AssetSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getETHPriceInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAssetSources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"}],\"name\":\"setETHAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"assets\":\"The addresses of the assets\",\"sources\":\"The address of the source of each asset\"}},\"getAssetPrice(address)\":{\"params\":{\"asset\":\"The asset address\"}},\"getAssetsPrices(address[])\":{\"params\":{\"assets\":\"The list of assets addresses\"}},\"getETHAddress()\":{\"returns\":{\"_0\":\"address The ethAddress\"}},\"getETHPriceInAsset(address)\":{\"params\":{\"asset\":\"The asset address\"}},\"getSourceOfAsset(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"address The address of the source\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAssetSources(address[],address[])\":{\"params\":{\"assets\":\"The addresses of the assets\",\"sources\":\"The address of the source of each asset\"}},\"setETHAddress(address)\":{\"params\":{\"ethAddress\":\"The address of ETH\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ChainlinkProxyPriceProvider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"getAssetPrice(address)\":{\"notice\":\"Gets an asset price by address\"},\"getAssetsPrices(address[])\":{\"notice\":\"Gets a list of prices from a list of assets addresses\"},\"getETHAddress()\":{\"notice\":\"Gets the ethAddress\"},\"getETHPriceInAsset(address)\":{\"notice\":\"Gets ETH price in terms of asset, which is the reciprocal of getAssetPrice         the number is not reounded by the asset actual number of decimal places         expect proper rounding is done outside of this function and getAssetPrice         returns number in WAD format\"},\"getSourceOfAsset(address)\":{\"notice\":\"Gets the address of the source for an asset address\"},\"setAssetSources(address[],address[])\":{\"notice\":\"External function called by the owner to set or replace sources of assets\"},\"setETHAddress(address)\":{\"notice\":\"Sets the ethAddress, in aave the ethAddress is a special representation for ETH,         generalized to be configurable per system, can be for example WETH address\"}},\"notice\":\"Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator         smart contracts as primary option - If the returned price by a Chainlink aggregator is <= 0, the transaction will be reverted - Can be owned by the governance system, allowed to add sources for assets, replace them\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/ChainlinkProxyPriceProvider.sol\":\"ChainlinkProxyPriceProvider\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// Based on aave-protocol implementation\\r\\n// https://github.com/aave/aave-protocol/blob/e8d020e97/interfaces/IChainlinkAggregator.sol\\r\\n// Changes:\\r\\n// - Upgrade to solidity 0.8.5\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.5;\\r\\n\\r\\ninterface IChainlinkAggregator {\\r\\n    function latestAnswer() external view returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf69008c7e548c257f0fdd6f8f83f8701e3fe53e0a95050fc90a229d5384d0809\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// Based on aave-protocol implementation\\r\\n// https://github.com/aave/aave-protocol/blob/e8d020e97/contracts/interfaces/IPriceOracleGetter.sol\\r\\n// Changes:\\r\\n// - Upgrade to solidity 0.8.5\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.5;\\r\\n\\r\\n/************\\r\\n@title IPriceOracleGetter interface\\r\\n@notice Interface for the price oracle.*/\\r\\ninterface IPriceOracleGetter {\\r\\n    /***********\\r\\n    @dev returns the asset price in ETH\\r\\n     */\\r\\n    function getAssetPrice(address _asset) external view returns (uint256);\\r\\n\\r\\n    /***********\\r\\n    @dev returns the ETH price in asset\\r\\n     */\\r\\n    function getETHPriceInAsset(address _asset) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x3f125f555f9fba1734708b6c02db789d7590a0449f723db36d237d1c24365211\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DSMath.sol\":{\"content\":\"/// math.sol -- mixin for inline numerical wizardry\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.5;\\r\\n\\r\\nlibrary DSMath {\\r\\n    uint256 public constant WAD = 10**18;\\r\\n    uint256 public constant RAY = 10**27;\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return ((x * y) + (WAD / 2)) / WAD;\\r\\n    }\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return ((x * WAD) + (y / 2)) / y;\\r\\n    }\\r\\n\\r\\n    function reciprocal(uint256 x) internal pure returns (uint256) {\\r\\n        return wdiv(WAD, x);\\r\\n    }\\r\\n\\r\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\r\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\r\\n    //\\r\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\r\\n    //\\r\\n    // These facts are why it works:\\r\\n    //\\r\\n    //  If n is even, then x^n = (x^2)^(n/2).\\r\\n    //  If n is odd,  then x^n = x * x^(n-1),\\r\\n    //   and applying the equation for even x gives\\r\\n    //    x^n = x * (x^2)^((n-1) / 2).\\r\\n    //\\r\\n    //  Also, EVM division is flooring and\\r\\n    //    floor[(n-1) / 2] = floor[n / 2].\\r\\n    //\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\r\\n        z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            x = rmul(x, x);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = rmul(z, x);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = ((x * y) + (RAY / 2)) / RAY;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5350548c579eb848aff4ac429fc97f0aa6292c3e10c45e449dc1f7525055e287\",\"license\":\"MIT\"},\"contracts/oracle/ChainlinkProxyPriceProvider.sol\":{\"content\":\"// Base on aave-protocol\\r\\n// https://github.com/aave/aave-protocol/blob/e8d020e97/contracts/misc/ChainlinkProxyPriceProvider.sol\\r\\n// Changes:\\r\\n// - Upgrade to solidity 0.8.5\\r\\n// - Remove fallbackOracle\\r\\n// - Store ethAddress (for potential WETH support)\\r\\n// - Add getETHPriceInAsset\\r\\n// - Followed solidity naming conventions\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.5;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\nimport '../libraries/DSMath.sol';\\r\\n\\r\\nimport '../interfaces/IPriceOracleGetter.sol';\\r\\nimport '../interfaces/IChainlinkAggregator.sol';\\r\\n\\r\\n/// @title ChainlinkProxyPriceProvider\\r\\n/// @notice Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator\\r\\n///         smart contracts as primary option\\r\\n/// - If the returned price by a Chainlink aggregator is <= 0, the transaction will be reverted\\r\\n/// - Can be owned by the governance system, allowed to add sources for assets, replace them\\r\\ncontract ChainlinkProxyPriceProvider is IPriceOracleGetter, Ownable {\\r\\n    using DSMath for uint256;\\r\\n\\r\\n    event AssetSourceUpdated(address indexed asset, address indexed source);\\r\\n\\r\\n    mapping(address => IChainlinkAggregator) private _assetsSources;\\r\\n    address private _ethAddress;\\r\\n\\r\\n    /// @notice Constructor\\r\\n    /// @param assets The addresses of the assets\\r\\n    /// @param sources The address of the source of each asset\\r\\n    constructor(address[] memory assets, address[] memory sources) {\\r\\n        internalSetAssetsSources(assets, sources);\\r\\n    }\\r\\n\\r\\n    /// @notice External function called by the owner to set or replace sources of assets\\r\\n    /// @param assets The addresses of the assets\\r\\n    /// @param sources The address of the source of each asset\\r\\n    function setAssetSources(address[] calldata assets, address[] calldata sources) external onlyOwner {\\r\\n        internalSetAssetsSources(assets, sources);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to set the sources for each asset\\r\\n    /// @param assets The addresses of the assets\\r\\n    /// @param sources The address of the source of each asset\\r\\n    function internalSetAssetsSources(address[] memory assets, address[] memory sources) internal {\\r\\n        require(assets.length == sources.length, 'INCONSISTENT_PARAMS_LENGTH');\\r\\n        for (uint256 i = 0; i < assets.length; i++) {\\r\\n            _assetsSources[assets[i]] = IChainlinkAggregator(sources[i]);\\r\\n            emit AssetSourceUpdated(assets[i], sources[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets an asset price by address\\r\\n    /// @param asset The asset address\\r\\n    function getAssetPrice(address asset) public view override returns (uint256) {\\r\\n        IChainlinkAggregator source = _assetsSources[asset];\\r\\n        if (asset == _ethAddress) {\\r\\n            return 1 ether;\\r\\n        } else {\\r\\n            // Require the asset has registered source\\r\\n            require(address(source) != address(0), 'SOURCE_IS_MISSING');\\r\\n\\r\\n            int256 price = IChainlinkAggregator(source).latestAnswer();\\r\\n            require(price > 0, 'INVALID_PRICE');\\r\\n\\r\\n            return uint256(price);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets ETH price in terms of asset, which is the reciprocal of getAssetPrice\\r\\n    ///         the number is not reounded by the asset actual number of decimal places\\r\\n    ///         expect proper rounding is done outside of this function and getAssetPrice\\r\\n    ///         returns number in WAD format\\r\\n    /// @param asset The asset address\\r\\n    function getETHPriceInAsset(address asset) external view override returns (uint256) {\\r\\n        if (asset == _ethAddress) {\\r\\n            return 1 ether;\\r\\n        } else {\\r\\n            uint256 assetPrice = getAssetPrice(asset);\\r\\n            uint256 price = assetPrice.reciprocal();\\r\\n            require(price > 0, 'INVALID_PRICE');\\r\\n\\r\\n            return price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets a list of prices from a list of assets addresses\\r\\n    /// @param assets The list of assets addresses\\r\\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory) {\\r\\n        uint256[] memory prices = new uint256[](assets.length);\\r\\n        for (uint256 i = 0; i < assets.length; i++) {\\r\\n            prices[i] = getAssetPrice(assets[i]);\\r\\n        }\\r\\n        return prices;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the address of the source for an asset address\\r\\n    /// @param asset The address of the asset\\r\\n    /// @return address The address of the source\\r\\n    function getSourceOfAsset(address asset) external view returns (address) {\\r\\n        return address(_assetsSources[asset]);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the ethAddress, in aave the ethAddress is a special representation for ETH,\\r\\n    ///         generalized to be configurable per system, can be for example WETH address\\r\\n    /// @param ethAddress The address of ETH\\r\\n    function setETHAddress(address ethAddress) external onlyOwner {\\r\\n        require(ethAddress != address(0), 'ADDRESS_IS_ZERO');\\r\\n        _ethAddress = ethAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the ethAddress\\r\\n    /// @return address The ethAddress\\r\\n    function getETHAddress() external view returns (address) {\\r\\n        return _ethAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5938814d2134d14fa10bbe282b6191b73215f7429bd0f8db5df6448488eebfb0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001276380380620012768339810160408190526200003491620002ea565b6200003f3362000053565b6200004b8282620000a3565b5050620003aa565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114620000f95760405162461bcd60e51b815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e475448000000000000604482015260640160405180910390fd5b60005b825181101562000215578181815181106200011b576200011b6200037e565b6020026020010151600160008584815181106200013c576200013c6200037e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508181815181106200019d576200019d6200037e565b60200260200101516001600160a01b0316838281518110620001c357620001c36200037e565b60200260200101516001600160a01b03167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a3806200020c8162000354565b915050620000fc565b505050565b80516001600160a01b03811681146200023257600080fd5b919050565b600082601f8301126200024957600080fd5b815160206001600160401b038083111562000268576200026862000394565b8260051b604051601f19603f8301168101818110848211171562000290576200029062000394565b60405284815283810192508684018288018501891015620002b057600080fd5b600092505b85831015620002de57620002c9816200021a565b845292840192600192909201918401620002b5565b50979650505050505050565b60008060408385031215620002fe57600080fd5b82516001600160401b03808211156200031657600080fd5b620003248683870162000237565b935060208501519150808211156200033b57600080fd5b506200034a8582860162000237565b9150509250929050565b60006000198214156200037757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610ebc80620003ba6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639d23d9f211610076578063b07cb0661161005b578063b07cb066146101b1578063b3596f07146101cf578063f2fde38b146101e257600080fd5b80639d23d9f21461017e578063abfd53101461019e57600080fd5b806384dfb2bd116100a757806384dfb2bd146100f35780638da5cb5b1461010657806392bf2be01461014557600080fd5b80630fa3977b146100c3578063715018a6146100e9575b600080fd5b6100d66100d1366004610bef565b6101f5565b6040519081526020015b60405180910390f35b6100f16102ba565b005b6100f1610101366004610bef565b610347565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b610120610153366004610bef565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600160205260409020541690565b61019161018c366004610c25565b61048c565b6040516100e09190610cec565b6100f16101ac366004610c67565b610541565b60025473ffffffffffffffffffffffffffffffffffffffff16610120565b6100d66101dd366004610bef565b610635565b6100f16101f0366004610bef565b6107e6565b60025460009073ffffffffffffffffffffffffffffffffffffffff8381169116141561022a5750670de0b6b3a7640000919050565b600061023583610635565b9050600061024282610916565b9050600081116102b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f50524943450000000000000000000000000000000000000060448201526064015b60405180910390fd5b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102aa565b6103456000610930565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102aa565b73ffffffffffffffffffffffffffffffffffffffff8116610445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f414444524553535f49535f5a45524f000000000000000000000000000000000060448201526064016102aa565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b606060008267ffffffffffffffff8111156104a9576104a9610e57565b6040519080825280602002602001820160405280156104d2578160200160208202803683370190505b50905060005b838110156105395761050a8585838181106104f5576104f5610e28565b90506020020160208101906101dd9190610bef565b82828151811061051c5761051c610e28565b60209081029190910101528061053181610dc0565b9150506104d8565b509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102aa565b61062f848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506109a592505050565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8082166000818152600160205260408120546002549193908116929116141561067d5750670de0b6b3a764000092915050565b73ffffffffffffffffffffffffffffffffffffffff81166106fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f534f555243455f49535f4d495353494e4700000000000000000000000000000060448201526064016102aa565b60008173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a9190610cd3565b9050600081136102b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f50524943450000000000000000000000000000000000000060448201526064016102aa565b60005473ffffffffffffffffffffffffffffffffffffffff163314610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102aa565b73ffffffffffffffffffffffffffffffffffffffff811661090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102aa565b61091381610930565b50565b600061092a670de0b6b3a764000083610b6f565b92915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114610a10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e47544800000000000060448201526064016102aa565b60005b8251811015610b6a57818181518110610a2e57610a2e610e28565b602002602001015160016000858481518110610a4c57610a4c610e28565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818181518110610ade57610ade610e28565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110610b0e57610b0e610e28565b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a380610b6281610dc0565b915050610a13565b505050565b600081610b7d600282610d48565b610b8f670de0b6b3a764000086610d83565b610b999190610d30565b6102b39190610d48565b60008083601f840112610bb557600080fd5b50813567ffffffffffffffff811115610bcd57600080fd5b6020830191508360208260051b8501011115610be857600080fd5b9250929050565b600060208284031215610c0157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102b357600080fd5b60008060208385031215610c3857600080fd5b823567ffffffffffffffff811115610c4f57600080fd5b610c5b85828601610ba3565b90969095509350505050565b60008060008060408587031215610c7d57600080fd5b843567ffffffffffffffff80821115610c9557600080fd5b610ca188838901610ba3565b90965094506020870135915080821115610cba57600080fd5b50610cc787828801610ba3565b95989497509550505050565b600060208284031215610ce557600080fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b81811015610d2457835183529284019291840191600101610d08565b50909695505050505050565b60008219821115610d4357610d43610df9565b500190565b600082610d7e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dbb57610dbb610df9565b500290565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df257610df2610df9565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212205ff8034f5db6bca7864e64ff73c6841070b6b98c8ef465098bcc5bcc3d459bc264736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80639d23d9f211610076578063b07cb0661161005b578063b07cb066146101b1578063b3596f07146101cf578063f2fde38b146101e257600080fd5b80639d23d9f21461017e578063abfd53101461019e57600080fd5b806384dfb2bd116100a757806384dfb2bd146100f35780638da5cb5b1461010657806392bf2be01461014557600080fd5b80630fa3977b146100c3578063715018a6146100e9575b600080fd5b6100d66100d1366004610bef565b6101f5565b6040519081526020015b60405180910390f35b6100f16102ba565b005b6100f1610101366004610bef565b610347565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b610120610153366004610bef565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600160205260409020541690565b61019161018c366004610c25565b61048c565b6040516100e09190610cec565b6100f16101ac366004610c67565b610541565b60025473ffffffffffffffffffffffffffffffffffffffff16610120565b6100d66101dd366004610bef565b610635565b6100f16101f0366004610bef565b6107e6565b60025460009073ffffffffffffffffffffffffffffffffffffffff8381169116141561022a5750670de0b6b3a7640000919050565b600061023583610635565b9050600061024282610916565b9050600081116102b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f50524943450000000000000000000000000000000000000060448201526064015b60405180910390fd5b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102aa565b6103456000610930565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102aa565b73ffffffffffffffffffffffffffffffffffffffff8116610445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f414444524553535f49535f5a45524f000000000000000000000000000000000060448201526064016102aa565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b606060008267ffffffffffffffff8111156104a9576104a9610e57565b6040519080825280602002602001820160405280156104d2578160200160208202803683370190505b50905060005b838110156105395761050a8585838181106104f5576104f5610e28565b90506020020160208101906101dd9190610bef565b82828151811061051c5761051c610e28565b60209081029190910101528061053181610dc0565b9150506104d8565b509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102aa565b61062f848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506109a592505050565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8082166000818152600160205260408120546002549193908116929116141561067d5750670de0b6b3a764000092915050565b73ffffffffffffffffffffffffffffffffffffffff81166106fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f534f555243455f49535f4d495353494e4700000000000000000000000000000060448201526064016102aa565b60008173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a9190610cd3565b9050600081136102b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f50524943450000000000000000000000000000000000000060448201526064016102aa565b60005473ffffffffffffffffffffffffffffffffffffffff163314610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102aa565b73ffffffffffffffffffffffffffffffffffffffff811661090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102aa565b61091381610930565b50565b600061092a670de0b6b3a764000083610b6f565b92915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114610a10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e47544800000000000060448201526064016102aa565b60005b8251811015610b6a57818181518110610a2e57610a2e610e28565b602002602001015160016000858481518110610a4c57610a4c610e28565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818181518110610ade57610ade610e28565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110610b0e57610b0e610e28565b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a380610b6281610dc0565b915050610a13565b505050565b600081610b7d600282610d48565b610b8f670de0b6b3a764000086610d83565b610b999190610d30565b6102b39190610d48565b60008083601f840112610bb557600080fd5b50813567ffffffffffffffff811115610bcd57600080fd5b6020830191508360208260051b8501011115610be857600080fd5b9250929050565b600060208284031215610c0157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102b357600080fd5b60008060208385031215610c3857600080fd5b823567ffffffffffffffff811115610c4f57600080fd5b610c5b85828601610ba3565b90969095509350505050565b60008060008060408587031215610c7d57600080fd5b843567ffffffffffffffff80821115610c9557600080fd5b610ca188838901610ba3565b90965094506020870135915080821115610cba57600080fd5b50610cc787828801610ba3565b95989497509550505050565b600060208284031215610ce557600080fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b81811015610d2457835183529284019291840191600101610d08565b50909695505050505050565b60008219821115610d4357610d43610df9565b500190565b600082610d7e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dbb57610dbb610df9565b500290565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df257610df2610df9565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212205ff8034f5db6bca7864e64ff73c6841070b6b98c8ef465098bcc5bcc3d459bc264736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "assets": "The addresses of the assets",
          "sources": "The address of the source of each asset"
        }
      },
      "getAssetPrice(address)": {
        "params": {
          "asset": "The asset address"
        }
      },
      "getAssetsPrices(address[])": {
        "params": {
          "assets": "The list of assets addresses"
        }
      },
      "getETHAddress()": {
        "returns": {
          "_0": "address The ethAddress"
        }
      },
      "getETHPriceInAsset(address)": {
        "params": {
          "asset": "The asset address"
        }
      },
      "getSourceOfAsset(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "address The address of the source"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAssetSources(address[],address[])": {
        "params": {
          "assets": "The addresses of the assets",
          "sources": "The address of the source of each asset"
        }
      },
      "setETHAddress(address)": {
        "params": {
          "ethAddress": "The address of ETH"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ChainlinkProxyPriceProvider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "getAssetPrice(address)": {
        "notice": "Gets an asset price by address"
      },
      "getAssetsPrices(address[])": {
        "notice": "Gets a list of prices from a list of assets addresses"
      },
      "getETHAddress()": {
        "notice": "Gets the ethAddress"
      },
      "getETHPriceInAsset(address)": {
        "notice": "Gets ETH price in terms of asset, which is the reciprocal of getAssetPrice         the number is not reounded by the asset actual number of decimal places         expect proper rounding is done outside of this function and getAssetPrice         returns number in WAD format"
      },
      "getSourceOfAsset(address)": {
        "notice": "Gets the address of the source for an asset address"
      },
      "setAssetSources(address[],address[])": {
        "notice": "External function called by the owner to set or replace sources of assets"
      },
      "setETHAddress(address)": {
        "notice": "Sets the ethAddress, in aave the ethAddress is a special representation for ETH,         generalized to be configurable per system, can be for example WETH address"
      }
    },
    "notice": "Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator         smart contracts as primary option - If the returned price by a Chainlink aggregator is <= 0, the transaction will be reverted - Can be owned by the governance system, allowed to add sources for assets, replace them",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 392,
        "contract": "contracts/oracle/ChainlinkProxyPriceProvider.sol:ChainlinkProxyPriceProvider",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2353,
        "contract": "contracts/oracle/ChainlinkProxyPriceProvider.sol:ChainlinkProxyPriceProvider",
        "label": "_assetsSources",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(IChainlinkAggregator)2132)"
      },
      {
        "astId": 2355,
        "contract": "contracts/oracle/ChainlinkProxyPriceProvider.sol:ChainlinkProxyPriceProvider",
        "label": "_ethAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IChainlinkAggregator)2132": {
        "encoding": "inplace",
        "label": "contract IChainlinkAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IChainlinkAggregator)2132)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IChainlinkAggregator)",
        "numberOfBytes": "32",
        "value": "t_contract(IChainlinkAggregator)2132"
      }
    }
  }
}