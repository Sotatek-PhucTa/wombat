{
  "address": "0x54C76c9a1ed61546F3D5d7FD1451dC24B6f0AC2C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "assetOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getC1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHaircutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRetentionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlippageParamK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlippageParamN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWETHForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getXThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "potentialOutcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "quotePotentialWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enoughCash",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "c1_",
          "type": "uint256"
        }
      ],
      "name": "setC1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dev",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "haircutRate_",
          "type": "uint256"
        }
      ],
      "name": "setHaircutRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "retentionRatio_",
          "type": "uint256"
        }
      ],
      "name": "setRetentionRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "k_",
          "type": "uint256"
        }
      ],
      "name": "setSlippageParamK",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n_",
          "type": "uint256"
        }
      ],
      "name": "setSlippageParamN",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "name": "setWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wethForwarder",
          "type": "address"
        }
      ],
      "name": "setWETHForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "xThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setXThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumToAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa79e149908edf1966a588765f818ca3666f69af42198beeb8f6a2a39ae229f18",
  "receipt": {
    "to": null,
    "from": "0x1f30d1eFafdfb20AF5fAC55254A115D2B0E8D410",
    "contractAddress": "0x54C76c9a1ed61546F3D5d7FD1451dC24B6f0AC2C",
    "transactionIndex": 0,
    "gasUsed": "4198488",
    "logsBloom": "0x
    "blockHash": "0x2a894e38160f60c8cb61657d04a27c20be518129e0724a1760f281ea7fdc0ec8",
    "transactionHash": "0xa79e149908edf1966a588765f818ca3666f69af42198beeb8f6a2a39ae229f18",
    "logs": [],
    "blockNumber": 1336506,
    "cumulativeGasUsed": "4198488",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "90db8cc53bd2911a81fe521a3239f9b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"assetOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getC1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHaircutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRetentionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageParamK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageParamN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETHForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"quotePotentialSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"potentialOutcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enoughCash\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c1_\",\"type\":\"uint256\"}],\"name\":\"setC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"haircutRate_\",\"type\":\"uint256\"}],\"name\":\"setHaircutRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"retentionRatio_\",\"type\":\"uint256\"}],\"name\":\"setRetentionRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k_\",\"type\":\"uint256\"}],\"name\":\"setSlippageParamK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n_\",\"type\":\"uint256\"}],\"name\":\"setSlippageParamN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wethForwarder\",\"type\":\"address\"}],\"name\":\"setWETHForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xThreshold_\",\"type\":\"uint256\"}],\"name\":\"setXThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumToAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The main entry-point of Wombat protocol\",\"kind\":\"dev\",\"methods\":{\"addAsset(address,address)\":{\"params\":{\"asset\":\"The address of the Wombat Asset contract\",\"token\":\"The address of token\"}},\"assetOf(address)\":{\"details\":\"to be used externally\",\"params\":{\"token\":\"The address of ERC20 token\"}},\"deposit(address,uint256,address,uint256)\":{\"details\":\"Asset needs to be created and added to pool before any operation\",\"params\":{\"amount\":\"The amount to be deposited\",\"deadline\":\"The deadline to be respected\",\"to\":\"The user accountable for deposit, receiving the Wombat assets (lp)\",\"token\":\"The token address to be deposited\"},\"returns\":{\"liquidity\":\"Total asset liquidity minted\"}},\"getC1()\":{\"returns\":{\"_0\":\"The current C1 slippage parameter in Pool\"}},\"getDev()\":{\"returns\":{\"_0\":\"The current Dev address for Pool\"}},\"getHaircutRate()\":{\"returns\":{\"_0\":\"The current Haircut parameter in Pool\"}},\"getPriceOracle()\":{\"returns\":{\"_0\":\"The current Price Oracle address for Pool\"}},\"getRetentionRatio()\":{\"returns\":{\"_0\":\"The current retention ratio parameter in Pool\"}},\"getSlippageParamK()\":{\"returns\":{\"_0\":\"The current K slippage parameter in Pool\"}},\"getSlippageParamN()\":{\"returns\":{\"_0\":\"The current N slippage parameter in Pool\"}},\"getWETH()\":{\"returns\":{\"_0\":\"The current WETH address for Pool\"}},\"getWETHForwarder()\":{\"returns\":{\"_0\":\"The current WETHForwarder address for Pool\"}},\"getXThreshold()\":{\"returns\":{\"_0\":\"The current XThreshold slippage parameter in Pool\"}},\"initialize(address)\":{\"params\":{\"weth_\":\"The weth address used to wrap eth (or BSC in our case) tokens by Pool.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"pause pool, restricting certain operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quotePotentialSwap(address,address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"fromAmount\":\"The amount to quote\",\"fromToken\":\"The initial ERC20 token\",\"toToken\":\"The token wanted by user\"},\"returns\":{\"haircut\":\"The haircut that would be applied\",\"potentialOutcome\":\"The potential amount user would receive\"}},\"quotePotentialWithdraw(address,uint256)\":{\"details\":\"To be used by frontend\",\"params\":{\"liquidity\":\"The liquidity (amount of lp assets) to be withdrawn\",\"token\":\"The token to be withdrawn by user\"},\"returns\":{\"amount\":\"The potential amount user would receive\",\"enoughCash\":\"does the pool have enough cash? (cash >= liabilityToBurn - fee)\",\"fee\":\"The fee that would be applied\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setC1(uint256)\":{\"params\":{\"c1_\":\"new pool's slippage param C1\"}},\"setDev(address)\":{\"params\":{\"dev\":\"new contract dev address\"}},\"setHaircutRate(uint256)\":{\"params\":{\"haircutRate_\":\"new pool's haircutRate_\"}},\"setPriceOracle(address)\":{\"params\":{\"priceOracle\":\"new pool's priceOracle addres\"}},\"setRetentionRatio(uint256)\":{\"params\":{\"retentionRatio_\":\"new pool's retentionRatio\"}},\"setSlippageParamK(uint256)\":{\"params\":{\"k_\":\"new pool's slippage param K\"}},\"setSlippageParamN(uint256)\":{\"params\":{\"n_\":\"new pool's slippage param N\"}},\"setWETH(address)\":{\"params\":{\"weth_\":\"new pool's WETH address\"}},\"setWETHForwarder(address)\":{\"params\":{\"wethForwarder\":\"new pool's WETHForwarder address\"}},\"setXThreshold(uint256)\":{\"params\":{\"xThreshold_\":\"new pool's slippage param xThreshold\"}},\"swap(address,address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"fromAmount\":\"The amount of from token inserted\",\"fromToken\":\"The token being inserted into Pool by user for swap\",\"minimumToAmount\":\"The minimum amount that will be accepted by user as result\",\"to\":\"The user receiving the result of swap\",\"toToken\":\"The token wanted by user, leaving the Pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause pool, enabling certain operations\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"params\":{\"deadline\":\"The deadline to be respected\",\"liquidity\":\"The liquidity to be withdrawn\",\"minimumAmount\":\"The minimum amount that will be accepted by user\",\"to\":\"The user receiving the withdrawal\",\"token\":\"The token to be withdrawn\"},\"returns\":{\"amount\":\"The total amount withdrawn\"}}},\"title\":\"Pool\",\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(address,address)\":{\"notice\":\"An event thats emitted when an asset is added to Pool\"},\"Deposit(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a deposit is made to Pool\"},\"Swap(address,address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a swap is made in Pool\"},\"Withdraw(address,address,uint256,uint256,address)\":{\"notice\":\"An event thats emitted when a withdrawal is made from Pool\"}},\"kind\":\"user\",\"methods\":{\"addAsset(address,address)\":{\"notice\":\"Adds asset to pool, reverts if asset already exists in pool\"},\"assetOf(address)\":{\"notice\":\"Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\"},\"deposit(address,uint256,address,uint256)\":{\"notice\":\"Deposits amount of tokens into pool ensuring deadline\"},\"getC1()\":{\"notice\":\"Gets current C1 slippage parameter\"},\"getDev()\":{\"notice\":\"Gets current Dev address\"},\"getHaircutRate()\":{\"notice\":\"Gets current Haircut parameter\"},\"getPriceOracle()\":{\"notice\":\"Gets current Price Oracle address\"},\"getRetentionRatio()\":{\"notice\":\"Gets current retention ratio parameter\"},\"getSlippageParamK()\":{\"notice\":\"Gets current K slippage parameter\"},\"getSlippageParamN()\":{\"notice\":\"Gets current N slippage parameter\"},\"getWETH()\":{\"notice\":\"Gets current WETH address\"},\"getWETHForwarder()\":{\"notice\":\"Gets current WETHForwarder address\"},\"getXThreshold()\":{\"notice\":\"Gets current XThreshold slippage parameter\"},\"initialize(address)\":{\"notice\":\"Initializes pool. Dev is set to be the account calling this function.\"},\"quotePotentialSwap(address,address,uint256)\":{\"notice\":\"Quotes potential outcome of a swap given current state, taking in account slippage and haircut\"},\"quotePotentialWithdraw(address,uint256)\":{\"notice\":\"Quotes potential withdrawal from pool\"},\"setC1(uint256)\":{\"notice\":\"Changes the pools slippage param C1. Can only be set by the contract owner.\"},\"setDev(address)\":{\"notice\":\"Changes the contract dev. Can only be set by the contract owner.\"},\"setHaircutRate(uint256)\":{\"notice\":\"Changes the pools haircutRate. Can only be set by the contract owner.\"},\"setPriceOracle(address)\":{\"notice\":\"Changes the pools priceOracle. Can only be set by the contract owner.\"},\"setRetentionRatio(uint256)\":{\"notice\":\"Changes the pools retentionRatio. Can only be set by the contract owner.\"},\"setSlippageParamK(uint256)\":{\"notice\":\"Changes the pools slippage param K. Can only be set by the contract owner.\"},\"setSlippageParamN(uint256)\":{\"notice\":\"Changes the pools slippage param N. Can only be set by the contract owner.\"},\"setWETH(address)\":{\"notice\":\"Changes the pools WETH. Can only be set by the contract owner.\"},\"setWETHForwarder(address)\":{\"notice\":\"Changes the pools WETHForwarder. Can only be set by the contract owner.\"},\"setXThreshold(uint256)\":{\"notice\":\"Changes the pools slippage param xThreshold. Can only be set by the contract owner.\"},\"swap(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\"},\"withdraw(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\"}},\"notice\":\"Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/Pool.sol\":\"Pool\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/asset/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.5;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\n\\r\\n/**\\r\\n * @title Asset\\r\\n * @notice Contract presenting an asset in a pool\\r\\n * @dev Expect to be owned by Timelock for management, and _pool links to Pool for coordination\\r\\n */\\r\\ncontract Asset is Ownable, Initializable, ERC20 {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice The underlying underlyingToken represented by this asset\\r\\n    address private _underlyingToken;\\r\\n    /// @notice The Pool\\r\\n    address private _pool;\\r\\n    /// @notice Cash balance, normally it should align with IERC20(_underlyingToken).balanceOf(address(this))\\r\\n    uint256 private _cash;\\r\\n    /// @notice Total liability, equals to the sum of deposit and dividend\\r\\n    uint256 private _liability;\\r\\n    /// @notice Owner\\r\\n    address private _owner;\\r\\n    /// @notice Name of the asset\\r\\n    string public _name;\\r\\n    /// @notice Symbol of the asset\\r\\n    string public _symbol;\\r\\n    /// @notice Aggregate Account of the asset\\r\\n    address private _aggregateAccount;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor.\\r\\n     * @param underlyingToken_ The token represented by the asset\\r\\n     * @param name_ The name of the asset\\r\\n     * @param symbol_ The symbol of the asset\\r\\n     * @param aggregateAccount_ The aggregate account to which the the asset belongs\\r\\n     */\\r\\n    constructor(\\r\\n        address underlyingToken_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address aggregateAccount_\\r\\n    ) ERC20(name_, symbol_) {\\r\\n        initialize(underlyingToken_, name_, symbol_, aggregateAccount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initializer.\\r\\n     * @dev _ suffix to avoid shadowing underlyingToken() name and  symbol\\r\\n     * @param underlyingToken_ The token represented by the asset\\r\\n     * @param name_ The name of the asset\\r\\n     * @param symbol_ The symbol of the asset\\r\\n     * @param aggregateAccount_ The aggregate account to which the the asset belongs\\r\\n     */\\r\\n    function initialize(\\r\\n        address underlyingToken_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address aggregateAccount_\\r\\n    ) public initializer {\\r\\n        require(underlyingToken_ != address(0), 'Wombat: Token address cannot be zero');\\r\\n        require(aggregateAccount_ != address(0), 'Wombat: Aggregate account address cannot be zero');\\r\\n\\r\\n        _owner = msg.sender;\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _underlyingToken = underlyingToken_;\\r\\n        _aggregateAccount = aggregateAccount_;\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier ensuring that certain function can only be called by pool\\r\\n    modifier onlyPool() {\\r\\n        require(msg.sender == _pool, 'Wombat: FORBIDDEN');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets current Pool address\\r\\n     * @return The current Pool address for Asset\\r\\n     */\\r\\n    function pool() external view returns (address) {\\r\\n        return _pool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the pool. Can only be set by the contract owner.\\r\\n     * @param pool_ new pool's address\\r\\n     */\\r\\n    function setPool(address pool_) external onlyOwner {\\r\\n        require(pool_ != address(0), 'Wombat: Pool address cannot be zero');\\r\\n        _pool = pool_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the Aggregate Account 'holding' this asset\\r\\n     * @return The current Aggregate Account address for Asset\\r\\n     */\\r\\n    function aggregateAccount() external view returns (address) {\\r\\n        return _aggregateAccount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of ERC20 underlyingToken represented by this asset\\r\\n     * @return The current address of ERC20 underlyingToken for Asset\\r\\n     */\\r\\n    function underlyingToken() external view returns (address) {\\r\\n        return _underlyingToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the decimals of ERC20 underlyingToken\\r\\n     * @return The current decimals for underlying token\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        // `decimals` not in IERC20\\r\\n        return ERC20(_underlyingToken).decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get underlying Token Balance\\r\\n     * @return Returns the actual balance of ERC20 underlyingToken\\r\\n     */\\r\\n    function underlyingTokenBalance() external view returns (uint256) {\\r\\n        return IERC20(_underlyingToken).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers ERC20 underlyingToken from this contract to another account. Can only be called by Pool.\\r\\n     * @dev Not to be confused with transferring Wombat Assets.\\r\\n     * @param to address to transfer the token to\\r\\n     * @param amount amount to transfer\\r\\n     */\\r\\n    function transferUnderlyingToken(address to, uint256 amount) external onlyPool {\\r\\n        IERC20(_underlyingToken).safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint Asset Token, expect pool coordinates other state updates. Can only be called by Pool.\\r\\n     * @param to address to transfer the token to\\r\\n     * @param amount amount to transfer\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external onlyPool {\\r\\n        return _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn Asset Token, expect pool coordinates other state updates. Can only be called by Pool.\\r\\n     * @param to address holding the tokens\\r\\n     * @param amount amount to burn\\r\\n     */\\r\\n    function burn(address to, uint256 amount) external onlyPool {\\r\\n        return _burn(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the amount of underlyingToken transferrable, expect to match underlyingTokenBalance()\\r\\n     */\\r\\n    function cash() external view returns (uint256) {\\r\\n        return _cash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds cash, expects actual ERC20 underlyingToken got transferred in. Can only be called by Pool.\\r\\n     * @param amount amount to add\\r\\n     */\\r\\n    function addCash(uint256 amount) external onlyPool {\\r\\n        _cash += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deducts cash, expect actual ERC20 got transferred out (by transferUnderlyingToken()).\\r\\n     * Can only be called by Pool.\\r\\n     * @param amount amount to remove\\r\\n     */\\r\\n    function removeCash(uint256 amount) external onlyPool {\\r\\n        require(_cash >= amount, 'Wombat: INSUFFICIENT_CASH');\\r\\n        _cash -= amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the amount of liability, the total deposit and dividend\\r\\n     */\\r\\n    function liability() external view returns (uint256) {\\r\\n        return _liability;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds deposit or dividend, expect LP underlyingToken minted in case of deposit.\\r\\n     * Can only be called by Pool.\\r\\n     * @param amount amount to add\\r\\n     */\\r\\n    function addLiability(uint256 amount) external onlyPool {\\r\\n        _liability += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes deposit and dividend earned, expect LP underlyingToken burnt.\\r\\n     * Can only be called by Pool.\\r\\n     * @param amount amount to remove\\r\\n     */\\r\\n    function removeLiability(uint256 amount) external onlyPool {\\r\\n        require(_liability >= amount, 'Wombat: INSUFFICIENT_LIABILITY');\\r\\n        _liability -= amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x468e8a25360f06026812d7d1bfc42f1f42b848f37503da708586865683328ed1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// Based on aave-protocol implementation\\r\\n// https://github.com/aave/aave-protocol/blob/e8d020e97/contracts/interfaces/IPriceOracleGetter.sol\\r\\n// Changes:\\r\\n// - Upgrade to solidity 0.8.5\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.5;\\r\\n\\r\\n/************\\r\\n@title IPriceOracleGetter interface\\r\\n@notice Interface for the price oracle.*/\\r\\ninterface IPriceOracleGetter {\\r\\n    /***********\\r\\n    @dev returns the asset price in ETH\\r\\n     */\\r\\n    function getAssetPrice(address _asset) external view returns (uint256);\\r\\n\\r\\n    /***********\\r\\n    @dev returns the ETH price in asset\\r\\n     */\\r\\n    function getETHPriceInAsset(address _asset) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x3f125f555f9fba1734708b6c02db789d7590a0449f723db36d237d1c24365211\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.5;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function balanceOf(address account) external returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x24b238dc04a884a17eb889353acdd642fd7117bef132a54593479a3a2e9bfd41\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DSMath.sol\":{\"content\":\"/// math.sol -- mixin for inline numerical wizardry\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.5;\\r\\n\\r\\nlibrary DSMath {\\r\\n    uint256 public constant WAD = 10**18;\\r\\n    uint256 public constant RAY = 10**27;\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return ((x * y) + (WAD / 2)) / WAD;\\r\\n    }\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return ((x * WAD) + (y / 2)) / y;\\r\\n    }\\r\\n\\r\\n    function reciprocal(uint256 x) internal pure returns (uint256) {\\r\\n        return wdiv(WAD, x);\\r\\n    }\\r\\n\\r\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\r\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\r\\n    //\\r\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\r\\n    //\\r\\n    // These facts are why it works:\\r\\n    //\\r\\n    //  If n is even, then x^n = (x^2)^(n/2).\\r\\n    //  If n is odd,  then x^n = x * x^(n-1),\\r\\n    //   and applying the equation for even x gives\\r\\n    //    x^n = x * (x^2)^((n-1) / 2).\\r\\n    //\\r\\n    //  Also, EVM division is flooring and\\r\\n    //    floor[(n-1) / 2] = floor[n / 2].\\r\\n    //\\r\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\r\\n        z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            x = rmul(x, x);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = rmul(z, x);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = ((x * y) + (RAY / 2)) / RAY;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5350548c579eb848aff4ac429fc97f0aa6292c3e10c45e449dc1f7525055e287\",\"license\":\"MIT\"},\"contracts/pool/Core.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.5;\\n\\nimport '../libraries/DSMath.sol';\\n\\n/**\\n * @title Core\\n * @notice Handles math operations of Wombat protocol.\\n * @dev Uses DSMath to compute using WAD and RAY.\\n */\\ncontract Core {\\n    using DSMath for uint256;\\n\\n    /// @notice WAD unit. Used to handle most numbers.\\n    uint256 internal constant WAD = 10**18;\\n\\n    /// @notice RAY unit. Used for rpow function.\\n    uint256 internal constant RAY = 10**27;\\n\\n    /**\\n     * @notice Yellow Paper Def. 2.4 (Price Slippage Curve)\\n     * @dev Calculates -g(xr,i) or -g(xr,j). This function always returns >= 0\\n     * @param k K slippage parameter in WAD\\n     * @param n N slippage parameter\\n     * @param c1 C1 slippage parameter in WAD\\n     * @param xThreshold xThreshold slippage parameter in WAD\\n     * @param x coverage ratio of asset in WAD\\n     * @return The result of price slippage curve\\n     */\\n    function _slippageFunc(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 x\\n    ) internal pure returns (uint256) {\\n        if (x < xThreshold) {\\n            return c1 - x;\\n        } else {\\n            return k.wdiv((((x * RAY) / WAD).rpow(n) * WAD) / RAY); // k / (x ** n)\\n        }\\n    }\\n\\n    /**\\n     * @notice Yellow Paper Def. 2.4 (Asset Slippage)\\n     * @dev Calculates Si or Sj (slippage from and slippage to)\\n     * @param k K slippage parameter in WAD\\n     * @param n N slippage parameter\\n     * @param c1 C1 slippage parameter in WAD\\n     * @param xThreshold xThreshold slippage parameter in WAD\\n     * @param cash cash position of asset in WAD\\n     * @param cashChange cashChange of asset in WAD\\n     * @param addCash true if we are adding cash, false otherwise\\n     * @return The result of one-sided asset slippage\\n     */\\n    function _slippage(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 cash,\\n        uint256 liability,\\n        uint256 cashChange,\\n        bool addCash\\n    ) internal pure returns (uint256) {\\n        uint256 covBefore = cash.wdiv(liability);\\n        uint256 covAfter;\\n        if (addCash) {\\n            covAfter = (cash + cashChange).wdiv(liability);\\n        } else {\\n            covAfter = (cash - cashChange).wdiv(liability);\\n        }\\n\\n        // if cov stays unchanged, slippage is 0\\n        if (covBefore == covAfter) {\\n            return 0;\\n        }\\n\\n        uint256 slippageBefore = _slippageFunc(k, n, c1, xThreshold, covBefore);\\n        uint256 slippageAfter = _slippageFunc(k, n, c1, xThreshold, covAfter);\\n\\n        if (covBefore > covAfter) {\\n            return (slippageAfter - slippageBefore).wdiv(covBefore - covAfter);\\n        } else {\\n            return (slippageBefore - slippageAfter).wdiv(covAfter - covBefore);\\n        }\\n    }\\n\\n    /**\\n     * @notice Yellow Paper Def. 2.5 (Swapping Slippage). Calculates 1 - (Si - Sj).\\n     * Uses the formula 1 + (-Si) - (-Sj), with the -Si, -Sj returned from _slippage\\n     * @dev Adjusted to prevent dealing with underflow of uint256\\n     * @param si -si slippage parameter in WAD\\n     * @param sj -sj slippage parameter\\n     * @return The result of swapping slippage (1 - Si->j)\\n     */\\n    function _swappingSlippage(uint256 si, uint256 sj) internal pure returns (uint256) {\\n        return WAD + si - sj;\\n    }\\n\\n    /**\\n     * @notice Yellow Paper Def. 4.0 (Haircut).\\n     * @dev Applies haircut rate to amount\\n     * @param amount The amount that will receive the discount\\n     * @param rate The rate to be applied\\n     * @return The result of operation.\\n     */\\n    function _haircut(uint256 amount, uint256 rate) internal pure returns (uint256) {\\n        return amount.wmul(rate);\\n    }\\n\\n    /**\\n     * @notice Applies dividend to amount\\n     * @param amount The amount that will receive the discount\\n     * @param ratio The ratio to be applied in dividend\\n     * @return The result of operation.\\n     */\\n    function _dividend(uint256 amount, uint256 ratio) internal pure returns (uint256) {\\n        return amount.wmul(WAD - ratio);\\n    }\\n\\n    /**\\n     * @notice Yellow Paper Def. 6.2 (Withdrawal Fee)\\n     * @dev When covBefore >= 1, fee is 0\\n     * @dev When covBefore < 1, we apply a fee to prevent withdrawal arbitrage\\n     * @param k K slippage parameter in WAD\\n     * @param n N slippage parameter\\n     * @param c1 C1 slippage parameter in WAD\\n     * @param xThreshold xThreshold slippage parameter in WAD\\n     * @param cash cash position of asset in WAD\\n     * @param liability liability position of asset in WAD\\n     * @param amount amount to be withdrawn in WAD\\n     * @return The final fee to be applied\\n     */\\n    function _withdrawalFee(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 cash,\\n        uint256 liability,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        uint256 covBefore = cash.wdiv(liability);\\n        if (covBefore >= WAD) {\\n            return 0;\\n        }\\n\\n        if (liability <= amount) {\\n            return 0;\\n        }\\n\\n        uint256 cashAfter;\\n        // Cover case where cash <= amount\\n        if (cash > amount) {\\n            cashAfter = cash - amount;\\n        } else {\\n            cashAfter = 0;\\n        }\\n\\n        uint256 covAfter = (cashAfter).wdiv(liability - amount);\\n        uint256 slippageBefore = _slippageFunc(k, n, c1, xThreshold, covBefore);\\n        uint256 slippageAfter = _slippageFunc(k, n, c1, xThreshold, covAfter);\\n        uint256 slippageNeutral = _slippageFunc(k, n, c1, xThreshold, WAD); // slippage on cov = 1\\n\\n        // fee = [(Li - Di) * SlippageAfter] + [g(1) * Di] - [Li * SlippageBefore]\\n        return\\n            ((liability - amount).wmul(slippageAfter) + slippageNeutral.wmul(amount)) - liability.wmul(slippageBefore);\\n    }\\n\\n    /**\\n     * @notice Yellow Paper Def. 7.2 (Deposit Fee)\\n     * @dev When covBefore <= 1, fee is 0\\n     * @dev When covBefore > 1, we apply a fee to prevent deposit arbitrage\\n     * @param k K slippage parameter in WAD\\n     * @param n N slippage parameter\\n     * @param c1 C1 slippage parameter in WAD\\n     * @param xThreshold xThreshold slippage parameter in WAD\\n     * @param cash cash position of asset in WAD\\n     * @param liability liability position of asset in WAD\\n     * @param amount amount to be deposited in WAD\\n     * @return The final fee to be applied\\n     */\\n    function _depositFee(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 cash,\\n        uint256 liability,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        // cover case where the asset has no liquidity yet\\n        if (liability == 0) {\\n            return 0;\\n        }\\n\\n        uint256 covBefore = cash.wdiv(liability);\\n        if (covBefore <= WAD) {\\n            return 0;\\n        }\\n\\n        uint256 covAfter = (cash + amount).wdiv(liability + amount);\\n        uint256 slippageBefore = _slippageFunc(k, n, c1, xThreshold, covBefore);\\n        uint256 slippageAfter = _slippageFunc(k, n, c1, xThreshold, covAfter);\\n\\n        // (Li + Di) * g(cov_after) - Li * g(cov_before)\\n        return ((liability + amount).wmul(slippageAfter)) - (liability.wmul(slippageBefore));\\n    }\\n}\\n\",\"keccak256\":\"0xc0c8add7f74fb61c5fd54d7bdcf447035126f1a4e3e0ab0419040cdf47cec74c\",\"license\":\"GPL-3.0\"},\"contracts/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.5;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../libraries/DSMath.sol';\\nimport '../interfaces/IPriceOracleGetter.sol';\\nimport '../interfaces/IWETH.sol';\\nimport './WETHForwarder.sol';\\nimport '../asset/Asset.sol';\\nimport './Core.sol';\\n\\n/**\\n * @title Pool\\n * @notice Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.\\n * @dev The main entry-point of Wombat protocol\\n */\\ncontract Pool is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, Core {\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Wei in 1 ether\\n    uint256 private constant ETH_UNIT = 10**18;\\n\\n    /// @notice Slippage parameters K, N, C1 and xThreshold\\n    uint256 private _slippageParamK = 5 * 10**13; // (1/20_000) * WAD\\n    uint256 private _slippageParamN = 6; // 6\\n    uint256 private _c1 = 366166321751524166; // ((k**(1/(n+1))) / (n**((n)/(n+1)))) + (k*n)**(1/(n+1)) ~ 0.36...\\n    uint256 private _xThreshold = 313856847215592143; // (k*n)**(1/(n+1)) ~ 0.313...\\n\\n    /// @notice Haircut rate\\n    uint256 private _haircutRate = 4 * 10**15; // 0.004 for intra-aggregate account swap\\n\\n    /// @notice Retention ratio\\n    uint256 private _retentionRatio = ETH_UNIT; // 1\\n\\n    /// @notice Dev address\\n    address private _dev;\\n\\n    /// @notice Weth (or BSC in our case) address\\n    address private _weth;\\n\\n    /// @notice WETH Forwarder used to wrap and unwrap eth (or BSC)\\n    WETHForwarder private _wethForwarder;\\n\\n    /// @notice The price oracle interface used in swaps\\n    IPriceOracleGetter private _priceOracle;\\n\\n    /// @notice A record of assets inside Pool\\n    mapping(address => Asset) private _assets;\\n\\n    /// @notice An event thats emitted when an asset is added to Pool\\n    event AssetAdded(address indexed token, address indexed asset);\\n\\n    /// @notice An event thats emitted when a deposit is made to Pool\\n    event Deposit(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a withdrawal is made from Pool\\n    event Withdraw(address indexed sender, address token, uint256 amount, uint256 liquidity, address indexed to);\\n\\n    /// @notice An event thats emitted when a swap is made in Pool\\n    event Swap(\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address indexed to\\n    );\\n\\n    /// @dev Modifier ensuring that certain function can only be called by developer\\n    modifier onlyDev() {\\n        require(_dev == msg.sender, 'Wombat: FORBIDDEN');\\n        _;\\n    }\\n\\n    /// @dev Modifier ensuring a certain deadline for a function to complete execution\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, 'Wombat: EXPIRED');\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes pool. Dev is set to be the account calling this function.\\n     * @param weth_ The weth address used to wrap eth (or BSC in our case) tokens by Pool.\\n     */\\n    function initialize(address weth_) external initializer {\\n        require(weth_ != address(0), 'Wombat: WETH address cannot be zero');\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        _dev = msg.sender;\\n        _weth = weth_;\\n    }\\n\\n    // Getters //\\n\\n    /**\\n     * @notice Gets current WETH address\\n     * @return The current WETH address for Pool\\n     */\\n    function getWETH() external view returns (address) {\\n        return _weth;\\n    }\\n\\n    /**\\n     * @notice Gets current WETHForwarder address\\n     * @return The current WETHForwarder address for Pool\\n     */\\n    function getWETHForwarder() external view returns (address) {\\n        return address(_wethForwarder);\\n    }\\n\\n    /**\\n     * @notice Gets current Dev address\\n     * @return The current Dev address for Pool\\n     */\\n    function getDev() external view returns (address) {\\n        return _dev;\\n    }\\n\\n    /**\\n     * @notice Gets current Price Oracle address\\n     * @return The current Price Oracle address for Pool\\n     */\\n    function getPriceOracle() external view returns (address) {\\n        return address(_priceOracle);\\n    }\\n\\n    /**\\n     * @notice Gets current C1 slippage parameter\\n     * @return The current C1 slippage parameter in Pool\\n     */\\n    function getC1() external view onlyOwner returns (uint256) {\\n        return _c1;\\n    }\\n\\n    /**\\n     * @notice Gets current XThreshold slippage parameter\\n     * @return The current XThreshold slippage parameter in Pool\\n     */\\n    function getXThreshold() external view onlyOwner returns (uint256) {\\n        return _xThreshold;\\n    }\\n\\n    /**\\n     * @notice Gets current K slippage parameter\\n     * @return The current K slippage parameter in Pool\\n     */\\n    function getSlippageParamK() external view onlyOwner returns (uint256) {\\n        return _slippageParamK;\\n    }\\n\\n    /**\\n     * @notice Gets current N slippage parameter\\n     * @return The current N slippage parameter in Pool\\n     */\\n    function getSlippageParamN() external view onlyOwner returns (uint256) {\\n        return _slippageParamN;\\n    }\\n\\n    /**\\n     * @notice Gets current Haircut parameter\\n     * @return The current Haircut parameter in Pool\\n     */\\n    function getHaircutRate() external view onlyOwner returns (uint256) {\\n        return _haircutRate;\\n    }\\n\\n    /**\\n     * @notice Gets current retention ratio parameter\\n     * @return The current retention ratio parameter in Pool\\n     */\\n    function getRetentionRatio() external view onlyOwner returns (uint256) {\\n        return _retentionRatio;\\n    }\\n\\n    /**\\n     * @dev pause pool, restricting certain operations\\n     */\\n    function pause() external onlyDev nonReentrant {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, enabling certain operations\\n     */\\n    function unpause() external onlyDev nonReentrant {\\n        _unpause();\\n    }\\n\\n    // Setters //\\n    /**\\n     * @notice Changes the contract dev. Can only be set by the contract owner.\\n     * @param dev new contract dev address\\n     */\\n    function setDev(address dev) external onlyOwner {\\n        require(dev != address(0), 'Wombat: address cannot be zero');\\n        _dev = dev;\\n    }\\n\\n    /**\\n     * @notice Changes the pools WETH. Can only be set by the contract owner.\\n     * @param weth_ new pool's WETH address\\n     */\\n    function setWETH(address weth_) external onlyOwner {\\n        require(weth_ != address(0), 'Wombat: WETH address cannot be zero');\\n        _weth = weth_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools WETHForwarder. Can only be set by the contract owner.\\n     * @param wethForwarder new pool's WETHForwarder address\\n     */\\n    function setWETHForwarder(address payable wethForwarder) external onlyOwner nonReentrant {\\n        _wethForwarder = WETHForwarder(wethForwarder);\\n    }\\n\\n    /**\\n     * @notice Changes the pools slippage param K. Can only be set by the contract owner.\\n     * @param k_ new pool's slippage param K\\n     */\\n    function setSlippageParamK(uint256 k_) external onlyOwner {\\n        require(k_ <= ETH_UNIT); // k should not be set bigger than 1\\n        _slippageParamK = k_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools slippage param N. Can only be set by the contract owner.\\n     * @param n_ new pool's slippage param N\\n     */\\n    function setSlippageParamN(uint256 n_) external onlyOwner {\\n        _slippageParamN = n_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools slippage param C1. Can only be set by the contract owner.\\n     * @param c1_ new pool's slippage param C1\\n     */\\n    function setC1(uint256 c1_) external onlyOwner {\\n        _c1 = c1_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools slippage param xThreshold. Can only be set by the contract owner.\\n     * @param xThreshold_ new pool's slippage param xThreshold\\n     */\\n    function setXThreshold(uint256 xThreshold_) external onlyOwner {\\n        _xThreshold = xThreshold_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools haircutRate. Can only be set by the contract owner.\\n     * @param haircutRate_ new pool's haircutRate_\\n     */\\n    function setHaircutRate(uint256 haircutRate_) external onlyOwner {\\n        require(haircutRate_ <= ETH_UNIT); // haircutRate_ should not be set bigger than 1\\n        _haircutRate = haircutRate_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools retentionRatio. Can only be set by the contract owner.\\n     * @param retentionRatio_ new pool's retentionRatio\\n     */\\n    function setRetentionRatio(uint256 retentionRatio_) external onlyOwner {\\n        require(retentionRatio_ <= ETH_UNIT); // retentionRatio_ should not be set bigger than 1\\n        _retentionRatio = retentionRatio_;\\n    }\\n\\n    /**\\n     * @notice Changes the pools priceOracle. Can only be set by the contract owner.\\n     * @param priceOracle new pool's priceOracle addres\\n     */\\n    function setPriceOracle(address priceOracle) external onlyOwner nonReentrant {\\n        _priceOracle = IPriceOracleGetter(priceOracle);\\n    }\\n\\n    /**\\n     * @notice Adds asset to pool, reverts if asset already exists in pool\\n     * @param token The address of token\\n     * @param asset The address of the Wombat Asset contract\\n     */\\n    function addAsset(address token, address asset) external onlyOwner nonReentrant {\\n        require(token != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(asset != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(address(_assets[token]) == address(0), 'Wombat: ASSET_EXISTS');\\n\\n        _assets[token] = Asset(asset);\\n\\n        emit AssetAdded(token, asset);\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @param token The address of ERC20 token\\n     */\\n    function _assetOf(address token) private view returns (Asset) {\\n        require(address(_assets[token]) != address(0), 'Wombat: ASSET_NOT_EXIST');\\n        return _assets[token];\\n    }\\n\\n    /**\\n     * @notice Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool.\\n     * @dev to be used externally\\n     * @param token The address of ERC20 token\\n     */\\n    function assetOf(address token) external view returns (address) {\\n        return address(_assetOf(token));\\n    }\\n\\n    /**\\n     * @notice Deposits asset in Pool\\n     * @param asset The asset to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function _deposit(\\n        Asset asset,\\n        uint256 amount,\\n        address to\\n    ) internal returns (uint256 liquidity) {\\n        require(to != address(0), 'Wombat: To user address cannot be zero');\\n\\n        uint256 totalSupply = asset.totalSupply();\\n        uint256 liability = asset.liability();\\n\\n        uint256 fee = _depositFee(\\n            _slippageParamK,\\n            _slippageParamN,\\n            _c1,\\n            _xThreshold,\\n            asset.cash(),\\n            asset.liability(),\\n            amount\\n        );\\n\\n        // Calculate amount of LP to mint : ( deposit - fee ) * TotalAssetSupply / Liability\\n        liquidity = (liability == 0 ? (amount - fee) : ((amount - fee) * totalSupply) / liability);\\n        require(liquidity > 0, 'Wombat: INSUFFICIENT_LIQUIDITY_MINTED');\\n\\n        asset.addCash(amount);\\n        asset.addLiability(amount - fee);\\n        asset.mint(to, liquidity);\\n    }\\n\\n    /**\\n     * @notice Deposits amount of tokens into pool ensuring deadline\\n     * @dev Asset needs to be created and added to pool before any operation\\n     * @param token The token address to be deposited\\n     * @param amount The amount to be deposited\\n     * @param to The user accountable for deposit, receiving the Wombat assets (lp)\\n     * @param deadline The deadline to be respected\\n     * @return liquidity Total asset liquidity minted\\n     */\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) nonReentrant whenNotPaused returns (uint256 liquidity) {\\n        require(amount > 0, 'Wombat: ZERO_AMOUNT');\\n        require(token != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(to != address(0), 'Wombat: ZERO_ADDRESS');\\n\\n        IERC20 erc20 = IERC20(token);\\n        Asset asset = _assetOf(token);\\n\\n        erc20.safeTransferFrom(address(msg.sender), address(asset), amount);\\n        liquidity = _deposit(asset, amount, to);\\n\\n        emit Deposit(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Calculates fee and liability to burn in case of withdrawal\\n     * @param asset The asset willing to be withdrawn\\n     * @param liquidity The liquidity willing to be withdrawn\\n     * @return amount Total amount to be withdrawn from Pool\\n     * @return liabilityToBurn Total liability to be burned by Pool\\n     * @return fee The fee of the withdraw operation\\n     */\\n    function _withdrawFrom(Asset asset, uint256 liquidity)\\n        private\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 liabilityToBurn,\\n            uint256 fee\\n        )\\n    {\\n        liabilityToBurn = (asset.liability() * liquidity) / asset.totalSupply();\\n        require(liabilityToBurn > 0, 'Wombat: INSUFFICIENT_LIQUIDITY_BURNED');\\n\\n        fee = _withdrawalFee(\\n            _slippageParamK,\\n            _slippageParamN,\\n            _c1,\\n            _xThreshold,\\n            asset.cash(),\\n            asset.liability(),\\n            liabilityToBurn\\n        );\\n\\n        // Prevent underflow in case withdrawal fees >= liabilityToBurn, user would only burn his underlying liability\\n        if (liabilityToBurn > fee) {\\n            if (asset.cash() < (liabilityToBurn - fee)) {\\n                amount = asset.cash(); // When asset does not contain enough cash, just withdraw the remaining cash\\n                fee = 0;\\n            } else {\\n                amount = liabilityToBurn - fee; // There is enough cash, standard withdrawal\\n            }\\n        } else {\\n            amount = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param asset The asset to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @return amount The total amount withdrawn\\n     */\\n    function _withdraw(\\n        Asset asset,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to\\n    ) private returns (uint256 amount) {\\n        // request lp token from user\\n        IERC20(asset).safeTransferFrom(address(msg.sender), address(asset), liquidity);\\n\\n        // calculate liabilityToBurn and Fee\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, ) = _withdrawFrom(asset, liquidity);\\n\\n        require(minimumAmount <= amount, 'Wombat: AMOUNT_TOO_LOW');\\n\\n        asset.burn(address(asset), liquidity);\\n        asset.removeCash(amount);\\n        asset.removeLiability(liabilityToBurn);\\n        asset.transferUnderlyingToken(to, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws liquidity amount of asset to `to` address ensuring minimum amount required\\n     * @param token The token to be withdrawn\\n     * @param liquidity The liquidity to be withdrawn\\n     * @param minimumAmount The minimum amount that will be accepted by user\\n     * @param to The user receiving the withdrawal\\n     * @param deadline The deadline to be respected\\n     * @return amount The total amount withdrawn\\n     */\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) nonReentrant whenNotPaused returns (uint256 amount) {\\n        require(liquidity > 0, 'Wombat: ZERO_ASSET_AMOUNT');\\n        require(token != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(to != address(0), 'Wombat: ZERO_ADDRESS');\\n\\n        Asset asset = _assetOf(token);\\n\\n        amount = _withdraw(asset, liquidity, minimumAmount, to);\\n\\n        emit Withdraw(msg.sender, token, amount, liquidity, to);\\n    }\\n\\n    /**\\n     * @notice Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address\\n     * @param fromToken The token being inserted into Pool by user for swap\\n     * @param toToken The token wanted by user, leaving the Pool\\n     * @param fromAmount The amount of from token inserted\\n     * @param minimumToAmount The minimum amount that will be accepted by user as result\\n     * @param to The user receiving the result of swap\\n     * @param deadline The deadline to be respected\\n     */\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) nonReentrant whenNotPaused {\\n        require(fromToken != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(toToken != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(fromToken != toToken, 'Wombat: SAME_ADDRESS');\\n        require(fromAmount > 0, 'Wombat: ZERO_FROM_AMOUNT');\\n        require(to != address(0), 'Wombat: ZERO_ADDRESS');\\n\\n        IERC20 fromERC20 = IERC20(fromToken);\\n        Asset fromAsset = _assetOf(fromToken);\\n        Asset toAsset = _assetOf(toToken);\\n\\n        // Intrapool swapping only\\n        require(toAsset.aggregateAccount() == fromAsset.aggregateAccount(), 'Wombat: INTERPOOL_SWAP_NOT_SUPPORTED');\\n\\n        (uint256 actualToAmount, uint256 haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n        require(minimumToAmount <= actualToAmount, 'Wombat: AMOUNT_TOO_LOW');\\n\\n        fromERC20.safeTransferFrom(address(msg.sender), address(fromAsset), fromAmount);\\n        fromAsset.addCash(fromAmount);\\n        toAsset.removeCash(actualToAmount);\\n        toAsset.addLiability(_dividend(haircut, _retentionRatio));\\n        toAsset.transferUnderlyingToken(to, actualToAmount);\\n\\n        emit Swap(msg.sender, fromToken, toToken, fromAmount, actualToAmount, to);\\n    }\\n\\n    /**\\n     * @notice Quotes the actual amount user would receive in a swap, taking in account slippage and haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return actualToAmount The actual amount user would receive\\n     * @return haircut The haircut that will be applied\\n     */\\n    function _quoteFrom(\\n        Asset fromAsset,\\n        Asset toAsset,\\n        uint256 fromAmount\\n    ) private view returns (uint256 actualToAmount, uint256 haircut) {\\n        uint256 idealToAmount = _quoteIdealToAmount(fromAsset, toAsset, fromAmount);\\n        require(toAsset.cash() >= idealToAmount, 'Wombat: INSUFFICIENT_CASH');\\n\\n        uint256 slippageFrom = _slippage(\\n            _slippageParamK,\\n            _slippageParamN,\\n            _c1,\\n            _xThreshold,\\n            fromAsset.cash(),\\n            fromAsset.liability(),\\n            fromAmount,\\n            true\\n        );\\n        uint256 slippageTo = _slippage(\\n            _slippageParamK,\\n            _slippageParamN,\\n            _c1,\\n            _xThreshold,\\n            toAsset.cash(),\\n            toAsset.liability(),\\n            idealToAmount,\\n            false\\n        );\\n        uint256 swappingSlippage = _swappingSlippage(slippageFrom, slippageTo);\\n        uint256 toAmount = idealToAmount.wmul(swappingSlippage);\\n        haircut = _haircut(toAmount, _haircutRate);\\n        actualToAmount = toAmount - haircut;\\n    }\\n\\n    /**\\n     * @notice Quotes the ideal amount in case of swap\\n     * @dev Does not take into account slippage parameters nor haircut\\n     * @param fromAsset The initial asset\\n     * @param toAsset The asset wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return idealToAmount The ideal amount user would receive\\n     */\\n    function _quoteIdealToAmount(\\n        Asset fromAsset,\\n        Asset toAsset,\\n        uint256 fromAmount\\n    ) private view returns (uint256 idealToAmount) {\\n        idealToAmount = (((fromAmount * _priceOracle.getAssetPrice(fromAsset.underlyingToken())).wmul(\\n            _priceOracle.getETHPriceInAsset(toAsset.underlyingToken())\\n        ) * 10**toAsset.decimals()) /\\n            10**fromAsset.decimals() /\\n            ETH_UNIT);\\n    }\\n\\n    /**\\n     * @notice Quotes potential outcome of a swap given current state, taking in account slippage and haircut\\n     * @dev To be used by frontend\\n     * @param fromToken The initial ERC20 token\\n     * @param toToken The token wanted by user\\n     * @param fromAmount The amount to quote\\n     * @return potentialOutcome The potential amount user would receive\\n     * @return haircut The haircut that would be applied\\n     */\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount\\n    ) external view whenNotPaused returns (uint256 potentialOutcome, uint256 haircut) {\\n        require(fromToken != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(toToken != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(fromToken != toToken, 'Wombat: SAME_ADDRESS');\\n        require(fromAmount > 0, 'Wombat: ZERO_FROM_AMOUNT');\\n\\n        Asset fromAsset = _assetOf(fromToken);\\n        Asset toAsset = _assetOf(toToken);\\n\\n        // Intrapool swapping only\\n        require(toAsset.aggregateAccount() == fromAsset.aggregateAccount(), 'Wombat: INTERPOOL_SWAP_NOT_SUPPORTED');\\n\\n        (potentialOutcome, haircut) = _quoteFrom(fromAsset, toAsset, fromAmount);\\n    }\\n\\n    /**\\n     * @notice Quotes potential withdrawal from pool\\n     * @dev To be used by frontend\\n     * @param token The token to be withdrawn by user\\n     * @param liquidity The liquidity (amount of lp assets) to be withdrawn\\n     * @return amount The potential amount user would receive\\n     * @return fee The fee that would be applied\\n     * @return enoughCash does the pool have enough cash? (cash >= liabilityToBurn - fee)\\n     */\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        whenNotPaused\\n        returns (\\n            uint256 amount,\\n            uint256 fee,\\n            bool enoughCash\\n        )\\n    {\\n        require(token != address(0), 'Wombat: ZERO_ADDRESS');\\n        require(liquidity > 0, 'Wombat: liquidity must be greater than zero');\\n\\n        Asset asset = _assetOf(token);\\n        uint256 liabilityToBurn;\\n        (amount, liabilityToBurn, fee) = _withdrawFrom(asset, liquidity);\\n        if (amount < liabilityToBurn - fee) {\\n            enoughCash = false;\\n        } else {\\n            enoughCash = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabac0f7aabfc361bc423897e909a2b35df0ab574d6333b6834753e8a24820cea\",\"license\":\"GPL-3.0\"},\"contracts/pool/WETHForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.5;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\n\\r\\nimport '../interfaces/IWETH.sol';\\r\\n\\r\\n/**\\r\\n * @title WETHForwarder\\r\\n * @notice Temporary WETH holder and is responsible to unwrap and forward actual ETH to user\\r\\n * @dev Allows transfer of WETH avoiding out-of-gas error (in case pool is ever deployed through proxy).\\r\\n */\\r\\ncontract WETHForwarder is Ownable, ReentrancyGuard {\\r\\n    using Address for address payable;\\r\\n\\r\\n    /// @notice Weth (or BSC in our case) address\\r\\n    address private _weth;\\r\\n\\r\\n    /// @notice Pool address\\r\\n    address private _pool;\\r\\n\\r\\n    /// @dev Modifier ensuring that certain function can only be called by pool\\r\\n    modifier onlyPool() {\\r\\n        require(msg.sender == _pool, 'Wombat: FORBIDDEN');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor.\\r\\n     * @param weth The weth (or BSC) address to be used.\\r\\n     */\\r\\n    constructor(address weth) {\\r\\n        require(weth != address(0), 'weth address cannot be zero');\\r\\n        _weth = weth;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == _weth); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the pool. Can only be set by the contract owner.\\r\\n     * @param pool new contract pool address\\r\\n     */\\r\\n    function setPool(address pool) external onlyOwner {\\r\\n        require(pool != address(0), 'Pool address cannot be zero');\\r\\n        _pool = pool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unwrap and transfer eth. Can only be called by pool\\r\\n     * @param to address receiving\\r\\n     * @param amount total amount to be transferred\\r\\n     */\\r\\n    function unwrapAndTransfer(address payable to, uint256 amount) external onlyPool nonReentrant {\\r\\n        IWETH weth = IWETH(_weth);\\r\\n        require(weth.balanceOf(address(this)) >= amount, 'Wombat: INSUFFICIENT_WETH');\\r\\n        weth.withdraw(amount);\\r\\n        to.sendValue(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x97663d04753fed20caec8d367382bb91dc671f322c0b689c2f930c3f68eef34a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052652d79883d200060c955600660ca55670514e25460b6034660cb5567045b0b23c09c02cf60cc55660e35fa931a000060cd55670de0b6b3a764000060ce5534801561004e57600080fd5b506148d68061005e6000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c80637fdd5a8e1161012a578063b2b94784116100bd578063d477f05f1161008c578063f2fde38b11610071578063f2fde38b1461046b578063f57e84d51461047e578063fca513a81461049157600080fd5b8063d477f05f14610445578063da4899971461045857600080fd5b8063b2b9478414610406578063c4d66de814610419578063cae5f11e1461042c578063cb733d7a1461043d57600080fd5b806390d25074116100f957806390d25074146103c55780639908fc8b146103d85780639b2d8a4f146103eb578063a76f54d2146103fe57600080fd5b80637fdd5a8e146103745780638456cb591461037c5780638da5cb5b14610384578063907448ed1461039557600080fd5b806355af008a116101bd5780636772fa781161018c57806371f962111161017157806371f96211146103515780637727c655146103645780637a1c36d11461036c57600080fd5b80636772fa7814610336578063715018a61461034957600080fd5b806355af008a146102f257806357eab9b2146102fa5780635b769f3c1461030d5780635c975abb1461032057600080fd5b806344db964a116101f957806344db964a146102a85780634ddc439a146102bb57806350d94966146102cc578063530e784f146102df57600080fd5b806309a5fca31461022b57806309bb9267146102515780633f4ba83a1461027657806343c2e2f514610280575b600080fd5b61023e61023936600461450d565b6104a2565b6040519081526020015b60405180910390f35b60cf546001600160a01b03165b6040516001600160a01b039091168152602001610248565b61027e61071d565b005b61029361028e3660046143f1565b6107de565b60408051928352602083019190915201610248565b61027e6102b6366004614581565b610b32565b60d1546001600160a01b031661025e565b61027e6102da366004614581565b610ba6565b61027e6102ed36600461437e565b610c05565b61023e610cf1565b61027e61030836600461437e565b610d55565b61027e61031b36600461437e565b610e41565b60975460ff166040519015158152602001610248565b61027e610344366004614581565b610f51565b61027e610fb0565b61025e61035f36600461437e565b611016565b61023e611027565b61023e61108b565b61023e6110ef565b61027e611153565b6033546001600160a01b031661025e565b6103a86103a3366004614499565b61120d565b604080519384526020840192909252151590820152606001610248565b61023e6103d33660046144c5565b611380565b61027e6103e6366004614432565b61160b565b61027e6103f9366004614581565b611d08565b61023e611d7c565b61027e610414366004614581565b611de0565b61027e61042736600461437e565b611e3f565b60d0546001600160a01b031661025e565b61023e611ff4565b61027e61045336600461437e565b612058565b61027e6104663660046143b8565b612142565b61027e61047936600461437e565b61237c565b61027e61048c366004614581565b61245e565b60d2546001600160a01b031661025e565b600081428110156104fa5760405162461bcd60e51b815260206004820152601160248201527f506c6174797075733a204558504952454400000000000000000000000000000060448201526064015b60405180910390fd5b6002606554141561054d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b600260655560975460ff16156105a55760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104f1565b600086116105f55760405162461bcd60e51b815260206004820152601b60248201527f506c6174797075733a205a45524f5f41535345545f414d4f554e54000000000060448201526064016104f1565b6001600160a01b03871661064b5760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b6001600160a01b0384166106a15760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b60006106ac886124d2565b90506106ba8188888861255a565b604080516001600160a01b038b81168252602082018490529181018a905291945086169033907ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad99060600160405180910390a35050600160655595945050505050565b60cf546001600160a01b031633146107775760405162461bcd60e51b815260206004820152601360248201527f506c6174797075733a20464f5242494444454e0000000000000000000000000060448201526064016104f1565b600260655414156107ca5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b60026065556107d76127b7565b6001606555565b6000806107ed60975460ff1690565b1561083a5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104f1565b6001600160a01b0385166108905760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b6001600160a01b0384166108e65760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b836001600160a01b0316856001600160a01b031614156109485760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a2053414d455f414444524553530000000000000000000060448201526064016104f1565b600083116109985760405162461bcd60e51b815260206004820152601a60248201527f506c6174797075733a205a45524f5f46524f4d5f414d4f554e5400000000000060448201526064016104f1565b60006109a3866124d2565b905060006109b0866124d2565b9050816001600160a01b0316637e1317fa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109eb57600080fd5b505afa1580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a23919061439b565b6001600160a01b0316816001600160a01b0316637e1317fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6557600080fd5b505afa158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d919061439b565b6001600160a01b031614610b195760405162461bcd60e51b815260206004820152602660248201527f506c6174797075733a20494e544552504f4f4c5f535741505f4e4f545f53555060448201527f504f52544544000000000000000000000000000000000000000000000000000060648201526084016104f1565b610b24828287612871565b909890975095505050505050565b6033546001600160a01b03163314610b8c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b670de0b6b3a7640000811115610ba157600080fd5b60ce55565b6033546001600160a01b03163314610c005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b60cb55565b6033546001600160a01b03163314610c5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b60026065541415610cb25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b60d280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556001606555565b6033546000906001600160a01b03163314610d4e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b5060c95490565b6033546001600160a01b03163314610daf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b60026065541415610e025760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b60d180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556001606555565b6033546001600160a01b03163314610e9b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b6001600160a01b038116610f175760405162461bcd60e51b815260206004820152602560248201527f506c6174797075733a205745544820616464726573732063616e6e6f7420626560448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016104f1565b60d080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610fab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b60cc55565b6033546001600160a01b0316331461100a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b6110146000612b80565b565b6000611021826124d2565b92915050565b6033546000906001600160a01b031633146110845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b5060ca5490565b6033546000906001600160a01b031633146110e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b5060cc5490565b6033546000906001600160a01b0316331461114c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b5060cd5490565b60cf546001600160a01b031633146111ad5760405162461bcd60e51b815260206004820152601360248201527f506c6174797075733a20464f5242494444454e0000000000000000000000000060448201526064016104f1565b600260655414156112005760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b60026065556107d7612bea565b600080600061121e60975460ff1690565b1561126b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104f1565b6001600160a01b0385166112c15760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b600084116113375760405162461bcd60e51b815260206004820152602d60248201527f506c6174797075733a206c6971756964697479206d757374206265206772656160448201527f746572207468616e207a65726f0000000000000000000000000000000000000060648201526084016104f1565b6000611342866124d2565b905060006113508287612c90565b919650909450905061136284826147d6565b8510156113725760009250611377565b600192505b50509250925092565b600081428110156113d35760405162461bcd60e51b815260206004820152601160248201527f506c6174797075733a204558504952454400000000000000000000000000000060448201526064016104f1565b600260655414156114265760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b600260655560975460ff161561147e5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104f1565b600085116114ce5760405162461bcd60e51b815260206004820152601560248201527f506c6174797075733a205a45524f5f414d4f554e54000000000000000000000060448201526064016104f1565b6001600160a01b0386166115245760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b6001600160a01b03841661157a5760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b856000611586826124d2565b905061159d6001600160a01b03831633838a61301f565b6115a88188886130ad565b604080516001600160a01b038b81168252602082018b905291810183905291955087169033907ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b9060600160405180910390a35050600160655550949350505050565b804281101561165c5760405162461bcd60e51b815260206004820152601160248201527f506c6174797075733a204558504952454400000000000000000000000000000060448201526064016104f1565b600260655414156116af5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b600260655560975460ff16156117075760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104f1565b6001600160a01b03871661175d5760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b6001600160a01b0386166117b35760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b856001600160a01b0316876001600160a01b031614156118155760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a2053414d455f414444524553530000000000000000000060448201526064016104f1565b600085116118655760405162461bcd60e51b815260206004820152601a60248201527f506c6174797075733a205a45524f5f46524f4d5f414d4f554e5400000000000060448201526064016104f1565b6001600160a01b0383166118bb5760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b8660006118c7826124d2565b905060006118d4896124d2565b9050816001600160a01b0316637e1317fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561190f57600080fd5b505afa158015611923573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611947919061439b565b6001600160a01b0316816001600160a01b0316637e1317fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561198957600080fd5b505afa15801561199d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c1919061439b565b6001600160a01b031614611a3d5760405162461bcd60e51b815260206004820152602660248201527f506c6174797075733a20494e544552504f4f4c5f535741505f4e4f545f53555060448201527f504f52544544000000000000000000000000000000000000000000000000000060648201526084016104f1565b600080611a4b84848c612871565b9150915081891115611a9f5760405162461bcd60e51b815260206004820152601860248201527f506c6174797075733a20414d4f554e545f544f4f5f4c4f57000000000000000060448201526064016104f1565b611ab46001600160a01b03861633868d61301f565b6040517f16c9e7a0000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b038516906316c9e7a090602401600060405180830381600087803b158015611b0f57600080fd5b505af1158015611b23573d6000803e3d6000fd5b50506040517f9f9ef988000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0386169250639f9ef9889150602401600060405180830381600087803b158015611b8257600080fd5b505af1158015611b96573d6000803e3d6000fd5b50505050826001600160a01b031663a0f0f604611bb58360ce54613520565b6040518263ffffffff1660e01b8152600401611bd391815260200190565b600060405180830381600087803b158015611bed57600080fd5b505af1158015611c01573d6000803e3d6000fd5b50506040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301526024820186905286169250639e79eaa59150604401600060405180830381600087803b158015611c6857600080fd5b505af1158015611c7c573d6000803e3d6000fd5b50505050876001600160a01b0316336001600160a01b03167f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d18e8e8e87604051611ced94939291906001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b60405180910390a35050600160655550505050505050505050565b6033546001600160a01b03163314611d625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b670de0b6b3a7640000811115611d7757600080fd5b60c955565b6033546000906001600160a01b03163314611dd95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b5060cb5490565b6033546001600160a01b03163314611e3a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b60ca55565b600054610100900460ff1680611e58575060005460ff16155b611eca5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f1565b600054610100900460ff16158015611eec576000805461ffff19166101011790555b6001600160a01b038216611f685760405162461bcd60e51b815260206004820152602560248201527f506c6174797075733a205745544820616464726573732063616e6e6f7420626560448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016104f1565b611f70613545565b611f78613633565b611f80613716565b60cf8054337fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560d080549091166001600160a01b0384161790558015611ff057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6033546000906001600160a01b031633146120515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b5060ce5490565b6033546001600160a01b031633146120b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b6001600160a01b0381166121085760405162461bcd60e51b815260206004820181905260248201527f506c6174797075733a20616464726573732063616e6e6f74206265207a65726f60448201526064016104f1565b60cf80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6033546001600160a01b0316331461219c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b600260655414156121ef5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b60026065556001600160a01b03821661224a5760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b6001600160a01b0381166122a05760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a205a45524f5f414444524553530000000000000000000060448201526064016104f1565b6001600160a01b03828116600090815260d3602052604090205416156123085760405162461bcd60e51b815260206004820152601660248201527f506c6174797075733a2041535345545f4558495354530000000000000000000060448201526064016104f1565b6001600160a01b03828116600081815260d3602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f0bb5715f0f217c2fe9a0c877ea87d474380c641102f3440ee2a4c8b9d97909189190a350506001606555565b6033546001600160a01b031633146123d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b6001600160a01b0381166124525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f1565b61245b81612b80565b50565b6033546001600160a01b031633146124b85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b670de0b6b3a76400008111156124cd57600080fd5b60cd55565b6001600160a01b03818116600090815260d3602052604081205490911661253b5760405162461bcd60e51b815260206004820152601960248201527f506c6174797075733a2041535345545f4e4f545f45584953540000000000000060448201526064016104f1565b506001600160a01b03908116600090815260d360205260409020541690565b60006125716001600160a01b03861633878761301f565b600061257d8686612c90565b509092509050818411156125d35760405162461bcd60e51b815260206004820152601860248201527f506c6174797075733a20414d4f554e545f544f4f5f4c4f57000000000000000060448201526064016104f1565b6040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b038716600482018190526024820187905290639dc29fac90604401600060405180830381600087803b15801561263557600080fd5b505af1158015612649573d6000803e3d6000fd5b50506040517f9f9ef988000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0389169250639f9ef9889150602401600060405180830381600087803b1580156126a857600080fd5b505af11580156126bc573d6000803e3d6000fd5b50506040517fd8b87853000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b038916925063d8b878539150602401600060405180830381600087803b15801561271b57600080fd5b505af115801561272f573d6000803e3d6000fd5b50506040517f9e79eaa50000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526024820186905289169250639e79eaa59150604401600060405180830381600087803b15801561279657600080fd5b505af11580156127aa573d6000803e3d6000fd5b5050505050949350505050565b60975460ff166128095760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104f1565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080600061288186868661381c565b905080856001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b1580156128bd57600080fd5b505afa1580156128d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f5919061459a565b10156129435760405162461bcd60e51b815260206004820152601b60248201527f506c6174797075733a20494e53554646494349454e545f43415348000000000060448201526064016104f1565b6000612a3e60c95460ca5460cb5460cc548b6001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b15801561298d57600080fd5b505afa1580156129a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c5919061459a565b8c6001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156129fe57600080fd5b505afa158015612a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a36919061459a565b8b6001613ba0565b90506000612b3b60c95460ca5460cb5460cc548b6001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8a57600080fd5b505afa158015612a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac2919061459a565b8c6001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612afb57600080fd5b505afa158015612b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b33919061459a565b896000613ba0565b90506000612b498383613c65565b90506000612b578583613c84565b9050612b658160cd54613cb8565b9550612b7186826147d6565b96505050505050935093915050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff1615612c3d5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104f1565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586128543390565b6000806000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cce57600080fd5b505afa158015612ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d06919061459a565b84866001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4057600080fd5b505afa158015612d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d78919061459a565b612d829190614799565b612d8c919061465b565b915060008211612e045760405162461bcd60e51b815260206004820152602760248201527f506c6174797075733a20494e53554646494349454e545f4c495155494449545960448201527f5f4255524e45440000000000000000000000000000000000000000000000000060648201526084016104f1565b612efb60c95460ca5460cb5460cc54896001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612e4c57600080fd5b505afa158015612e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e84919061459a565b8a6001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015612ebd57600080fd5b505afa158015612ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef5919061459a565b88613cc4565b90508082111561301357612f0f81836147d6565b856001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612f4857600080fd5b505afa158015612f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f80919061459a565b101561300257846001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b158015612fbf57600080fd5b505afa158015612fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff7919061459a565b925060009050613018565b61300c81836147d6565b9250613018565b600092505b9250925092565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526130a7908590613db9565b50505050565b60006001600160a01b03821661312b5760405162461bcd60e51b815260206004820152602860248201527f506c6174797075733a20546f207573657220616464726573732063616e6e6f7460448201527f206265207a65726f00000000000000000000000000000000000000000000000060648201526084016104f1565b6000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561316657600080fd5b505afa15801561317a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319e919061459a565b90506000856001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156131db57600080fd5b505afa1580156131ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613213919061459a565b9050600061330e60c95460ca5460cb5460cc548b6001600160a01b031663961be3916040518163ffffffff1660e01b815260040160206040518083038186803b15801561325f57600080fd5b505afa158015613273573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613297919061459a565b8c6001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156132d057600080fd5b505afa1580156132e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613308919061459a565b8c613ea3565b9050811561333b57818361332283896147d6565b61332c9190614799565b613336919061465b565b613345565b61334581876147d6565b9350600084116133bd5760405162461bcd60e51b815260206004820152602760248201527f506c6174797075733a20494e53554646494349454e545f4c495155494449545960448201527f5f4d494e5445440000000000000000000000000000000000000000000000000060648201526084016104f1565b6040517f16c9e7a0000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b038816906316c9e7a090602401600060405180830381600087803b15801561341857600080fd5b505af115801561342c573d6000803e3d6000fd5b50505050866001600160a01b031663a0f0f604828861344b91906147d6565b6040518263ffffffff1660e01b815260040161346991815260200190565b600060405180830381600087803b15801561348357600080fd5b505af1158015613497573d6000803e3d6000fd5b50506040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018890528a1692506340c10f199150604401600060405180830381600087803b1580156134fe57600080fd5b505af1158015613512573d6000803e3d6000fd5b505050505050509392505050565b600061353e61353783670de0b6b3a76400006147d6565b8490613c84565b9392505050565b600054610100900460ff168061355e575060005460ff16155b6135d05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f1565b600054610100900460ff161580156135f2576000805461ffff19166101011790555b6135fa613f48565b613602614025565b801561245b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061364c575060005460ff16155b6136be5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f1565b600054610100900460ff161580156136e0576000805461ffff19166101011790555b6001606555801561245b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061372f575060005460ff16155b6137a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f1565b600054610100900460ff161580156137c3576000805461ffff19166101011790555b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055801561245b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b6000670de0b6b3a7640000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561386057600080fd5b505afa158015613874573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389891906145b3565b6138a390600a6146d0565b846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156138dc57600080fd5b505afa1580156138f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391491906145b3565b61391f90600a6146d0565b613b7a60d260009054906101000a90046001600160a01b03166001600160a01b0316630fa3977b886001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b15801561397f57600080fd5b505afa158015613993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b7919061439b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015613a0e57600080fd5b505afa158015613a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a46919061459a565b60d260009054906101000a90046001600160a01b03166001600160a01b031663b3596f078a6001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015613aa357600080fd5b505afa158015613ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adb919061439b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015613b3257600080fd5b505afa158015613b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6a919061459a565b613b749088614799565b90613c84565b613b849190614799565b613b8e919061465b565b613b98919061465b565b949350505050565b600080613bad86866140db565b905060008315613bd257613bcb86613bc5878a614643565b906140db565b9050613be3565b613be086613bc5878a6147d6565b90505b80821415613bf657600092505050613c59565b6000613c058c8c8c8c876140fb565b90506000613c168d8d8d8d876140fb565b905082841115613c4257613c37613c2d84866147d6565b613bc584846147d6565b945050505050613c59565b613c37613c4f85856147d6565b613bc583856147d6565b98975050505050505050565b600081613c7a84670de0b6b3a7640000614643565b61353e91906147d6565b6000670de0b6b3a7640000613c9a60028261465b565b613ca48486614799565b613cae9190614643565b61353e919061465b565b600061353e8383613c84565b600080613cd185856140db565b9050670de0b6b3a76400008110613cec576000915050613dae565b828411613cfd576000915050613dae565b600083861115613d1857613d1184876147d6565b9050613d1c565b5060005b6000613d32613d2b86886147d6565b83906140db565b90506000613d438c8c8c8c886140fb565b90506000613d548d8d8d8d876140fb565b90506000613d6d8e8e8e8e670de0b6b3a76400006140fb565b9050613d798984613c84565b613d83828a613c84565b613d9184613b748c8e6147d6565b613d9b9190614643565b613da591906147d6565b96505050505050505b979650505050505050565b6000613e0e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166141729092919063ffffffff16565b805190915015613e9e5780806020019051810190613e2c919061455f565b613e9e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104f1565b505050565b600082613eb257506000613dae565b6000613ebe85856140db565b9050670de0b6b3a76400008111613ed9576000915050613dae565b6000613ef2613ee88587614643565b613bc58689614643565b90506000613f038b8b8b8b876140fb565b90506000613f148c8c8c8c876140fb565b9050613f208783613c84565b613f2e82613b74898b614643565b613f3891906147d6565b9c9b505050505050505050505050565b600054610100900460ff1680613f61575060005460ff16155b613fd35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f1565b600054610100900460ff16158015613602576000805461ffff1916610101179055801561245b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061403e575060005460ff16155b6140b05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f1565b600054610100900460ff161580156140d2576000805461ffff19166101011790555b61360233612b80565b6000816140e960028261465b565b613ca4670de0b6b3a764000086614799565b6000828210156141165761410f82856147d6565b9050614169565b61410f6b033b2e3c9fd0803ce8000000670de0b6b3a764000061414e888261413e8589614799565b614148919061465b565b90614181565b6141589190614799565b614162919061465b565b87906140db565b95945050505050565b6060613b9884846000856141f7565b600061418e600283614819565b6141a4576b033b2e3c9fd0803ce80000006141a6565b825b90506141b360028361465b565b91505b8115611021576141c6838461432b565b92506141d3600283614819565b156141e5576141e2818461432b565b90505b6141f060028361465b565b91506141b6565b60608247101561426f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104f1565b843b6142bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f1565b600080866001600160a01b031685876040516142d991906145d6565b60006040518083038185875af1925050503d8060008114614316576040519150601f19603f3d011682016040523d82523d6000602084013e61431b565b606091505b5091509150613dae828286614345565b60006b033b2e3c9fd0803ce8000000613c9a60028261465b565b6060831561435457508161353e565b8251156143645782518084602001fd5b8160405162461bcd60e51b81526004016104f191906145f2565b60006020828403121561439057600080fd5b813561353e8161488b565b6000602082840312156143ad57600080fd5b815161353e8161488b565b600080604083850312156143cb57600080fd5b82356143d68161488b565b915060208301356143e68161488b565b809150509250929050565b60008060006060848603121561440657600080fd5b83356144118161488b565b925060208401356144218161488b565b929592945050506040919091013590565b60008060008060008060c0878903121561444b57600080fd5b86356144568161488b565b955060208701356144668161488b565b9450604087013593506060870135925060808701356144848161488b565b8092505060a087013590509295509295509295565b600080604083850312156144ac57600080fd5b82356144b78161488b565b946020939093013593505050565b600080600080608085870312156144db57600080fd5b84356144e68161488b565b93506020850135925060408501356144fd8161488b565b9396929550929360600135925050565b600080600080600060a0868803121561452557600080fd5b85356145308161488b565b94506020860135935060408601359250606086013561454e8161488b565b949793965091946080013592915050565b60006020828403121561457157600080fd5b8151801515811461353e57600080fd5b60006020828403121561459357600080fd5b5035919050565b6000602082840312156145ac57600080fd5b5051919050565b6000602082840312156145c557600080fd5b815160ff8116811461353e57600080fd5b600082516145e88184602087016147ed565b9190910192915050565b60208152600082518060208401526146118160408501602087016147ed565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156146565761465661482d565b500190565b60008261466a5761466a61485c565b500490565b600181815b808511156146c857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156146ae576146ae61482d565b808516156146bb57918102915b93841c9390800290614674565b509250929050565b600061353e60ff8416836000826146e957506001611021565b816146f657506000611021565b816001811461470c576002811461471657614732565b6001915050611021565b60ff8411156147275761472761482d565b50506001821b611021565b5060208310610133831016604e8410600b8410161715614755575081810a611021565b61475f838361466f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156147915761479161482d565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156147d1576147d161482d565b500290565b6000828210156147e8576147e861482d565b500390565b60005b838110156148085781810151838201526020016147f0565b838111156130a75750506000910152565b6000826148285761482861485c565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6001600160a01b038116811461245b57600080fdfea2646970667358221220a248ad323c053906e5b147025371ce861c6824937244502868bd1deb544506b564736f6c63430008050033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "The main entry-point of Wombat protocol",
    "kind": "dev",
    "methods": {
      "addAsset(address,address)": {
        "params": {
          "asset": "The address of the Wombat Asset contract",
          "token": "The address of token"
        }
      },
      "assetOf(address)": {
        "details": "to be used externally",
        "params": {
          "token": "The address of ERC20 token"
        }
      },
      "deposit(address,uint256,address,uint256)": {
        "details": "Asset needs to be created and added to pool before any operation",
        "params": {
          "amount": "The amount to be deposited",
          "deadline": "The deadline to be respected",
          "to": "The user accountable for deposit, receiving the Wombat assets (lp)",
          "token": "The token address to be deposited"
        },
        "returns": {
          "liquidity": "Total asset liquidity minted"
        }
      },
      "getC1()": {
        "returns": {
          "_0": "The current C1 slippage parameter in Pool"
        }
      },
      "getDev()": {
        "returns": {
          "_0": "The current Dev address for Pool"
        }
      },
      "getHaircutRate()": {
        "returns": {
          "_0": "The current Haircut parameter in Pool"
        }
      },
      "getPriceOracle()": {
        "returns": {
          "_0": "The current Price Oracle address for Pool"
        }
      },
      "getRetentionRatio()": {
        "returns": {
          "_0": "The current retention ratio parameter in Pool"
        }
      },
      "getSlippageParamK()": {
        "returns": {
          "_0": "The current K slippage parameter in Pool"
        }
      },
      "getSlippageParamN()": {
        "returns": {
          "_0": "The current N slippage parameter in Pool"
        }
      },
      "getWETH()": {
        "returns": {
          "_0": "The current WETH address for Pool"
        }
      },
      "getWETHForwarder()": {
        "returns": {
          "_0": "The current WETHForwarder address for Pool"
        }
      },
      "getXThreshold()": {
        "returns": {
          "_0": "The current XThreshold slippage parameter in Pool"
        }
      },
      "initialize(address)": {
        "params": {
          "weth_": "The weth address used to wrap eth (or BSC in our case) tokens by Pool."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "pause pool, restricting certain operations"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quotePotentialSwap(address,address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "fromAmount": "The amount to quote",
          "fromToken": "The initial ERC20 token",
          "toToken": "The token wanted by user"
        },
        "returns": {
          "haircut": "The haircut that would be applied",
          "potentialOutcome": "The potential amount user would receive"
        }
      },
      "quotePotentialWithdraw(address,uint256)": {
        "details": "To be used by frontend",
        "params": {
          "liquidity": "The liquidity (amount of lp assets) to be withdrawn",
          "token": "The token to be withdrawn by user"
        },
        "returns": {
          "amount": "The potential amount user would receive",
          "enoughCash": "does the pool have enough cash? (cash >= liabilityToBurn - fee)",
          "fee": "The fee that would be applied"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setC1(uint256)": {
        "params": {
          "c1_": "new pool's slippage param C1"
        }
      },
      "setDev(address)": {
        "params": {
          "dev": "new contract dev address"
        }
      },
      "setHaircutRate(uint256)": {
        "params": {
          "haircutRate_": "new pool's haircutRate_"
        }
      },
      "setPriceOracle(address)": {
        "params": {
          "priceOracle": "new pool's priceOracle addres"
        }
      },
      "setRetentionRatio(uint256)": {
        "params": {
          "retentionRatio_": "new pool's retentionRatio"
        }
      },
      "setSlippageParamK(uint256)": {
        "params": {
          "k_": "new pool's slippage param K"
        }
      },
      "setSlippageParamN(uint256)": {
        "params": {
          "n_": "new pool's slippage param N"
        }
      },
      "setWETH(address)": {
        "params": {
          "weth_": "new pool's WETH address"
        }
      },
      "setWETHForwarder(address)": {
        "params": {
          "wethForwarder": "new pool's WETHForwarder address"
        }
      },
      "setXThreshold(uint256)": {
        "params": {
          "xThreshold_": "new pool's slippage param xThreshold"
        }
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "fromAmount": "The amount of from token inserted",
          "fromToken": "The token being inserted into Pool by user for swap",
          "minimumToAmount": "The minimum amount that will be accepted by user as result",
          "to": "The user receiving the result of swap",
          "toToken": "The token wanted by user, leaving the Pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause pool, enabling certain operations"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "params": {
          "deadline": "The deadline to be respected",
          "liquidity": "The liquidity to be withdrawn",
          "minimumAmount": "The minimum amount that will be accepted by user",
          "to": "The user receiving the withdrawal",
          "token": "The token to be withdrawn"
        },
        "returns": {
          "amount": "The total amount withdrawn"
        }
      }
    },
    "title": "Pool",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(address,address)": {
        "notice": "An event thats emitted when an asset is added to Pool"
      },
      "Deposit(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a deposit is made to Pool"
      },
      "Swap(address,address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a swap is made in Pool"
      },
      "Withdraw(address,address,uint256,uint256,address)": {
        "notice": "An event thats emitted when a withdrawal is made from Pool"
      }
    },
    "kind": "user",
    "methods": {
      "addAsset(address,address)": {
        "notice": "Adds asset to pool, reverts if asset already exists in pool"
      },
      "assetOf(address)": {
        "notice": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool."
      },
      "deposit(address,uint256,address,uint256)": {
        "notice": "Deposits amount of tokens into pool ensuring deadline"
      },
      "getC1()": {
        "notice": "Gets current C1 slippage parameter"
      },
      "getDev()": {
        "notice": "Gets current Dev address"
      },
      "getHaircutRate()": {
        "notice": "Gets current Haircut parameter"
      },
      "getPriceOracle()": {
        "notice": "Gets current Price Oracle address"
      },
      "getRetentionRatio()": {
        "notice": "Gets current retention ratio parameter"
      },
      "getSlippageParamK()": {
        "notice": "Gets current K slippage parameter"
      },
      "getSlippageParamN()": {
        "notice": "Gets current N slippage parameter"
      },
      "getWETH()": {
        "notice": "Gets current WETH address"
      },
      "getWETHForwarder()": {
        "notice": "Gets current WETHForwarder address"
      },
      "getXThreshold()": {
        "notice": "Gets current XThreshold slippage parameter"
      },
      "initialize(address)": {
        "notice": "Initializes pool. Dev is set to be the account calling this function."
      },
      "quotePotentialSwap(address,address,uint256)": {
        "notice": "Quotes potential outcome of a swap given current state, taking in account slippage and haircut"
      },
      "quotePotentialWithdraw(address,uint256)": {
        "notice": "Quotes potential withdrawal from pool"
      },
      "setC1(uint256)": {
        "notice": "Changes the pools slippage param C1. Can only be set by the contract owner."
      },
      "setDev(address)": {
        "notice": "Changes the contract dev. Can only be set by the contract owner."
      },
      "setHaircutRate(uint256)": {
        "notice": "Changes the pools haircutRate. Can only be set by the contract owner."
      },
      "setPriceOracle(address)": {
        "notice": "Changes the pools priceOracle. Can only be set by the contract owner."
      },
      "setRetentionRatio(uint256)": {
        "notice": "Changes the pools retentionRatio. Can only be set by the contract owner."
      },
      "setSlippageParamK(uint256)": {
        "notice": "Changes the pools slippage param K. Can only be set by the contract owner."
      },
      "setSlippageParamN(uint256)": {
        "notice": "Changes the pools slippage param N. Can only be set by the contract owner."
      },
      "setWETH(address)": {
        "notice": "Changes the pools WETH. Can only be set by the contract owner."
      },
      "setWETHForwarder(address)": {
        "notice": "Changes the pools WETHForwarder. Can only be set by the contract owner."
      },
      "setXThreshold(uint256)": {
        "notice": "Changes the pools slippage param xThreshold. Can only be set by the contract owner."
      },
      "swap(address,address,uint256,uint256,address,uint256)": {
        "notice": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address"
      },
      "withdraw(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required"
      }
    },
    "notice": "Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 383,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 297,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3119,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_slippageParamK",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 3122,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_slippageParamN",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 3125,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_c1",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 3128,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_xThreshold",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 3136,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_haircutRate",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 3140,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_retentionRatio",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 3143,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_dev",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 3146,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_weth",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 3150,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_wethForwarder",
        "offset": 0,
        "slot": "209",
        "type": "t_contract(WETHForwarder)4735"
      },
      {
        "astId": 3154,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_priceOracle",
        "offset": 0,
        "slot": "210",
        "type": "t_contract(IPriceOracleGetter)2149"
      },
      {
        "astId": 3160,
        "contract": "contracts/pool/Pool.sol:Pool",
        "label": "_assets",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_contract(Asset)2124)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Asset)2124": {
        "encoding": "inplace",
        "label": "contract Asset",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracleGetter)2149": {
        "encoding": "inplace",
        "label": "contract IPriceOracleGetter",
        "numberOfBytes": "20"
      },
      "t_contract(WETHForwarder)4735": {
        "encoding": "inplace",
        "label": "contract WETHForwarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(Asset)2124)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract Asset)",
        "numberOfBytes": "32",
        "value": "t_contract(Asset)2124"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}